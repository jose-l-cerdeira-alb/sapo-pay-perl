.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Message::Replace::MailHeader 3"
.TH Mail::Message::Replace::MailHeader 3 2023-12-11 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Mail::Message::Replace::MailHeader \- fake Mail::Header
.SH INHERITANCE
.IX Header "INHERITANCE"
.Vb 4
\& Mail::Message::Replace::MailHeader
\&   is a Mail::Message::Head::Complete
\&   is a Mail::Message::Head
\&   is a Mail::Reporter
.Ve
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\& !!! ALPHA CODE !!!
\&
\& # change
\& use Mail::Internet;
\& use Mail::Header;
\& # into
\& use Mail::Message::Replace::MailInternet;
\& # in existing code, and the code should still work, but
\& # with the Mail::Message features.
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module is a wrapper around a Mail::Message::Head::Complete,
which simulates a Mail::Header object.  The name-space of that module
is hijacked and many methods are added.
.PP
Most methods will work without any change, but you should test your
software again.  Small changes have been made to \fBfold_length()\fR,
\&\fBheader_hashref()\fR.
.PP
Extends "DESCRIPTION" in Mail::Message::Head::Complete.
.SH OVERLOADED
.IX Header "OVERLOADED"
Extends "OVERLOADED" in Mail::Message::Head::Complete.
.IP "overload: \fB""""\fR" 4
.IX Item "overload: """""
Inherited, see "OVERLOADED" in Mail::Message::Head
.IP "overload: \fBbool\fR" 4
.IX Item "overload: bool"
Inherited, see "OVERLOADED" in Mail::Message::Head
.SH METHODS
.IX Header "METHODS"
Extends "METHODS" in Mail::Message::Head::Complete.
.SS Constructors
.IX Subsection "Constructors"
Extends "Constructors" in Mail::Message::Head::Complete.
.IP "Mail::Message::Replace::MailHeader\->\fBbuild\fR( [PAIR|$field], ... )" 4
.IX Item "Mail::Message::Replace::MailHeader->build( [PAIR|$field], ... )"
Inherited, see "Constructors" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBclone\fR( [@names|ARRAY|Regexps] )" 4
.el .IP "\f(CW$obj\fR\->\fBclone\fR( [@names|ARRAY|Regexps] )" 4
.IX Item "$obj->clone( [@names|ARRAY|Regexps] )"
Inherited, see "Constructors" in Mail::Message::Head::Complete
.ie n .IP "Mail::Message::Replace::MailHeader\->\fBnew\fR( [$arg], %options )" 4
.el .IP "Mail::Message::Replace::MailHeader\->\fBnew\fR( [$arg], \f(CW%options\fR )" 4
.IX Item "Mail::Message::Replace::MailHeader->new( [$arg], %options )"
The \f(CW$arg\fR is an array with header lines.
.Sp
.Vb 9
\& \-Option    \-\-Defined in         \-\-Default
\&  FoldLength                       79
\&  MailFrom                         \*(AqKEEP\*(Aq
\&  Modify                           <false>
\&  field_type  Mail::Message::Head  Mail::Message::Field::Fast
\&  log         Mail::Reporter       \*(AqWARNINGS\*(Aq
\&  message     Mail::Message::Head  undef
\&  modified    Mail::Message::Head  <false>
\&  trace       Mail::Reporter       \*(AqWARNINGS\*(Aq
.Ve
.RS 4
.IP "FoldLength => INTEGER" 2
.IX Item "FoldLength => INTEGER"
.PD 0
.IP "MailFrom => 'IGNORE'|'ERROR'|'COERCE'|'KEEP'" 2
.IX Item "MailFrom => 'IGNORE'|'ERROR'|'COERCE'|'KEEP'"
.PD
How to handle the \f(CW\*(C`From \*(C'\fR lines.  See \fBmail_from()\fR.
.IP "Modify => BOOLEAN" 2
.IX Item "Modify => BOOLEAN"
Reformat all header lines when they come in: change the folding.
.IP "field_type => CLASS" 2
.IX Item "field_type => CLASS"
.PD 0
.IP "log => LEVEL" 2
.IX Item "log => LEVEL"
.IP "message => MESSAGE" 2
.IX Item "message => MESSAGE"
.IP "modified => BOOLEAN" 2
.IX Item "modified => BOOLEAN"
.IP "trace => LEVEL" 2
.IX Item "trace => LEVEL"
.RE
.RS 4
.RE
.PD
.SS "The header"
.IX Subsection "The header"
Extends "The header" in Mail::Message::Head::Complete.
.ie n .IP $obj\->\fBisDelayed\fR() 4
.el .IP \f(CW$obj\fR\->\fBisDelayed\fR() 4
.IX Item "$obj->isDelayed()"
Inherited, see "The header" in Mail::Message::Head
.ie n .IP $obj\->\fBisEmpty\fR() 4
.el .IP \f(CW$obj\fR\->\fBisEmpty\fR() 4
.IX Item "$obj->isEmpty()"
Inherited, see "The header" in Mail::Message::Head
.ie n .IP $obj\->\fBisModified\fR() 4
.el .IP \f(CW$obj\fR\->\fBisModified\fR() 4
.IX Item "$obj->isModified()"
Inherited, see "The header" in Mail::Message::Head
.ie n .IP $obj\->\fBknownNames\fR() 4
.el .IP \f(CW$obj\fR\->\fBknownNames\fR() 4
.IX Item "$obj->knownNames()"
Inherited, see "The header" in Mail::Message::Head
.ie n .IP "$obj\->\fBmessage\fR( [$message] )" 4
.el .IP "\f(CW$obj\fR\->\fBmessage\fR( [$message] )" 4
.IX Item "$obj->message( [$message] )"
Inherited, see "The header" in Mail::Message::Head
.ie n .IP "$obj\->\fBmodified\fR( [BOOLEAN] )" 4
.el .IP "\f(CW$obj\fR\->\fBmodified\fR( [BOOLEAN] )" 4
.IX Item "$obj->modified( [BOOLEAN] )"
Inherited, see "The header" in Mail::Message::Head
.ie n .IP $obj\->\fBnrLines\fR() 4
.el .IP \f(CW$obj\fR\->\fBnrLines\fR() 4
.IX Item "$obj->nrLines()"
Inherited, see "The header" in Mail::Message::Head::Complete
.ie n .IP $obj\->\fBorderedFields\fR() 4
.el .IP \f(CW$obj\fR\->\fBorderedFields\fR() 4
.IX Item "$obj->orderedFields()"
Inherited, see "The header" in Mail::Message::Head
.ie n .IP $obj\->\fBsize\fR() 4
.el .IP \f(CW$obj\fR\->\fBsize\fR() 4
.IX Item "$obj->size()"
Inherited, see "The header" in Mail::Message::Head::Complete
.ie n .IP $obj\->\fBwrap\fR($integer) 4
.el .IP \f(CW$obj\fR\->\fBwrap\fR($integer) 4
.IX Item "$obj->wrap($integer)"
Inherited, see "The header" in Mail::Message::Head::Complete
.SS "Access to the header"
.IX Subsection "Access to the header"
Extends "Access to the header" in Mail::Message::Head::Complete.
.ie n .IP "$obj\->\fBadd\fR( $line, [$index] )" 4
.el .IP "\f(CW$obj\fR\->\fBadd\fR( \f(CW$line\fR, [$index] )" 4
.IX Item "$obj->add( $line, [$index] )"
Add a header line, which simply calls \f(CWMail::Message::Head::add()\fR on
the header for the specified \f(CW$line\fR.  The \f(CW$index\fR is ignored, the unfolded
body of the field is returned.
.ie n .IP $obj\->\fBaddListGroup\fR($object) 4
.el .IP \f(CW$obj\fR\->\fBaddListGroup\fR($object) 4
.IX Item "$obj->addListGroup($object)"
Inherited, see "Access to the header" in Mail::Message::Head::Complete
.ie n .IP $obj\->\fBaddResentGroup\fR($resent_group|$data) 4
.el .IP \f(CW$obj\fR\->\fBaddResentGroup\fR($resent_group|$data) 4
.IX Item "$obj->addResentGroup($resent_group|$data)"
Inherited, see "Access to the header" in Mail::Message::Head::Complete
.ie n .IP $obj\->\fBaddSpamGroup\fR($object) 4
.el .IP \f(CW$obj\fR\->\fBaddSpamGroup\fR($object) 4
.IX Item "$obj->addSpamGroup($object)"
Inherited, see "Access to the header" in Mail::Message::Head::Complete
.ie n .IP $obj\->\fBcount\fR($name) 4
.el .IP \f(CW$obj\fR\->\fBcount\fR($name) 4
.IX Item "$obj->count($name)"
Inherited, see "Access to the header" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBdelete\fR( $tag, [$index] )" 4
.el .IP "\f(CW$obj\fR\->\fBdelete\fR( \f(CW$tag\fR, [$index] )" 4
.IX Item "$obj->delete( $tag, [$index] )"
Delete the fields with the specified \f(CW$tag\fR.  The deleted fields are
returned.  If no index is given, then all are removed.
.ie n .IP "$obj\->\fBget\fR( $name, [$index] )" 4
.el .IP "\f(CW$obj\fR\->\fBget\fR( \f(CW$name\fR, [$index] )" 4
.IX Item "$obj->get( $name, [$index] )"
Get all the header fields with the specified \f(CW$name\fR.  In scalar context,
only the first fitting \f(CW$name\fR is returned.  Even when only one \f(CW$name\fR is
specified, multiple lines may be returned in list context: some fields
appear more than once in a header.
.ie n .IP "$obj\->\fBgrepNames\fR( [@names|ARRAY|Regexps] )" 4
.el .IP "\f(CW$obj\fR\->\fBgrepNames\fR( [@names|ARRAY|Regexps] )" 4
.IX Item "$obj->grepNames( [@names|ARRAY|Regexps] )"
Inherited, see "Access to the header" in Mail::Message::Head::Complete
.ie n .IP $obj\->\fBlistGroup\fR() 4
.el .IP \f(CW$obj\fR\->\fBlistGroup\fR() 4
.IX Item "$obj->listGroup()"
Inherited, see "Access to the header" in Mail::Message::Head::Complete
.ie n .IP $obj\->\fBnames\fR() 4
.el .IP \f(CW$obj\fR\->\fBnames\fR() 4
.IX Item "$obj->names()"
Inherited, see "Access to the header" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBprint\fR( [$fh] )" 4
.el .IP "\f(CW$obj\fR\->\fBprint\fR( [$fh] )" 4
.IX Item "$obj->print( [$fh] )"
Inherited, see "Access to the header" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBprintSelected\fR($fh, <STRING|Regexp>, ...)" 4
.el .IP "\f(CW$obj\fR\->\fBprintSelected\fR($fh, <STRING|Regexp>, ...)" 4
.IX Item "$obj->printSelected($fh, <STRING|Regexp>, ...)"
Inherited, see "Access to the header" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBprintUndisclosed\fR( [$fh] )" 4
.el .IP "\f(CW$obj\fR\->\fBprintUndisclosed\fR( [$fh] )" 4
.IX Item "$obj->printUndisclosed( [$fh] )"
Inherited, see "Access to the header" in Mail::Message::Head::Complete
.ie n .IP $obj\->\fBremoveContentInfo\fR() 4
.el .IP \f(CW$obj\fR\->\fBremoveContentInfo\fR() 4
.IX Item "$obj->removeContentInfo()"
Inherited, see "Access to the header" in Mail::Message::Head::Complete
.ie n .IP $obj\->\fBremoveField\fR($field) 4
.el .IP \f(CW$obj\fR\->\fBremoveField\fR($field) 4
.IX Item "$obj->removeField($field)"
Inherited, see "Access to the header" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBremoveFields\fR( <STRING|Regexp>, ... )" 4
.el .IP "\f(CW$obj\fR\->\fBremoveFields\fR( <STRING|Regexp>, ... )" 4
.IX Item "$obj->removeFields( <STRING|Regexp>, ... )"
Inherited, see "Access to the header" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBremoveFieldsExcept\fR( <STRING|Regexp>, ... )" 4
.el .IP "\f(CW$obj\fR\->\fBremoveFieldsExcept\fR( <STRING|Regexp>, ... )" 4
.IX Item "$obj->removeFieldsExcept( <STRING|Regexp>, ... )"
Inherited, see "Access to the header" in Mail::Message::Head::Complete
.ie n .IP $obj\->\fBremoveListGroup\fR() 4
.el .IP \f(CW$obj\fR\->\fBremoveListGroup\fR() 4
.IX Item "$obj->removeListGroup()"
Inherited, see "Access to the header" in Mail::Message::Head::Complete
.ie n .IP $obj\->\fBremoveResentGroups\fR() 4
.el .IP \f(CW$obj\fR\->\fBremoveResentGroups\fR() 4
.IX Item "$obj->removeResentGroups()"
Inherited, see "Access to the header" in Mail::Message::Head::Complete
.ie n .IP $obj\->\fBremoveSpamGroups\fR() 4
.el .IP \f(CW$obj\fR\->\fBremoveSpamGroups\fR() 4
.IX Item "$obj->removeSpamGroups()"
Inherited, see "Access to the header" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBreplace\fR( $tag, $line, [$index] )" 4
.el .IP "\f(CW$obj\fR\->\fBreplace\fR( \f(CW$tag\fR, \f(CW$line\fR, [$index] )" 4
.IX Item "$obj->replace( $tag, $line, [$index] )"
Replace the field named \f(CW$tag\fR. from place \f(CW$index\fR (by default the first) by
the \f(CW$line\fR.  When \f(CW$tag\fR is \f(CW\*(C`undef\*(C'\fR, it will be extracted from the \f(CW$line\fR first.
This calls \fBMail::Message::Head::Complete::reset()\fR on the message's head.
.ie n .IP $obj\->\fBresentGroups\fR() 4
.el .IP \f(CW$obj\fR\->\fBresentGroups\fR() 4
.IX Item "$obj->resentGroups()"
Inherited, see "Access to the header" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBreset\fR($name, @fields)" 4
.el .IP "\f(CW$obj\fR\->\fBreset\fR($name, \f(CW@fields\fR)" 4
.IX Item "$obj->reset($name, @fields)"
Inherited, see "Access to the header" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBset\fR( $field | $line | <$name, $body, [$attrs]> )" 4
.el .IP "\f(CW$obj\fR\->\fBset\fR( \f(CW$field\fR | \f(CW$line\fR | <$name, \f(CW$body\fR, [$attrs]> )" 4
.IX Item "$obj->set( $field | $line | <$name, $body, [$attrs]> )"
Inherited, see "Access to the header" in Mail::Message::Head::Complete
.ie n .IP $obj\->\fBspamDetected\fR() 4
.el .IP \f(CW$obj\fR\->\fBspamDetected\fR() 4
.IX Item "$obj->spamDetected()"
Inherited, see "Access to the header" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBspamGroups\fR( [$names] )" 4
.el .IP "\f(CW$obj\fR\->\fBspamGroups\fR( [$names] )" 4
.IX Item "$obj->spamGroups( [$names] )"
Inherited, see "Access to the header" in Mail::Message::Head::Complete
.ie n .IP $obj\->\fBstring\fR() 4
.el .IP \f(CW$obj\fR\->\fBstring\fR() 4
.IX Item "$obj->string()"
Inherited, see "Access to the header" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBstudy\fR( $name, [$index] )" 4
.el .IP "\f(CW$obj\fR\->\fBstudy\fR( \f(CW$name\fR, [$index] )" 4
.IX Item "$obj->study( $name, [$index] )"
Inherited, see "Access to the header" in Mail::Message::Head
.SS "About the body"
.IX Subsection "About the body"
Extends "About the body" in Mail::Message::Head::Complete.
.ie n .IP $obj\->\fBguessBodySize\fR() 4
.el .IP \f(CW$obj\fR\->\fBguessBodySize\fR() 4
.IX Item "$obj->guessBodySize()"
Inherited, see "About the body" in Mail::Message::Head
.ie n .IP $obj\->\fBguessTimeStamp\fR() 4
.el .IP \f(CW$obj\fR\->\fBguessTimeStamp\fR() 4
.IX Item "$obj->guessTimeStamp()"
Inherited, see "About the body" in Mail::Message::Head::Complete
.ie n .IP $obj\->\fBisMultipart\fR() 4
.el .IP \f(CW$obj\fR\->\fBisMultipart\fR() 4
.IX Item "$obj->isMultipart()"
Inherited, see "About the body" in Mail::Message::Head
.ie n .IP $obj\->\fBrecvstamp\fR() 4
.el .IP \f(CW$obj\fR\->\fBrecvstamp\fR() 4
.IX Item "$obj->recvstamp()"
Inherited, see "About the body" in Mail::Message::Head::Complete
.ie n .IP $obj\->\fBtimestamp\fR() 4
.el .IP \f(CW$obj\fR\->\fBtimestamp\fR() 4
.IX Item "$obj->timestamp()"
Inherited, see "About the body" in Mail::Message::Head::Complete
.SS Internals
.IX Subsection "Internals"
Extends "Internals" in Mail::Message::Head::Complete.
.ie n .IP $obj\->\fBaddNoRealize\fR($field) 4
.el .IP \f(CW$obj\fR\->\fBaddNoRealize\fR($field) 4
.IX Item "$obj->addNoRealize($field)"
Inherited, see "Internals" in Mail::Message::Head
.ie n .IP $obj\->\fBaddOrderedFields\fR($fields) 4
.el .IP \f(CW$obj\fR\->\fBaddOrderedFields\fR($fields) 4
.IX Item "$obj->addOrderedFields($fields)"
Inherited, see "Internals" in Mail::Message::Head
.ie n .IP $obj\->\fBcreateFromLine\fR() 4
.el .IP \f(CW$obj\fR\->\fBcreateFromLine\fR() 4
.IX Item "$obj->createFromLine()"
Inherited, see "Internals" in Mail::Message::Head::Complete
.ie n .IP $obj\->\fBcreateMessageId\fR() 4
.el .IP \f(CW$obj\fR\->\fBcreateMessageId\fR() 4
.IX Item "$obj->createMessageId()"
Inherited, see "Internals" in Mail::Message::Head::Complete
.ie n .IP $obj\->\fBfileLocation\fR() 4
.el .IP \f(CW$obj\fR\->\fBfileLocation\fR() 4
.IX Item "$obj->fileLocation()"
Inherited, see "Internals" in Mail::Message::Head
.ie n .IP $obj\->\fBload\fR() 4
.el .IP \f(CW$obj\fR\->\fBload\fR() 4
.IX Item "$obj->load()"
Inherited, see "Internals" in Mail::Message::Head
.ie n .IP "$obj\->\fBmessageIdPrefix\fR( [$prefix, [$hostname]|CODE] )" 4
.el .IP "\f(CW$obj\fR\->\fBmessageIdPrefix\fR( [$prefix, [$hostname]|CODE] )" 4
.IX Item "$obj->messageIdPrefix( [$prefix, [$hostname]|CODE] )"
.PD 0
.IP "Mail::Message::Replace::MailHeader\->\fBmessageIdPrefix\fR( [$prefix, [$hostname]|CODE] )" 4
.IX Item "Mail::Message::Replace::MailHeader->messageIdPrefix( [$prefix, [$hostname]|CODE] )"
.PD
Inherited, see "Internals" in Mail::Message::Head::Complete
.ie n .IP $obj\->\fBmoveLocation\fR($distance) 4
.el .IP \f(CW$obj\fR\->\fBmoveLocation\fR($distance) 4
.IX Item "$obj->moveLocation($distance)"
Inherited, see "Internals" in Mail::Message::Head
.ie n .IP $obj\->\fBsetNoRealize\fR($field) 4
.el .IP \f(CW$obj\fR\->\fBsetNoRealize\fR($field) 4
.IX Item "$obj->setNoRealize($field)"
Inherited, see "Internals" in Mail::Message::Head
.SS "Error handling"
.IX Subsection "Error handling"
Extends "Error handling" in Mail::Message::Head::Complete.
.ie n .IP $obj\->\fBAUTOLOAD\fR() 4
.el .IP \f(CW$obj\fR\->\fBAUTOLOAD\fR() 4
.IX Item "$obj->AUTOLOAD()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBaddReport\fR($object) 4
.el .IP \f(CW$obj\fR\->\fBaddReport\fR($object) 4
.IX Item "$obj->addReport($object)"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "$obj->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD 0
.ie n .IP "Mail::Message::Replace::MailHeader\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "Mail::Message::Replace::MailHeader\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "Mail::Message::Replace::MailHeader->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBerrors\fR() 4
.el .IP \f(CW$obj\fR\->\fBerrors\fR() 4
.IX Item "$obj->errors()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR( [$level, [$strings]] )" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "$obj->log( [$level, [$strings]] )"
.PD 0
.IP "Mail::Message::Replace::MailHeader\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "Mail::Message::Replace::MailHeader->log( [$level, [$strings]] )"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBlogPriority\fR($level) 4
.el .IP \f(CW$obj\fR\->\fBlogPriority\fR($level) 4
.IX Item "$obj->logPriority($level)"
.PD 0
.IP Mail::Message::Replace::MailHeader\->\fBlogPriority\fR($level) 4
.IX Item "Mail::Message::Replace::MailHeader->logPriority($level)"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBlogSettings\fR() 4
.el .IP \f(CW$obj\fR\->\fBlogSettings\fR() 4
.IX Item "$obj->logSettings()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBnotImplemented\fR() 4
.el .IP \f(CW$obj\fR\->\fBnotImplemented\fR() 4
.IX Item "$obj->notImplemented()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR( [$level] )" 4
.IX Item "$obj->report( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR( [$level] )" 4
.IX Item "$obj->reportAll( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR( [$level] )" 4
.IX Item "$obj->trace( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBwarnings\fR() 4
.el .IP \f(CW$obj\fR\->\fBwarnings\fR() 4
.IX Item "$obj->warnings()"
Inherited, see "Error handling" in Mail::Reporter
.SS Cleanup
.IX Subsection "Cleanup"
Extends "Cleanup" in Mail::Message::Head::Complete.
.ie n .IP $obj\->\fBDESTROY\fR() 4
.el .IP \f(CW$obj\fR\->\fBDESTROY\fR() 4
.IX Item "$obj->DESTROY()"
Inherited, see "Cleanup" in Mail::Reporter
.SS "Access to the header"
.IX Subsection "Access to the header"
.SS "Simulating Mail::Header"
.IX Subsection "Simulating Mail::Header"
.ie n .IP $obj\->\fBas_string\fR() 4
.el .IP \f(CW$obj\fR\->\fBas_string\fR() 4
.IX Item "$obj->as_string()"
Returns the whole header as one big scalar.
Calls \fBMail::Message::Head::Complete::string()\fR.
.ie n .IP $obj\->\fBcleanup\fR() 4
.el .IP \f(CW$obj\fR\->\fBcleanup\fR() 4
.IX Item "$obj->cleanup()"
Cleanup memory usage.  Not needed here.
.ie n .IP "$obj\->\fBcombine\fR( $tag, [$with] )" 4
.el .IP "\f(CW$obj\fR\->\fBcombine\fR( \f(CW$tag\fR, [$with] )" 4
.IX Item "$obj->combine( $tag, [$with] )"
I do not see any valid reason for this command, so did not implement it.
.ie n .IP $obj\->\fBdup\fR() 4
.el .IP \f(CW$obj\fR\->\fBdup\fR() 4
.IX Item "$obj->dup()"
Duplicate the header, which is simply \fBclone()\fR.
.ie n .IP $obj\->\fBempty\fR() 4
.el .IP \f(CW$obj\fR\->\fBempty\fR() 4
.IX Item "$obj->empty()"
Clean-out the whole hash. Better not use this (simply create another
header object), although it should work.
.ie n .IP $obj\->\fBexists\fR() 4
.el .IP \f(CW$obj\fR\->\fBexists\fR() 4
.IX Item "$obj->exists()"
Returns whether there are any fields.
.ie n .IP $obj\->\fBextract\fR(ARRAY) 4
.el .IP \f(CW$obj\fR\->\fBextract\fR(ARRAY) 4
.IX Item "$obj->extract(ARRAY)"
Extract (and remove) header fields from the array.
.ie n .IP "$obj\->\fBfold\fR( [$length] )" 4
.el .IP "\f(CW$obj\fR\->\fBfold\fR( [$length] )" 4
.IX Item "$obj->fold( [$length] )"
Refold all fields in the header, to \f(CW$length\fR or whatever \fBfold_length()\fR
returns.
.ie n .IP "$obj\->\fBfold_length\fR( [[$tag], $length] )" 4
.el .IP "\f(CW$obj\fR\->\fBfold_length\fR( [[$tag], \f(CW$length\fR] )" 4
.IX Item "$obj->fold_length( [[$tag], $length] )"
Returns the line wrap, optionally after setting it to \f(CW$length\fR.  The
old value is returned.  The \f(CW$tag\fR argument is ignored, because it is
silly to have different lines fold in different ways.  This method
cannot be called statically anymore.
.ie n .IP "$obj\->\fBheader\fR( [ARRAY] )" 4
.el .IP "\f(CW$obj\fR\->\fBheader\fR( [ARRAY] )" 4
.IX Item "$obj->header( [ARRAY] )"
Extract the fields from the ARRAY, if specified, and then fold the fields.
Returned is an array with all fields, produced via \fBorderedFields()\fR.
.ie n .IP $obj\->\fBheader_hashref\fR(HASH) 4
.el .IP \f(CW$obj\fR\->\fBheader_hashref\fR(HASH) 4
.IX Item "$obj->header_hashref(HASH)"
If you are using this method, you must be stupid... anyway: I do not want to
support it for now: use \fBadd()\fR and friends.
.ie n .IP "$obj\->\fBmail_from\fR( ['IGNORE'|'ERROR'|'COERCE'|'KEEP'] )" 4
.el .IP "\f(CW$obj\fR\->\fBmail_from\fR( ['IGNORE'|'ERROR'|'COERCE'|'KEEP'] )" 4
.IX Item "$obj->mail_from( ['IGNORE'|'ERROR'|'COERCE'|'KEEP'] )"
What to do when a header line in the form `From ' is encountered. Valid
values are \f(CW\*(C`IGNORE\*(C'\fR \- ignore and discard the header, \f(CW\*(C`ERROR\*(C'\fR \- invoke
an error (call die), \f(CW\*(C`COERCE\*(C'\fR \- rename them as Mail-From and \f(CW\*(C`KEEP\*(C'\fR
\&\- keep them.
.ie n .IP "$obj\->\fBmodify\fR( [BOOLEAN] )" 4
.el .IP "\f(CW$obj\fR\->\fBmodify\fR( [BOOLEAN] )" 4
.IX Item "$obj->modify( [BOOLEAN] )"
Refold the headers when they are added.
.ie n .IP $obj\->\fBread\fR($file) 4
.el .IP \f(CW$obj\fR\->\fBread\fR($file) 4
.IX Item "$obj->read($file)"
Read the header from the \f(CW$file\fR.
.ie n .IP $obj\->\fBtags\fR() 4
.el .IP \f(CW$obj\fR\->\fBtags\fR() 4
.IX Item "$obj->tags()"
Returns all the names of fields, implemented by
\&\fBMail::Message::Head::Complete::names()\fR.
.ie n .IP "$obj\->\fBunfold\fR( [$tag] )" 4
.el .IP "\f(CW$obj\fR\->\fBunfold\fR( [$tag] )" 4
.IX Item "$obj->unfold( [$tag] )"
Remove the folding for all instances of \f(CW$tag\fR, or all fields at once.
.SS "The nasty bits"
.IX Subsection "The nasty bits"
.ie n .IP $obj\->\fBisa\fR($class) 4
.el .IP \f(CW$obj\fR\->\fBisa\fR($class) 4
.IX Item "$obj->isa($class)"
.PD 0
.IP Mail::Message::Replace::MailHeader\->\fBisa\fR($class) 4
.IX Item "Mail::Message::Replace::MailHeader->isa($class)"
.PD
Of course, the \f(CWisa()\fR class inheritance check should not see our
nasty trick.
.SH DETAILS
.IX Header "DETAILS"
Extends "DETAILS" in Mail::Message::Head::Complete.
.SH DIAGNOSTICS
.IX Header "DIAGNOSTICS"
.ie n .IP "Warning: Cannot remove field $name from header: not found." 4
.el .IP "Warning: Cannot remove field \f(CW$name\fR from header: not found." 4
.IX Item "Warning: Cannot remove field $name from header: not found."
You ask to remove a field which is not known in the header.  Using
\&\fBdelete()\fR, \fBreset()\fR, or \fBset()\fR to do the job will not result
in warnings: those methods check the existence of the field first.
.IP "Warning: Field objects have an implied name ($name)" 4
.IX Item "Warning: Field objects have an implied name ($name)"
.PD 0
.ie n .IP "Error: Package $package does not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR does not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package does not implement $method."
.PD
Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Message distribution version 3.015,
built on December 11, 2023. Website: \fIhttp://perl.overmeer.net/CPAN/\fR
.SH LICENSE
.IX Header "LICENSE"
Copyrights 2001\-2023 by [Mark Overmeer <markov@cpan.org>]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://dev.perl.org/licenses/\fR
