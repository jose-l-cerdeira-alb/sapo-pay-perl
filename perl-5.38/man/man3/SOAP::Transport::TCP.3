.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "SOAP::Transport::TCP 3"
.TH SOAP::Transport::TCP 3 2018-05-14 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
SOAP::Transport::TCP \- TCP Transport Support for SOAP::Lite
.SS SOAP::Transport::TCP
.IX Subsection "SOAP::Transport::TCP"
The classes provided by this module implement direct TCP/IP communications methods for both clients and servers.
.PP
The connections don't use HTTP or any other higher-level protocol. These classes are selected when the client or server object being created uses an endpoint URI that starts with tcp://. Both client and server classes support using Secure Socket Layer if it is available. If any of the parameters to a new method from either of the classes begins with SSL_ (such as SSL_server in place of Server), the class attempts to load the IO::Socket::SSL package and use it to create socket objects.
.PP
Both of the following classes catch methods that are intended for the socket objects and pass them along, allowing calls such as \f(CW$client\fR\->accept( ) without including the socket class in the inheritance tree.
.PP
\fISOAP::Transport::TCP::Client\fR
.IX Subsection "SOAP::Transport::TCP::Client"
.PP
Inherits from: SOAP::Client.
.PP
The TCP client class defines only two relevant methods beyond new and send_receive. These methods are:
.IP "SSL(\fIoptional new boolean value\fR)" 4
.IX Item "SSL(optional new boolean value)"
.Vb 1
\&    if ($client\->SSL) # Execute only if in SSL mode
.Ve
.Sp
Reflects the attribute that denotes whether the client object is using SSL sockets for communications.
.IP io_socket_class 4
.IX Item "io_socket_class"
.Vb 1
\&    ($client\->io_socket_class)\->new(%options);
.Ve
.Sp
Returns the name of the class to use when creating socket objects for internal use in communications. As implemented, it returns one of IO::Socket::INET or IO::Socket::SSL, depending on the return value of the previous SSL method.
.PP
If an application creates a subclass that inherits from this client class, either method is a likely target for overloading.
.PP
The new method behaves identically to most other classes, except that it detects the presence of SSL-targeted values in the parameter list and sets the SSL method appropriately if they are present.
.PP
The send_receive method creates a socket of the appropriate class and connects to the configured endpoint. It then sets the socket to nonblocking I/O, sends the message, shuts down the client end of the connection (preventing further writing), and reads the response back from the server. The socket object is discarded after the response and
appropriate status codes are set on the client object.
.PP
\fISOAP::Transport::TCP::Server\fR
.IX Subsection "SOAP::Transport::TCP::Server"
.PP
Inherits from: SOAP::Server.
.PP
The server class also defines the same two additional methods as in the client class:
.IP "SSL(\fIoptional new boolean value\fR)" 4
.IX Item "SSL(optional new boolean value)"
.Vb 1
\&    if ($client\->SSL) # Execute only if in SSL mode
.Ve
.Sp
Reflects the attribute that denotes whether the client object is using SSL sockets for communications.
.IP io_socket_class 4
.IX Item "io_socket_class"
.Vb 1
\&    ($client\->io_socket_class)\->new(%options);
.Ve
.Sp
Returns the name of the class to use when creating socket objects for internal use in communications. As implemented, it returns one of IO::Socket::INET or IO::Socket::SSL, depending on the return value of the previous SSL method. The new method also manages the automatic selection of SSL in the same fashion as the client class does.
.Sp
The handle method in this server implementation isn't designed to be called once with each new request. Rather, it is called with no arguments, at which time it enters into an infinite loop of waiting for a connection, reading the request, routing the request and sending back the serialized response. This continues until the process itself is interrupted by an untrapped signal or similar means.
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright (C) 2000\-2004 Paul Kulchenko. All rights reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH AUTHORS
.IX Header "AUTHORS"
Written by Paul Kulchenko.
.PP
Split from SOAP::Lite and SOAP-Transport-TCP packaging by Martin Kutter
