.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Random 3"
.TH Random 3 2018-04-22 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Crypt::OpenSSL::Random \- OpenSSL/LibreSSL pseudo\-random number generator access
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&  use Crypt::OpenSSL::Random;
\&
\&  Crypt::OpenSSL::Random::random_seed($good_random_data);
\&  Crypt::OpenSSL::Random::random_egd("/tmp/entropy");
\&  Crypt::OpenSSL::Random::random_status() or
\&    die "Unable to sufficiently seed the random number generator".
\&
\&  my $ten_good_random_bytes = Crypt::OpenSSL::Random::random_bytes(10);
\&  my $ten_ok_random_bytes = Crypt::OpenSSL::Random::random_pseudo_bytes(10);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Crypt::OpenSSL::Random\*(C'\fR provides the ability to seed and query the
\&\fBOpenSSL\fR and \fBLibreSSL\fR library's pseudo-random number generators.
.PP
Note: On \fBLibreSSL\fR \f(CWrandom_egd()\fR is not defined.
.SS EXPORT
.IX Subsection "EXPORT"
None by default.
.SH "Static Methods"
.IX Header "Static Methods"
.IP "random_bytes (IV num_bytes)" 4
.IX Item "random_bytes (IV num_bytes)"
This function, returns a specified number of cryptographically strong
pseudo-random bytes from the PRNG.  If the PRNG has not been seeded
with enough randomness to ensure an unpredictable byte sequence, then
a false value is returned.
.IP "random_pseudo_bytes (IV num_bytes)" 4
.IX Item "random_pseudo_bytes (IV num_bytes)"
This function, is similar to \f(CW\*(C`random_bytes\*(C'\fR, but the resulting
sequence of bytes are not necessarily unpredictable.  They can be used
for non-cryptographic purposes and for certain purposes in
cryptographic protocols, but usually not for key generation etc.
.IP "random_seed (PV random_bytes_string)" 4
.IX Item "random_seed (PV random_bytes_string)"
This function seeds the PRNG with a supplied string of bytes.  It
returns true if the PRNG has sufficient seeding.  Note: calling this
function with non-random bytes is of limited value at best!
.IP "random_egd (PV egd_string)" 4
.IX Item "random_egd (PV egd_string)"
This function seeds the PRNG with data from the specified entropy
gathering daemon.  Returns the number of bytes read from the daemon on
success, or \f(CW\-1\fR if not enough bytes were read, or if the connection to
the daemon failed.
.Sp
\&\f(CW\*(C`libressl\*(C'\fR considers this function insecure, so with libressl this
function does not exist.
.IP "random_status ()" 4
.IX Item "random_status ()"
This function returns true if the PRNG has sufficient seeding.
.SH BUGS
.IX Header "BUGS"
Because of the internal workings of OpenSSL's random library, the
pseudo-random number generator (PRNG) accessed by
Crypt::OpenSSL::Random will be different than the one accessed by any
other perl module.  Hence, to use a module such as
Crypt::OpenSSL::Random, you will need to seed the PRNG used there from
one used here.  This class is still advantageous, however, as it
centralizes other methods, such as \f(CW\*(C`random_egd\*(C'\fR, in one place.
.SH AUTHOR
.IX Header "AUTHOR"
Ian Robertson, \f(CW\*(C`iroberts@cpan.com\*(C'\fR
.PP
Now maintained by Reini Urban, \f(CW\*(C`rurban@cpan.org\*(C'\fR
.SH LICENSE
.IX Header "LICENSE"
This module is available under the same licences as perl, the Artistic
license and the GPL.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBperl\fR\|(1), \fBrand\fR\|(3), \fBRAND_add\fR\|(3), \fBRAND_egd\fR\|(3), \fBRAND_bytes\fR\|(3).
