.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Crypt::Random::Source::Base::Handle 3"
.TH Crypt::Random::Source::Base::Handle 3 2018-04-10 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Crypt::Random::Source::Base::Handle \- IO::Handle based random data sources
.SH VERSION
.IX Header "VERSION"
version 0.14
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\&    use Moo;
\&    extends qw(Crypt::Random::Source::Base::Handle);
\&
\&    sub open_handle {
\&        # invoked as needed
\&    }
\&
\&
\&    # this class can also be used directly
\&    Crypt::Random::Source::Base::Handle\->new( handle => $file_handle );
\&
\&
\&    # it supports some standard methods:
\&
\&    $p\->blocking(0);
\&
\&    $p\->read( my $buf, $n ); # no error handling here
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This is a concrete base class for all IO::Handle based random data sources.
.PP
It implements error handling
.SH ATTRIBUTES
.IX Header "ATTRIBUTES"
.SS handle
.IX Subsection "handle"
An IO::Handle or file handle to read from.
.SS blocking
.IX Subsection "blocking"
This is actually handled by \f(CW\*(C`handle\*(C'\fR, and is documented in IO::Handle.
.SS allow_under_read
.IX Subsection "allow_under_read"
Whether or not under reading is considered an error.
.PP
Defaults to false.
.SS reread_attempts
.IX Subsection "reread_attempts"
The number of attempts to make at rereading if the handle did not provide
enough bytes on the first attempt.
.PP
Defaults to 1.
.PP
Only used if \f(CW\*(C`allow_under_read\*(C'\fR is enabled.
.SH METHODS
.IX Header "METHODS"
.SS get
.IX Subsection "get"
See "get" in Crypt::Random::Source::Base.
.PP
When \f(CW\*(C`blocking\*(C'\fR or \f(CW\*(C`allow_under_read\*(C'\fR are set to a true value this method may
return fewer bytes than requested.
.SS read
.IX Subsection "read"
This delegates directly to \f(CW\*(C`handle\*(C'\fR.
.PP
It \fBDOES NOT\fR provide the same validation as \f(CW\*(C`get\*(C'\fR would have, so no checking
for underreads is done.
.SS close
.IX Subsection "close"
Close the handle and clear it.
.SS _read
.IX Subsection "_read"
\&\f(CW\*(C`$self\->handle\->read\*(C'\fR but with additional error checking and different
calling conventions.
.SS _read_too_short
.IX Subsection "_read_too_short"
Called by \f(CW\*(C`_read\*(C'\fR when not enough data was read from the handle. Normally it
will either die with an error or attempt to reread. When \f(CW\*(C`allow_under_read\*(C'\fR is
true it will just return the partial buffer.
.SS open_handle
.IX Subsection "open_handle"
Abstract method, should return an IO::Handle to use.
.SH SUPPORT
.IX Header "SUPPORT"
Bugs may be submitted through the RT bug tracker <https://rt.cpan.org/Public/Dist/Display.html?Name=Crypt-Random-Source>
(or bug\-Crypt\-Random\-Source@rt.cpan.org <mailto:bug-Crypt-Random-Source@rt.cpan.org>).
.SH AUTHOR
.IX Header "AUTHOR"
יובל קוג'מן (Yuval Kogman) <nothingmuch@woobling.org>
.SH "COPYRIGHT AND LICENCE"
.IX Header "COPYRIGHT AND LICENCE"
This software is copyright (c) 2008 by Yuval Kogman.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
