.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Message::Convert 3"
.TH Mail::Message::Convert 3 2023-12-11 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Mail::Message::Convert \- conversions between message types
.SH INHERITANCE
.IX Header "INHERITANCE"
.Vb 2
\& Mail::Message::Convert
\&   is a Mail::Reporter
\&
\& Mail::Message::Convert is extended by
\&   Mail::Message::Convert::EmailSimple
\&   Mail::Message::Convert::Html
\&   Mail::Message::Convert::HtmlFormatPS
\&   Mail::Message::Convert::HtmlFormatText
\&   Mail::Message::Convert::MailInternet
\&   Mail::Message::Convert::MimeEntity
\&   Mail::Message::Convert::TextAutoformat
.Ve
.SH SYNOPSIS
.IX Header "SYNOPSIS"
Available methods are very converter-specific.
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This class is the base for various message (and message parts) converters.
.PP
Extends "DESCRIPTION" in Mail::Reporter.
.SS "Converters between message objects"
.IX Subsection "Converters between message objects"
Internally, the \fBMail::Message::coerce()\fR is called when foreign objects
are used where message objects are expected.  That method will automatically
create the converting objects, and re-use them.
.IP \(bu 4
Mail::Message::Convert::MailInternet
.Sp
Converts the simple Mail::Internet messages into Mail::Message
objects.
.IP \(bu 4
Mail::Message::Convert::MimeEntity
.Sp
Converts the more complicated MIME::Entity messages into
Mail::Message objects.
.IP \(bu 4
Mail::Message::Convert::EmailSimple
.Sp
Converts Email::Simple messages into Mail::Message objects.
.SS "Other converters"
.IX Subsection "Other converters"
.IP \(bu 4
Mail::Message::Convert::Html
.Sp
Plays tricks with HTML/XMHTML without help of external modules.
.IP \(bu 4
Mail::Message::Convert::HtmlFormatText
.Sp
Converts HTML body objects to plain text objects using the
HTML::FormatText module.
.IP \(bu 4
Mail::Message::Convert::HtmlFormatPS
.Sp
Converts HTML body objects to Postscript objects using the
HTML::FormatPS module.
.IP \(bu 4
Mail::Message::Convert::TextAutoformat
.Sp
Converts a text message into text using Text::Autoformat.
.SH METHODS
.IX Header "METHODS"
Extends "METHODS" in Mail::Reporter.
.SS Constructors
.IX Subsection "Constructors"
Extends "Constructors" in Mail::Reporter.
.IP Mail::Message::Convert\->\fBnew\fR(%options) 4
.IX Item "Mail::Message::Convert->new(%options)"
.Vb 4
\& \-Option\-\-Defined in     \-\-Default
\&  fields                   <see description>
\&  log     Mail::Reporter   \*(AqWARNINGS\*(Aq
\&  trace   Mail::Reporter   \*(AqWARNINGS\*(Aq
.Ve
.RS 4
.IP "fields => NAMES|ARRAY\-OF\-NAMES|REGEXS" 2
.IX Item "fields => NAMES|ARRAY-OF-NAMES|REGEXS"
Select the fields of a header which are to be handled.  Other
fields will not be used.  The value of this option is passed to
\&\fBMail::Message::Head::Complete::grepNames()\fR whenever converters feel
a need for header line selection.
By default, the \f(CW\*(C`To\*(C'\fR, \f(CW\*(C`From\*(C'\fR, \f(CW\*(C`Cc\*(C'\fR, \f(CW\*(C`Bcc\*(C'\fR, \f(CW\*(C`Date\*(C'\fR, \f(CW\*(C`Subject\*(C'\fR, and their
\&\f(CW\*(C`Resent\-\*(C'\fR counterparts will be selected.  Specify an empty list to get all
fields.
.IP "log => LEVEL" 2
.IX Item "log => LEVEL"
.PD 0
.IP "trace => LEVEL" 2
.IX Item "trace => LEVEL"
.RE
.RS 4
.RE
.PD
.SS Converting
.IX Subsection "Converting"
.ie n .IP $obj\->\fBselectedFields\fR($head) 4
.el .IP \f(CW$obj\fR\->\fBselectedFields\fR($head) 4
.IX Item "$obj->selectedFields($head)"
Returns a list of fields to be included in the format.  The list is
an ordered selection of the fields in the actual header, and filtered
through the information as specified with new(fields).
.SS "Error handling"
.IX Subsection "Error handling"
Extends "Error handling" in Mail::Reporter.
.ie n .IP $obj\->\fBAUTOLOAD\fR() 4
.el .IP \f(CW$obj\fR\->\fBAUTOLOAD\fR() 4
.IX Item "$obj->AUTOLOAD()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBaddReport\fR($object) 4
.el .IP \f(CW$obj\fR\->\fBaddReport\fR($object) 4
.IX Item "$obj->addReport($object)"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "$obj->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD 0
.ie n .IP "Mail::Message::Convert\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "Mail::Message::Convert\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "Mail::Message::Convert->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBerrors\fR() 4
.el .IP \f(CW$obj\fR\->\fBerrors\fR() 4
.IX Item "$obj->errors()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR( [$level, [$strings]] )" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "$obj->log( [$level, [$strings]] )"
.PD 0
.IP "Mail::Message::Convert\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "Mail::Message::Convert->log( [$level, [$strings]] )"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBlogPriority\fR($level) 4
.el .IP \f(CW$obj\fR\->\fBlogPriority\fR($level) 4
.IX Item "$obj->logPriority($level)"
.PD 0
.IP Mail::Message::Convert\->\fBlogPriority\fR($level) 4
.IX Item "Mail::Message::Convert->logPriority($level)"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBlogSettings\fR() 4
.el .IP \f(CW$obj\fR\->\fBlogSettings\fR() 4
.IX Item "$obj->logSettings()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBnotImplemented\fR() 4
.el .IP \f(CW$obj\fR\->\fBnotImplemented\fR() 4
.IX Item "$obj->notImplemented()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR( [$level] )" 4
.IX Item "$obj->report( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR( [$level] )" 4
.IX Item "$obj->reportAll( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR( [$level] )" 4
.IX Item "$obj->trace( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBwarnings\fR() 4
.el .IP \f(CW$obj\fR\->\fBwarnings\fR() 4
.IX Item "$obj->warnings()"
Inherited, see "Error handling" in Mail::Reporter
.SS Cleanup
.IX Subsection "Cleanup"
Extends "Cleanup" in Mail::Reporter.
.ie n .IP $obj\->\fBDESTROY\fR() 4
.el .IP \f(CW$obj\fR\->\fBDESTROY\fR() 4
.IX Item "$obj->DESTROY()"
Inherited, see "Cleanup" in Mail::Reporter
.SH DIAGNOSTICS
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Package $package does not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR does not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package does not implement $method."
Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Message distribution version 3.015,
built on December 11, 2023. Website: \fIhttp://perl.overmeer.net/CPAN/\fR
.SH LICENSE
.IX Header "LICENSE"
Copyrights 2001\-2023 by [Mark Overmeer <markov@cpan.org>]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://dev.perl.org/licenses/\fR
