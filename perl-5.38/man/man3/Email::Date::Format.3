.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Email::Date::Format 3"
.TH Email::Date::Format 3 2023-01-14 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Email::Date::Format \- produce RFC 2822 date strings
.SH VERSION
.IX Header "VERSION"
version 1.008
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&  use Email::Date::Format qw(email_date);
\&
\&  my $header = email_date($date\->epoch);
\&
\&  Email::Simple\->create(
\&    header => [
\&      Date => $header,
\&    ],
\&    body => \*(Aq...\*(Aq,
\&  );
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module provides a simple means for generating an RFC 2822 compliant
datetime string.  (In case you care, they're not RFC 822 dates, because they
use a four digit year, which is not allowed in RFC 822.)
.SH "PERL VERSION"
.IX Header "PERL VERSION"
This library should run on perls released even a long time ago.  It should work
on any version of perl released in the last five years.
.PP
Although it may work on older versions of perl, no guarantee is made that the
minimum required version will not be increased.  The version may be increased
for any reason, and there is no promise that patches will be accepted to lower
the minimum required perl.
.SH FUNCTIONS
.IX Header "FUNCTIONS"
.SS email_date
.IX Subsection "email_date"
.Vb 2
\&  my $date = email_date; # now
\&  my $date = email_date( time \- 60*60 ); # one hour ago
.Ve
.PP
\&\f(CW\*(C`email_date\*(C'\fR accepts an epoch value, such as the one returned by \f(CW\*(C`time\*(C'\fR.
It returns a string representing the date and time of the input, as
specified in RFC 2822. If no input value is provided, the current value
of \f(CW\*(C`time\*(C'\fR is used.
.PP
\&\f(CW\*(C`email_date\*(C'\fR is exported only if requested.
.SS email_gmdate
.IX Subsection "email_gmdate"
.Vb 1
\&  my $date = email_gmdate;
.Ve
.PP
\&\f(CW\*(C`email_gmdate\*(C'\fR is identical to \f(CW\*(C`email_date\*(C'\fR, but it will return a string
indicating the time in Greenwich Mean Time, rather than local time.
.PP
\&\f(CW\*(C`email_gmdate\*(C'\fR is exported only if requested.
.SH AUTHORS
.IX Header "AUTHORS"
.IP \(bu 4
Casey West
.IP \(bu 4
Ricardo SIGNES <cpan@semiotic.systems>
.SH CONTRIBUTORS
.IX Header "CONTRIBUTORS"
.IP \(bu 4
bitcardbmw@lsmod.de <bitcardbmw@lsmod.de>
.IP \(bu 4
Eric Sproul <esproul@omniti.com>
.IP \(bu 4
Ricardo Signes <rjbs@semiotic.systems>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2004 by Casey West.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
