.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Specio::Constraint::Parameterizable 3"
.TH Specio::Constraint::Parameterizable 3 2022-06-11 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Specio::Constraint::Parameterizable \- A class which represents parameterizable constraints
.SH VERSION
.IX Header "VERSION"
version 0.48
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    my $arrayref = t(\*(AqArrayRef\*(Aq);
\&
\&    my $arrayref_of_int = $arrayref\->parameterize( of => t(\*(AqInt\*(Aq) );
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This class implements the API for parameterizable types like \f(CW\*(C`ArrayRef\*(C'\fR and
\&\f(CW\*(C`Maybe\*(C'\fR.
.SH API
.IX Header "API"
This class implements the same API as Specio::Constraint::Simple, with a few
additions.
.SS Specio::Constraint::Parameterizable\->new(...)
.IX Subsection "Specio::Constraint::Parameterizable->new(...)"
This class's constructor accepts two additional parameters:
.IP \(bu 4
parameterized_constraint_generator
.Sp
This is a subroutine that generates a new constraint subroutine when the type
is parameterized.
.Sp
It will be called as a method on the type and will be passed a single argument,
the type object for the type parameter.
.Sp
This parameter is mutually exclusive with the \f(CW\*(C`parameterized_inline_generator\*(C'\fR
parameter.
.IP \(bu 4
parameterized_inline_generator
.Sp
This is a subroutine that generates a new inline generator subroutine when the
type is parameterized.
.Sp
It will be called as a method on the Specio::Constraint::Parameterized
object when that object needs to generate an inline constraint. It will receive
the type parameter as the first argument and the variable name as a string as
the second.
.Sp
This probably seems fairly confusing, so looking at the examples in the
Specio::Library::Builtins code may be helpful.
.Sp
This parameter is mutually exclusive with the
\&\f(CW\*(C`parameterized_constraint_generator\*(C'\fR parameter.
.ie n .SS $type\->parameterize(...)
.el .SS \f(CW$type\fP\->parameterize(...)
.IX Subsection "$type->parameterize(...)"
This method takes two arguments. The \f(CW\*(C`of\*(C'\fR argument should be an object which
does the Specio::Constraint::Role::Interface role, and is required.
.PP
The other argument, \f(CW\*(C`declared_at\*(C'\fR, is optional. If it is not given, then a new
Specio::DeclaredAt object is creating using a call stack depth of 1.
.PP
This method returns a new Specio::Constraint::Parameterized object.
.SH SUPPORT
.IX Header "SUPPORT"
Bugs may be submitted at <https://github.com/houseabsolute/Specio/issues>.
.SH SOURCE
.IX Header "SOURCE"
The source code repository for Specio can be found at <https://github.com/houseabsolute/Specio>.
.SH AUTHOR
.IX Header "AUTHOR"
Dave Rolsky <autarch@urth.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2012 \- 2022 by Dave Rolsky.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
.PP
The full text of the license can be found in the
\&\fILICENSE\fR file included with this distribution.
