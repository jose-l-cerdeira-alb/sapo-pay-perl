.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Message::Replace::MailInternet 3"
.TH Mail::Message::Replace::MailInternet 3 2023-12-11 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Mail::Message::Replace::MailInternet \- fake Mail::Internet
.SH INHERITANCE
.IX Header "INHERITANCE"
.Vb 3
\& Mail::Message::Replace::MailInternet
\&   is a Mail::Message
\&   is a Mail::Reporter
.Ve
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\& !!! BETA !!!
\&
\& # change
\& use Mail::Internet;
\& # into
\& use Mail::Message::Replace::MailInternet;
\& # in existing code, and the code should still work, but
\& # with the Mail::Message features.
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module is a wrapper around a Mail::Message, which simulates
a Mail::Internet object.  The name-space of that module is hijacked
and many methods are added.
.PP
Most methods will work without any change, but you may need to have
a look at your \fBsmtpsend()\fR and \fBsend()\fR calls.
.PP
Extends "DESCRIPTION" in Mail::Message.
.SH OVERLOADED
.IX Header "OVERLOADED"
.SH METHODS
.IX Header "METHODS"
Extends "METHODS" in Mail::Message.
.SS Constructors
.IX Subsection "Constructors"
Extends "Constructors" in Mail::Message.
.ie n .IP $obj\->\fBclone\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBclone\fR(%options) 4
.IX Item "$obj->clone(%options)"
Inherited, see "Constructors" in Mail::Message
.ie n .IP $obj\->\fBdup\fR() 4
.el .IP \f(CW$obj\fR\->\fBdup\fR() 4
.IX Item "$obj->dup()"
Duplicate the message.  The result will again be a Mail::Internet
compatible object.
.ie n .IP $obj\->\fBempty\fR() 4
.el .IP \f(CW$obj\fR\->\fBempty\fR() 4
.IX Item "$obj->empty()"
Remove all data from this object.  Very dangerous!
.IP "Mail::Message::Replace::MailInternet\->\fBnew\fR( [$arg], [%options] )" 4
.IX Item "Mail::Message::Replace::MailInternet->new( [$arg], [%options] )"
.Vb 10
\& \-Option    \-\-Defined in     \-\-Default
\&  Body                         undef
\&  FoldLength                   79
\&  Header                       undef
\&  MailFrom                     \*(AqKEEP\*(Aq
\&  Modify                       0
\&  body        Mail::Message    undef
\&  body_type   Mail::Message    Mail::Message::Body::Lines
\&  deleted     Mail::Message    <false>
\&  field_type  Mail::Message    undef
\&  head        Mail::Message    undef
\&  head_type   Mail::Message    Mail::Message::Replace::MailHeader
\&  labels      Mail::Message    {}
\&  log         Mail::Reporter   \*(AqWARNINGS\*(Aq
\&  messageId   Mail::Message    undef
\&  modified    Mail::Message    <false>
\&  trace       Mail::Reporter   \*(AqWARNINGS\*(Aq
\&  trusted     Mail::Message    <false>
.Ve
.RS 4
.IP "Body => \e@lines" 2
.IX Item "Body => @lines"
Array of \f(CW"\en"\fR terminated lines.  If not specified, the lines will be
read from \f(CW$arg\fR.
.IP "FoldLength => INTEGER" 2
.IX Item "FoldLength => INTEGER"
Number of characters permitted on any refolded header line.
Passed to Mail::Message::Replace::MailHeader::new(FoldLength).
.IP "Header => OBJECT" 2
.IX Item "Header => OBJECT"
The Mail::Header object, which is passed here, is a fake one as well...
It is translated into a new(head).  If not given, the header will be
parsed from the \f(CW$arg\fR.
.IP "MailFrom => 'IGNORE'|'ERROR'|'COERCE'|'KEEP'" 2
.IX Item "MailFrom => 'IGNORE'|'ERROR'|'COERCE'|'KEEP'"
What to do with leading "\f(CW\*(C`From \*(C'\fR" lines in e\-mail data.
Passed to Mail::Message::Replace::MailHeader::new(MailFrom).
.IP "Modify => BOOLEAN" 2
.IX Item "Modify => BOOLEAN"
Whether to re-fold all the incoming fields.
Passed to Mail::Message::Replace::MailHeader::new(Modify).
.IP "body => OBJECT" 2
.IX Item "body => OBJECT"
.PD 0
.IP "body_type => CLASS" 2
.IX Item "body_type => CLASS"
.IP "deleted => BOOLEAN" 2
.IX Item "deleted => BOOLEAN"
.IP "field_type => CLASS" 2
.IX Item "field_type => CLASS"
.IP "head => OBJECT" 2
.IX Item "head => OBJECT"
.IP "head_type => CLASS" 2
.IX Item "head_type => CLASS"
.IP "labels => ARRAY|HASH" 2
.IX Item "labels => ARRAY|HASH"
.IP "log => LEVEL" 2
.IX Item "log => LEVEL"
.IP "messageId => STRING" 2
.IX Item "messageId => STRING"
.IP "modified => BOOLEAN" 2
.IX Item "modified => BOOLEAN"
.IP "trace => LEVEL" 2
.IX Item "trace => LEVEL"
.IP "trusted => BOOLEAN" 2
.IX Item "trusted => BOOLEAN"
.RE
.RS 4
.PD
.Sp
example: replace traditional Mail::Internet by this wrapper
.Sp
.Vb 3
\&  # was
\&  use Mail::Internet;
\&  my $mi = Mail::Internet\->new(@options);
\&
\&  # becomes
\&  use Mail::Message::Replace::MailInternet;
\&  my $mi = Mail::Internet\->new(@options);
.Ve
.RE
.SS Attributes
.IX Subsection "Attributes"
.ie n .IP "$obj\->\fBMailFrom\fR( [STRING] )" 4
.el .IP "\f(CW$obj\fR\->\fBMailFrom\fR( [STRING] )" 4
.IX Item "$obj->MailFrom( [STRING] )"
Your email address.
.SS "Constructing a message"
.IX Subsection "Constructing a message"
Extends "Constructing a message" in Mail::Message.
.ie n .IP "$obj\->\fBadd_signature\fR( [$filename] )" 4
.el .IP "\f(CW$obj\fR\->\fBadd_signature\fR( [$filename] )" 4
.IX Item "$obj->add_signature( [$filename] )"
Replaced by \fBsign()\fR, but still usable. \f(CW$filename\fR is the file which
contains the signature, which defaults to \f(CW\*(C`$ENV{HOME}/.signature\*(C'\fR.
.ie n .IP "$obj\->\fBbounce\fR( [<$rg_object|%options>] )" 4
.el .IP "\f(CW$obj\fR\->\fBbounce\fR( [<$rg_object|%options>] )" 4
.IX Item "$obj->bounce( [<$rg_object|%options>] )"
Inherited, see "Constructing a message" in Mail::Message::Construct::Bounce
.ie n .IP "Mail::Message::Replace::MailInternet\->\fBbuild\fR( [$message|$part|$body], $content )" 4
.el .IP "Mail::Message::Replace::MailInternet\->\fBbuild\fR( [$message|$part|$body], \f(CW$content\fR )" 4
.IX Item "Mail::Message::Replace::MailInternet->build( [$message|$part|$body], $content )"
Inherited, see "Constructing a message" in Mail::Message::Construct::Build
.ie n .IP "Mail::Message::Replace::MailInternet\->\fBbuildFromBody\fR($body, [$head], $headers)" 4
.el .IP "Mail::Message::Replace::MailInternet\->\fBbuildFromBody\fR($body, [$head], \f(CW$headers\fR)" 4
.IX Item "Mail::Message::Replace::MailInternet->buildFromBody($body, [$head], $headers)"
Inherited, see "Constructing a message" in Mail::Message::Construct::Build
.ie n .IP $obj\->\fBextract\fR(\e@lines|$fh) 4
.el .IP \f(CW$obj\fR\->\fBextract\fR(\e@lines|$fh) 4
.IX Item "$obj->extract(@lines|$fh)"
Read header and body from an ARRAY or \f(CW$fh\fR
.ie n .IP $obj\->\fBforward\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBforward\fR(%options) 4
.IX Item "$obj->forward(%options)"
Inherited, see "Constructing a message" in Mail::Message::Construct::Forward
.ie n .IP $obj\->\fBforwardAttach\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBforwardAttach\fR(%options) 4
.IX Item "$obj->forwardAttach(%options)"
Inherited, see "Constructing a message" in Mail::Message::Construct::Forward
.ie n .IP $obj\->\fBforwardEncapsulate\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBforwardEncapsulate\fR(%options) 4
.IX Item "$obj->forwardEncapsulate(%options)"
Inherited, see "Constructing a message" in Mail::Message::Construct::Forward
.ie n .IP $obj\->\fBforwardInline\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBforwardInline\fR(%options) 4
.IX Item "$obj->forwardInline(%options)"
Inherited, see "Constructing a message" in Mail::Message::Construct::Forward
.ie n .IP $obj\->\fBforwardNo\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBforwardNo\fR(%options) 4
.IX Item "$obj->forwardNo(%options)"
Inherited, see "Constructing a message" in Mail::Message::Construct::Forward
.ie n .IP $obj\->\fBforwardPostlude\fR() 4
.el .IP \f(CW$obj\fR\->\fBforwardPostlude\fR() 4
.IX Item "$obj->forwardPostlude()"
Inherited, see "Constructing a message" in Mail::Message::Construct::Forward
.ie n .IP $obj\->\fBforwardPrelude\fR() 4
.el .IP \f(CW$obj\fR\->\fBforwardPrelude\fR() 4
.IX Item "$obj->forwardPrelude()"
Inherited, see "Constructing a message" in Mail::Message::Construct::Forward
.ie n .IP $obj\->\fBforwardSubject\fR(STRING) 4
.el .IP \f(CW$obj\fR\->\fBforwardSubject\fR(STRING) 4
.IX Item "$obj->forwardSubject(STRING)"
Inherited, see "Constructing a message" in Mail::Message::Construct::Forward
.ie n .IP "$obj\->\fBread\fR(\e@lines|$fh, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBread\fR(\e@lines|$fh, \f(CW%options\fR)" 4
.IX Item "$obj->read(@lines|$fh, %options)"
.PD 0
.ie n .IP "Mail::Message::Replace::MailInternet\->\fBread\fR(\e@lines|$fh, %options)" 4
.el .IP "Mail::Message::Replace::MailInternet\->\fBread\fR(\e@lines|$fh, \f(CW%options\fR)" 4
.IX Item "Mail::Message::Replace::MailInternet->read(@lines|$fh, %options)"
.PD
Read header and body from the specified ARRAY or \f(CW$fh\fR.  When used as
object method, \fBMail::Message::read()\fR is called, to be MailBox compliant.
As class method, the Mail::Internet compatible read is called.  \f(CW%options\fR are
only available in the first case.
.Sp
.Vb 3
\& \-Option             \-\-Defined in                    \-\-Default
\&  body_type            Mail::Message::Construct::Read  undef
\&  strip_status_fields  Mail::Message::Construct::Read  <true>
.Ve
.RS 4
.IP "body_type => CLASS" 2
.IX Item "body_type => CLASS"
.PD 0
.IP "strip_status_fields => BOOLEAN" 2
.IX Item "strip_status_fields => BOOLEAN"
.RE
.RS 4
.RE
.ie n .IP $obj\->\fBread_body\fR(\e@lines|$fh) 4
.el .IP \f(CW$obj\fR\->\fBread_body\fR(\e@lines|$fh) 4
.IX Item "$obj->read_body(@lines|$fh)"
.PD
Read only the message's body from the ARRAY or \f(CW$fh\fR.
.ie n .IP $obj\->\fBread_header\fR(\e@lines|$fh) 4
.el .IP \f(CW$obj\fR\->\fBread_header\fR(\e@lines|$fh) 4
.IX Item "$obj->read_header(@lines|$fh)"
Read only the message's header from the ARRAY or \f(CW$fh\fR
.ie n .IP $obj\->\fBrebuild\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBrebuild\fR(%options) 4
.IX Item "$obj->rebuild(%options)"
Inherited, see "Constructing a message" in Mail::Message::Construct::Rebuild
.ie n .IP $obj\->\fBreply\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBreply\fR(%options) 4
.IX Item "$obj->reply(%options)"
BE WARNED: the main job for creating a reply is done by
\&\fBMail::Message::reply()\fR, which may produce a result which is compatible,
but may be different from Mail::Internet's version.
.Sp
.Vb 10
\& \-Option         \-\-Defined in                     \-\-Default
\&  Bcc              Mail::Message::Construct::Reply  undef
\&  Cc               Mail::Message::Construct::Reply  <\*(Aqcc\*(Aq in current>
\&  Exclude                                           []
\&  From             Mail::Message::Construct::Reply  <\*(Aqto\*(Aq in current>
\&  Inline                                            >
\&  Keep                                              []
\&  Message\-ID       Mail::Message::Construct::Reply  <uniquely generated>
\&  ReplyAll                                          <false>
\&  Subject          Mail::Message::Construct::Reply  replySubject()
\&  To               Mail::Message::Construct::Reply  <sender in current>
\&  body             Mail::Message::Construct::Reply  undef
\&  group_reply      Mail::Message::Construct::Reply  <true>
\&  header_template                                   $ENV{HOME}/.mailhdr
\&  include          Mail::Message::Construct::Reply  \*(AqINLINE\*(Aq
\&  max_signature    Mail::Message::Construct::Reply  10
\&  message_type     Mail::Message::Construct::Reply  Mail::Message
\&  postlude         Mail::Message::Construct::Reply  undef
\&  prelude          Mail::Message::Construct::Reply  undef
\&  quote            Mail::Message::Construct::Reply  \*(Aq> \*(Aq
\&  signature        Mail::Message::Construct::Reply  undef
\&  strip_signature  Mail::Message::Construct::Reply  qr/^\-\-\es/
.Ve
.RS 4
.IP "Bcc => ADDRESSES" 2
.IX Item "Bcc => ADDRESSES"
.PD 0
.IP "Cc => ADDRESSES" 2
.IX Item "Cc => ADDRESSES"
.IP "Exclude => \e@names" 2
.IX Item "Exclude => @names"
.PD
Remove the fields with the specified names from the produced reply message.
.IP "From => ADDRESSES" 2
.IX Item "From => ADDRESSES"
.PD 0
.IP "Inline => STRING" 2
.IX Item "Inline => STRING"
.PD
Quotation STRING, which is translated into reply(quote).  The normal
default of \f(CW\*(C`quote\*(C'\fR is "> ", in stead of ">".
.IP "Keep => \e@names" 2
.IX Item "Keep => @names"
Copy all header fields with the specified NAMES from the source to the
reply message.
.IP "Message-ID => STRING" 2
.IX Item "Message-ID => STRING"
.PD 0
.IP "ReplyAll => BOOLEAN" 2
.IX Item "ReplyAll => BOOLEAN"
.PD
Reply to the group?  Translated into reply(group_reply), which has
as default the exact oposite of this option, being \f(CW\*(C`true\*(C'\fR.
.IP "Subject => STRING|CODE" 2
.IX Item "Subject => STRING|CODE"
.PD 0
.IP "To => ADDRESSES" 2
.IX Item "To => ADDRESSES"
.IP "body => BODY" 2
.IX Item "body => BODY"
.IP "group_reply => BOOLEAN" 2
.IX Item "group_reply => BOOLEAN"
.ie n .IP "header_template => $filename|""undef""" 2
.el .IP "header_template => \f(CW$filename\fR|\f(CWundef\fR" 2
.IX Item "header_template => $filename|undef"
.PD
Read the return header from the template file.  When this is explicitly
set to \f(CW\*(C`undef\*(C'\fR, or the file does not exist, then a header will be created.
.IP "include => 'NO'|'INLINE'|'ATTACH'" 2
.IX Item "include => 'NO'|'INLINE'|'ATTACH'"
.PD 0
.IP "max_signature => INTEGER" 2
.IX Item "max_signature => INTEGER"
.IP "message_type => CLASS" 2
.IX Item "message_type => CLASS"
.IP "postlude => BODY|LINES" 2
.IX Item "postlude => BODY|LINES"
.IP "prelude => BODY|LINES" 2
.IX Item "prelude => BODY|LINES"
.IP "quote => CODE|STRING" 2
.IX Item "quote => CODE|STRING"
.IP "signature => BODY|MESSAGE" 2
.IX Item "signature => BODY|MESSAGE"
.IP "strip_signature => REGEXP|STRING|CODE" 2
.IX Item "strip_signature => REGEXP|STRING|CODE"
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBreplyPrelude\fR( [STRING|$field|$address|ARRAY\-$of\-$things] )" 4
.el .IP "\f(CW$obj\fR\->\fBreplyPrelude\fR( [STRING|$field|$address|ARRAY\-$of\-$things] )" 4
.IX Item "$obj->replyPrelude( [STRING|$field|$address|ARRAY-$of-$things] )"
.PD
Inherited, see "Constructing a message" in Mail::Message::Construct::Reply
.ie n .IP $obj\->\fBreplySubject\fR(STRING) 4
.el .IP \f(CW$obj\fR\->\fBreplySubject\fR(STRING) 4
.IX Item "$obj->replySubject(STRING)"
.PD 0
.IP Mail::Message::Replace::MailInternet\->\fBreplySubject\fR(STRING) 4
.IX Item "Mail::Message::Replace::MailInternet->replySubject(STRING)"
.PD
Inherited, see "Constructing a message" in Mail::Message::Construct::Reply
.ie n .IP $obj\->\fBsign\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBsign\fR(%options) 4
.IX Item "$obj->sign(%options)"
Add a signature (a few extra lines) to the message.
.Sp
.Vb 3
\& \-Option   \-\-Default
\&  File       undef
\&  Signature  \*(Aq\*(Aq
.Ve
.RS 4
.ie n .IP "File => $filename" 2
.el .IP "File => \f(CW$filename\fR" 2
.IX Item "File => $filename"
Specifies a filename where the signature is in.
.IP "Signature => STRING|\e@lines" 2
.IX Item "Signature => STRING|@lines"
The signature in memory.
.RE
.RS 4
.RE
.SS "The message"
.IX Subsection "The message"
Extends "The message" in Mail::Message.
.ie n .IP $obj\->\fBcontainer\fR() 4
.el .IP \f(CW$obj\fR\->\fBcontainer\fR() 4
.IX Item "$obj->container()"
Inherited, see "The message" in Mail::Message
.ie n .IP $obj\->\fBisDummy\fR() 4
.el .IP \f(CW$obj\fR\->\fBisDummy\fR() 4
.IX Item "$obj->isDummy()"
Inherited, see "The message" in Mail::Message
.ie n .IP $obj\->\fBisPart\fR() 4
.el .IP \f(CW$obj\fR\->\fBisPart\fR() 4
.IX Item "$obj->isPart()"
Inherited, see "The message" in Mail::Message
.ie n .IP $obj\->\fBmessageId\fR() 4
.el .IP \f(CW$obj\fR\->\fBmessageId\fR() 4
.IX Item "$obj->messageId()"
Inherited, see "The message" in Mail::Message
.ie n .IP $obj\->\fBnntppost\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBnntppost\fR(%options) 4
.IX Item "$obj->nntppost(%options)"
Send an NNTP message (newsgroup message), which is equivalent to
Mail::Transport::NNTP or \fBMail::Message::send()\fR with \f(CW\*(C`via \*(Aqnntp\*(Aq\*(C'\fR.
.Sp
.Vb 4
\& \-Option\-\-Default
\&  Debug   <false>
\&  Host    <from Net::Config>
\&  Port    119
.Ve
.RS 4
.IP "Debug => BOOLEAN" 2
.IX Item "Debug => BOOLEAN"
.PD 0
.ie n .IP "Host => $hostname" 2
.el .IP "Host => \f(CW$hostname\fR" 2
.IX Item "Host => $hostname"
.IP "Port => INTEGER" 2
.IX Item "Port => INTEGER"
.RE
.RS 4
.RE
.ie n .IP $obj\->\fBpartNumber\fR() 4
.el .IP \f(CW$obj\fR\->\fBpartNumber\fR() 4
.IX Item "$obj->partNumber()"
.PD
Inherited, see "The message" in Mail::Message
.ie n .IP "$obj\->\fBprint\fR( [$fh] )" 4
.el .IP "\f(CW$obj\fR\->\fBprint\fR( [$fh] )" 4
.IX Item "$obj->print( [$fh] )"
Prints the whole message to the specified \f(CW$fh\fR, which default to
STDOUT.  This calls \fBMail::Message::print()\fR.
.ie n .IP "$obj\->\fBsend\fR($type, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBsend\fR($type, \f(CW%options\fR)" 4
.IX Item "$obj->send($type, %options)"
Send via Mail Transfer Agents (MUA).  These will be handled by various
Mail::Transport::Send extensions.  The \f(CW\*(C`test\*(C'\fR \f(CW$type\fR is not supported.
.ie n .IP $obj\->\fBsize\fR() 4
.el .IP \f(CW$obj\fR\->\fBsize\fR() 4
.IX Item "$obj->size()"
Inherited, see "The message" in Mail::Message
.ie n .IP $obj\->\fBtoplevel\fR() 4
.el .IP \f(CW$obj\fR\->\fBtoplevel\fR() 4
.IX Item "$obj->toplevel()"
Inherited, see "The message" in Mail::Message
.ie n .IP "$obj\->\fBwrite\fR( [$fh] )" 4
.el .IP "\f(CW$obj\fR\->\fBwrite\fR( [$fh] )" 4
.IX Item "$obj->write( [$fh] )"
Inherited, see "The message" in Mail::Message
.SS "The header"
.IX Subsection "The header"
Extends "The header" in Mail::Message.
.ie n .IP $obj\->\fBadd\fR(\e@lines) 4
.el .IP \f(CW$obj\fR\->\fBadd\fR(\e@lines) 4
.IX Item "$obj->add(@lines)"
Add header lines, which simply calls \f(CWMail::Message::Head::add()\fR on
the header for each specified LINE. The last added LINE is returned.
.ie n .IP $obj\->\fBbcc\fR() 4
.el .IP \f(CW$obj\fR\->\fBbcc\fR() 4
.IX Item "$obj->bcc()"
Inherited, see "The header" in Mail::Message
.ie n .IP $obj\->\fBcc\fR() 4
.el .IP \f(CW$obj\fR\->\fBcc\fR() 4
.IX Item "$obj->cc()"
Inherited, see "The header" in Mail::Message
.ie n .IP $obj\->\fBclean_header\fR() 4
.el .IP \f(CW$obj\fR\->\fBclean_header\fR() 4
.IX Item "$obj->clean_header()"
Not to be used, replaced by \fBheader()\fR.
.ie n .IP "$obj\->\fBcombine\fR( $tag, [$with] )" 4
.el .IP "\f(CW$obj\fR\->\fBcombine\fR( \f(CW$tag\fR, [$with] )" 4
.IX Item "$obj->combine( $tag, [$with] )"
Not implemented, because I see no use for it.
.ie n .IP $obj\->\fBdate\fR() 4
.el .IP \f(CW$obj\fR\->\fBdate\fR() 4
.IX Item "$obj->date()"
Inherited, see "The header" in Mail::Message
.ie n .IP "$obj\->\fBdelete\fR( $name, [$index]] )" 4
.el .IP "\f(CW$obj\fR\->\fBdelete\fR( \f(CW$name\fR, [$index]] )" 4
.IX Item "$obj->delete( $name, [$index]] )"
Delete the fields with the specified \f(CW$name\fR.  The deleted fields are
returned.
.Sp
BE WARNED: if no \f(CW$name\fR is specified, the \f(CW\*(C`delete\*(C'\fR is interpreted as
the deletion of the message in a folder, so \fBMail::Box::Message::delete()\fR
will be called.  This may have no negative effect at all...
.Sp
Calls \fBMail::Message::Replace::MailHeader::delete()\fR
.ie n .IP $obj\->\fBdestinations\fR() 4
.el .IP \f(CW$obj\fR\->\fBdestinations\fR() 4
.IX Item "$obj->destinations()"
Inherited, see "The header" in Mail::Message
.ie n .IP "$obj\->\fBfold\fR( [$length] )" 4
.el .IP "\f(CW$obj\fR\->\fBfold\fR( [$length] )" 4
.IX Item "$obj->fold( [$length] )"
Fold all the fields to a certain maximum \f(CW$length\fR.
Implemented by \fBMail::Message::Replace::MailHeader::fold()\fR
.ie n .IP "$obj\->\fBfold_length\fR( [[$tag], $length] )" 4
.el .IP "\f(CW$obj\fR\->\fBfold_length\fR( [[$tag], \f(CW$length\fR] )" 4
.IX Item "$obj->fold_length( [[$tag], $length] )"
Set the maximum line \f(CW$length\fR.  \f(CW$tag\fR is ignored.
Implemented by \fBMail::Message::Replace::MailHeader::fold_length()\fR
.ie n .IP $obj\->\fBfrom\fR() 4
.el .IP \f(CW$obj\fR\->\fBfrom\fR() 4
.IX Item "$obj->from()"
Inherited, see "The header" in Mail::Message
.ie n .IP "$obj\->\fBget\fR( $name, [$index] )" 4
.el .IP "\f(CW$obj\fR\->\fBget\fR( \f(CW$name\fR, [$index] )" 4
.IX Item "$obj->get( $name, [$index] )"
Get all the header fields with the specified \f(CW$name\fR.  In scalar context,
only the first fitting \f(CW$name\fR is returned.  Even when only one \f(CW$name\fR is
specified, multiple lines may be returned: some fields appear more than
once in a header.  Calls \fBMail::Message::Replace::MailHeader::get()\fR
.ie n .IP $obj\->\fBguessTimestamp\fR() 4
.el .IP \f(CW$obj\fR\->\fBguessTimestamp\fR() 4
.IX Item "$obj->guessTimestamp()"
Inherited, see "The header" in Mail::Message
.ie n .IP "$obj\->\fBhead\fR( [$head] )" 4
.el .IP "\f(CW$obj\fR\->\fBhead\fR( [$head] )" 4
.IX Item "$obj->head( [$head] )"
Returns the head of the message, or creates an empty one if none is
defined.  The \f(CW$head\fR argument, which sets the header, is not available
for Mail::Internet, but is there to be compatible with the \f(CW\*(C`head\*(C'\fR
method of Mail::Message.
.ie n .IP "$obj\->\fBheader\fR( [\e@lines] )" 4
.el .IP "\f(CW$obj\fR\->\fBheader\fR( [\e@lines] )" 4
.IX Item "$obj->header( [@lines] )"
Optionally reads a header from the ARRAY of lines, and then returns
those fields as array-ref nicely folded.
Implemented by \fBMail::Message::Replace::MailHeader::header()\fR
.ie n .IP $obj\->\fBnrLines\fR() 4
.el .IP \f(CW$obj\fR\->\fBnrLines\fR() 4
.IX Item "$obj->nrLines()"
Inherited, see "The header" in Mail::Message
.ie n .IP $obj\->\fBprint_header\fR($fh) 4
.el .IP \f(CW$obj\fR\->\fBprint_header\fR($fh) 4
.IX Item "$obj->print_header($fh)"
Calls \fBMail::Message::Head::Complete::print()\fR.
.ie n .IP "$obj\->\fBreplace\fR( $tag, $line, [$index] )" 4
.el .IP "\f(CW$obj\fR\->\fBreplace\fR( \f(CW$tag\fR, \f(CW$line\fR, [$index] )" 4
.IX Item "$obj->replace( $tag, $line, [$index] )"
Adds LINES to the header, but removes fields with the same name if they
already exist.  Calls \fBMail::Message::Replace::MailHeader::replace()\fR
.ie n .IP $obj\->\fBsender\fR() 4
.el .IP \f(CW$obj\fR\->\fBsender\fR() 4
.IX Item "$obj->sender()"
Inherited, see "The header" in Mail::Message
.ie n .IP $obj\->\fBstudy\fR($fieldname) 4
.el .IP \f(CW$obj\fR\->\fBstudy\fR($fieldname) 4
.IX Item "$obj->study($fieldname)"
Inherited, see "The header" in Mail::Message
.ie n .IP $obj\->\fBsubject\fR() 4
.el .IP \f(CW$obj\fR\->\fBsubject\fR() 4
.IX Item "$obj->subject()"
Inherited, see "The header" in Mail::Message
.ie n .IP $obj\->\fBtidy_headers\fR() 4
.el .IP \f(CW$obj\fR\->\fBtidy_headers\fR() 4
.IX Item "$obj->tidy_headers()"
No effect anymore (always performed).
.ie n .IP $obj\->\fBtimestamp\fR() 4
.el .IP \f(CW$obj\fR\->\fBtimestamp\fR() 4
.IX Item "$obj->timestamp()"
Inherited, see "The header" in Mail::Message
.ie n .IP $obj\->\fBto\fR() 4
.el .IP \f(CW$obj\fR\->\fBto\fR() 4
.IX Item "$obj->to()"
Inherited, see "The header" in Mail::Message
.SS "The body"
.IX Subsection "The body"
Extends "The body" in Mail::Message.
.ie n .IP $obj\->\fBbody\fR($lines|@lines) 4
.el .IP \f(CW$obj\fR\->\fBbody\fR($lines|@lines) 4
.IX Item "$obj->body($lines|@lines)"
Returns an ARRAY of lines, representing the body.  With arguments, a
new body will be created.  In Mail::Internet, the body is not an
object but a simple array.
.Sp
BE WARNED: this overrules the \fBMail::Message::body()\fR method, which
may cause some confusion.  Use \fBbodyObject()\fR to get access to that
body's data.
.ie n .IP "$obj\->\fBbodyObject\fR( [$body] )" 4
.el .IP "\f(CW$obj\fR\->\fBbodyObject\fR( [$body] )" 4
.IX Item "$obj->bodyObject( [$body] )"
Calls \fBMail::Message::body()\fR, because that \f(CW\*(C`body\*(C'\fR method is overruled
by the one which has a Mail::Internet compatible interface.
.ie n .IP $obj\->\fBcontentType\fR() 4
.el .IP \f(CW$obj\fR\->\fBcontentType\fR() 4
.IX Item "$obj->contentType()"
Inherited, see "The body" in Mail::Message
.ie n .IP $obj\->\fBdecoded\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBdecoded\fR(%options) 4
.IX Item "$obj->decoded(%options)"
Inherited, see "The body" in Mail::Message
.ie n .IP $obj\->\fBencode\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBencode\fR(%options) 4
.IX Item "$obj->encode(%options)"
Inherited, see "The body" in Mail::Message
.ie n .IP $obj\->\fBisMultipart\fR() 4
.el .IP \f(CW$obj\fR\->\fBisMultipart\fR() 4
.IX Item "$obj->isMultipart()"
Inherited, see "The body" in Mail::Message
.ie n .IP $obj\->\fBisNested\fR() 4
.el .IP \f(CW$obj\fR\->\fBisNested\fR() 4
.IX Item "$obj->isNested()"
Inherited, see "The body" in Mail::Message
.ie n .IP "$obj\->\fBparts\fR( [<'ALL'|'ACTIVE'|'DELETED'|'RECURSE'|$filter>] )" 4
.el .IP "\f(CW$obj\fR\->\fBparts\fR( [<'ALL'|'ACTIVE'|'DELETED'|'RECURSE'|$filter>] )" 4
.IX Item "$obj->parts( [<'ALL'|'ACTIVE'|'DELETED'|'RECURSE'|$filter>] )"
Inherited, see "The body" in Mail::Message
.ie n .IP "$obj\->\fBprint_body\fR( [$fh] )" 4
.el .IP "\f(CW$obj\fR\->\fBprint_body\fR( [$fh] )" 4
.IX Item "$obj->print_body( [$fh] )"
Prints the body to the specified \f(CW$fh\fR, which defaults to STDOUT.  This
calls \fBMail::Message::Body::print()\fR.
.ie n .IP "$obj\->\fBremove_sig\fR( [$nrlines] )" 4
.el .IP "\f(CW$obj\fR\->\fBremove_sig\fR( [$nrlines] )" 4
.IX Item "$obj->remove_sig( [$nrlines] )"
Remove the signature of a message with a maximum of \f(CW$nrlines\fR lines, which
defaults to 10.  The work is done on the decoded body content, by
\&\fBMail::Message::Body::stripSignature()\fR.
.ie n .IP $obj\->\fBsmtpsend\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBsmtpsend\fR(%options) 4
.IX Item "$obj->smtpsend(%options)"
This method is calling \fBMail::Message::send()\fR via \f(CW\*(C`smtp\*(C'\fR, which is
implemented in Mail::Transport::SMTP.  The implementation is
slightly different, so this method is not 100% compliant.
.Sp
.Vb 6
\& \-Option  \-\-Default
\&  Debug     <false>
\&  Hello     <helo_domain from Net::Config>
\&  Host      $ENV{SMTPHOSTS} or from Net::Config
\&  MailFrom  $ENV{MAILADDRESS} or $ENV{USER}
\&  Port      25
.Ve
.RS 4
.IP "Debug => BOOLEAN" 2
.IX Item "Debug => BOOLEAN"
.PD 0
.IP "Hello => STRING" 2
.IX Item "Hello => STRING"
.IP "Host => HOSTNAME" 2
.IX Item "Host => HOSTNAME"
.PD
Only the first detected HOSTNAME is taken, so differs from the original
implementation.
.IP "MailFrom => STRING" 2
.IX Item "MailFrom => STRING"
Your e\-mail address.  This simulated Mail::Internet object does not
try to create an e\-mail address from the sendmail configuration file,
because that is generally a bad idea in environments with virtual hosts,
as we have now-adays.
.IP "Port => INTEGER" 2
.IX Item "Port => INTEGER"
.RE
.RS 4
.RE
.PD 0
.ie n .IP $obj\->\fBtidy_body\fR() 4
.el .IP \f(CW$obj\fR\->\fBtidy_body\fR() 4
.IX Item "$obj->tidy_body()"
.PD
Removes blank lines from begin and end of the body.
.SS Flags
.IX Subsection "Flags"
Extends "Flags" in Mail::Message.
.ie n .IP "$obj\->\fBdeleted\fR( [BOOLEAN] )" 4
.el .IP "\f(CW$obj\fR\->\fBdeleted\fR( [BOOLEAN] )" 4
.IX Item "$obj->deleted( [BOOLEAN] )"
Inherited, see "Flags" in Mail::Message
.ie n .IP $obj\->\fBisDeleted\fR() 4
.el .IP \f(CW$obj\fR\->\fBisDeleted\fR() 4
.IX Item "$obj->isDeleted()"
Inherited, see "Flags" in Mail::Message
.ie n .IP $obj\->\fBisModified\fR() 4
.el .IP \f(CW$obj\fR\->\fBisModified\fR() 4
.IX Item "$obj->isModified()"
Inherited, see "Flags" in Mail::Message
.ie n .IP $obj\->\fBlabel\fR($label|PAIRS) 4
.el .IP \f(CW$obj\fR\->\fBlabel\fR($label|PAIRS) 4
.IX Item "$obj->label($label|PAIRS)"
Inherited, see "Flags" in Mail::Message
.ie n .IP $obj\->\fBlabels\fR() 4
.el .IP \f(CW$obj\fR\->\fBlabels\fR() 4
.IX Item "$obj->labels()"
Inherited, see "Flags" in Mail::Message
.ie n .IP $obj\->\fBlabelsToStatus\fR() 4
.el .IP \f(CW$obj\fR\->\fBlabelsToStatus\fR() 4
.IX Item "$obj->labelsToStatus()"
Inherited, see "Flags" in Mail::Message
.ie n .IP "$obj\->\fBmodified\fR( [BOOLEAN] )" 4
.el .IP "\f(CW$obj\fR\->\fBmodified\fR( [BOOLEAN] )" 4
.IX Item "$obj->modified( [BOOLEAN] )"
Inherited, see "Flags" in Mail::Message
.ie n .IP $obj\->\fBstatusToLabels\fR() 4
.el .IP \f(CW$obj\fR\->\fBstatusToLabels\fR() 4
.IX Item "$obj->statusToLabels()"
Inherited, see "Flags" in Mail::Message
.SS "The whole message as text"
.IX Subsection "The whole message as text"
Extends "The whole message as text" in Mail::Message.
.ie n .IP $obj\->\fBas_mbox_string\fR() 4
.el .IP \f(CW$obj\fR\->\fBas_mbox_string\fR() 4
.IX Item "$obj->as_mbox_string()"
Returns the whole message as one string, which can be included in an
MBOX folder (while not using Mail::Box::Mbox).  Lines in the body
which start with \f(CW\*(C`From \*(C'\fR are escaped with an >.
.ie n .IP $obj\->\fBfile\fR() 4
.el .IP \f(CW$obj\fR\->\fBfile\fR() 4
.IX Item "$obj->file()"
Inherited, see "The whole message as text" in Mail::Message::Construct::Text
.ie n .IP $obj\->\fBlines\fR() 4
.el .IP \f(CW$obj\fR\->\fBlines\fR() 4
.IX Item "$obj->lines()"
Inherited, see "The whole message as text" in Mail::Message::Construct::Text
.ie n .IP "$obj\->\fBprintStructure\fR( [$fh|undef],[$indent] )" 4
.el .IP "\f(CW$obj\fR\->\fBprintStructure\fR( [$fh|undef],[$indent] )" 4
.IX Item "$obj->printStructure( [$fh|undef],[$indent] )"
Inherited, see "The whole message as text" in Mail::Message::Construct::Text
.ie n .IP $obj\->\fBstring\fR() 4
.el .IP \f(CW$obj\fR\->\fBstring\fR() 4
.IX Item "$obj->string()"
Inherited, see "The whole message as text" in Mail::Message::Construct::Text
.SS "The nasty bits"
.IX Subsection "The nasty bits"
.ie n .IP $obj\->\fBisa\fR($class) 4
.el .IP \f(CW$obj\fR\->\fBisa\fR($class) 4
.IX Item "$obj->isa($class)"
.PD 0
.IP Mail::Message::Replace::MailInternet\->\fBisa\fR($class) 4
.IX Item "Mail::Message::Replace::MailInternet->isa($class)"
.PD
Of course, the \f(CWisa()\fR class inheritance check should not see our
nasty trick.
.SS Internals
.IX Subsection "Internals"
Extends "Internals" in Mail::Message.
.ie n .IP $obj\->\fBclonedFrom\fR() 4
.el .IP \f(CW$obj\fR\->\fBclonedFrom\fR() 4
.IX Item "$obj->clonedFrom()"
Inherited, see "Internals" in Mail::Message
.IP Mail::Message::Replace::MailInternet\->\fBcoerce\fR($message) 4
.IX Item "Mail::Message::Replace::MailInternet->coerce($message)"
Coerce (adapt type) of the specified \f(CW$message\fR (anything
\&\fBMail::Message::coerce()\fR accepts) into an Mail::Internet simulating
object.
.ie n .IP $obj\->\fBisDelayed\fR() 4
.el .IP \f(CW$obj\fR\->\fBisDelayed\fR() 4
.IX Item "$obj->isDelayed()"
Inherited, see "Internals" in Mail::Message
.ie n .IP "$obj\->\fBreadBody\fR( $parser, $head, [$bodytype] )" 4
.el .IP "\f(CW$obj\fR\->\fBreadBody\fR( \f(CW$parser\fR, \f(CW$head\fR, [$bodytype] )" 4
.IX Item "$obj->readBody( $parser, $head, [$bodytype] )"
Inherited, see "Internals" in Mail::Message
.ie n .IP "$obj\->\fBreadFromParser\fR( $parser, [$bodytype] )" 4
.el .IP "\f(CW$obj\fR\->\fBreadFromParser\fR( \f(CW$parser\fR, [$bodytype] )" 4
.IX Item "$obj->readFromParser( $parser, [$bodytype] )"
Inherited, see "Internals" in Mail::Message
.ie n .IP "$obj\->\fBreadHead\fR( $parser, [$class] )" 4
.el .IP "\f(CW$obj\fR\->\fBreadHead\fR( \f(CW$parser\fR, [$class] )" 4
.IX Item "$obj->readHead( $parser, [$class] )"
Inherited, see "Internals" in Mail::Message
.ie n .IP "$obj\->\fBrecursiveRebuildPart\fR($part, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBrecursiveRebuildPart\fR($part, \f(CW%options\fR)" 4
.IX Item "$obj->recursiveRebuildPart($part, %options)"
Inherited, see "Internals" in Mail::Message::Construct::Rebuild
.ie n .IP $obj\->\fBstoreBody\fR($body) 4
.el .IP \f(CW$obj\fR\->\fBstoreBody\fR($body) 4
.IX Item "$obj->storeBody($body)"
Inherited, see "Internals" in Mail::Message
.ie n .IP "$obj\->\fBtakeMessageId\fR( [STRING] )" 4
.el .IP "\f(CW$obj\fR\->\fBtakeMessageId\fR( [STRING] )" 4
.IX Item "$obj->takeMessageId( [STRING] )"
Inherited, see "Internals" in Mail::Message
.SS "Error handling"
.IX Subsection "Error handling"
Extends "Error handling" in Mail::Message.
.ie n .IP $obj\->\fBAUTOLOAD\fR() 4
.el .IP \f(CW$obj\fR\->\fBAUTOLOAD\fR() 4
.IX Item "$obj->AUTOLOAD()"
Inherited, see "METHODS" in Mail::Message::Construct
.ie n .IP $obj\->\fBaddReport\fR($object) 4
.el .IP \f(CW$obj\fR\->\fBaddReport\fR($object) 4
.IX Item "$obj->addReport($object)"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "$obj->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD 0
.ie n .IP "Mail::Message::Replace::MailInternet\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "Mail::Message::Replace::MailInternet\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "Mail::Message::Replace::MailInternet->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBerrors\fR() 4
.el .IP \f(CW$obj\fR\->\fBerrors\fR() 4
.IX Item "$obj->errors()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR( [$level, [$strings]] )" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "$obj->log( [$level, [$strings]] )"
.PD 0
.IP "Mail::Message::Replace::MailInternet\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "Mail::Message::Replace::MailInternet->log( [$level, [$strings]] )"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBlogPriority\fR($level) 4
.el .IP \f(CW$obj\fR\->\fBlogPriority\fR($level) 4
.IX Item "$obj->logPriority($level)"
.PD 0
.IP Mail::Message::Replace::MailInternet\->\fBlogPriority\fR($level) 4
.IX Item "Mail::Message::Replace::MailInternet->logPriority($level)"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBlogSettings\fR() 4
.el .IP \f(CW$obj\fR\->\fBlogSettings\fR() 4
.IX Item "$obj->logSettings()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBnotImplemented\fR() 4
.el .IP \f(CW$obj\fR\->\fBnotImplemented\fR() 4
.IX Item "$obj->notImplemented()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR( [$level] )" 4
.IX Item "$obj->report( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR( [$level] )" 4
.IX Item "$obj->reportAll( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBshortSize\fR( [$value] )" 4
.el .IP "\f(CW$obj\fR\->\fBshortSize\fR( [$value] )" 4
.IX Item "$obj->shortSize( [$value] )"
.PD 0
.IP "Mail::Message::Replace::MailInternet\->\fBshortSize\fR( [$value] )" 4
.IX Item "Mail::Message::Replace::MailInternet->shortSize( [$value] )"
.PD
Inherited, see "Error handling" in Mail::Message
.ie n .IP $obj\->\fBshortString\fR() 4
.el .IP \f(CW$obj\fR\->\fBshortString\fR() 4
.IX Item "$obj->shortString()"
Inherited, see "Error handling" in Mail::Message
.ie n .IP "$obj\->\fBtrace\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR( [$level] )" 4
.IX Item "$obj->trace( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBwarnings\fR() 4
.el .IP \f(CW$obj\fR\->\fBwarnings\fR() 4
.IX Item "$obj->warnings()"
Inherited, see "Error handling" in Mail::Reporter
.SS Cleanup
.IX Subsection "Cleanup"
Extends "Cleanup" in Mail::Message.
.ie n .IP $obj\->\fBDESTROY\fR() 4
.el .IP \f(CW$obj\fR\->\fBDESTROY\fR() 4
.IX Item "$obj->DESTROY()"
Inherited, see "Cleanup" in Mail::Reporter
.ie n .IP $obj\->\fBdestruct\fR() 4
.el .IP \f(CW$obj\fR\->\fBdestruct\fR() 4
.IX Item "$obj->destruct()"
Inherited, see "Cleanup" in Mail::Message
.SH DETAILS
.IX Header "DETAILS"
Extends "DETAILS" in Mail::Message.
.SH DIAGNOSTICS
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Cannot include forward source as $include." 4
.el .IP "Error: Cannot include forward source as \f(CW$include\fR." 4
.IX Item "Error: Cannot include forward source as $include."
Unknown alternative for the forward(include).  Valid choices are
\&\f(CW\*(C`NO\*(C'\fR, \f(CW\*(C`INLINE\*(C'\fR, \f(CW\*(C`ATTACH\*(C'\fR, and \f(CW\*(C`ENCAPSULATE\*(C'\fR.
.IP "Error: Mail::Internet does not support this kind of data" 4
.IX Item "Error: Mail::Internet does not support this kind of data"
The ARGS data can only be a file handle or an ARRAY.  Other data types
are not supported (see \fBread()\fR if you want to have more).
.IP "Error: Method bounce requires To, Cc, or Bcc" 4
.IX Item "Error: Method bounce requires To, Cc, or Bcc"
The message \fBbounce()\fR method forwards a received message off to someone
else without modification; you must specified it's new destination.
If you have the urge not to specify any destination, you probably
are looking for \fBreply()\fR. When you wish to modify the content, use
\&\fBforward()\fR.
.IP "Error: Method forwardAttach requires a preamble" 4
.IX Item "Error: Method forwardAttach requires a preamble"
.PD 0
.IP "Error: Method forwardEncapsulate requires a preamble" 4
.IX Item "Error: Method forwardEncapsulate requires a preamble"
.IP "Error: No address to create forwarded to." 4
.IX Item "Error: No address to create forwarded to."
.PD
If a forward message is created, a destination address must be specified.
.ie n .IP "Error: No rebuild rule $name defined." 4
.el .IP "Error: No rebuild rule \f(CW$name\fR defined." 4
.IX Item "Error: No rebuild rule $name defined."
.PD 0
.IP "Error: Only \fBbuild()\fR Mail::Message's; they are not in a folder yet" 4
.IX Item "Error: Only build() Mail::Message's; they are not in a folder yet"
.PD
You may wish to construct a message to be stored in a some kind
of folder, but you need to do that in two steps.  First, create a
normal Mail::Message, and then add it to the folder.  During this
\&\fBMail::Box::addMessage()\fR process, the message will get \fBcoerce()\fR\-d
into the right message type, adding storage information and the like.
.ie n .IP "Error: Package $package does not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR does not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package does not implement $method."
Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Message distribution version 3.015,
built on December 11, 2023. Website: \fIhttp://perl.overmeer.net/CPAN/\fR
.SH LICENSE
.IX Header "LICENSE"
Copyrights 2001\-2023 by [Mark Overmeer <markov@cpan.org>]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://dev.perl.org/licenses/\fR
