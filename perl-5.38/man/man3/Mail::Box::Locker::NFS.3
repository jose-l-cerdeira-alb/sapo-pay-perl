.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Box::Locker::NFS 3"
.TH Mail::Box::Locker::NFS 3 2023-07-18 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Mail::Box::Locker::NFS \- lock a folder with a separate file, NFS\-safe
.SH INHERITANCE
.IX Header "INHERITANCE"
.Vb 3
\& Mail::Box::Locker::NFS
\&   is a Mail::Box::Locker
\&   is a Mail::Reporter
.Ve
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\& See Mail::Box::Locker
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Like the \f(CW\*(C`::DotLock\*(C'\fR locker, but then in an NFS-safe fashion.  Over NFS,
the creation of a file is not atomic.  The \f(CW\*(C`::DotLock\*(C'\fR locker depends
on an atomic \f(CW\*(C`open\*(C'\fR system call, hence in not usable to lock a folder
which accessed over NFS.  The \f(CW\*(C`::NFS\*(C'\fR
locker is therefore more complicated (so therefore slower), but will work
for NFS \-\-and for local disks as well.
.PP
Extends "DESCRIPTION" in Mail::Box::Locker.
.SH METHODS
.IX Header "METHODS"
Extends "METHODS" in Mail::Box::Locker.
.SS Constructors
.IX Subsection "Constructors"
Extends "Constructors" in Mail::Box::Locker.
.IP Mail::Box::Locker::NFS\->\fBnew\fR(%options) 4
.IX Item "Mail::Box::Locker::NFS->new(%options)"
.Vb 8
\& \-Option \-\-Defined in       \-\-Default
\&  expires  Mail::Box::Locker  1 hour
\&  file     Mail::Box::Locker  undef
\&  folder   Mail::Box::Locker  <undef>
\&  log      Mail::Reporter     \*(AqWARNINGS\*(Aq
\&  method   Mail::Box::Locker  \*(AqNFS\*(Aq
\&  timeout  Mail::Box::Locker  10
\&  trace    Mail::Reporter     \*(AqWARNINGS\*(Aq
.Ve
.RS 4
.IP "expires => SECONDS" 2
.IX Item "expires => SECONDS"
.PD 0
.IP "file => FILENAME" 2
.IX Item "file => FILENAME"
.IP "folder => FOLDER" 2
.IX Item "folder => FOLDER"
.IP "log => LEVEL" 2
.IX Item "log => LEVEL"
.IP "method => STRING|CLASS|ARRAY" 2
.IX Item "method => STRING|CLASS|ARRAY"
.IP "timeout => SECONDS|'NOTIMEOUT'" 2
.IX Item "timeout => SECONDS|'NOTIMEOUT'"
.IP "trace => LEVEL" 2
.IX Item "trace => LEVEL"
.RE
.RS 4
.RE
.PD
.SS Attributes
.IX Subsection "Attributes"
Extends "Attributes" in Mail::Box::Locker.
.ie n .IP "$obj\->\fBexpires\fR( [SECONDS] )" 4
.el .IP "\f(CW$obj\fR\->\fBexpires\fR( [SECONDS] )" 4
.IX Item "$obj->expires( [SECONDS] )"
Inherited, see "Attributes" in Mail::Box::Locker
.ie n .IP "$obj\->\fBtimeout\fR( [SECONDS] )" 4
.el .IP "\f(CW$obj\fR\->\fBtimeout\fR( [SECONDS] )" 4
.IX Item "$obj->timeout( [SECONDS] )"
Inherited, see "Attributes" in Mail::Box::Locker
.SS "The Locker"
.IX Subsection "The Locker"
Extends "The Locker" in Mail::Box::Locker.
.ie n .IP "$obj\->\fBfilename\fR( [$filename] )" 4
.el .IP "\f(CW$obj\fR\->\fBfilename\fR( [$filename] )" 4
.IX Item "$obj->filename( [$filename] )"
Inherited, see "The Locker" in Mail::Box::Locker
.ie n .IP "$obj\->\fBfolder\fR( [$folder] )" 4
.el .IP "\f(CW$obj\fR\->\fBfolder\fR( [$folder] )" 4
.IX Item "$obj->folder( [$folder] )"
Inherited, see "The Locker" in Mail::Box::Locker
.ie n .IP $obj\->\fBname\fR() 4
.el .IP \f(CW$obj\fR\->\fBname\fR() 4
.IX Item "$obj->name()"
Inherited, see "The Locker" in Mail::Box::Locker
.SS Locking
.IX Subsection "Locking"
Extends "Locking" in Mail::Box::Locker.
.ie n .IP $obj\->\fBhasLock\fR() 4
.el .IP \f(CW$obj\fR\->\fBhasLock\fR() 4
.IX Item "$obj->hasLock()"
Inherited, see "Locking" in Mail::Box::Locker
.ie n .IP $obj\->\fBisLocked\fR() 4
.el .IP \f(CW$obj\fR\->\fBisLocked\fR() 4
.IX Item "$obj->isLocked()"
Inherited, see "Locking" in Mail::Box::Locker
.ie n .IP $obj\->\fBlock\fR() 4
.el .IP \f(CW$obj\fR\->\fBlock\fR() 4
.IX Item "$obj->lock()"
.PD 0
.ie n .IP $obj\->\fBunlock\fR() 4
.el .IP \f(CW$obj\fR\->\fBunlock\fR() 4
.IX Item "$obj->unlock()"
.PD
Inherited, see "Locking" in Mail::Box::Locker
.SS "Error handling"
.IX Subsection "Error handling"
Extends "Error handling" in Mail::Box::Locker.
.ie n .IP $obj\->\fBAUTOLOAD\fR() 4
.el .IP \f(CW$obj\fR\->\fBAUTOLOAD\fR() 4
.IX Item "$obj->AUTOLOAD()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBaddReport\fR($object) 4
.el .IP \f(CW$obj\fR\->\fBaddReport\fR($object) 4
.IX Item "$obj->addReport($object)"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "$obj->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD 0
.ie n .IP "Mail::Box::Locker::NFS\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "Mail::Box::Locker::NFS\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "Mail::Box::Locker::NFS->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBerrors\fR() 4
.el .IP \f(CW$obj\fR\->\fBerrors\fR() 4
.IX Item "$obj->errors()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR( [$level, [$strings]] )" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "$obj->log( [$level, [$strings]] )"
.PD 0
.IP "Mail::Box::Locker::NFS\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "Mail::Box::Locker::NFS->log( [$level, [$strings]] )"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBlogPriority\fR($level) 4
.el .IP \f(CW$obj\fR\->\fBlogPriority\fR($level) 4
.IX Item "$obj->logPriority($level)"
.PD 0
.IP Mail::Box::Locker::NFS\->\fBlogPriority\fR($level) 4
.IX Item "Mail::Box::Locker::NFS->logPriority($level)"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBlogSettings\fR() 4
.el .IP \f(CW$obj\fR\->\fBlogSettings\fR() 4
.IX Item "$obj->logSettings()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBnotImplemented\fR() 4
.el .IP \f(CW$obj\fR\->\fBnotImplemented\fR() 4
.IX Item "$obj->notImplemented()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR( [$level] )" 4
.IX Item "$obj->report( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR( [$level] )" 4
.IX Item "$obj->reportAll( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR( [$level] )" 4
.IX Item "$obj->trace( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBwarnings\fR() 4
.el .IP \f(CW$obj\fR\->\fBwarnings\fR() 4
.IX Item "$obj->warnings()"
Inherited, see "Error handling" in Mail::Reporter
.SS Cleanup
.IX Subsection "Cleanup"
Extends "Cleanup" in Mail::Box::Locker.
.ie n .IP $obj\->\fBDESTROY\fR() 4
.el .IP \f(CW$obj\fR\->\fBDESTROY\fR() 4
.IX Item "$obj->DESTROY()"
Inherited, see "Cleanup" in Mail::Box::Locker
.SH DIAGNOSTICS
.IX Header "DIAGNOSTICS"
.ie n .IP "Warning: Folder $folder already locked over nfs" 4
.el .IP "Warning: Folder \f(CW$folder\fR already locked over nfs" 4
.IX Item "Warning: Folder $folder already locked over nfs"
Do not try to lock the folder when the application already has the
lock: it will give you dead-locks.
.ie n .IP "Error: Package $package does not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR does not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package does not implement $method."
Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.
.ie n .IP "Warning: Removed expired lockfile $filename." 4
.el .IP "Warning: Removed expired lockfile \f(CW$filename\fR." 4
.IX Item "Warning: Removed expired lockfile $filename."
A lock file was found which was older than the expiration period as
specified with new(timeout).  The lock file was successfully
removed.
.ie n .IP "Error: Unable to remove expired lockfile $lockfile: $!" 4
.el .IP "Error: Unable to remove expired lockfile \f(CW$lockfile:\fR $!" 4
.IX Item "Error: Unable to remove expired lockfile $lockfile: $!"
A lock file was found which was older than the expiration period as
specified with the new(timeout) option.  It is impossible to remove that
lock file, so we need to wait until it vanishes by some external cause.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 3.010,
built on July 18, 2023. Website: \fIhttp://perl.overmeer.net/CPAN/\fR
.SH LICENSE
.IX Header "LICENSE"
Copyrights 2001\-2023 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://dev.perl.org/licenses/\fR
