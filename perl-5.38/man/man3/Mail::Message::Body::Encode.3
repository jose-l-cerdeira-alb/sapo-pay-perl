.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Message::Body::Encode 3"
.TH Mail::Message::Body::Encode 3 2023-12-11 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Mail::Message::Body::Encode \- organize general message encodings
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 4
\& my Mail::Message $msg = ...;
\& my $decoded = $msg\->decoded;
\& my $encoded = $msg\->encode(mime_type => \*(Aqimage/gif\*(Aq,
\&     transfer_encoding => \*(Aqbase64\*(Aq);
\&
\& my $body = $msg\->body;
\& my $decoded = $body\->decoded;
\& my $encoded = $body\->encode(transfer_encoding => \*(Aq7bit\*(Aq);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Manages the message's body encodings and decodings on request of the
main program.  This package adds functionality to the Mail::Message::Body
class when the \fBdecoded()\fR or \fBencode()\fR method is called.
.PP
Four types of encodings are handled (in the right order)
.IP \(bu 4
eol encoding
.Sp
Various operating systems have different ideas about how to encode the
line termination.  UNIX uses a LF character, MacOS uses a CR, and
Windows uses a CR/LF combination.  Messages which are transported over
Internet will always use the CRLF separator.
.IP \(bu 4
transfer encoding
.Sp
Messages transmitted over Internet have to be plain ASCII.  Complicated
characters and binary files (like images and archives) must be encoded
during transmission to an ASCII representation.
.Sp
The implementation of the required encoders and decoders is found in
the Mail::Message::TransferEnc set of packages.  The related
manual page lists the transfer encodings which are supported.
.IP \(bu 4
mime-type translation
.Sp
NOT IMPLEMENTED YET
.IP \(bu 4
charset conversion
.SH METHODS
.IX Header "METHODS"
.SS "Constructing a body"
.IX Subsection "Constructing a body"
.ie n .IP $obj\->\fBcharsetDetect\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBcharsetDetect\fR(%options) 4
.IX Item "$obj->charsetDetect(%options)"
[3.013] This is tricky.  It is hard to detect whether the body originates from the
program, or from an external source.  And what about a database database?
are those octets or strings?
Please read "Autodetection of character-set" in Mail::Message::Body.
.Sp
.Vb 2
\& \-Option  \-\-Default
\&  external  <false>
.Ve
.RS 4
.IP "external => BOOLEAN" 2
.IX Item "external => BOOLEAN"
Do only consider externally valid character-sets, implicitly: \f(CW\*(C`PERL\*(C'\fR is not
an acceptable answer.
.RE
.RS 4
.RE
.IP "Mail::Message::Body\->\fBcharsetDetectAlgorithm\fR( [CODE|undef|METHOD] )" 4
.IX Item "Mail::Message::Body->charsetDetectAlgorithm( [CODE|undef|METHOD] )"
[3.013] When a body object does not specify its character-set, but that
detail is required, then it gets autodetected.  The default algorithm is
implemented in \fBcharsetDetect()\fR.  You may change this default algorithm,
or pass option \f(CW\*(C`charset_detect\*(C'\fR for each call to \fBencode()\fR.
.Sp
When you call this method with an explicit \f(CW\*(C`undef\*(C'\fR, you reset the default.
(Without parameter) the current algorithm (CODE or method name) is
returned.
.ie n .IP $obj\->\fBcheck\fR() 4
.el .IP \f(CW$obj\fR\->\fBcheck\fR() 4
.IX Item "$obj->check()"
Check the content of the body not to include illegal characters.  Which
characters are considered illegal depends on the encoding of this body.
.Sp
A body is returned which is checked.  This may be the body where this
method is called upon, but also a new object, when serious changes had
to be made.  If the check could not be made, because the decoder is not
defined, then \f(CW\*(C`undef\*(C'\fR is returned.
.ie n .IP $obj\->\fBencode\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBencode\fR(%options) 4
.IX Item "$obj->encode(%options)"
Encode (translate) a Mail::Message::Body into a different format.
See the DESCRIPTION above.  Options which are not specified will not trigger
conversions.
.Sp
.Vb 6
\& \-Option           \-\-Default
\&  charset            PERL
\&  charset_detect     <built\-in>
\&  mime_type          undef
\&  result_type        <same as source>
\&  transfer_encoding  undef
.Ve
.RS 4
.IP "charset => CHARSET|'PERL'" 2
.IX Item "charset => CHARSET|'PERL'"
Only applies when the mime_type is textual.
.Sp
If the CHARSET is explicitly specified (for instance \f(CW\*(C`iso\-8859\-10\*(C'\fR, then
the data is being interpreted as raw bytes (blob), not as text.  However, in
case of \f(CW\*(C`PERL\*(C'\fR, it is considered to be an internal representation of
characters (either latin1 or Perl's utf8 \-\-not the same as utf\-8\-\-, you should
not want to know).
.Sp
This setting overrules the charset attribute in the mime_type FIELD.
.IP "charset_detect => CODE" 2
.IX Item "charset_detect => CODE"
[3.013] When the body does not contain an explicit charset specification,
then the RFC says it is \f(CW\*(C`us\-ascii\*(C'\fR.  In reality, this is not true:
it is just an unknown character set. This often happens when text files
are included as attachment, for instance a footer attachment.
.Sp
When you want to be smarter than the default charset detector, you can
provide your own function for this parameter.  The function will get
the transfer-decoded version of this body.  You can change the default
globally via \fBcharsetDetectAlgorithm()\fR.
.IP "mime_type => STRING|FIELD" 2
.IX Item "mime_type => STRING|FIELD"
Convert into the specified mime type, which can be specified as STRING
or FIELD.  The FIELD is a Mail::Message::Field\-object, representing a
\&\f(CW\*(C`Content\-Type\*(C'\fR mime header.  The STRING must be valid content for such
header, and will be converted into a FIELD object.
.Sp
The FIELD may contain attributes.  Usually, it has a \f(CW\*(C`charset\*(C'\fR attribute,
which explains the CHARSET of the content after content transfer decoding.
The \f(CW\*(C`charset\*(C'\fR option will update/add this attribute.  Otherwise (hopefully
in rare cases) the CHARSET will be auto-detected when the body gets
decoded.
.IP "result_type => CLASS" 2
.IX Item "result_type => CLASS"
The type of body to be created when the body is changed to fulfill the request
on re-coding.  Also the intermediate stages in the translation process (if
needed) will use this type. CLASS must extend Mail::Message::Body.
.IP "transfer_encoding => STRING|FIELD" 2
.IX Item "transfer_encoding => STRING|FIELD"
.RE
.RS 4
.RE
.PD 0
.ie n .IP $obj\->\fBencoded\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBencoded\fR(%options) 4
.IX Item "$obj->encoded(%options)"
.PD
Encode the body to a format what is acceptable to transmit or write to
a folder file.  This returns the body where this method was called
upon when everything was already prepared, or a new encoded body
otherwise.  In either case, the body is checked.
.Sp
.Vb 2
\& \-Option        \-\-Default
\&  charset_detect  <the default>
.Ve
.RS 4
.IP "charset_detect => CODE" 2
.IX Item "charset_detect => CODE"
See \fBcharsetDetectAlgorithm()\fR.
.RE
.RS 4
.RE
.ie n .IP $obj\->\fBunify\fR($body) 4
.el .IP \f(CW$obj\fR\->\fBunify\fR($body) 4
.IX Item "$obj->unify($body)"
Unify the type of the given \f(CW$body\fR objects with the type of the called
body.  \f(CW\*(C`undef\*(C'\fR is returned when unification is impossible.  If the
bodies have the same settings, the \f(CW$body\fR object is returned unchanged.
.Sp
Examples:
.Sp
.Vb 3
\& my $bodytype = Mail::Message::Body::Lines;
\& my $html  = $bodytype\->new(mime_type=>\*(Aqtext/html\*(Aq, data => []);
\& my $plain = $bodytype\->new(mime_type=>\*(Aqtext/plain\*(Aq, ...);
\&
\& my $unified = $html\->unify($plain);
\& # $unified is the data of plain translated to html (if possible).
.Ve
.SS "About the payload"
.IX Subsection "About the payload"
.ie n .IP "$obj\->\fBdispositionFilename\fR( [$directory] )" 4
.el .IP "\f(CW$obj\fR\->\fBdispositionFilename\fR( [$directory] )" 4
.IX Item "$obj->dispositionFilename( [$directory] )"
Various fields are searched for \f(CW\*(C`filename\*(C'\fR and \f(CW\*(C`name\*(C'\fR attributes.  Without
\&\f(CW$directory\fR, the name found will be returned unmodified.
.Sp
When a \f(CW$directory\fR is given, a filename is composed.  For security reasons,
only the basename of the found name gets used and many potentially
dangerous characters removed.  If no name was found, or when the found
name is already in use, then an unique name is generated.
.Sp
Don't forget to read RFC6266 section 4.3 for the security aspects in your
email application.
.ie n .IP $obj\->\fBisBinary\fR() 4
.el .IP \f(CW$obj\fR\->\fBisBinary\fR() 4
.IX Item "$obj->isBinary()"
Returns true when the un-encoded message is binary data.  This information
is retrieved from knowledge provided by MIME::Types.
.ie n .IP $obj\->\fBisText\fR() 4
.el .IP \f(CW$obj\fR\->\fBisText\fR() 4
.IX Item "$obj->isText()"
Returns true when the un-encoded message contains printable
text.
.SS Internals
.IX Subsection "Internals"
.ie n .IP "$obj\->\fBaddTransferEncHandler\fR( $name, <$class|$object> )" 4
.el .IP "\f(CW$obj\fR\->\fBaddTransferEncHandler\fR( \f(CW$name\fR, <$class|$object> )" 4
.IX Item "$obj->addTransferEncHandler( $name, <$class|$object> )"
.PD 0
.ie n .IP "Mail::Message::Body\->\fBaddTransferEncHandler\fR( $name, <$class|$object> )" 4
.el .IP "Mail::Message::Body\->\fBaddTransferEncHandler\fR( \f(CW$name\fR, <$class|$object> )" 4
.IX Item "Mail::Message::Body->addTransferEncHandler( $name, <$class|$object> )"
.PD
Relate the NAMEd transfer encoding to an OBJECTs or object of the specified
\&\f(CW$class\fR.  In the latter case, an object of that \f(CW$class\fR will be created on the
moment that one is needed to do encoding or decoding.
.Sp
The \f(CW$class\fR or \f(CW$object\fR must extend Mail::Message::TransferEnc.  It will
replace existing class and object for this \f(CW$name\fR.
.Sp
Why aren't you contributing this class to MailBox?
.ie n .IP $obj\->\fBgetTransferEncHandler\fR($type) 4
.el .IP \f(CW$obj\fR\->\fBgetTransferEncHandler\fR($type) 4
.IX Item "$obj->getTransferEncHandler($type)"
Get the transfer encoder/decoder which is able to handle \f(CW$type\fR, or return
undef if there is no such handler.
.SH DIAGNOSTICS
.IX Header "DIAGNOSTICS"
.ie n .IP "Warning: Charset $name is not known" 4
.el .IP "Warning: Charset \f(CW$name\fR is not known" 4
.IX Item "Warning: Charset $name is not known"
The encoding or decoding of a message body encounters a character set which
is not understood by Perl's Encode module.
.ie n .IP "Warning: No decoder defined for transfer encoding $name." 4
.el .IP "Warning: No decoder defined for transfer encoding \f(CW$name\fR." 4
.IX Item "Warning: No decoder defined for transfer encoding $name."
The data (message body) is encoded in a way which is not currently understood,
therefore no decoding (or recoding) can take place.
.ie n .IP "Warning: No encoder defined for transfer encoding $name." 4
.el .IP "Warning: No encoder defined for transfer encoding \f(CW$name\fR." 4
.IX Item "Warning: No encoder defined for transfer encoding $name."
The data (message body) has been decoded, but the required encoding is
unknown.  The decoded data is returned.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Message distribution version 3.015,
built on December 11, 2023. Website: \fIhttp://perl.overmeer.net/CPAN/\fR
.SH LICENSE
.IX Header "LICENSE"
Copyrights 2001\-2023 by [Mark Overmeer <markov@cpan.org>]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://dev.perl.org/licenses/\fR
