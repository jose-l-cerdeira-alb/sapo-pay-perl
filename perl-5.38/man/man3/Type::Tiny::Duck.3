.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Type::Tiny::Duck 3"
.TH Type::Tiny::Duck 3 2023-04-05 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Type::Tiny::Duck \- type constraints based on the "can" method
.SH SYNOPSIS
.IX Header "SYNOPSIS"
Using via Types::Standard:
.PP
.Vb 3
\&  package Logger {
\&    use Moo;
\&    use Types::Standard qw( HasMethods Bool );
\&    
\&    has debugging => ( is => \*(Aqrw\*(Aq, isa => Bool, default => 0 );
\&    has output    => ( is => \*(Aqro\*(Aq, isa => HasMethods[ \*(Aqprint\*(Aq ] );
\&    
\&    sub warn {
\&      my ( $self, $message ) = @_;
\&      $self\->output\->print( "[WARNING] $message\en" );
\&    }
\&    
\&    sub debug {
\&      my ( $self, $message ) = @_;
\&      $self\->output\->print( "[DEBUG] $message\en" ) if $self\->debugging;
\&    }
\&  }
.Ve
.PP
Using Type::Tiny::Duck's export feature:
.PP
.Vb 4
\&  package Logger {
\&    use Moo;
\&    use Types::Standard qw( Bool );
\&    use Type::Tiny::Duck Printable => [ \*(Aqprint\*(Aq ];
\&    
\&    has debugging => ( is => \*(Aqrw\*(Aq, isa => Bool, default => 0 );
\&    has output    => ( is => \*(Aqro\*(Aq, isa => Printable );
\&    
\&    sub warn {
\&      my ( $self, $message ) = @_;
\&      $self\->output\->print( "[WARNING] $message\en" );
\&    }
\&    
\&    sub debug {
\&      my ( $self, $message ) = @_;
\&      $self\->output\->print( "[DEBUG] $message\en" ) if $self\->debugging;
\&    }
\&  }
.Ve
.PP
Using Type::Tiny::Duck's object-oriented interface:
.PP
.Vb 4
\&  package Logger {
\&    use Moo;
\&    use Types::Standard qw( Bool );
\&    use Type::Tiny::Duck;
\&    
\&    my $Printable = Type::Type::Duck\->new(
\&      name    => \*(AqPrintable\*(Aq,
\&      methods => [ \*(Aqprint\*(Aq ],
\&    );
\&    
\&    has debugging => ( is => \*(Aqrw\*(Aq, isa => Bool, default => 0 );
\&    has output    => ( is => \*(Aqro\*(Aq, isa => $Printable );
\&    
\&    sub warn {
\&      my ( $self, $message ) = @_;
\&      $self\->output\->print( "[WARNING] $message\en" );
\&    }
\&    
\&    sub debug {
\&      my ( $self, $message ) = @_;
\&      $self\->output\->print( "[DEBUG] $message\en" ) if $self\->debugging;
\&    }
\&  }
.Ve
.SH STATUS
.IX Header "STATUS"
This module is covered by the
Type-Tiny stability policy.
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Type constraints of the general form \f(CW\*(C`{ $_\->can("method") }\*(C'\fR.
.PP
The name refers to the saying, "If it looks like a duck, swims like a duck,
and quacks like a duck, then it probably is a duck". Duck typing can be
a more flexible way of testing objects than relying on \f(CW\*(C`isa\*(C'\fR, as it allows
people to easily substitute mock objects.
.PP
This package inherits from Type::Tiny; see that for most documentation.
Major differences are listed below:
.SS Attributes
.IX Subsection "Attributes"
.ie n .IP """methods""" 4
.el .IP \f(CWmethods\fR 4
.IX Item "methods"
An arrayref of method names.
.ie n .IP """constraint""" 4
.el .IP \f(CWconstraint\fR 4
.IX Item "constraint"
Unlike Type::Tiny, you \fIcannot\fR pass a constraint coderef to the constructor.
Instead rely on the default.
.ie n .IP """inlined""" 4
.el .IP \f(CWinlined\fR 4
.IX Item "inlined"
Unlike Type::Tiny, you \fIcannot\fR pass an inlining coderef to the constructor.
Instead rely on the default.
.ie n .IP """parent""" 4
.el .IP \f(CWparent\fR 4
.IX Item "parent"
Parent is always \fBTypes::Standard::Object\fR, and cannot be passed to the
constructor.
.SS Methods
.IX Subsection "Methods"
.ie n .IP stringifies_to($constraint) 4
.el .IP \f(CWstringifies_to($constraint)\fR 4
.IX Item "stringifies_to($constraint)"
See Type::Tiny::ConstrainedObject.
.ie n .IP numifies_to($constraint) 4
.el .IP \f(CWnumifies_to($constraint)\fR 4
.IX Item "numifies_to($constraint)"
See Type::Tiny::ConstrainedObject.
.ie n .IP """with_attribute_values($attr1 => $constraint1, ...)""" 4
.el .IP "\f(CWwith_attribute_values($attr1 => $constraint1, ...)\fR" 4
.IX Item "with_attribute_values($attr1 => $constraint1, ...)"
See Type::Tiny::ConstrainedObject.
.SS Exports
.IX Subsection "Exports"
Type::Tiny::Duck can be used as an exporter.
.PP
.Vb 1
\&  use Type::Tiny::Duck HttpClient => [ \*(Aqget\*(Aq, \*(Aqpost\*(Aq ];
.Ve
.PP
This will export the following functions into your namespace:
.ie n .IP """HttpClient""" 4
.el .IP \f(CWHttpClient\fR 4
.IX Item "HttpClient"
.PD 0
.ie n .IP "is_HttpClient( $value )" 4
.el .IP "\f(CWis_HttpClient( $value )\fR" 4
.IX Item "is_HttpClient( $value )"
.ie n .IP "assert_HttpClient( $value )" 4
.el .IP "\f(CWassert_HttpClient( $value )\fR" 4
.IX Item "assert_HttpClient( $value )"
.ie n .IP "to_HttpClient( $value )" 4
.el .IP "\f(CWto_HttpClient( $value )\fR" 4
.IX Item "to_HttpClient( $value )"
.PD
.PP
Multiple types can be exported at once:
.PP
.Vb 4
\&  use Type::Tiny::Duck (
\&    HttpClient   => [ \*(Aqget\*(Aq, \*(Aqpost\*(Aq ],
\&    FtpClient    => [ \*(Aqupload\*(Aq, \*(Aqdownload\*(Aq ],
\&  );
.Ve
.SH BUGS
.IX Header "BUGS"
Please report any bugs to
<https://github.com/tobyink/p5\-type\-tiny/issues>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Type::Tiny::Manual.
.PP
Type::Tiny.
.PP
Moose::Meta::TypeConstraint::DuckType.
.SH AUTHOR
.IX Header "AUTHOR"
Toby Inkster <tobyink@cpan.org>.
.SH "COPYRIGHT AND LICENCE"
.IX Header "COPYRIGHT AND LICENCE"
This software is copyright (c) 2013\-2014, 2017\-2023 by Toby Inkster.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
.SH "DISCLAIMER OF WARRANTIES"
.IX Header "DISCLAIMER OF WARRANTIES"
THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
