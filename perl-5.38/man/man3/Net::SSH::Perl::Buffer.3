.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::SSH::Perl::Buffer 3"
.TH Net::SSH::Perl::Buffer 3 2023-08-07 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Net::SSH::Perl::Buffer \- Low\-level read/write buffer class
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\&    use Net::SSH::Perl::Buffer (@args);
\&    my $buffer = Net::SSH::Perl::Buffer\->new;
\&
\&    ## Add a 32\-bit integer.
\&    $buffer\->put_int32(10932930);
\&
\&    ## Get it back.
\&    my $int = $buffer\->get_int32;
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
\&\fINet::SSH::Perl::Buffer\fR implements the low-level binary
buffer needed by the \fINet::SSH::Perl\fR suite. Specifically,
a \fINet::SSH::Perl::Buffer\fR object is what makes up the
data segment of a packet transferred between server and
client (a \fINet::SSH::Perl::Packet\fR object).
.PP
Buffers contain integers, strings, characters, etc. Because
of the use of GMP integers in SSH, buffers can also contain
multiple-precision integers (represented internally by
\&\fIMath::GMP\fR objects).
.PP
Note: the method documentation here is in what some might
call a slightly backwards order. The reason for this is that
the get and put methods (listed first) are probably what
most users/developers of \fINet::SSH::Perl\fR need to care
about; they're high-level methods used to get/put data
from the buffer. The other methods (\fILOW-LEVEL METHODS\fR)
are much more low-level, and typically you won't need to
use them explicitly.
.SH "GET AND PUT METHODS"
.IX Header "GET AND PUT METHODS"
All of the \fIget_*\fR and \fIput_*\fR methods respect the
internal offset state in the buffer object. This means
that, for example, if you call \fIget_int16\fR twice in a
row, you can be ensured that you'll get the next two
16\-bit integers in the buffer. You don't need to worry
about the number of bytes a certain piece of data takes
up, for example.
.ie n .SS $buffer\->get_int8
.el .SS \f(CW$buffer\fP\->get_int8
.IX Subsection "$buffer->get_int8"
Returns the next 8\-bit integer from the buffer (which
is really just the ASCII code for the next character/byte
in the buffer).
.ie n .SS $buffer\->put_int8
.el .SS \f(CW$buffer\fP\->put_int8
.IX Subsection "$buffer->put_int8"
Appends an 8\-bit integer to the buffer (which is really
just the character corresponding to that integer, in
ASCII).
.ie n .SS $buffer\->get_int16
.el .SS \f(CW$buffer\fP\->get_int16
.IX Subsection "$buffer->get_int16"
Returns the next 16\-bit integer from the buffer.
.ie n .SS $buffer\->put_int16($integer)
.el .SS \f(CW$buffer\fP\->put_int16($integer)
.IX Subsection "$buffer->put_int16($integer)"
Appends a 16\-bit integer to the buffer.
.ie n .SS $buffer\->get_int32
.el .SS \f(CW$buffer\fP\->get_int32
.IX Subsection "$buffer->get_int32"
Returns the next 32\-bit integer from the buffer.
.ie n .SS $buffer\->put_int32($integer)
.el .SS \f(CW$buffer\fP\->put_int32($integer)
.IX Subsection "$buffer->put_int32($integer)"
Appends a 32\-bit integer to the buffer.
.ie n .SS $buffer\->get_char
.el .SS \f(CW$buffer\fP\->get_char
.IX Subsection "$buffer->get_char"
More appropriately called \fIget_byte\fR, perhaps, this
returns the next byte from the buffer.
.ie n .SS $buffer\->put_char($bytes)
.el .SS \f(CW$buffer\fP\->put_char($bytes)
.IX Subsection "$buffer->put_char($bytes)"
Appends a byte (or a sequence of bytes) to the buffer.
There is no restriction on the length of the byte
string \fR\f(CI$bytes\fR\fI\fR; if it makes you uncomfortable to call
\&\fIput_char\fR to put multiple bytes, you can instead
call this method as \fIput_chars\fR. It's the same thing.
.ie n .SS $buffer\->get_str
.el .SS \f(CW$buffer\fP\->get_str
.IX Subsection "$buffer->get_str"
Returns the next "string" from the buffer. A string here
is represented as the length of the string (a 32\-bit
integer) followed by the string itself.
.ie n .SS $buffer\->put_str($string)
.el .SS \f(CW$buffer\fP\->put_str($string)
.IX Subsection "$buffer->put_str($string)"
Appends a string (32\-bit integer length and the string
itself) to the buffer.
.ie n .SS $buffer\->get_mp_int
.el .SS \f(CW$buffer\fP\->get_mp_int
.IX Subsection "$buffer->get_mp_int"
Returns a bigint object representing a multiple precision
integer read from the buffer. Depending on the protocol,
the object is either of type \fIMath::GMP\fR (SSH1) or
a binary string (SSH2).
.PP
You determine which protocol will be in use when you
\&\fIuse\fR the module: specify \fISSH1\fR or \fISSH2\fR to load
the proper \fIget\fR and \fIput\fR routines for bigints:
.PP
.Vb 1
\&    use Net::SSH::Perl::Buffer qw( SSH1 );
.Ve
.ie n .SS $buffer\->put_mp_int($mp_int)
.el .SS \f(CW$buffer\fP\->put_mp_int($mp_int)
.IX Subsection "$buffer->put_mp_int($mp_int)"
Appends a multiple precision integer to the buffer.
Depending on the protocol in use, \fR\f(CI$mp_int\fR\fI\fR should
be either a \fIMath::GMP\fR object (SSH1) or a binary
string (SSH2). The format in which the integer is
stored in the buffer differs between the protocols,
as well.
.SH "LOW-LEVEL METHODS"
.IX Header "LOW-LEVEL METHODS"
.SS Net::SSH::Perl::Buffer\->new
.IX Subsection "Net::SSH::Perl::Buffer->new"
Creates a new buffer object and returns it. The buffer is
empty.
.PP
This method takes no arguments.
.ie n .SS $buffer\->append($bytes)
.el .SS \f(CW$buffer\fP\->append($bytes)
.IX Subsection "$buffer->append($bytes)"
Appends raw data \fR\f(CI$bytes\fR\fI\fR to the end of the in-memory
buffer. Generally you don't need to use this method
unless you're initializing an empty buffer, because
when you need to add data to a buffer you should
generally use one of the \fIput_*\fR methods.
.ie n .SS $buffer\->empty
.el .SS \f(CW$buffer\fP\->empty
.IX Subsection "$buffer->empty"
Empties out the buffer object.
.ie n .SS "$buffer\->bytes([ $offset [, $length [, $replacement ]]])"
.el .SS "\f(CW$buffer\fP\->bytes([ \f(CW$offset\fP [, \f(CW$length\fP [, \f(CW$replacement\fP ]]])"
.IX Subsection "$buffer->bytes([ $offset [, $length [, $replacement ]]])"
Behaves exactly like the \fIsubstr\fR built-in function,
except on the buffer \fR\f(CI$buffer\fR\fI\fR. Given no arguments,
\&\fIbytes\fR returns the entire buffer; given one argument
\&\fI\fR\f(CI$offset\fR\fI\fR, returns everything from that position to
the end of the string; given \fI\fR\f(CI$offset\fR\fI\fR and \fI\fR\f(CI$length\fR\fI\fR,
returns the segment of the buffer starting at \fI\fR\f(CI$offset\fR\fI\fR
and consisting of \fI\fR\f(CI$length\fR\fI\fR bytes; and given all three
arguments, replaces that segment with \fI\fR\f(CI$replacement\fR\fI\fR.
.PP
This is a very low-level method, and you generally
won't need to use it.
.PP
Also be warned that you should not intermix use of this
method with use of the \fIget_*\fR and \fIput_*\fR methods;
the latter classes of methods maintain internal state
of the buffer offset where arguments will be gotten from
and put, respectively. The \fIbytes\fR method gives no
thought to this internal offset state.
.ie n .SS $buffer\->length
.el .SS \f(CW$buffer\fP\->length
.IX Subsection "$buffer->length"
Returns the length of the buffer object.
.ie n .SS $buffer\->offset
.el .SS \f(CW$buffer\fP\->offset
.IX Subsection "$buffer->offset"
Returns the internal offset state.
.PP
If you insist on intermixing calls to \fIbytes\fR with calls
to the \fIget_*\fR and \fIput_*\fR methods, you'll probably
want to use this method to get some status on that
internal offset.
.ie n .SS $buffer\->dump
.el .SS \f(CW$buffer\fP\->dump
.IX Subsection "$buffer->dump"
Returns a hex dump of the buffer.
.ie n .SS $buffer\->insert_padding
.el .SS \f(CW$buffer\fP\->insert_padding
.IX Subsection "$buffer->insert_padding"
A helper method: pads out the buffer so that the length
of the transferred packet will be evenly divisible by
8, which is a requirement of the SSH protocol.
.SH "AUTHOR & COPYRIGHTS"
.IX Header "AUTHOR & COPYRIGHTS"
Please see the Net::SSH::Perl manpage for author, copyright,
and license information.
