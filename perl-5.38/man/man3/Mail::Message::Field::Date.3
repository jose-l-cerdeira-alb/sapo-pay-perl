.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Message::Field::Date 3"
.TH Mail::Message::Field::Date 3 2023-12-11 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Mail::Message::Field::Date \- message header field with uris
.SH INHERITANCE
.IX Header "INHERITANCE"
.Vb 5
\& Mail::Message::Field::Date
\&   is a Mail::Message::Field::Structured
\&   is a Mail::Message::Field::Full
\&   is a Mail::Message::Field
\&   is a Mail::Reporter
.Ve
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\& my $f = Mail::Message::Field\->new(Date => time);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Dates are a little more tricky than it should be: the formatting permits
a few constructs more than other RFCs use for timestamps.  For instance,
a small subset of timezone abbreviations are permitted.
.PP
The studied date field will reformat the content into a standard
form.
.PP
Extends "DESCRIPTION" in Mail::Message::Field::Structured.
.SH OVERLOADED
.IX Header "OVERLOADED"
Extends "OVERLOADED" in Mail::Message::Field::Structured.
.IP "overload: \fB""""\fR" 4
.IX Item "overload: """""
Inherited, see "OVERLOADED" in Mail::Message::Field
.IP "overload: \fB0+\fR" 4
.IX Item "overload: 0+"
Inherited, see "OVERLOADED" in Mail::Message::Field
.IP "overload: \fB<=\fR>" 4
.IX Item "overload: <=>"
Inherited, see "OVERLOADED" in Mail::Message::Field
.IP "overload: \fBbool\fR" 4
.IX Item "overload: bool"
Inherited, see "OVERLOADED" in Mail::Message::Field
.IP "overload: \fBcmp\fR" 4
.IX Item "overload: cmp"
Inherited, see "OVERLOADED" in Mail::Message::Field
.IP "overload: \fBstringification\fR" 4
.IX Item "overload: stringification"
Inherited, see "OVERLOADED" in Mail::Message::Field::Full
.SH METHODS
.IX Header "METHODS"
Extends "METHODS" in Mail::Message::Field::Structured.
.SS Constructors
.IX Subsection "Constructors"
Extends "Constructors" in Mail::Message::Field::Structured.
.ie n .IP $obj\->\fBclone\fR() 4
.el .IP \f(CW$obj\fR\->\fBclone\fR() 4
.IX Item "$obj->clone()"
Inherited, see "Constructors" in Mail::Message::Field
.ie n .IP "Mail::Message::Field::Date\->\fBfrom\fR($field, %options)" 4
.el .IP "Mail::Message::Field::Date\->\fBfrom\fR($field, \f(CW%options\fR)" 4
.IX Item "Mail::Message::Field::Date->from($field, %options)"
Inherited, see "Constructors" in Mail::Message::Field::Full
.IP Mail::Message::Field::Date\->\fBnew\fR($data) 4
.IX Item "Mail::Message::Field::Date->new($data)"
.Vb 9
\& \-Option    \-\-Defined in                      \-\-Default
\&  attributes  Mail::Message::Field::Structured  <ignored>
\&  charset     Mail::Message::Field::Full        undef
\&  datum       Mail::Message::Field::Structured  undef
\&  encoding    Mail::Message::Field::Full        \*(Aqq\*(Aq
\&  force       Mail::Message::Field::Full        false
\&  language    Mail::Message::Field::Full        undef
\&  log         Mail::Reporter                    \*(AqWARNINGS\*(Aq
\&  trace       Mail::Reporter                    \*(AqWARNINGS\*(Aq
.Ve
.RS 4
.IP "attributes => ATTRS" 2
.IX Item "attributes => ATTRS"
.PD 0
.IP "charset => STRING" 2
.IX Item "charset => STRING"
.IP "datum => STRING" 2
.IX Item "datum => STRING"
.IP "encoding => 'q'|'Q'|'b'|'B'" 2
.IX Item "encoding => 'q'|'Q'|'b'|'B'"
.IP "force => BOOLEAN" 2
.IX Item "force => BOOLEAN"
.IP "language => STRING" 2
.IX Item "language => STRING"
.IP "log => LEVEL" 2
.IX Item "log => LEVEL"
.IP "trace => LEVEL" 2
.IX Item "trace => LEVEL"
.RE
.RS 4
.PD
.Sp
example:
.Sp
.Vb 2
\& my $mmfd = \*(AqMail::Message::Field::Date\*(Aq;
\& my $f = $mmfd\->new(Date => time);
.Ve
.RE
.SS "The field"
.IX Subsection "The field"
Extends "The field" in Mail::Message::Field::Structured.
.ie n .IP $obj\->\fBisStructured\fR() 4
.el .IP \f(CW$obj\fR\->\fBisStructured\fR() 4
.IX Item "$obj->isStructured()"
.PD 0
.IP Mail::Message::Field::Date\->\fBisStructured\fR() 4
.IX Item "Mail::Message::Field::Date->isStructured()"
.PD
Inherited, see "The field" in Mail::Message::Field
.ie n .IP $obj\->\fBlength\fR() 4
.el .IP \f(CW$obj\fR\->\fBlength\fR() 4
.IX Item "$obj->length()"
Inherited, see "The field" in Mail::Message::Field
.ie n .IP $obj\->\fBnrLines\fR() 4
.el .IP \f(CW$obj\fR\->\fBnrLines\fR() 4
.IX Item "$obj->nrLines()"
Inherited, see "The field" in Mail::Message::Field
.ie n .IP "$obj\->\fBprint\fR( [$fh] )" 4
.el .IP "\f(CW$obj\fR\->\fBprint\fR( [$fh] )" 4
.IX Item "$obj->print( [$fh] )"
Inherited, see "The field" in Mail::Message::Field
.ie n .IP $obj\->\fBsize\fR() 4
.el .IP \f(CW$obj\fR\->\fBsize\fR() 4
.IX Item "$obj->size()"
Inherited, see "The field" in Mail::Message::Field
.ie n .IP "$obj\->\fBstring\fR( [$wrap] )" 4
.el .IP "\f(CW$obj\fR\->\fBstring\fR( [$wrap] )" 4
.IX Item "$obj->string( [$wrap] )"
Inherited, see "The field" in Mail::Message::Field
.ie n .IP $obj\->\fBtoDisclose\fR() 4
.el .IP \f(CW$obj\fR\->\fBtoDisclose\fR() 4
.IX Item "$obj->toDisclose()"
Inherited, see "The field" in Mail::Message::Field
.SS "Access to the name"
.IX Subsection "Access to the name"
Extends "Access to the name" in Mail::Message::Field::Structured.
.ie n .IP $obj\->\fBName\fR() 4
.el .IP \f(CW$obj\fR\->\fBName\fR() 4
.IX Item "$obj->Name()"
Inherited, see "Access to the name" in Mail::Message::Field
.ie n .IP $obj\->\fBname\fR() 4
.el .IP \f(CW$obj\fR\->\fBname\fR() 4
.IX Item "$obj->name()"
Inherited, see "Access to the name" in Mail::Message::Field
.ie n .IP "$obj\->\fBwellformedName\fR( [STRING] )" 4
.el .IP "\f(CW$obj\fR\->\fBwellformedName\fR( [STRING] )" 4
.IX Item "$obj->wellformedName( [STRING] )"
Inherited, see "Access to the name" in Mail::Message::Field
.SS "Access to the body"
.IX Subsection "Access to the body"
Extends "Access to the body" in Mail::Message::Field::Structured.
.ie n .IP $obj\->\fBbody\fR() 4
.el .IP \f(CW$obj\fR\->\fBbody\fR() 4
.IX Item "$obj->body()"
Inherited, see "Access to the body" in Mail::Message::Field
.ie n .IP $obj\->\fBdecodedBody\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBdecodedBody\fR(%options) 4
.IX Item "$obj->decodedBody(%options)"
Inherited, see "Access to the body" in Mail::Message::Field::Full
.ie n .IP $obj\->\fBfolded\fR() 4
.el .IP \f(CW$obj\fR\->\fBfolded\fR() 4
.IX Item "$obj->folded()"
Inherited, see "Access to the body" in Mail::Message::Field
.ie n .IP "$obj\->\fBfoldedBody\fR( [$body] )" 4
.el .IP "\f(CW$obj\fR\->\fBfoldedBody\fR( [$body] )" 4
.IX Item "$obj->foldedBody( [$body] )"
Inherited, see "Access to the body" in Mail::Message::Field
.ie n .IP "$obj\->\fBstripCFWS\fR( [STRING] )" 4
.el .IP "\f(CW$obj\fR\->\fBstripCFWS\fR( [STRING] )" 4
.IX Item "$obj->stripCFWS( [STRING] )"
.PD 0
.IP "Mail::Message::Field::Date\->\fBstripCFWS\fR( [STRING] )" 4
.IX Item "Mail::Message::Field::Date->stripCFWS( [STRING] )"
.PD
Inherited, see "Access to the body" in Mail::Message::Field
.ie n .IP "$obj\->\fBunfoldedBody\fR( [$body, [$wrap]] )" 4
.el .IP "\f(CW$obj\fR\->\fBunfoldedBody\fR( [$body, [$wrap]] )" 4
.IX Item "$obj->unfoldedBody( [$body, [$wrap]] )"
Inherited, see "Access to the body" in Mail::Message::Field
.SS "Access to the content"
.IX Subsection "Access to the content"
Extends "Access to the content" in Mail::Message::Field::Structured.
.ie n .IP $obj\->\fBaddAttribute\fR(...) 4
.el .IP \f(CW$obj\fR\->\fBaddAttribute\fR(...) 4
.IX Item "$obj->addAttribute(...)"
Attributes are not supported for date fields.
.ie n .IP $obj\->\fBaddresses\fR() 4
.el .IP \f(CW$obj\fR\->\fBaddresses\fR() 4
.IX Item "$obj->addresses()"
Inherited, see "Access to the content" in Mail::Message::Field
.ie n .IP $obj\->\fBattrPairs\fR() 4
.el .IP \f(CW$obj\fR\->\fBattrPairs\fR() 4
.IX Item "$obj->attrPairs()"
Inherited, see "Access to the content" in Mail::Message::Field::Structured
.ie n .IP "$obj\->\fBattribute\fR( $object|<STRING, %options>|<$name,$value,%options> )" 4
.el .IP "\f(CW$obj\fR\->\fBattribute\fR( \f(CW$object\fR|<STRING, \f(CW%options\fR>|<$name,$value,%options> )" 4
.IX Item "$obj->attribute( $object|<STRING, %options>|<$name,$value,%options> )"
Inherited, see "Access to the content" in Mail::Message::Field::Structured
.ie n .IP $obj\->\fBattributes\fR() 4
.el .IP \f(CW$obj\fR\->\fBattributes\fR() 4
.IX Item "$obj->attributes()"
Inherited, see "Access to the content" in Mail::Message::Field::Structured
.ie n .IP $obj\->\fBbeautify\fR() 4
.el .IP \f(CW$obj\fR\->\fBbeautify\fR() 4
.IX Item "$obj->beautify()"
Inherited, see "Access to the content" in Mail::Message::Field::Full
.ie n .IP "$obj\->\fBcomment\fR( [STRING] )" 4
.el .IP "\f(CW$obj\fR\->\fBcomment\fR( [STRING] )" 4
.IX Item "$obj->comment( [STRING] )"
Inherited, see "Access to the content" in Mail::Message::Field
.ie n .IP "$obj\->\fBcreateComment\fR(STRING, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBcreateComment\fR(STRING, \f(CW%options\fR)" 4
.IX Item "$obj->createComment(STRING, %options)"
.PD 0
.ie n .IP "Mail::Message::Field::Date\->\fBcreateComment\fR(STRING, %options)" 4
.el .IP "Mail::Message::Field::Date\->\fBcreateComment\fR(STRING, \f(CW%options\fR)" 4
.IX Item "Mail::Message::Field::Date->createComment(STRING, %options)"
.PD
Inherited, see "Access to the content" in Mail::Message::Field::Full
.ie n .IP "$obj\->\fBcreatePhrase\fR(STRING, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBcreatePhrase\fR(STRING, \f(CW%options\fR)" 4
.IX Item "$obj->createPhrase(STRING, %options)"
.PD 0
.ie n .IP "Mail::Message::Field::Date\->\fBcreatePhrase\fR(STRING, %options)" 4
.el .IP "Mail::Message::Field::Date\->\fBcreatePhrase\fR(STRING, \f(CW%options\fR)" 4
.IX Item "Mail::Message::Field::Date->createPhrase(STRING, %options)"
.PD
Inherited, see "Access to the content" in Mail::Message::Field::Full
.ie n .IP $obj\->\fBstudy\fR() 4
.el .IP \f(CW$obj\fR\->\fBstudy\fR() 4
.IX Item "$obj->study()"
Inherited, see "Access to the content" in Mail::Message::Field
.ie n .IP $obj\->\fBtime\fR() 4
.el .IP \f(CW$obj\fR\->\fBtime\fR() 4
.IX Item "$obj->time()"
Convert date into a timestamp, as produced with \fBPOSIX::time()\fR.
.ie n .IP "$obj\->\fBtoDate\fR( [$time] )" 4
.el .IP "\f(CW$obj\fR\->\fBtoDate\fR( [$time] )" 4
.IX Item "$obj->toDate( [$time] )"
.PD 0
.IP "Mail::Message::Field::Date\->\fBtoDate\fR( [$time] )" 4
.IX Item "Mail::Message::Field::Date->toDate( [$time] )"
.PD
Inherited, see "Access to the content" in Mail::Message::Field
.ie n .IP $obj\->\fBtoInt\fR() 4
.el .IP \f(CW$obj\fR\->\fBtoInt\fR() 4
.IX Item "$obj->toInt()"
Inherited, see "Access to the content" in Mail::Message::Field
.SS "Other methods"
.IX Subsection "Other methods"
Extends "Other methods" in Mail::Message::Field::Structured.
.ie n .IP $obj\->\fBdateToTimestamp\fR(STRING) 4
.el .IP \f(CW$obj\fR\->\fBdateToTimestamp\fR(STRING) 4
.IX Item "$obj->dateToTimestamp(STRING)"
.PD 0
.IP Mail::Message::Field::Date\->\fBdateToTimestamp\fR(STRING) 4
.IX Item "Mail::Message::Field::Date->dateToTimestamp(STRING)"
.PD
Inherited, see "Other methods" in Mail::Message::Field
.SS Internals
.IX Subsection "Internals"
Extends "Internals" in Mail::Message::Field::Structured.
.ie n .IP "$obj\->\fBconsume\fR( $line | <$name,<$body|$objects>> )" 4
.el .IP "\f(CW$obj\fR\->\fBconsume\fR( \f(CW$line\fR | <$name,<$body|$objects>> )" 4
.IX Item "$obj->consume( $line | <$name,<$body|$objects>> )"
Inherited, see "Internals" in Mail::Message::Field
.ie n .IP "$obj\->\fBdecode\fR(STRING, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBdecode\fR(STRING, \f(CW%options\fR)" 4
.IX Item "$obj->decode(STRING, %options)"
.PD 0
.ie n .IP "Mail::Message::Field::Date\->\fBdecode\fR(STRING, %options)" 4
.el .IP "Mail::Message::Field::Date\->\fBdecode\fR(STRING, \f(CW%options\fR)" 4
.IX Item "Mail::Message::Field::Date->decode(STRING, %options)"
.PD
Inherited, see "Internals" in Mail::Message::Field::Full
.ie n .IP "$obj\->\fBdefaultWrapLength\fR( [$length] )" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultWrapLength\fR( [$length] )" 4
.IX Item "$obj->defaultWrapLength( [$length] )"
Inherited, see "Internals" in Mail::Message::Field
.ie n .IP "$obj\->\fBencode\fR(STRING, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBencode\fR(STRING, \f(CW%options\fR)" 4
.IX Item "$obj->encode(STRING, %options)"
Inherited, see "Internals" in Mail::Message::Field::Full
.ie n .IP "$obj\->\fBfold\fR( $name, $body, [$maxchars] )" 4
.el .IP "\f(CW$obj\fR\->\fBfold\fR( \f(CW$name\fR, \f(CW$body\fR, [$maxchars] )" 4
.IX Item "$obj->fold( $name, $body, [$maxchars] )"
.PD 0
.ie n .IP "Mail::Message::Field::Date\->\fBfold\fR( $name, $body, [$maxchars] )" 4
.el .IP "Mail::Message::Field::Date\->\fBfold\fR( \f(CW$name\fR, \f(CW$body\fR, [$maxchars] )" 4
.IX Item "Mail::Message::Field::Date->fold( $name, $body, [$maxchars] )"
.PD
Inherited, see "Internals" in Mail::Message::Field
.ie n .IP "$obj\->\fBsetWrapLength\fR( [$length] )" 4
.el .IP "\f(CW$obj\fR\->\fBsetWrapLength\fR( [$length] )" 4
.IX Item "$obj->setWrapLength( [$length] )"
Inherited, see "Internals" in Mail::Message::Field
.ie n .IP $obj\->\fBstringifyData\fR(STRING|ARRAY|$objects) 4
.el .IP \f(CW$obj\fR\->\fBstringifyData\fR(STRING|ARRAY|$objects) 4
.IX Item "$obj->stringifyData(STRING|ARRAY|$objects)"
Inherited, see "Internals" in Mail::Message::Field
.ie n .IP $obj\->\fBunfold\fR(STRING) 4
.el .IP \f(CW$obj\fR\->\fBunfold\fR(STRING) 4
.IX Item "$obj->unfold(STRING)"
Inherited, see "Internals" in Mail::Message::Field
.SS Parsing
.IX Subsection "Parsing"
Extends "Parsing" in Mail::Message::Field::Structured.
.ie n .IP $obj\->\fBconsumeComment\fR(STRING) 4
.el .IP \f(CW$obj\fR\->\fBconsumeComment\fR(STRING) 4
.IX Item "$obj->consumeComment(STRING)"
.PD 0
.IP Mail::Message::Field::Date\->\fBconsumeComment\fR(STRING) 4
.IX Item "Mail::Message::Field::Date->consumeComment(STRING)"
.PD
Inherited, see "Parsing" in Mail::Message::Field::Full
.ie n .IP $obj\->\fBconsumeDotAtom\fR(STRING) 4
.el .IP \f(CW$obj\fR\->\fBconsumeDotAtom\fR(STRING) 4
.IX Item "$obj->consumeDotAtom(STRING)"
Inherited, see "Parsing" in Mail::Message::Field::Full
.ie n .IP $obj\->\fBconsumePhrase\fR(STRING) 4
.el .IP \f(CW$obj\fR\->\fBconsumePhrase\fR(STRING) 4
.IX Item "$obj->consumePhrase(STRING)"
.PD 0
.IP Mail::Message::Field::Date\->\fBconsumePhrase\fR(STRING) 4
.IX Item "Mail::Message::Field::Date->consumePhrase(STRING)"
.PD
Inherited, see "Parsing" in Mail::Message::Field::Full
.ie n .IP "$obj\->\fBdatum\fR( [$value] )" 4
.el .IP "\f(CW$obj\fR\->\fBdatum\fR( [$value] )" 4
.IX Item "$obj->datum( [$value] )"
Inherited, see "Parsing" in Mail::Message::Field::Structured
.ie n .IP $obj\->\fBparse\fR(STRING) 4
.el .IP \f(CW$obj\fR\->\fBparse\fR(STRING) 4
.IX Item "$obj->parse(STRING)"
Inherited, see "Parsing" in Mail::Message::Field::Full
.ie n .IP $obj\->\fBproduceBody\fR() 4
.el .IP \f(CW$obj\fR\->\fBproduceBody\fR() 4
.IX Item "$obj->produceBody()"
Inherited, see "Parsing" in Mail::Message::Field::Full
.SS "Error handling"
.IX Subsection "Error handling"
Extends "Error handling" in Mail::Message::Field::Structured.
.ie n .IP $obj\->\fBAUTOLOAD\fR() 4
.el .IP \f(CW$obj\fR\->\fBAUTOLOAD\fR() 4
.IX Item "$obj->AUTOLOAD()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBaddReport\fR($object) 4
.el .IP \f(CW$obj\fR\->\fBaddReport\fR($object) 4
.IX Item "$obj->addReport($object)"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "$obj->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD 0
.ie n .IP "Mail::Message::Field::Date\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "Mail::Message::Field::Date\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "Mail::Message::Field::Date->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBerrors\fR() 4
.el .IP \f(CW$obj\fR\->\fBerrors\fR() 4
.IX Item "$obj->errors()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR( [$level, [$strings]] )" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "$obj->log( [$level, [$strings]] )"
.PD 0
.IP "Mail::Message::Field::Date\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "Mail::Message::Field::Date->log( [$level, [$strings]] )"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBlogPriority\fR($level) 4
.el .IP \f(CW$obj\fR\->\fBlogPriority\fR($level) 4
.IX Item "$obj->logPriority($level)"
.PD 0
.IP Mail::Message::Field::Date\->\fBlogPriority\fR($level) 4
.IX Item "Mail::Message::Field::Date->logPriority($level)"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBlogSettings\fR() 4
.el .IP \f(CW$obj\fR\->\fBlogSettings\fR() 4
.IX Item "$obj->logSettings()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBnotImplemented\fR() 4
.el .IP \f(CW$obj\fR\->\fBnotImplemented\fR() 4
.IX Item "$obj->notImplemented()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR( [$level] )" 4
.IX Item "$obj->report( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR( [$level] )" 4
.IX Item "$obj->reportAll( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR( [$level] )" 4
.IX Item "$obj->trace( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBwarnings\fR() 4
.el .IP \f(CW$obj\fR\->\fBwarnings\fR() 4
.IX Item "$obj->warnings()"
Inherited, see "Error handling" in Mail::Reporter
.SS Cleanup
.IX Subsection "Cleanup"
Extends "Cleanup" in Mail::Message::Field::Structured.
.ie n .IP $obj\->\fBDESTROY\fR() 4
.el .IP \f(CW$obj\fR\->\fBDESTROY\fR() 4
.IX Item "$obj->DESTROY()"
Inherited, see "Cleanup" in Mail::Reporter
.SH DETAILS
.IX Header "DETAILS"
Extends "DETAILS" in Mail::Message::Field::Structured.
.SH DIAGNOSTICS
.IX Header "DIAGNOSTICS"
.ie n .IP "Warning: Field content is not numerical: $content" 4
.el .IP "Warning: Field content is not numerical: \f(CW$content\fR" 4
.IX Item "Warning: Field content is not numerical: $content"
The numeric value of a field is requested (for instance the \f(CW\*(C`Lines\*(C'\fR or
\&\f(CW\*(C`Content\-Length\*(C'\fR fields should be numerical), however the data contains
weird characters.
.ie n .IP "Error: Field name too long (max $length), in '$name'" 4
.el .IP "Error: Field name too long (max \f(CW$length\fR), in '$name'" 4
.IX Item "Error: Field name too long (max $length), in '$name'"
It is not specified in the RFCs how long a field name can be, but
at least it should be a few characters shorter than the line wrap.
.IP "Warning: Illegal character in charset '$charset'" 4
.IX Item "Warning: Illegal character in charset '$charset'"
The field is created with an utf8 string which only contains data from the
specified character set.  However, that character set can never be a valid
name because it contains characters which are not permitted.
.ie n .IP "Warning: Illegal character in field name $name" 4
.el .IP "Warning: Illegal character in field name \f(CW$name\fR" 4
.IX Item "Warning: Illegal character in field name $name"
A new field is being created which does contain characters not permitted
by the RFCs.  Using this field in messages may break other e\-mail clients
or transfer agents, and therefore mutulate or extinguish your message.
.IP "Warning: Illegal character in language '$lang'" 4
.IX Item "Warning: Illegal character in language '$lang'"
The field is created with data which is specified to be in a certain language,
however, the name of the language cannot be valid: it contains characters
which are not permitted by the RFCs.
.IP "Warning: Illegal encoding '$encoding', used 'q'" 4
.IX Item "Warning: Illegal encoding '$encoding', used 'q'"
The RFCs only permit base64 (\f(CW\*(C`b \*(C'\fR or \f(CW\*(C`B \*(C'\fR) or quoted-printable
(\f(CW\*(C`q\*(C'\fR or \f(CW\*(C`Q\*(C'\fR) encoding.  Other than these four options are illegal.
.IP "Error: No attributes for date fields." 4
.IX Item "Error: No attributes for date fields."
It is not possible to add attributes to date fields: it is not permitted
by the RFCs.
.ie n .IP "Error: Package $package does not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR does not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package does not implement $method."
Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Message distribution version 3.015,
built on December 11, 2023. Website: \fIhttp://perl.overmeer.net/CPAN/\fR
.SH LICENSE
.IX Header "LICENSE"
Copyrights 2001\-2023 by [Mark Overmeer <markov@cpan.org>]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://dev.perl.org/licenses/\fR
