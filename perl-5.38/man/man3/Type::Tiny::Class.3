.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Type::Tiny::Class 3"
.TH Type::Tiny::Class 3 2023-04-05 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Type::Tiny::Class \- type constraints based on the "isa" method
.SH SYNOPSIS
.IX Header "SYNOPSIS"
Using via Types::Standard:
.PP
.Vb 3
\&  package Local::Horse {
\&    use Moo;
\&    use Types::Standard qw( Str InstanceOf );
\&    
\&    has name => (
\&      is       => \*(Aqro\*(Aq,
\&      isa      => Str,
\&    );
\&    
\&    has owner => (
\&      is       => \*(Aqro\*(Aq,
\&      isa      => InstanceOf[ \*(AqLocal::Person\*(Aq ],
\&      default  => sub { Local::Person\->new },
\&    );
\&  }
.Ve
.PP
Using Type::Tiny::Class's export feature:
.PP
.Vb 4
\&  package Local::Horse {
\&    use Moo;
\&    use Types::Standard qw( Str );
\&    use Type::Tiny::Class \*(AqLocal::Person\*(Aq;
\&    
\&    has name => (
\&      is       => \*(Aqro\*(Aq,
\&      isa      => Str,
\&    );
\&    
\&    has owner => (
\&      is       => \*(Aqro\*(Aq,
\&      isa      => LocalPerson,
\&      default  => sub { LocalPerson\->new },
\&    );
\&  }
.Ve
.PP
Using Type::Tiny::Class's object-oriented interface:
.PP
.Vb 4
\&  package Local::Horse {
\&    use Moo;
\&    use Types::Standard qw( Str );
\&    use Type::Tiny::Class;
\&    
\&    my $Person = Type::Tiny::Class\->new( class => \*(AqLocal::Person\*(Aq );
\&    
\&    has name => (
\&      is       => \*(Aqro\*(Aq,
\&      isa      => Str,
\&    );
\&    
\&    has owner => (
\&      is       => \*(Aqro\*(Aq,
\&      isa      => $Person,
\&      default  => sub { $Person\->new },
\&    );
\&  }
.Ve
.PP
Using Type::Utils's functional interface:
.PP
.Vb 4
\&  package Local::Horse {
\&    use Moo;
\&    use Types::Standard qw( Str );
\&    use Type::Utils;
\&    
\&    my $Person = class_type \*(AqLocal::Person\*(Aq;
\&    
\&    has name => (
\&      is       => \*(Aqro\*(Aq,
\&      isa      => Str,
\&    );
\&    
\&    has owner => (
\&      is       => \*(Aqro\*(Aq,
\&      isa      => $Person,
\&      default  => sub { $Person\->new },
\&    );
\&  }
.Ve
.SH STATUS
.IX Header "STATUS"
This module is covered by the
Type-Tiny stability policy.
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Type constraints of the general form \f(CW\*(C`{ $_\->isa("Some::Class") }\*(C'\fR.
.PP
This package inherits from Type::Tiny; see that for most documentation.
Major differences are listed below:
.SS Constructor
.IX Subsection "Constructor"
.ie n .IP """new""" 4
.el .IP \f(CWnew\fR 4
.IX Item "new"
When the constructor is called on an \fIinstance\fR of Type::Tiny::Class, it
passes the call through to the constructor of the class for the constraint.
So for example:
.Sp
.Vb 3
\&   my $type = Type::Tiny::Class\->new(class => "Foo::Bar");
\&   my $obj  = $type\->new(hello => "World");
\&   say ref($obj);   # prints "Foo::Bar"
.Ve
.Sp
This little bit of DWIM was borrowed from MooseX::Types::TypeDecorator,
but Type::Tiny doesn't take the idea quite as far.
.SS Attributes
.IX Subsection "Attributes"
.ie n .IP """class""" 4
.el .IP \f(CWclass\fR 4
.IX Item "class"
The class for the constraint.
.ie n .IP """constraint""" 4
.el .IP \f(CWconstraint\fR 4
.IX Item "constraint"
Unlike Type::Tiny, you \fIcannot\fR pass a constraint coderef to the constructor.
Instead rely on the default.
.ie n .IP """inlined""" 4
.el .IP \f(CWinlined\fR 4
.IX Item "inlined"
Unlike Type::Tiny, you \fIcannot\fR pass an inlining coderef to the constructor.
Instead rely on the default.
.ie n .IP """parent""" 4
.el .IP \f(CWparent\fR 4
.IX Item "parent"
Parent is automatically calculated, and cannot be passed to the constructor.
.SS Methods
.IX Subsection "Methods"
.ie n .IP """plus_constructors($source, $method_name)""" 4
.el .IP "\f(CWplus_constructors($source, $method_name)\fR" 4
.IX Item "plus_constructors($source, $method_name)"
Much like \f(CW\*(C`plus_coercions\*(C'\fR but adds coercions that go via a constructor.
(In fact, this is implemented as a wrapper for \f(CW\*(C`plus_coercions\*(C'\fR.)
.Sp
Example:
.Sp
.Vb 1
\&   package MyApp::Minion;
\&   
\&   use Moose; extends "MyApp::Person";
\&   
\&   use Types::Standard qw( HashRef Str );
\&   use Type::Utils qw( class_type );
\&   
\&   my $Person = class_type({ class => "MyApp::Person" });
\&   
\&   has boss => (
\&      is     => "ro",
\&      isa    => $Person\->plus_constructors(
\&         HashRef,     "new",
\&         Str,         "_new_from_name",
\&      ),
\&      coerce => 1,
\&   );
\&   
\&   package main;
\&   
\&   MyApp::Minion\->new(
\&      ...,
\&      boss => "Bob",  ## via MyApp::Person\->_new_from_name
\&   );
\&   
\&   MyApp::Minion\->new(
\&      ...,
\&      boss => { name => "Bob" },  ## via MyApp::Person\->new
\&   );
.Ve
.Sp
Because coercing \f(CW\*(C`HashRef\*(C'\fR via constructor is a common desire, if
you call \f(CW\*(C`plus_constructors\*(C'\fR with no arguments at all, this is the
default.
.Sp
.Vb 2
\&   $classtype\->plus_constructors(HashRef, "new")
\&   $classtype\->plus_constructors()  ## identical to above
.Ve
.Sp
This is handy for Moose/Mouse/Moo\-based classes.
.ie n .IP stringifies_to($constraint) 4
.el .IP \f(CWstringifies_to($constraint)\fR 4
.IX Item "stringifies_to($constraint)"
See Type::Tiny::ConstrainedObject.
.ie n .IP numifies_to($constraint) 4
.el .IP \f(CWnumifies_to($constraint)\fR 4
.IX Item "numifies_to($constraint)"
See Type::Tiny::ConstrainedObject.
.ie n .IP """with_attribute_values($attr1 => $constraint1, ...)""" 4
.el .IP "\f(CWwith_attribute_values($attr1 => $constraint1, ...)\fR" 4
.IX Item "with_attribute_values($attr1 => $constraint1, ...)"
See Type::Tiny::ConstrainedObject.
.SS Exports
.IX Subsection "Exports"
Type::Tiny::Class can be used as an exporter.
.PP
.Vb 1
\&  use Type::Tiny::Class \*(AqHTTP::Tiny\*(Aq;
.Ve
.PP
This will export the following functions into your namespace:
.ie n .IP """HTTPTiny""" 4
.el .IP \f(CWHTTPTiny\fR 4
.IX Item "HTTPTiny"
.PD 0
.ie n .IP "is_HTTPTiny( $value )" 4
.el .IP "\f(CWis_HTTPTiny( $value )\fR" 4
.IX Item "is_HTTPTiny( $value )"
.ie n .IP "assert_HTTPTiny( $value )" 4
.el .IP "\f(CWassert_HTTPTiny( $value )\fR" 4
.IX Item "assert_HTTPTiny( $value )"
.ie n .IP "to_HTTPTiny( $value )" 4
.el .IP "\f(CWto_HTTPTiny( $value )\fR" 4
.IX Item "to_HTTPTiny( $value )"
.PD
.PP
You will also be able to use \f(CW\*(C`HTTPTiny\->new(...)\*(C'\fR as a shortcut for
\&\f(CW\*(C`HTTP::Tiny\->new(...)\*(C'\fR.
.PP
Multiple types can be exported at once:
.PP
.Vb 1
\&  use Type::Tiny::Class qw( HTTP::Tiny LWP::UserAgent );
.Ve
.SH BUGS
.IX Header "BUGS"
Please report any bugs to
<https://github.com/tobyink/p5\-type\-tiny/issues>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Type::Tiny::Manual.
.PP
Type::Tiny.
.PP
Moose::Meta::TypeConstraint::Class.
.SH AUTHOR
.IX Header "AUTHOR"
Toby Inkster <tobyink@cpan.org>.
.SH "COPYRIGHT AND LICENCE"
.IX Header "COPYRIGHT AND LICENCE"
This software is copyright (c) 2013\-2014, 2017\-2023 by Toby Inkster.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
.SH "DISCLAIMER OF WARRANTIES"
.IX Header "DISCLAIMER OF WARRANTIES"
THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
