.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Memcached::libmemcached::memcached_memory_allocators 3"
.TH Memcached::libmemcached::memcached_memory_allocators 3 2015-05-07 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
memcached_set_memory_allocators, memcached_get_memory_allocators, memcached_set_memory_allocators_context \- Manage memory allocator functions
.SH LIBRARY
.IX Header "LIBRARY"
C Client Library for memcached (libmemcached, \-lmemcached)
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&  #include <memcached.h>
\&
\&  memcached_return_t
\&    memcached_set_memory_allocators (memcached_st *ptr,
\&                                     memcached_malloc_fn mem_malloc,
\&                                     memcached_free_fn mem_free,
\&                                     memcached_realloc_fn mem_realloc,
\&                                     memcached_calloc_fn mem_calloc,
\&                                     void *context);
\&
\&  void
\&    memcached_get_memory_allocators (memcached_st *ptr,
\&                                     memcached_malloc_fn *mem_malloc,
\&                                     memcached_free_fn *mem_free,
\&                                     memcached_realloc_fn *mem_realloc,
\&                                     memcached_calloc_fn *mem_calloc);
\&
\&  void * 
\&    memcached_get_memory_allocators_context(const memcached_st *ptr);
\&
\&  void *
\&    (*memcached_malloc_fn) (memcached_st *ptr, const size_t size,
\&                            void *context);
\&
\&  void *
\&    (*memcached_realloc_fn) (memcached_st *ptr, void *mem,
\&                             const size_t size,
\&                             void *context);
\&
\&  void
\&    (*memcached_free_fn) (memcached_st *ptr, void *mem,
\&                          void *context);
\&
\&  void *
\&  (*memcached_calloc_fn) (memcached_st *ptr,
\&                          size_t nelem,
\&                          const size_t elsize,
\&                          void *context);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
\&\fBlibmemcached\fR\|(3) allows you to specify your own memory allocators optimized
for your application.
.PP
\&\fBmemcached_set_memory_allocators()\fR is used to set the memory allocators used
by the memcached instance specified by ptr. Please note that you cannot
override only one of the memory allocators, you have to specify a complete
new set if you want to override one of them. All of the memory allocation
functions should behave as specified in the C99 standard. Specify NULL as
all functions to reset them to the default values.
.PP
\&\fBmemcached_get_memory_allocators()\fR is used to get the currently used memory
allocators by a mamcached handle.
.PP
\&\fBmemcached_get_memory_allocators_context()\fR returns the void * that was
passed in during the call to \fBmemcached_set_memory_allocators()\fR.
.PP
The first argument to the memory allocator functions is a pointer to a
memcached structure, the is passed as const and you will need to clone
it in order to make use of any operation which would modify it.
.SH NOTES
.IX Header "NOTES"
In version 0.38 all functions were modified to have a context void pointer
passed to them. This was so that customer allocators could have their
own space for memory.
.SH RETURN
.IX Header "RETURN"
\&\fBmemcached_set_memory_allocators()\fR return MEMCACHED_SUCCESS upon success,
and MEMCACHED_FAILURE if you don't pass a complete set of function pointers.
.SH HOME
.IX Header "HOME"
To find out more information please check:
<https://launchpad.net/libmemcached>
.SH AUTHOR
.IX Header "AUTHOR"
Trond Norbye, <trond.norbye@gmail.com>
Brian Aker, <brian@tangent.orf<gt>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBmemcached\fR\|(1) \fBlibmemcached\fR\|(3) \fBmemcached_get_user_data\fR\|(3) \fBmemcached_set_user_data\fR\|(3)
