.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Type::Tiny::Union 3"
.TH Type::Tiny::Union 3 2023-04-05 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Type::Tiny::Union \- union type constraints
.SH SYNOPSIS
.IX Header "SYNOPSIS"
Using via the \f(CW\*(C`|\*(C'\fR operator overload:
.PP
.Vb 3
\&  package Local::Stash {
\&    use Moo;
\&    use Types::Common qw( ArrayRef HashRef );
\&    
\&    has data => (
\&      is   => \*(Aqro\*(Aq,
\&      isa  => HashRef | ArrayRef,
\&    );
\&  }
\&  
\&  my $x = Local::Stash\->new( data => {} );  # ok
\&  my $y = Local::Stash\->new( data => [] );  # ok
.Ve
.PP
Using Type::Tiny::Union's object-oriented interface:
.PP
.Vb 4
\&  package Local::Stash {
\&    use Moo;
\&    use Types::Common qw( ArrayRef HashRef );
\&    use Type::Tiny::Union;
\&    
\&    my $AnyData = Type::Tiny::Union\->new(
\&      name             => \*(AqAnyData\*(Aq,
\&      type_constraints => [ HashRef, ArrayRef ],
\&    );
\&    
\&    has data => (
\&      is   => \*(Aqro\*(Aq,
\&      isa  => $AnyData,
\&    );
\&  }
.Ve
.PP
Using Type::Utils's functional interface:
.PP
.Vb 4
\&  package Local::Stash {
\&    use Moo;
\&    use Types::Common qw( ArrayRef HashRef );
\&    use Type::Utils;
\&    
\&    my $AnyData = union AnyData => [ HashRef, ArrayRef ];
\&    
\&    has data => (
\&      is   => \*(Aqro\*(Aq,
\&      isa  => $AnyData,
\&    );
\&  }
.Ve
.SH STATUS
.IX Header "STATUS"
This module is covered by the
Type-Tiny stability policy.
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Union type constraints.
.PP
This package inherits from Type::Tiny; see that for most documentation.
Major differences are listed below:
.SS Constructor
.IX Subsection "Constructor"
The \f(CW\*(C`new\*(C'\fR constructor from Type::Tiny still works, of course. But there
is also:
.ie n .IP new_by_overload(%attributes) 4
.el .IP \f(CWnew_by_overload(%attributes)\fR 4
.IX Item "new_by_overload(%attributes)"
Like the \f(CW\*(C`new\*(C'\fR constructor, but will sometimes return another type
constraint which is not strictly an instance of Type::Tiny::Union, but
still encapsulates the same meaning. This constructor is used by
Type::Tiny's overloading of the \f(CW\*(C`|\*(C'\fR operator.
.SS Attributes
.IX Subsection "Attributes"
.ie n .IP """type_constraints""" 4
.el .IP \f(CWtype_constraints\fR 4
.IX Item "type_constraints"
Arrayref of type constraints.
.Sp
When passed to the constructor, if any of the type constraints in the union
is itself a union type constraint, this is "exploded" into the new union.
.ie n .IP """constraint""" 4
.el .IP \f(CWconstraint\fR 4
.IX Item "constraint"
Unlike Type::Tiny, you \fIcannot\fR pass a constraint coderef to the constructor.
Instead rely on the default.
.ie n .IP """inlined""" 4
.el .IP \f(CWinlined\fR 4
.IX Item "inlined"
Unlike Type::Tiny, you \fIcannot\fR pass an inlining coderef to the constructor.
Instead rely on the default.
.ie n .IP """parent""" 4
.el .IP \f(CWparent\fR 4
.IX Item "parent"
Unlike Type::Tiny, you \fIcannot\fR pass an inlining coderef to the constructor.
A parent will instead be automatically calculated.
.ie n .IP """coercion""" 4
.el .IP \f(CWcoercion\fR 4
.IX Item "coercion"
You probably do not pass this to the constructor. (It's not currently
disallowed, as there may be a use for it that I haven't thought of.)
.Sp
The auto-generated default will be a Type::Coercion::Union object.
.SS Methods
.IX Subsection "Methods"
.ie n .IP find_type_for($value) 4
.el .IP \f(CWfind_type_for($value)\fR 4
.IX Item "find_type_for($value)"
Returns the first individual type constraint in the union which
\&\f(CW$value\fR passes.
.ie n .IP stringifies_to($constraint) 4
.el .IP \f(CWstringifies_to($constraint)\fR 4
.IX Item "stringifies_to($constraint)"
See Type::Tiny::ConstrainedObject.
.ie n .IP numifies_to($constraint) 4
.el .IP \f(CWnumifies_to($constraint)\fR 4
.IX Item "numifies_to($constraint)"
See Type::Tiny::ConstrainedObject.
.ie n .IP """with_attribute_values($attr1 => $constraint1, ...)""" 4
.el .IP "\f(CWwith_attribute_values($attr1 => $constraint1, ...)\fR" 4
.IX Item "with_attribute_values($attr1 => $constraint1, ...)"
See Type::Tiny::ConstrainedObject.
.SS Overloading
.IX Subsection "Overloading"
.IP \(bu 4
Arrayrefification calls \f(CW\*(C`type_constraints\*(C'\fR.
.SH BUGS
.IX Header "BUGS"
Please report any bugs to
<https://github.com/tobyink/p5\-type\-tiny/issues>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Type::Tiny::Manual.
.PP
Type::Tiny.
.SH AUTHOR
.IX Header "AUTHOR"
Toby Inkster <tobyink@cpan.org>.
.SH "COPYRIGHT AND LICENCE"
.IX Header "COPYRIGHT AND LICENCE"
This software is copyright (c) 2013\-2014, 2017\-2023 by Toby Inkster.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
.SH "DISCLAIMER OF WARRANTIES"
.IX Header "DISCLAIMER OF WARRANTIES"
THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
