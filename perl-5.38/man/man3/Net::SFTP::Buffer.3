.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::SFTP::Buffer 3"
.TH Net::SFTP::Buffer 3 2017-06-27 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Net::SFTP::Buffer \- Read/write buffer class
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\&    use Net::SFTP::Buffer;
\&    my $buffer = Net::SFTP::Buffer\->new;
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
\&\fINet::SFTP::Buffer\fR inherits from \fINet::SSH::Perl::Buffer\fR to
provide read/write buffer functionality for SSH. SFTP buffers
are exactly the same as SSH buffers, with a couple of additions:
.IP \(bu 4
64\-bit integers
.Sp
SFTP requires the use of 64\-bit integers to represent very
large file sizes. In \fINet::SFTP::Buffer\fR 64\-bit integers
are implemented as \fIMath::Pari\fR objects.
.IP \(bu 4
File attribute bundles
.Sp
Attribute bundles are not strictly a simple data type\-\-they are,
in fact, made up of smaller pieces, like 32\-bit integers, 64\-bit
integers, etc.\-\-but for matters of convenience, it is easiest
to provide methods to directly serialize/deserialize attributes
from buffers.
.SH USAGE
.IX Header "USAGE"
Usage of \fINet::SFTP::Buffer\fR objects is exactly the same as
usage of \fINet::SSH::Perl::Buffer\fR objects, with additions of
the following methods to support the above data types.
.ie n .SS $buffer\->get_int64
.el .SS \f(CW$buffer\fP\->get_int64
.IX Subsection "$buffer->get_int64"
Extracts a 64\-bit integer from \fR\f(CI$buffer\fR\fI\fR and returns it as
a \fIMath::Pari\fR object.
.ie n .SS $buffer\->put_int64($int)
.el .SS \f(CW$buffer\fP\->put_int64($int)
.IX Subsection "$buffer->put_int64($int)"
Serializes a 64\-bit integer \fR\f(CI$int\fR\fI\fR into the buffer \fI\fR\f(CI$buffer\fR\fI\fR;
\&\fI\fR\f(CI$int\fR\fI\fR can be either a \fIMath::Pari\fR object or a built-in
Perl integer, if it is small enough to fit into a Perl int.
.ie n .SS $buffer\->get_attributes
.el .SS \f(CW$buffer\fP\->get_attributes
.IX Subsection "$buffer->get_attributes"
Uses \fINet::SFTP::Attributes\fR to extract a list of file
attributes from \fR\f(CI$buffer\fR\fI\fR, and returns a \fINet::SFTP::Attributes\fR
object containing those file attributes.
.ie n .SS $buffer\->put_attributes($attrs)
.el .SS \f(CW$buffer\fP\->put_attributes($attrs)
.IX Subsection "$buffer->put_attributes($attrs)"
Serializes a \fINet::SFTP::Attributes\fR object \fR\f(CI$attrs\fR\fI\fR into
the buffer \fI\fR\f(CI$buffer\fR\fI\fR.
.SH "AUTHOR & COPYRIGHTS"
.IX Header "AUTHOR & COPYRIGHTS"
Please see the Net::SFTP manpage for author, copyright, and
license information.
