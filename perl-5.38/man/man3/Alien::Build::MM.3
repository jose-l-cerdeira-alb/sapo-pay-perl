.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Alien::Build::MM 3"
.TH Alien::Build::MM 3 2023-05-11 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Alien::Build::MM \- Alien::Build installer code for ExtUtils::MakeMaker
.SH VERSION
.IX Header "VERSION"
version 2.80
.SH SYNOPSIS
.IX Header "SYNOPSIS"
In your \f(CW\*(C`Makefile.PL\*(C'\fR:
.PP
.Vb 2
\& use ExtUtils::MakeMaker;
\& use Alien::Build::MM;
\& 
\& my $abmm = Alien::Build::MM\->new;
\& 
\& WriteMakefile($abmm\->mm_args(
\&   ABSTRACT     => \*(AqDiscover or download and install libfoo\*(Aq,
\&   DISTNAME     => \*(AqAlien\-Libfoo\*(Aq,
\&   NAME         => \*(AqAlien::Libfoo\*(Aq,
\&   VERSION_FROM => \*(Aqlib/Alien/Libfoo.pm\*(Aq,
\&   ...
\& ));
\& 
\& sub MY::postamble {
\&   $abmm\->mm_postamble(@_);
\& }
\& 
\& sub MY::install {
\&   $abmm\->mm_install(@_);
\& }
.Ve
.PP
In your \f(CW\*(C`lib/Alien/Libfoo.pm\*(C'\fR:
.PP
.Vb 3
\& package Alien::Libfoo;
\& use parent qw( Alien::Base );
\& 1;
.Ve
.PP
In your alienfile (needs to be named \f(CW\*(C`alienfile\*(C'\fR and should be in the root of your dist):
.PP
.Vb 1
\& use alienfile;
\& 
\& plugin \*(AqPkgConfig\*(Aq => \*(Aqlibfoo\*(Aq;
\& 
\& share {
\&   start_url \*(Aqhttp://libfoo.org\*(Aq;
\&   ...
\& };
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This class allows you to use Alien::Build and Alien::Base with ExtUtils::MakeMaker.
It load the alienfile recipe in the root of your Alien dist, updates the prereqs
passed into \f(CW\*(C`WriteMakefile\*(C'\fR if any are specified by your alienfile or its plugins,
and adds a postamble to the \f(CW\*(C`Makefile\*(C'\fR that will download/build/test the alienized
package as appropriate.
.PP
The alienfile must be named \f(CW\*(C`alienfile\*(C'\fR.
.PP
If you are using Dist::Zilla to author your Alien dist, you should consider using
the Dist::Zilla::Plugin::AlienBuild plugin.
.PP
I personally don't recommend it, but if you want to use Module::Build instead, you
can use Alien::Build::MB.
.SH CONSTRUCTOR
.IX Header "CONSTRUCTOR"
.SS new
.IX Subsection "new"
.Vb 1
\& my $abmm = Alien::Build::MM\->new;
.Ve
.PP
Create a new instance of Alien::Build::MM.
.SH PROPERTIES
.IX Header "PROPERTIES"
.SS build
.IX Subsection "build"
.Vb 1
\& my $build = $abmm\->build;
.Ve
.PP
The Alien::Build instance.
.SS alienfile_meta
.IX Subsection "alienfile_meta"
.Vb 1
\& my $bool = $abmm\->alienfile_meta
.Ve
.PP
Set to a false value, in order to turn off the x_alienfile meta
.SS clean_install
.IX Subsection "clean_install"
.Vb 1
\& my $bool = $abmm\->clean_install;
.Ve
.PP
Set to a true value, in order to clean the share directory prior to
installing.  If you use this you have to make sure that you install
the install handler in your \f(CW\*(C`Makefile.PL\*(C'\fR:
.PP
.Vb 3
\& $abmm = Alien::Build::MM\->new(
\&   clean_install => 1,
\& );
\& 
\& ...
\& 
\& sub MY::install {
\&   $abmm\->mm_install(@_);
\& }
.Ve
.SH METHODS
.IX Header "METHODS"
.SS mm_args
.IX Subsection "mm_args"
.Vb 1
\& my %args = $abmm\->mm_args(%args);
.Ve
.PP
Adjust the arguments passed into \f(CW\*(C`WriteMakefile\*(C'\fR as needed by Alien::Build.
.SS mm_postamble
.IX Subsection "mm_postamble"
.Vb 2
\& my $postamble $abmm\->mm_postamble;
\& my $postamble $abmm\->mm_postamble($mm);
.Ve
.PP
Returns the postamble for the \f(CW\*(C`Makefile\*(C'\fR needed for Alien::Build.
This adds the following \f(CW\*(C`make\*(C'\fR targets which are normally called when
you run \f(CW\*(C`make all\*(C'\fR, but can be run individually if needed for debugging.
.IP alien_prefix 4
.IX Item "alien_prefix"
Determines the final install prefix (\f(CW\*(C`%{.install.prefix}\*(C'\fR).
.IP alien_version 4
.IX Item "alien_version"
Determine the perl_module_version (\f(CW\*(C`%{.runtime.perl_module_version}\*(C'\fR)
.IP alien_download 4
.IX Item "alien_download"
Downloads the source from the internet.  Does nothing for a system install.
.IP alien_build 4
.IX Item "alien_build"
Build from source (if a share install).  Gather configuration (for either
system or share install).
.IP "alien_prop, alien_prop_meta, alien_prop_install, alien_prop_runtime" 4
.IX Item "alien_prop, alien_prop_meta, alien_prop_install, alien_prop_runtime"
Prints the meta, install and runtime properties for the Alien.
.IP "alien_realclean, alien_clean" 4
.IX Item "alien_realclean, alien_clean"
Removes the alien specific files.  These targets are executed when you call
the \f(CW\*(C`realclean\*(C'\fR and \f(CW\*(C`clean\*(C'\fR targets respectively.
.IP alien_clean_install 4
.IX Item "alien_clean_install"
Cleans out the Alien's share directory.  Caution should be used in invoking
this target directly, as if you do not understand what you are doing you
are likely to break your already installed Alien.
.SS mm_install
.IX Subsection "mm_install"
.Vb 3
\& sub MY::install {
\&   $abmm\->mm_install(@_);
\& }
.Ve
.PP
\&\fBEXPERIMENTAL\fR
.PP
Adds an install rule to clean the final install dist directory prior to installing.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Alien::Build, Alien::Base, Alien, Dist::Zilla::Plugin::AlienBuild, Alien::Build::MB
.SH AUTHOR
.IX Header "AUTHOR"
Author: Graham Ollis <plicease@cpan.org>
.PP
Contributors:
.PP
Diab Jerius (DJERIUS)
.PP
Roy Storey (KIWIROY)
.PP
Ilya Pavlov
.PP
David Mertens (run4flat)
.PP
Mark Nunberg (mordy, mnunberg)
.PP
Christian Walde (Mithaldu)
.PP
Brian Wightman (MidLifeXis)
.PP
Zaki Mughal (zmughal)
.PP
mohawk (mohawk2, ETJ)
.PP
Vikas N Kumar (vikasnkumar)
.PP
Flavio Poletti (polettix)
.PP
Salvador Fandiño (salva)
.PP
Gianni Ceccarelli (dakkar)
.PP
Pavel Shaydo (zwon, trinitum)
.PP
Kang-min Liu (劉康民, gugod)
.PP
Nicholas Shipp (nshp)
.PP
Juan Julián Merelo Guervós (JJ)
.PP
Joel Berger (JBERGER)
.PP
Petr Písař (ppisar)
.PP
Lance Wicks (LANCEW)
.PP
Ahmad Fatoum (a3f, ATHREEF)
.PP
José Joaquín Atria (JJATRIA)
.PP
Duke Leto (LETO)
.PP
Shoichi Kaji (SKAJI)
.PP
Shawn Laffan (SLAFFAN)
.PP
Paul Evans (leonerd, PEVANS)
.PP
Håkon Hægland (hakonhagland, HAKONH)
.PP
nick nauwelaerts (INPHOBIA)
.PP
Florian Weimer
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2011\-2022 by Graham Ollis.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
