.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Box::MH 3"
.TH Mail::Box::MH 3 2023-07-18 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Mail::Box::MH \- handle MH folders
.SH INHERITANCE
.IX Header "INHERITANCE"
.Vb 4
\& Mail::Box::MH
\&   is a Mail::Box::Dir
\&   is a Mail::Box
\&   is a Mail::Reporter
.Ve
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\& use Mail::Box::MH;
\& my $folder = new Mail::Box::MH folder => $ENV{MAIL}, ...;
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This documentation describes how MH mailboxes work, and what you
can do with the MH folder object \f(CW\*(C`Mail::Box::MH\*(C'\fR.
.PP
Extends "DESCRIPTION" in Mail::Box::Dir.
.SH OVERLOADED
.IX Header "OVERLOADED"
Extends "OVERLOADED" in Mail::Box::Dir.
.IP "overload: \fB""""\fR" 4
.IX Item "overload: """""
Inherited, see "OVERLOADED" in Mail::Box
.IP "overload: \fB@{}\fR" 4
.IX Item "overload: @{}"
Inherited, see "OVERLOADED" in Mail::Box
.IP "overload: \fBcmp\fR" 4
.IX Item "overload: cmp"
Inherited, see "OVERLOADED" in Mail::Box
.SH METHODS
.IX Header "METHODS"
Extends "METHODS" in Mail::Box::Dir.
.SS Constructors
.IX Subsection "Constructors"
Extends "Constructors" in Mail::Box::Dir.
.IP Mail::Box::MH\->\fBnew\fR(%options) 4
.IX Item "Mail::Box::MH->new(%options)"
.Vb 10
\& \-Option           \-\-Defined in     \-\-Default
\&  access             Mail::Box        \*(Aqr\*(Aq
\&  body_delayed_type  Mail::Box        Mail::Message::Body::Delayed
\&  body_type          Mail::Box        Mail::Message::Body::Lines
\&  coerce_options     Mail::Box        []
\&  create             Mail::Box        <false>
\&  directory          Mail::Box::Dir   <derived from folder name>
\&  extract            Mail::Box        10240
\&  field_type         Mail::Box        undef
\&  fix_headers        Mail::Box        <false>
\&  folder             Mail::Box        $ENV{MAIL}
\&  folderdir          Mail::Box        $ENV{HOME}/.mh
\&  head_delayed_type  Mail::Box        Mail::Message::Head::Delayed
\&  head_type          Mail::Box        Mail::Message::Head::Complete
\&  index                               undef
\&  index_filename                      <foldername>/.index
\&  index_type                          Mail::Box::MH::Index
\&  keep_dups          Mail::Box        <false>
\&  keep_index                          0
\&  labels                              undef
\&  labels_filename                     <foldername>/.mh_sequence
\&  labels_type                         Mail::Box::MH::Labels
\&  lock_file          Mail::Box        <index_file>
\&  lock_timeout       Mail::Box        1 hour
\&  lock_type          Mail::Box        Mail::Box::Locker::DotLock
\&  lock_wait          Mail::Box        10 seconds
\&  locker             Mail::Box        undef
\&  log                Mail::Reporter   \*(AqWARNINGS\*(Aq
\&  manager            Mail::Box        undef
\&  message_type       Mail::Box        <folder\-class>::Message
\&  multipart_type     Mail::Box        Mail::Message::Body::Multipart
\&  remove_when_empty  Mail::Box        <true>
\&  save_on_exit       Mail::Box        <true>
\&  trace              Mail::Reporter   \*(AqWARNINGS\*(Aq
\&  trusted            Mail::Box        <depends on folder location>
.Ve
.RS 4
.IP "access => MODE" 2
.IX Item "access => MODE"
.PD 0
.IP "body_delayed_type => CLASS" 2
.IX Item "body_delayed_type => CLASS"
.IP "body_type => CLASS|CODE" 2
.IX Item "body_type => CLASS|CODE"
.IP "coerce_options => ARRAY" 2
.IX Item "coerce_options => ARRAY"
.IP "create => BOOLEAN" 2
.IX Item "create => BOOLEAN"
.IP "directory => DIRECTORY" 2
.IX Item "directory => DIRECTORY"
.IP "extract => INTEGER | CODE | METHOD | 'LAZY'|'ALWAYS'" 2
.IX Item "extract => INTEGER | CODE | METHOD | 'LAZY'|'ALWAYS'"
.IP "field_type => CLASS" 2
.IX Item "field_type => CLASS"
.IP "fix_headers => BOOLEAN" 2
.IX Item "fix_headers => BOOLEAN"
.IP "folder => FOLDERNAME" 2
.IX Item "folder => FOLDERNAME"
.IP "folderdir => DIRECTORY" 2
.IX Item "folderdir => DIRECTORY"
.IP "head_delayed_type => CLASS" 2
.IX Item "head_delayed_type => CLASS"
.IP "head_type => CLASS" 2
.IX Item "head_type => CLASS"
.IP "index => OBJECT" 2
.IX Item "index => OBJECT"
.PD
You may specify an OBJECT of a type which extends Mail::Box::MH::Index
(at least implements a \f(CWget()\fR method), as alternative for an index file
reader as created by \f(CW\*(C`Mail::Box::MH\*(C'\fR.
.IP "index_filename => FILENAME" 2
.IX Item "index_filename => FILENAME"
The FILENAME which is used in each directory to store the headers of all
mails. The filename shall not contain a directory path. (e.g. Do not use
\&\f(CW\*(C`/usr/people/jan/.index\*(C'\fR, nor \f(CW\*(C`subdir/.index\*(C'\fR, but say \f(CW\*(C`.index\*(C'\fR.)
.IP "index_type => CLASS" 2
.IX Item "index_type => CLASS"
.PD 0
.IP "keep_dups => BOOLEAN" 2
.IX Item "keep_dups => BOOLEAN"
.IP "keep_index => BOOLEAN" 2
.IX Item "keep_index => BOOLEAN"
.PD
Keep an index file of the specified mailbox, one file per directory.
Using an index file will speed up things considerably, because it avoids
reading all the message files the moment that you open the folder.  When
you open a folder, you can use the index file to retrieve information such
as the subject of each message, instead of having to read possibly
thousands of messages.
.IP "labels => OBJECT" 2
.IX Item "labels => OBJECT"
You may specify an OBJECT of a type which extends Mail::Box::MH::Labels
(at least implements the \f(CWget()\fR method), as alternative for labels file
reader as created by \f(CW\*(C`Mail::Box::MH\*(C'\fR.
.IP "labels_filename => FILENAME" 2
.IX Item "labels_filename => FILENAME"
In MH-folders, messages can be labeled, for instance based on the
sender or whether it is read or not.  This status is kept in a
file which is usually called \f(CW\*(C`.mh_sequences\*(C'\fR, but that name can
be overruled with this flag.
.IP "labels_type => CLASS" 2
.IX Item "labels_type => CLASS"
.PD 0
.IP "lock_file => FILENAME" 2
.IX Item "lock_file => FILENAME"
.IP "lock_timeout => SECONDS" 2
.IX Item "lock_timeout => SECONDS"
.IP "lock_type => CLASS|STRING|ARRAY" 2
.IX Item "lock_type => CLASS|STRING|ARRAY"
.IP "lock_wait => SECONDS" 2
.IX Item "lock_wait => SECONDS"
.IP "locker => OBJECT" 2
.IX Item "locker => OBJECT"
.IP "log => LEVEL" 2
.IX Item "log => LEVEL"
.IP "manager => MANAGER" 2
.IX Item "manager => MANAGER"
.IP "message_type => CLASS" 2
.IX Item "message_type => CLASS"
.IP "multipart_type => CLASS" 2
.IX Item "multipart_type => CLASS"
.IP "remove_when_empty => BOOLEAN" 2
.IX Item "remove_when_empty => BOOLEAN"
.IP "save_on_exit => BOOLEAN" 2
.IX Item "save_on_exit => BOOLEAN"
.IP "trace => LEVEL" 2
.IX Item "trace => LEVEL"
.IP "trusted => BOOLEAN" 2
.IX Item "trusted => BOOLEAN"
.RE
.RS 4
.RE
.PD
.SS "The folder"
.IX Subsection "The folder"
Extends "The folder" in Mail::Box::Dir.
.ie n .IP "$obj\->\fBaddMessage\fR($message, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBaddMessage\fR($message, \f(CW%options\fR)" 4
.IX Item "$obj->addMessage($message, %options)"
Inherited, see "The folder" in Mail::Box
.ie n .IP $obj\->\fBaddMessages\fR(@messages) 4
.el .IP \f(CW$obj\fR\->\fBaddMessages\fR(@messages) 4
.IX Item "$obj->addMessages(@messages)"
Inherited, see "The folder" in Mail::Box
.IP Mail::Box::MH\->\fBappendMessages\fR(%options) 4
.IX Item "Mail::Box::MH->appendMessages(%options)"
Append a message to a folder which is not open.
.Sp
.Vb 5
\& \-Option  \-\-Defined in     \-\-Default
\&  folder    Mail::Box        <required>
\&  message   Mail::Box        undef
\&  messages  Mail::Box        undef
\&  share     Mail::Box        <false>
.Ve
.RS 4
.IP "folder => FOLDERNAME" 2
.IX Item "folder => FOLDERNAME"
.PD 0
.IP "message => MESSAGE" 2
.IX Item "message => MESSAGE"
.IP "messages => ARRAY-OF-MESSAGES" 2
.IX Item "messages => ARRAY-OF-MESSAGES"
.IP "share => BOOLEAN" 2
.IX Item "share => BOOLEAN"
.RE
.RS 4
.RE
.ie n .IP $obj\->\fBclose\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBclose\fR(%options) 4
.IX Item "$obj->close(%options)"
.PD
Inherited, see "The folder" in Mail::Box
.ie n .IP "$obj\->\fBcopyTo\fR($folder, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBcopyTo\fR($folder, \f(CW%options\fR)" 4
.IX Item "$obj->copyTo($folder, %options)"
Inherited, see "The folder" in Mail::Box
.ie n .IP $obj\->\fBdelete\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBdelete\fR(%options) 4
.IX Item "$obj->delete(%options)"
Inherited, see "The folder" in Mail::Box
.ie n .IP $obj\->\fBdirectory\fR() 4
.el .IP \f(CW$obj\fR\->\fBdirectory\fR() 4
.IX Item "$obj->directory()"
Inherited, see "The folder" in Mail::Box::Dir
.ie n .IP "$obj\->\fBfolderdir\fR( [$directory] )" 4
.el .IP "\f(CW$obj\fR\->\fBfolderdir\fR( [$directory] )" 4
.IX Item "$obj->folderdir( [$directory] )"
Inherited, see "The folder" in Mail::Box
.ie n .IP $obj\->\fBname\fR() 4
.el .IP \f(CW$obj\fR\->\fBname\fR() 4
.IX Item "$obj->name()"
Inherited, see "The folder" in Mail::Box
.ie n .IP $obj\->\fBorganization\fR() 4
.el .IP \f(CW$obj\fR\->\fBorganization\fR() 4
.IX Item "$obj->organization()"
Inherited, see "The folder" in Mail::Box
.ie n .IP $obj\->\fBsize\fR() 4
.el .IP \f(CW$obj\fR\->\fBsize\fR() 4
.IX Item "$obj->size()"
Inherited, see "The folder" in Mail::Box
.ie n .IP $obj\->\fBtype\fR() 4
.el .IP \f(CW$obj\fR\->\fBtype\fR() 4
.IX Item "$obj->type()"
Inherited, see "The folder" in Mail::Box
.ie n .IP $obj\->\fBupdate\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBupdate\fR(%options) 4
.IX Item "$obj->update(%options)"
Inherited, see "The folder" in Mail::Box
.ie n .IP $obj\->\fBurl\fR() 4
.el .IP \f(CW$obj\fR\->\fBurl\fR() 4
.IX Item "$obj->url()"
Inherited, see "The folder" in Mail::Box
.SS "Folder flags"
.IX Subsection "Folder flags"
Extends "Folder flags" in Mail::Box::Dir.
.ie n .IP $obj\->\fBaccess\fR() 4
.el .IP \f(CW$obj\fR\->\fBaccess\fR() 4
.IX Item "$obj->access()"
Inherited, see "Folder flags" in Mail::Box
.ie n .IP $obj\->\fBisModified\fR() 4
.el .IP \f(CW$obj\fR\->\fBisModified\fR() 4
.IX Item "$obj->isModified()"
Inherited, see "Folder flags" in Mail::Box
.ie n .IP "$obj\->\fBmodified\fR( [BOOLEAN] )" 4
.el .IP "\f(CW$obj\fR\->\fBmodified\fR( [BOOLEAN] )" 4
.IX Item "$obj->modified( [BOOLEAN] )"
Inherited, see "Folder flags" in Mail::Box
.ie n .IP $obj\->\fBwritable\fR() 4
.el .IP \f(CW$obj\fR\->\fBwritable\fR() 4
.IX Item "$obj->writable()"
Inherited, see "Folder flags" in Mail::Box
.SS "The messages"
.IX Subsection "The messages"
Extends "The messages" in Mail::Box::Dir.
.ie n .IP "$obj\->\fBcurrent\fR( [$number|$message|$message_id] )" 4
.el .IP "\f(CW$obj\fR\->\fBcurrent\fR( [$number|$message|$message_id] )" 4
.IX Item "$obj->current( [$number|$message|$message_id] )"
Inherited, see "The messages" in Mail::Box
.ie n .IP $obj\->\fBfind\fR($message_id) 4
.el .IP \f(CW$obj\fR\->\fBfind\fR($message_id) 4
.IX Item "$obj->find($message_id)"
Inherited, see "The messages" in Mail::Box
.ie n .IP "$obj\->\fBfindFirstLabeled\fR( $label, [BOOLEAN, [$msgs]] )" 4
.el .IP "\f(CW$obj\fR\->\fBfindFirstLabeled\fR( \f(CW$label\fR, [BOOLEAN, [$msgs]] )" 4
.IX Item "$obj->findFirstLabeled( $label, [BOOLEAN, [$msgs]] )"
Inherited, see "The messages" in Mail::Box
.ie n .IP "$obj\->\fBmessage\fR( $index, [$message] )" 4
.el .IP "\f(CW$obj\fR\->\fBmessage\fR( \f(CW$index\fR, [$message] )" 4
.IX Item "$obj->message( $index, [$message] )"
Inherited, see "The messages" in Mail::Box
.ie n .IP "$obj\->\fBmessageId\fR( $message_id, [$message] )" 4
.el .IP "\f(CW$obj\fR\->\fBmessageId\fR( \f(CW$message_id\fR, [$message] )" 4
.IX Item "$obj->messageId( $message_id, [$message] )"
Inherited, see "The messages" in Mail::Box
.ie n .IP $obj\->\fBmessageIds\fR() 4
.el .IP \f(CW$obj\fR\->\fBmessageIds\fR() 4
.IX Item "$obj->messageIds()"
Inherited, see "The messages" in Mail::Box
.ie n .IP "$obj\->\fBmessages\fR( <'ALL'|$range|'ACTIVE'|'DELETED'|$label| !$label|$filter> )" 4
.el .IP "\f(CW$obj\fR\->\fBmessages\fR( <'ALL'|$range|'ACTIVE'|'DELETED'|$label| !$label|$filter> )" 4
.IX Item "$obj->messages( <'ALL'|$range|'ACTIVE'|'DELETED'|$label| !$label|$filter> )"
Inherited, see "The messages" in Mail::Box
.ie n .IP $obj\->\fBnrMessages\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBnrMessages\fR(%options) 4
.IX Item "$obj->nrMessages(%options)"
Inherited, see "The messages" in Mail::Box
.ie n .IP "$obj\->\fBscanForMessages\fR($message, $message_ids, $timespan, $window)" 4
.el .IP "\f(CW$obj\fR\->\fBscanForMessages\fR($message, \f(CW$message_ids\fR, \f(CW$timespan\fR, \f(CW$window\fR)" 4
.IX Item "$obj->scanForMessages($message, $message_ids, $timespan, $window)"
Inherited, see "The messages" in Mail::Box
.SS Sub-folders
.IX Subsection "Sub-folders"
Extends "Sub-folders" in Mail::Box::Dir.
.ie n .IP $obj\->\fBlistSubFolders\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBlistSubFolders\fR(%options) 4
.IX Item "$obj->listSubFolders(%options)"
.PD 0
.IP Mail::Box::MH\->\fBlistSubFolders\fR(%options) 4
.IX Item "Mail::Box::MH->listSubFolders(%options)"
.PD
Inherited, see "Sub-folders" in Mail::Box
.ie n .IP "$obj\->\fBnameOfSubFolder\fR( $subname, [$parentname] )" 4
.el .IP "\f(CW$obj\fR\->\fBnameOfSubFolder\fR( \f(CW$subname\fR, [$parentname] )" 4
.IX Item "$obj->nameOfSubFolder( $subname, [$parentname] )"
.PD 0
.ie n .IP "Mail::Box::MH\->\fBnameOfSubFolder\fR( $subname, [$parentname] )" 4
.el .IP "Mail::Box::MH\->\fBnameOfSubFolder\fR( \f(CW$subname\fR, [$parentname] )" 4
.IX Item "Mail::Box::MH->nameOfSubFolder( $subname, [$parentname] )"
.PD
Inherited, see "Sub-folders" in Mail::Box
.ie n .IP $obj\->\fBopenRelatedFolder\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBopenRelatedFolder\fR(%options) 4
.IX Item "$obj->openRelatedFolder(%options)"
Inherited, see "Sub-folders" in Mail::Box
.ie n .IP "$obj\->\fBopenSubFolder\fR($subname, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBopenSubFolder\fR($subname, \f(CW%options\fR)" 4
.IX Item "$obj->openSubFolder($subname, %options)"
Inherited, see "Sub-folders" in Mail::Box
.ie n .IP $obj\->\fBtopFolderWithMessages\fR() 4
.el .IP \f(CW$obj\fR\->\fBtopFolderWithMessages\fR() 4
.IX Item "$obj->topFolderWithMessages()"
.PD 0
.IP Mail::Box::MH\->\fBtopFolderWithMessages\fR() 4
.IX Item "Mail::Box::MH->topFolderWithMessages()"
.PD
Inherited, see "Sub-folders" in Mail::Box
.SS Internals
.IX Subsection "Internals"
Extends "Internals" in Mail::Box::Dir.
.ie n .IP "$obj\->\fBcoerce\fR($message, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBcoerce\fR($message, \f(CW%options\fR)" 4
.IX Item "$obj->coerce($message, %options)"
Inherited, see "Internals" in Mail::Box
.ie n .IP "$obj\->\fBcreate\fR($foldername, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBcreate\fR($foldername, \f(CW%options\fR)" 4
.IX Item "$obj->create($foldername, %options)"
.PD 0
.ie n .IP "Mail::Box::MH\->\fBcreate\fR($foldername, %options)" 4
.el .IP "Mail::Box::MH\->\fBcreate\fR($foldername, \f(CW%options\fR)" 4
.IX Item "Mail::Box::MH->create($foldername, %options)"
.PD
.Vb 2
\& \-Option   \-\-Defined in\-\-Default
\&  folderdir  Mail::Box   undef
.Ve
.RS 4
.IP "folderdir => DIRECTORY" 2
.IX Item "folderdir => DIRECTORY"
.RE
.RS 4
.RE
.PD 0
.ie n .IP "$obj\->\fBdetermineBodyType\fR($message, $head)" 4
.el .IP "\f(CW$obj\fR\->\fBdetermineBodyType\fR($message, \f(CW$head\fR)" 4
.IX Item "$obj->determineBodyType($message, $head)"
.PD
Inherited, see "Internals" in Mail::Box
.ie n .IP "$obj\->\fBfolderToDirectory\fR($foldername, $folderdir)" 4
.el .IP "\f(CW$obj\fR\->\fBfolderToDirectory\fR($foldername, \f(CW$folderdir\fR)" 4
.IX Item "$obj->folderToDirectory($foldername, $folderdir)"
Inherited, see "Internals" in Mail::Box::Dir
.ie n .IP "Mail::Box::MH\->\fBfoundIn\fR( [$foldername], %options )" 4
.el .IP "Mail::Box::MH\->\fBfoundIn\fR( [$foldername], \f(CW%options\fR )" 4
.IX Item "Mail::Box::MH->foundIn( [$foldername], %options )"
Inherited, see "Internals" in Mail::Box
.ie n .IP $obj\->\fBhighestMessageNumber\fR() 4
.el .IP \f(CW$obj\fR\->\fBhighestMessageNumber\fR() 4
.IX Item "$obj->highestMessageNumber()"
Returns the highest number which is used in the folder to store a file.
This method may be called when the folder is read (then this number can
be derived without file-system access), but also when the folder is not
read (yet).
.ie n .IP $obj\->\fBindex\fR() 4
.el .IP \f(CW$obj\fR\->\fBindex\fR() 4
.IX Item "$obj->index()"
Create a index reader/writer object.
.ie n .IP $obj\->\fBlabels\fR() 4
.el .IP \f(CW$obj\fR\->\fBlabels\fR() 4
.IX Item "$obj->labels()"
Create a label reader/writer object.
.ie n .IP "$obj\->\fBlineSeparator\fR( [<STRING|'CR'|'LF'|'CRLF'>] )" 4
.el .IP "\f(CW$obj\fR\->\fBlineSeparator\fR( [<STRING|'CR'|'LF'|'CRLF'>] )" 4
.IX Item "$obj->lineSeparator( [<STRING|'CR'|'LF'|'CRLF'>] )"
Inherited, see "Internals" in Mail::Box
.ie n .IP $obj\->\fBlocker\fR() 4
.el .IP \f(CW$obj\fR\->\fBlocker\fR() 4
.IX Item "$obj->locker()"
Inherited, see "Internals" in Mail::Box
.ie n .IP $obj\->\fBmessageInFile\fR($filename) 4
.el .IP \f(CW$obj\fR\->\fBmessageInFile\fR($filename) 4
.IX Item "$obj->messageInFile($filename)"
Inherited, see "Internals" in Mail::Box::Dir
.ie n .IP $obj\->\fBread\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBread\fR(%options) 4
.IX Item "$obj->read(%options)"
Inherited, see "Internals" in Mail::Box
.ie n .IP $obj\->\fBreadMessageFilenames\fR($directory) 4
.el .IP \f(CW$obj\fR\->\fBreadMessageFilenames\fR($directory) 4
.IX Item "$obj->readMessageFilenames($directory)"
Inherited, see "Internals" in Mail::Box::Dir
.ie n .IP $obj\->\fBreadMessages\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBreadMessages\fR(%options) 4
.IX Item "$obj->readMessages(%options)"
Inherited, see "Internals" in Mail::Box
.ie n .IP $obj\->\fBstoreMessage\fR($message) 4
.el .IP \f(CW$obj\fR\->\fBstoreMessage\fR($message) 4
.IX Item "$obj->storeMessage($message)"
Inherited, see "Internals" in Mail::Box
.ie n .IP $obj\->\fBtoBeThreaded\fR($messages) 4
.el .IP \f(CW$obj\fR\->\fBtoBeThreaded\fR($messages) 4
.IX Item "$obj->toBeThreaded($messages)"
Inherited, see "Internals" in Mail::Box
.ie n .IP $obj\->\fBtoBeUnthreaded\fR($messages) 4
.el .IP \f(CW$obj\fR\->\fBtoBeUnthreaded\fR($messages) 4
.IX Item "$obj->toBeUnthreaded($messages)"
Inherited, see "Internals" in Mail::Box
.ie n .IP $obj\->\fBupdateMessages\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBupdateMessages\fR(%options) 4
.IX Item "$obj->updateMessages(%options)"
Inherited, see "Internals" in Mail::Box
.ie n .IP $obj\->\fBwrite\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBwrite\fR(%options) 4
.IX Item "$obj->write(%options)"
Inherited, see "Internals" in Mail::Box
.ie n .IP $obj\->\fBwriteMessages\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBwriteMessages\fR(%options) 4
.IX Item "$obj->writeMessages(%options)"
.Vb 3
\& \-Option  \-\-Defined in     \-\-Default
\&  messages  Mail::Box        <required>
\&  renumber                   <true>
.Ve
.RS 4
.IP "messages => ARRAY" 2
.IX Item "messages => ARRAY"
.PD 0
.IP "renumber => BOOLEAN" 2
.IX Item "renumber => BOOLEAN"
.PD
Permit renumbering of message.  By default this is true, but for some
unknown reason, you may be thinking that messages should not be renumbered.
.RE
.RS 4
.RE
.SS "Other methods"
.IX Subsection "Other methods"
Extends "Other methods" in Mail::Box::Dir.
.ie n .IP $obj\->\fBtimespan2seconds\fR($time) 4
.el .IP \f(CW$obj\fR\->\fBtimespan2seconds\fR($time) 4
.IX Item "$obj->timespan2seconds($time)"
.PD 0
.IP Mail::Box::MH\->\fBtimespan2seconds\fR($time) 4
.IX Item "Mail::Box::MH->timespan2seconds($time)"
.PD
Inherited, see "Other methods" in Mail::Box
.SS "Error handling"
.IX Subsection "Error handling"
Extends "Error handling" in Mail::Box::Dir.
.ie n .IP $obj\->\fBAUTOLOAD\fR() 4
.el .IP \f(CW$obj\fR\->\fBAUTOLOAD\fR() 4
.IX Item "$obj->AUTOLOAD()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBaddReport\fR($object) 4
.el .IP \f(CW$obj\fR\->\fBaddReport\fR($object) 4
.IX Item "$obj->addReport($object)"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "$obj->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD 0
.ie n .IP "Mail::Box::MH\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "Mail::Box::MH\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "Mail::Box::MH->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBerrors\fR() 4
.el .IP \f(CW$obj\fR\->\fBerrors\fR() 4
.IX Item "$obj->errors()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR( [$level, [$strings]] )" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "$obj->log( [$level, [$strings]] )"
.PD 0
.IP "Mail::Box::MH\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "Mail::Box::MH->log( [$level, [$strings]] )"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBlogPriority\fR($level) 4
.el .IP \f(CW$obj\fR\->\fBlogPriority\fR($level) 4
.IX Item "$obj->logPriority($level)"
.PD 0
.IP Mail::Box::MH\->\fBlogPriority\fR($level) 4
.IX Item "Mail::Box::MH->logPriority($level)"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBlogSettings\fR() 4
.el .IP \f(CW$obj\fR\->\fBlogSettings\fR() 4
.IX Item "$obj->logSettings()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBnotImplemented\fR() 4
.el .IP \f(CW$obj\fR\->\fBnotImplemented\fR() 4
.IX Item "$obj->notImplemented()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR( [$level] )" 4
.IX Item "$obj->report( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR( [$level] )" 4
.IX Item "$obj->reportAll( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR( [$level] )" 4
.IX Item "$obj->trace( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBwarnings\fR() 4
.el .IP \f(CW$obj\fR\->\fBwarnings\fR() 4
.IX Item "$obj->warnings()"
Inherited, see "Error handling" in Mail::Reporter
.SS Cleanup
.IX Subsection "Cleanup"
Extends "Cleanup" in Mail::Box::Dir.
.ie n .IP $obj\->\fBDESTROY\fR() 4
.el .IP \f(CW$obj\fR\->\fBDESTROY\fR() 4
.IX Item "$obj->DESTROY()"
Inherited, see "Cleanup" in Mail::Box
.SH DETAILS
.IX Header "DETAILS"
Extends "DETAILS" in Mail::Box::Dir.
.SS "Different kinds of folders"
.IX Subsection "Different kinds of folders"
Extends "Different kinds of folders" in Mail::Box::Dir.
.SS "Available folder types"
.IX Subsection "Available folder types"
Extends "Available folder types" in Mail::Box::Dir.
.SS "Folder class implementation"
.IX Subsection "Folder class implementation"
Extends "Folder class implementation" in Mail::Box::Dir.
.SS "How MH folders work"
.IX Subsection "How MH folders work"
MH-type folders use a directory to store the messages of one folder.  Each
message is stored in a separate file.  This seems useful, because changes
in a folder change only a few of these small files, in contrast with
file-based folders where changes in a folder cause rewrites of huge
folder files.
.PP
However, MH-based folders perform very bad if you need header information
of all messages.  For instance, if you want to have full knowledge about
all message-threads (see Mail::Box::Thread::Manager) in the folder, it
requires to read all header lines in all message files.  And usually, reading
your messages in threads is desired.
.PP
So, each message is written in a separate file.  The filenames are
numbers, which count from \f(CW1\fR.  Next to these message files, a
directory may contain a file named \f(CW\*(C`.mh_sequences\*(C'\fR, storing labels which
relate to the messages.  Furthermore, a folder-directory may contain
sub-directories, which are seen as sub-folders.
.SS "This implementation"
.IX Subsection "This implementation"
This implementation supports the \f(CW\*(C`.mh\-sequences\*(C'\fR file and sub-folders.
Next to this, considerable effort it made to avoid reading each message-file.
This should boost performance of the MailBox distribution over other
Perl-modules which are able to read folders.
.PP
Folder types which store their messages each in one file, together in
one directory, are bad for performance.  Consider that you want to know
the subjects of all messages, while browser through a folder with your
mail-reading client.  This would cause all message-files to be read.
.PP
Mail::Box::MH has two ways to try improve performance.  You can use
an index-file, and use on delay-loading.  The combination performs even
better.  Both are explained in the next sections.
.SS "An index-file"
.IX Subsection "An index-file"
If you specify new(keep_index), then all header-lines of all messages
from the folder which have been read once, will also be written into
one dedicated index-file (one file per folder).  The default filename
is \f(CW\*(C`.index\*(C'\fR
.PP
However, index-files are not supported by any other reader which supports
MH (as far as I know).  If you read the folders with such I client, it
will not cause unrecoverable conflicts with this index-file, but at most
be bad for performance.
.PP
If you do not (want to) use an index-file, then delay-loading may
save your day.
.SH DIAGNOSTICS
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Cannot append message without lock on $folder." 4
.el .IP "Error: Cannot append message without lock on \f(CW$folder\fR." 4
.IX Item "Error: Cannot append message without lock on $folder."
It is impossible to append one or more messages to the folder which is
not opened, because locking it fails.  The folder may be in use by
an other application, or you may need to specify some lock related
options (see \fBnew()\fR).
.ie n .IP "Error: Cannot create MH folder $name: $!" 4
.el .IP "Error: Cannot create MH folder \f(CW$name:\fR $!" 4
.IX Item "Error: Cannot create MH folder $name: $!"
For some reason, it is impossible to create the folder.  Check the permissions
and the name of the folder.  Does the path to the directory to be created
exist?
.ie n .IP "Error: Cannot write folder $name without lock." 4
.el .IP "Error: Cannot write folder \f(CW$name\fR without lock." 4
.IX Item "Error: Cannot write folder $name without lock."
It is impossible to get a lock on the folder, which means that the changes
can not be made.  You may need to tune the lock related options which
are available at folder creation.
.ie n .IP "Warning: Changes not written to read-only folder $self." 4
.el .IP "Warning: Changes not written to read-only folder \f(CW$self\fR." 4
.IX Item "Warning: Changes not written to read-only folder $self."
You have opened the folder read-only \-\-which is the default set
by new(access)\-\-, made modifications, and now want to close it.
Set close(force) if you want to overrule the access mode, or close
the folder with close(write) set to \f(CW\*(C`NEVER\*(C'\fR.
.IP "Error: Copying failed for one message." 4
.IX Item "Error: Copying failed for one message."
For some reason, for instance disc full, removed by external process, or
read-protection, it is impossible to copy one of the messages.  Copying will
proceed for the other messages.
.ie n .IP "Error: Destination folder $name is not writable." 4
.el .IP "Error: Destination folder \f(CW$name\fR is not writable." 4
.IX Item "Error: Destination folder $name is not writable."
The folder where the messages are copied to is not opened with write
access (see new(access)).  This has no relation with write permission
to the folder which is controlled by your operating system.
.ie n .IP "Warning: Different messages with id $msgid" 4
.el .IP "Warning: Different messages with id \f(CW$msgid\fR" 4
.IX Item "Warning: Different messages with id $msgid"
The message id is discovered more than once within the same folder, but the
content of the message seems to be different.  This should not be possible:
each message must be unique.
.ie n .IP "Error: Folder $name is opened read-only" 4
.el .IP "Error: Folder \f(CW$name\fR is opened read-only" 4
.IX Item "Error: Folder $name is opened read-only"
You can not write to this folder unless you have opened the folder to
write or append with new(access), or the \f(CW\*(C`force\*(C'\fR option is set true.
.ie n .IP "Error: Folder $name not deleted: not writable." 4
.el .IP "Error: Folder \f(CW$name\fR not deleted: not writable." 4
.IX Item "Error: Folder $name not deleted: not writable."
The folder must be opened with write access via new(access), otherwise
removing it will be refused.  So, you may have write-access according to
the operating system, but that will not automatically mean that this
\&\f(CW\*(C`delete\*(C'\fR method permits you to.  The reverse remark is valid as well.
.IP "Error: Invalid timespan '$timespan' specified." 4
.IX Item "Error: Invalid timespan '$timespan' specified."
The string does not follow the strict rules of the time span syntax which
is permitted as parameter.
.IP "Warning: Message-id '$msgid' does not contain a domain." 4
.IX Item "Warning: Message-id '$msgid' does not contain a domain."
According to the RFCs, message-ids need to contain a unique random part,
then an \f(CW\*(C`@\*(C'\fR, and then a domain name.  This is made to avoid the creation
of two messages with the same id.  The warning emerges when the \f(CW\*(C`@\*(C'\fR is
missing from the string.
.ie n .IP "Error: Package $package does not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR does not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package does not implement $method."
Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.
.ie n .IP "Error: Unable to create subfolder $name of $folder." 4
.el .IP "Error: Unable to create subfolder \f(CW$name\fR of \f(CW$folder\fR." 4
.IX Item "Error: Unable to create subfolder $name of $folder."
The copy includes the subfolders, but for some reason it was not possible
to copy one of these.  Copying will proceed for all other sub-folders.
.ie n .IP "Error: Unable to write message for $folder to $filename: $!" 4
.el .IP "Error: Unable to write message for \f(CW$folder\fR to \f(CW$filename:\fR $!" 4
.IX Item "Error: Unable to write message for $folder to $filename: $!"
The new message could not be written to its new file, for the specific
reason.
.ie n .IP "Error: Writing folder $name failed" 4
.el .IP "Error: Writing folder \f(CW$name\fR failed" 4
.IX Item "Error: Writing folder $name failed"
For some reason (you probably got more error messages about this problem)
it is impossible to write the folder, although you should because there
were changes made.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 3.010,
built on July 18, 2023. Website: \fIhttp://perl.overmeer.net/CPAN/\fR
.SH LICENSE
.IX Header "LICENSE"
Copyrights 2001\-2023 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://dev.perl.org/licenses/\fR
