.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "String::Random 3"
.TH String::Random 3 2024-01-18 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
String::Random \- Perl module to generate random strings based on a pattern
.SH VERSION
.IX Header "VERSION"
version 0.32
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 5
\&    use String::Random;
\&    my $string_gen = String::Random\->new;
\&    print $string_gen\->randregex(\*(Aq\ed\ed\ed\*(Aq); # Prints 3 random digits
\&    # Prints 3 random printable characters
\&    print $string_gen\->randpattern("...");
.Ve
.PP
\&\fIor\fR
.PP
.Vb 3
\&    use String::Random qw(random_regex random_string);
\&    print random_regex(\*(Aq\ed\ed\ed\*(Aq); # Also prints 3 random digits
\&    print random_string("...");   # Also prints 3 random printable characters
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module makes it trivial to generate random strings.
.PP
As an example, let's say you are writing a script that needs to generate a
random password for a user.  The relevant code might look something like
this:
.PP
.Vb 3
\&    use String::Random;
\&    my $pass = String::Random\->new;
\&    print "Your password is ", $pass\->randpattern("CCcc!ccn"), "\en";
.Ve
.PP
This would output something like this:
.PP
.Vb 1
\&  Your password is UDwp$tj5
.Ve
.PP
\&\fBNOTE!!!\fR: currently, \f(CW\*(C`String::Random\*(C'\fR defaults to Perl's built-in predictable
random number generator so the passwords generated by it are insecure.  See the
\&\f(CW\*(C`rand_gen\*(C'\fR option to \f(CW\*(C`String::Random\*(C'\fR constructor to specify a more secure
random number generator.  There is no equivalent to this in the procedural
interface, you must use the object-oriented interface to get this
functionality.
.PP
If you are more comfortable dealing with regular expressions, the following
code would have a similar result:
.PP
.Vb 4
\&  use String::Random;
\&  my $pass = String::Random\->new;
\&  print "Your password is ",
\&      $pass\->randregex(\*(Aq[A\-Z]{2}[a\-z]{2}.[a\-z]{2}\ed\*(Aq), "\en";
.Ve
.SS Patterns
.IX Subsection "Patterns"
The pre-defined patterns (for use with \f(CWrandpattern()\fR and \f(CWrandom_pattern()\fR)
are as follows:
.PP
.Vb 7
\&  c        Any Latin lowercase character [a\-z]
\&  C        Any Latin uppercase character [A\-Z]
\&  n        Any digit [0\-9]
\&  !        A punctuation character [~\`!@$%^&*()\-_+={}[]|\e:;"\*(Aq.<>?/#,]
\&  .        Any of the above
\&  s        A "salt" character [A\-Za\-z0\-9./]
\&  b        Any binary data
.Ve
.PP
These can be modified, but if you need a different pattern it is better to
create another pattern, possibly using one of the pre-defined as a base.
For example, if you wanted a pattern \f(CW\*(C`A\*(C'\fR that contained all upper and lower
case letters (\f(CW\*(C`[A\-Za\-z]\*(C'\fR), the following would work:
.PP
.Vb 2
\&  my $gen = String::Random\->new;
\&  $gen\->{\*(AqA\*(Aq} = [ \*(AqA\*(Aq..\*(AqZ\*(Aq, \*(Aqa\*(Aq..\*(Aqz\*(Aq ];
.Ve
.PP
\&\fIor\fR
.PP
.Vb 2
\&  my $gen = String::Random\->new;
\&  $gen\->{\*(AqA\*(Aq} = [ @{$gen\->{\*(AqC\*(Aq}}, @{$gen\->{\*(Aqc\*(Aq}} ];
.Ve
.PP
\&\fIor\fR
.PP
.Vb 2
\&  my $gen = String::Random\->new;
\&  $gen\->set_pattern(A => [ \*(AqA\*(Aq..\*(AqZ\*(Aq, \*(Aqa\*(Aq..\*(Aqz\*(Aq ]);
.Ve
.PP
The random_string function, described below, has an alternative interface
for adding patterns.
.SS Methods
.IX Subsection "Methods"
.IP new 8
.IX Item "new"
.PD 0
.IP "new max => \fInumber\fR" 8
.IX Item "new max => number"
.IP "new rand_gen => \fIsub\fR" 8
.IX Item "new rand_gen => sub"
.PD
Create a new String::Random object.
.Sp
Optionally a parameter \f(CW\*(C`max\*(C'\fR can be included to specify the maximum number
of characters to return for \f(CW\*(C`*\*(C'\fR and other regular expression patterns that
do not return a fixed number of characters.
.Sp
Optionally a parameter \f(CW\*(C`rand_gen\*(C'\fR can be included to specify a subroutine
coderef for generating the random numbers used in this module. The coderef
must accept one argument \f(CW\*(C`max\*(C'\fR and return an integer between 0 and \f(CW\*(C`max \- 1\*(C'\fR.
The default rand_gen coderef is
.Sp
.Vb 4
\& sub {
\&     my ($max) = @_;
\&     return int rand $max;
\& }
.Ve
.IP "randpattern LIST" 8
.IX Item "randpattern LIST"
The randpattern method returns a random string based on the concatenation
of all the pattern strings in the list.
.Sp
It will return a list of random strings corresponding to the pattern
strings when used in list context.
.IP "randregex LIST" 8
.IX Item "randregex LIST"
The randregex method returns a random string that will match the regular
expression passed in the list argument.
.Sp
Please note that the arguments to randregex are not real regular
expressions.  Only a small subset of regular expression syntax is actually
supported.  So far, the following regular expression elements are
supported:
.Sp
.Vb 10
\&  \ew    Alphanumeric + "_".
\&  \ed    Digits.
\&  \eW    Printable characters other than those in \ew.
\&  \eD    Printable characters other than those in \ed.
\&  .     Printable characters.
\&  []    Character classes.
\&  {}    Repetition.
\&  *     Same as {0,}.
\&  ?     Same as {0,1}.
\&  +     Same as {1,}.
.Ve
.Sp
Regular expression support is still somewhat incomplete.  Currently special
characters inside [] are not supported (with the exception of "\-" to denote
ranges of characters).  The parser doesn't care for spaces in the "regular
expression" either.
.IP "get_pattern STRING" 8
.IX Item "get_pattern STRING"
Return a pattern given a name.
.Sp
.Vb 2
\&  my $gen = String::Random\->new;
\&  $gen\->get_pattern(\*(AqC\*(Aq);
.Ve
.Sp
(Added in version 0.32.)
.IP "set_pattern STRING ARRAYREF" 8
.IX Item "set_pattern STRING ARRAYREF"
Add or redefine a pattern given a name and a character set.
.Sp
.Vb 2
\&  my $gen = String::Random\->new;
\&  $gen\->set_pattern(A => [ \*(AqA\*(Aq..\*(AqZ\*(Aq, \*(Aqa\*(Aq..\*(Aqz\*(Aq ]);
.Ve
.Sp
(Added in version 0.32.)
.IP from_pattern 8
.IX Item "from_pattern"
\&\fBIGNORE!\fR \- for compatibility with an old version. \fBDO NOT USE!\fR
.SS Functions
.IX Subsection "Functions"
.IP "random_string PATTERN,LIST" 8
.IX Item "random_string PATTERN,LIST"
.PD 0
.IP "random_string PATTERN" 8
.IX Item "random_string PATTERN"
.PD
When called with a single scalar argument, random_string returns a random
string using that scalar as a pattern.  Optionally, references to lists
containing other patterns can be passed to the function.  Those lists will
be used for 0 through 9 in the pattern (meaning the maximum number of lists
that can be passed is 10).  For example, the following code:
.Sp
.Vb 3
\&    print random_string("0101",
\&                        ["a", "b", "c"],
\&                        ["d", "e", "f"]), "\en";
.Ve
.Sp
would print something like this:
.Sp
.Vb 1
\&    cebd
.Ve
.IP "random_regex REGEX_IN_STRING" 8
.IX Item "random_regex REGEX_IN_STRING"
Prints a string for the regular expression given as the string. See the
synposis for example.
.SH BUGS
.IX Header "BUGS"
This is Bug Free™ code.  (At least until somebody finds one…)
.PP
Please report bugs here:
.PP
<https://rt.cpan.org/Public/Dist/Display.html?Name=String\-Random> .
.SH AUTHOR
.IX Header "AUTHOR"
Original Author: Steven Pritchard \f(CW\*(C`steve@silug.org\*(C'\fR
.PP
Now maintained by: Shlomi Fish ( <http://www.shlomifish.org/> ).
.SH LICENSE
.IX Header "LICENSE"
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBperl\fR\|(1).
.SH SUPPORT
.IX Header "SUPPORT"
.SS Websites
.IX Subsection "Websites"
The following websites have more information about this module, and may be of help to you. As always,
in addition to those websites please use your favorite search engine to discover more resources.
.IP \(bu 4
MetaCPAN
.Sp
A modern, open-source CPAN search engine, useful to view POD in HTML format.
.Sp
<https://metacpan.org/release/String\-Random>
.IP \(bu 4
RT: CPAN's Bug Tracker
.Sp
The RT ( Request Tracker ) website is the default bug/issue tracking system for CPAN.
.Sp
<https://rt.cpan.org/Public/Dist/Display.html?Name=String\-Random>
.IP \(bu 4
CPANTS
.Sp
The CPANTS is a website that analyzes the Kwalitee ( code metrics ) of a distribution.
.Sp
<http://cpants.cpanauthors.org/dist/String\-Random>
.IP \(bu 4
CPAN Testers
.Sp
The CPAN Testers is a network of smoke testers who run automated tests on uploaded CPAN distributions.
.Sp
<http://www.cpantesters.org/distro/S/String\-Random>
.IP \(bu 4
CPAN Testers Matrix
.Sp
The CPAN Testers Matrix is a website that provides a visual overview of the test results for a distribution on various Perls/platforms.
.Sp
<http://matrix.cpantesters.org/?dist=String\-Random>
.IP \(bu 4
CPAN Testers Dependencies
.Sp
The CPAN Testers Dependencies is a website that shows a chart of the test results of all dependencies for a distribution.
.Sp
<http://deps.cpantesters.org/?module=String::Random>
.SS "Bugs / Feature Requests"
.IX Subsection "Bugs / Feature Requests"
Please report any bugs or feature requests by email to \f(CW\*(C`bug\-string\-random at rt.cpan.org\*(C'\fR, or through
the web interface at <https://rt.cpan.org/Public/Bug/Report.html?Queue=String\-Random>. You will be automatically notified of any
progress on the request by the system.
.SS "Source Code"
.IX Subsection "Source Code"
The code is open to the world, and available for you to hack on. Please feel free to browse it and play
with it, or whatever. If you want to contribute patches, please send me a diff or prod me to pull
from your repository :)
.PP
<https://github.com/shlomif/string\-random>
.PP
.Vb 1
\&  git clone http://github.com/shlomif/String\-Random
.Ve
.SH AUTHOR
.IX Header "AUTHOR"
Shlomi Fish <shlomif@cpan.org>
.SH BUGS
.IX Header "BUGS"
Please report any bugs or feature requests on the bugtracker website
<https://github.com/shlomif/string\-random/issues>
.PP
When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2021 by Shlomi Fish.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
