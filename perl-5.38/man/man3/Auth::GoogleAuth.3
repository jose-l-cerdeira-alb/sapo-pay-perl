.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Auth::GoogleAuth 3"
.TH Auth::GoogleAuth 3 2022-03-18 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Auth::GoogleAuth \- Google Authenticator TBOT Abstraction
.SH VERSION
.IX Header "VERSION"
version 1.04
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    use Auth::GoogleAuth;
\&
\&    my $auth = Auth::GoogleAuth\->new;
\&
\&    $auth = Auth::GoogleAuth\->new({
\&        secret => \*(Aqsome secret string thing\*(Aq,
\&        issuer => \*(AqGryphon Shafer\*(Aq,
\&        key_id => \*(Aqgryphon@cpan.org\*(Aq,
\&    });
\&
\&    $auth\->secret();   # get/set
\&    $auth\->secret32(); # get/set
\&    $auth\->issuer();   # get/set
\&    $auth\->key_id();   # get/set
\&
\&    my $secret32 = $auth\->generate_secret32;
\&
\&    $auth\->clear;
\&
\&    my $url_0 = $auth\->qr_code;
\&    my $url_1 = $auth\->qr_code(
\&        \*(Aqbv5o3disbutz4tl3\*(Aq, # secret32
\&        \*(Aqgryphon@cpan.org\*(Aq, # key_id
\&        \*(AqGryphon Shafer\*(Aq,   # issuer
\&    );
\&    my $url_2 = $auth\->qr_code(
\&        \*(Aqbv5o3disbutz4tl3\*(Aq, \*(Aqgryphon@cpan.org\*(Aq, \*(AqGryphon Shafer\*(Aq, 1,
\&    );
\&
\&    my $otpauth = $auth\->otpauth;
\&
\&    my $code_0 = $auth\->code;
\&    my $code_1 = $auth\->code( \*(Aqutz4tl3bv5o3disb\*(Aq, 1438643789, 30 );
\&
\&    my $verification_0 = $auth\->verify(\*(Aq879364\*(Aq);
\&    my $verification_1 = $auth\->verify(
\&        \*(Aq879364\*(Aq,           # code
\&        1,                  # range
\&        \*(Aqutz4tl3bv5o3disb\*(Aq, # secret32
\&        1438643820,         # timestamp (defaults to now)
\&        30,                 # interval (default 30)
\&    );
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module provides a simplified interface to supporting typical two-factor
authentication (i.e. "2FA") with
Google Authenticator <https://en.wikipedia.org/wiki/Google_Authenticator>
using the
TOTP Algorithm <https://en.wikipedia.org/wiki/Time-based_One-time_Password_Algorithm>
as defined by RFC 6238 <http://tools.ietf.org/html/rfc6238>.
Although Google Authenticator supports both TOTP and HOTP, at the moment,
this module only supports TOTP.
.SH METHODS
.IX Header "METHODS"
The following are the supported methods of this module:
.SS new
.IX Subsection "new"
This is a simple instantiator to which you can pass optional default values.
.PP
.Vb 1
\&    my $auth = Auth::GoogleAuth\->new;
\&
\&    $auth = Auth::GoogleAuth\->new({
\&        secret => \*(Aqsome secret string thing\*(Aq,
\&        issuer => \*(AqGryphon Shafer\*(Aq,
\&        key_id => \*(Aqgryphon@cpan.org\*(Aq,
\&    });
.Ve
.PP
The object returned will support the following attribute get/set methods:
.PP
\fIsecret\fR
.IX Subsection "secret"
.PP
This can be any string. It'll be used as the internal secret key to create
the QR codes and authentication codes.
.PP
\fIsecret32\fR
.IX Subsection "secret32"
.PP
This is a base\-32 encoded copy of the secret string. If this is left undefined
and you run one of the methods that require it (like \f(CW\*(C`qr_code\*(C'\fR or \f(CW\*(C`code\*(C'\fR),
the method called will try to create the "secret32" by looking for a value in
"secret". If none exists, a random "secret32" will be generated.
.PP
\fIissuer\fR
.IX Subsection "issuer"
.PP
This is the label name of the "issuer" of the authentication.
See the
key URI format wiki page <https://github.com/google/google-authenticator/wiki/Key-Uri-Format>
for more information.
.PP
\fIkey_id\fR
.IX Subsection "key_id"
.PP
This is the label name of the "key ID" of the authentication.
See the
key URI format wiki page <https://github.com/google/google-authenticator/wiki/Key-Uri-Format>
for more information.
.PP
\fIotpauth\fR
.IX Subsection "otpauth"
.PP
This method returns the otpauth key URI generated when you call
\&\f(CW\*(C`qr_code\*(C'\fR.
.SS generate_secret32
.IX Subsection "generate_secret32"
This method will generate a reasonable random "secret32" value, store it in the
get/set method, and return it.
.PP
.Vb 1
\&    my $secret32 = $auth\->generate_secret32;
.Ve
.SS clear
.IX Subsection "clear"
Given that the "secret" and "secret32" values may persist in this object, which
could be a bad idea in some contexts, this \f(CW\*(C`clear\*(C'\fR method lets your clear out
all attribute values.
.PP
.Vb 1
\&    $auth\->clear;
.Ve
.SS qr_code
.IX Subsection "qr_code"
This method will return a Google Chart API URL that will return a QR code based
on the data either in the object or provided to this method.
.PP
.Vb 6
\&    my $url_0 = $auth\->qr_code;
\&    my $url_1 = $auth\->qr_code(
\&        \*(Aqbv5o3disbutz4tl3\*(Aq, # secret32
\&        \*(Aqgryphon@cpan.org\*(Aq, # key_id
\&        \*(AqGryphon Shafer\*(Aq,   # issuer
\&    );
.Ve
.PP
You can optionally add a final true value, and if you do, the method will
return the generated otpauth key URI rather than the Google Chart API URL.
.PP
.Vb 3
\&    my $url_2 = $auth\->qr_code(
\&        \*(Aqbv5o3disbutz4tl3\*(Aq, \*(Aqgryphon@cpan.org\*(Aq, \*(AqGryphon Shafer\*(Aq, 1,
\&    );
.Ve
.SS code
.IX Subsection "code"
This method returns an authentication code, as if you were using
Google Authenticator <https://en.wikipedia.org/wiki/Google_Authenticator>
with the "secret32" value.
.PP
.Vb 1
\&    my $code_0 = $auth\->code;
.Ve
.PP
You can optionally pass override values similar to \f(CW\*(C`qr_code\*(C'\fR:
.PP
.Vb 5
\&    my $code_1 = $auth\->code(
\&        \*(Aqutz4tl3bv5o3disb\*(Aq, # secret32
\&        1438643789,         # timestamp (defaults to now)
\&        30,                 # interval (default 30)
\&    );
.Ve
.SS verify
.IX Subsection "verify"
This method is used for verification of codes entered by a user. Pass in the
code (required) and optionally a range value and any override values.
.PP
.Vb 1
\&    my $verification_0 = $auth\->verify(\*(Aq879364\*(Aq);
.Ve
.PP
The range value is useful because the algorithm checks codes that are time\-
based. If clocks are not exactly in sync, it's possible that a "nearly valid"
code would be entered and should be accepted as valid but will be seen as
invalid. By passing in an integer as a range value, you can stipulate how
"fuzzy" the time should be. The default range is 0. A value of 1 will mean that
a code based on a time 1 iteration plus or minus should verify.
.PP
.Vb 7
\&    my $verification_1 = $auth\->verify(
\&        \*(Aq879364\*(Aq,           # code
\&        1,                  # range
\&        \*(Aqutz4tl3bv5o3disb\*(Aq, # secret32
\&        1438643820,         # timestamp (defaults to now)
\&        30,                 # interval (default 30)
\&    );
.Ve
.SH "TYPICAL USE-CASE"
.IX Header "TYPICAL USE-CASE"
Typically, you're probably going to want to either randomly generate a secret or
secret32 (\f(CW\*(C`generate_secret32\*(C'\fR) for a user and store it, or use a specific value
or hash of some value as the secret. In either case, once you have a secret and
its stored, generate a QR code (\f(CW\*(C`qr_code\*(C'\fR) for the user. You can alternatively
provide the "secret32" to the user for them to manually enter it. That's it
for setup.
.PP
To authenticate, present the user with a way to provide you a code (which will
be a series of 6\-digits). Verify that code (\f(CW\*(C`verify\*(C'\fR) with either no range
or some small range like 1.
.SH DEPENDENCIES
.IX Header "DEPENDENCIES"
Digest::HMAC_SHA1, Math::Random::MT, URI::Escape, Convert::Base32,
Class::Accessor, Carp.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
You can look for additional information about this module at:
.IP \(bu 4
GitHub <https://github.com/gryphonshafer/Auth-GoogleAuth>
.IP \(bu 4
MetaCPAN <https://metacpan.org/pod/Auth::GoogleAuth>
.IP \(bu 4
GitHub Actions <https://github.com/gryphonshafer/Auth-GoogleAuth/actions>
.IP \(bu 4
Codecov <https://codecov.io/gh/gryphonshafer/Auth-GoogleAuth>
.IP \(bu 4
CPANTS <http://cpants.cpanauthors.org/dist/Auth-GoogleAuth>
.IP \(bu 4
CPAN Testers <http://www.cpantesters.org/distro/G/Auth-GoogleAuth.html>
.PP
You can look for additional information about things related to this module at:
.IP \(bu 4
TOTP Algorithm <https://en.wikipedia.org/wiki/Time-based_One-time_Password_Algorithm>
.IP \(bu 4
RFC 6238 <http://tools.ietf.org/html/rfc6238>
.IP \(bu 4
Google Authenticator <https://en.wikipedia.org/wiki/Google_Authenticator>
.IP \(bu 4
Google Authenticator GitHub <https://github.com/google/google-authenticator>
.SH AUTHOR
.IX Header "AUTHOR"
Gryphon Shafer <gryphon@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2015\-2050 by Gryphon Shafer.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
