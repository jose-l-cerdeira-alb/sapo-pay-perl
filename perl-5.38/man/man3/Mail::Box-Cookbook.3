.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Box-Cookbook 3"
.TH Mail::Box-Cookbook 3 2023-07-18 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Mail::Box\-Cookbook \- Examples how to use Mail::Box
.SH DESCRIPTION
.IX Header "DESCRIPTION"
The Mail::Box package is a suite of classes for accessing and managing
email folders in a folder-independent manner.  This manual demonstrates
a few simple applications.  Please contribute with examples and fixes.
It may also help to have a look at the programs included in the
\&\f(CW\*(C`scripts/\*(C'\fR and the \f(CW\*(C`examples/\*(C'\fR directories of the distribution.
.SS "The Manager"
.IX Subsection "The Manager"
For more details about all the packages which are involved in the
Mail::Box suite you have to read Mail::Box\-Overview.  But you
do not need to know much if you want to use the Mail::Box suite.
.PP
Please use the manager to open your folders.  You will certainly
benefit from it.  The manager takes care of detecting which folder
type you are using, and which folders are open.  The latter avoids
the accidental re-opening of an already open folder.
.PP
The \f(CW\*(C`examples/open.pl\*(C'\fR script contains mainly
.PP
.Vb 6
\& my $mgr    = Mail::Box::Manager\->new;
\& my $folder = $mgr\->open($filename);
\& foreach my $message ($folder\->messages) {
\&     print $message\->get(\*(AqSubject\*(Aq) || \*(Aq<no subject>\*(Aq, "\en";
\& }
\& $folder\->close;
.Ve
.PP
which shows all the most important functions.  It will cause all
subjects of the messages in the indicated folder to be listed.  So:
although the number of packages included in the Mail::Box module
is huge, only little is needed for normal programs.
.PP
In stead of calling \f(CW\*(C`close\*(C'\fR on the folder, you may also call
.PP
.Vb 1
\& $mgr\->closeAllFolders;
.Ve
.PP
If you forget to close a folder, changes will not be written.  This
may change in the future.
.SS "Multi part messages"
.IX Subsection "Multi part messages"
In early days of Internet, multi-part messages were very rare.
However, in recent years, a large deal of all transmitted message have
attachments.  This makes handling of the bodies of messages a bit harder:
when a message contains more than one part, which part is then the most
important to read?
.PP
To complicate life, multi-parts can be nested: each part may be a
multi-part by itself.  This means that programs handling the message
content must be recursive or skip multi-parts.
.PP
The central part of the \f(CW\*(C`examples/multipart.pl\*(C'\fR script reads:
.PP
.Vb 3
\& foreach my $message ($folder\->messages) {
\&     show_type($message);
\& }
\&
\& show_type($) {
\&     my $msg = shift;
\&     print $msg\->get(\*(AqContent\-Type\*(Aq), "\en";
\&
\&     if($msg\->isMultipart) {
\&         foreach my $part ($msg\->parts) {
\&             show_type($part);
\&         }
\&     }
\& }
.Ve
.PP
Each part is a message by itself. It has a header and a body.  A multipart
message has a special body: it contains a list of parts and optionally
also a preamble and an epilogue, which are respectively the lines before
and after the parts.  These texts may be ignored, because they are only
descriptive on how the multi-part was created.
.SS Filter
.IX Subsection "Filter"
The target is to select a few messages from one folder, to move them
to an other.  The \f(CW\*(C`examples/takelarge.pl\*(C'\fR script demonstrates how
to achieve this.  \fBBe warned:\fR it will replace your input folder!
.PP
As abstract of the crucial part:
.PP
.Vb 2
\& my $inbox = $mgr\->open(\*(Aqinbox\*(Aq, access => \*(Aqrw\*(Aq);
\& my $large = $mgr\->open(\*(Aqlarge\*(Aq, access => \*(Aqa\*(Aq, create => 1);
\&
\& foreach my $message ($inbox\->messages) {
\&     next if $message\->size < $size;
\&     $mgr\->moveMessage($large, $message);
\& }
\&
\& $inbox\->close;
\& $large\->close;
.Ve
.PP
The \f(CW\*(C`inbox\*(C'\fR is opened for read and write: first read all messages, and
then write the smaller folder without moved messages back.  The \f(CW\*(C`large\*(C'\fR
folder is created if the file does not exist yet.  In any case, messages
will be added to the end of the folder.
.PP
The manager is needed to move the message: to unregister the message from
the first folder, and reregister it in the second.  You can move more
messages at once, if you like.  When you move to a folder which is not
open, you even better do that: it will be faster:
.PP
.Vb 2
\& my @move = grep {$_\->size >= $size} $inbox\->messages;
\& $mgr\->moveMessage($large, @move);
.Ve
.PP
In this example, the \f(CW\*(C`size\*(C'\fR of the message determines whether the message
is moved or not.  Of course, there are many other criteria you can use.
For instance, use \f(CW\*(C`timestamp\*(C'\fR to find old messages:
.PP
.Vb 4
\& use constant YEAR => 365 * 24 * 60 * 60;
\& my $now = time;
\& my @old = grep {$_\->timestamp \- $now > YEAR} $inbox\->messages;
\& $mgr\->moveMessage($oldbox, @old);
.Ve
.SS "Create a reply"
.IX Subsection "Create a reply"
The complex message treatment is implemented in Mail::Message::Construct
and automatically loaded when needed.  It is sufficient to simply call
\&\f(CW\*(C`reply\*(C'\fR on any message:
.PP
.Vb 3
\& my $folder  = ...;
\& my $message = $folder\->message(8);
\& my $reply   = $message\->reply;
\&
\& $folder\->addMessage($reply);
\& $reply\->print;
.Ve
.PP
The method is quite complex, as demonstrated by \f(CW\*(C`examples/reply.pl\*(C'\fR, in
which the construction of a reply-message is shown.
.PP
Three kinds of reply messages can be made: one which does not include
the original message at all (NO), then one which inlines the original
message quoted (INLINE), and as third possibility the original message as
attachment (ATTACH).
.PP
The \f(CW\*(C`include\*(C'\fR parameter selects the kind of reply.  When you reply
to binary or multi-part messages, INLINE will automatically promoted
to ATTACH.  By default text will be stripped from the original senders
signature.  Multi-part messages are stripped from attachments which
qualify as signature.  In case a multi-part (after stripping) only
contains one part, and that INLINE is requested, it will be 'flattened':
the reply may be a single-part.
.PP
Have a look at the parameters which can be passed to reply in
Mail::Message::Construct.  For a single-part reply, the return
will be
.PP
.Vb 5
\& prelude
\& quoted original
\& postlude
\& \-\-
\& signature
.Ve
.PP
A multipart body will be
.PP
.Vb 5
\& part 1: prelude
\&         [ see attachment ]
\&         postlude
\& part 2: stripped original multipart
\& part 3: signature
.Ve
.SS "Build a message"
.IX Subsection "Build a message"
There are three ways to create a message which is not a reply:
.IP \(bu 4
\&\fBMail::Message::buildFromBody()\fR
.Sp
Start with creating a body, and transform that into a message.
.IP \(bu 4
\&\fBMail::Message::build()\fR
.Sp
create the whole message at once.
.IP \(bu 4
\&\fBMail::Message::read()\fR
.Sp
read a message from a file-handle, scalar, or array of lines.
.PP
All three methods are implemented in Mail::Message::Construct.  Please,
do yourself a favor, and give preference to the \f(CW\*(C`build*\*(C'\fR methods, over
the \f(CW\*(C`read\*(C'\fR, because they are much more powerful.  Use the \f(CW\*(C`read\*(C'\fR only
when you have the message on STDIN or an array of lines which is supplied
by an external program.
.PP
Very important to remember from now on: information about the content of
the body (the \f(CW\*(C`Content\-*\*(C'\fR lines in the header) is stored within the body
object, for as long as the body is not contained with a message object.
.PP
For instance, \f(CW$message\fR method \f(CW\*(C`decoded\*(C'\fR returns the decoded body of the
\&\f(CW$message\fR.  It is a body object by itself, however outside a real
message.  Then you may want to play around with it, by concatenating
some texts: again resulting in a new body.  Each body contains the
right \f(CW\*(C`Content\-*\*(C'\fR information.  Then, finally, you create a message
specifying the body and extra header lines.  At that moment you need
to specify the source and destination addresses (the \f(CW\*(C`From\*(C'\fR and \f(CW\*(C`To\*(C'\fR lines>).
At that moment, the body will automatically be encoded to be acceptable for
mail folders and transmission programs.
.PP
.Vb 5
\& my $body = Mail::Message::Body\->new
\&  ( mime_type         => \*(Aqtext/css\*(Aq
\&  , transfer_encoding => \*(Aq8bit\*(Aq
\&  , data              => \e@lines
\&  );
.Ve
.PP
Above example creates a body, with explicitly stating what kind of data
is stored in it.  The default mime type is \f(CW\*(C`text/plain\*(C'\fR.  The transfer
encoding defaults to \f(CW\*(C`none\*(C'\fR.  Each message will get encoded on the moment
it is added to a message.  The default encoding depends on the mime type.
.PP
To start with the first way to create a message.  This solution provides
maximum control over the message creation.  Quite some work is hidden for
you when executing the next line.
.PP
.Vb 6
\& my $message = Mail::Message\->buildFromBody
\&   ( $body
\&   , From => \*(Aqme@example.com\*(Aq
\&   , To   => \*(Aqyou@anywhere.net\*(Aq
\&   , Cc   => [ Mail::Address\->parse($groupalias) ]
\&   );
.Ve
.PP
For header lines, you may specify a string, an address object
(Mail::Address), or an array of such addresses.  If you want to create
multi-part messages, you need to create a multi-part body yourself first.
.PP
The second way of constructing a message uses the \f(CW\*(C`build\*(C'\fR method.  A
demonstration can be found in \f(CW\*(C`examples/build.pl\*(C'\fR.  In only one
class method call the header and the (possible multi-parted) body
is created.
.PP
With the \f(CW\*(C`data\*(C'\fR option, you can specify one scalar which
contains a whole body or an array of lines.  Using the \f(CW\*(C`file\*(C'\fR option,
a file-handle or filename specifies a body.  The \f(CW\*(C`attach\*(C'\fR option
refers to construed bodies and messages.  Each option can be used as
often as needed.  If more than one source of data is provided, a
multi-part message is produced.
.PP
.Vb 8
\& my $message = Mail::Message\->build
\&  ( From       => \*(Aqme@example.com\*(Aq
\&  , To         => \*(Aqyou@anywhere.net\*(Aq
\&  , \*(AqX\-Mailer\*(Aq => \*(AqAutomatic mailing system\*(Aq
\&  , data       => \e@lines
\&  , file       => \*(Aqlogo.jpg\*(Aq
\&  , attach     => $signature_body
\&  );
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 3.010,
built on July 18, 2023. Website: \fIhttp://perl.overmeer.net/CPAN/\fR
.SH LICENSE
.IX Header "LICENSE"
Copyrights 2001\-2023 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://dev.perl.org/licenses/\fR
