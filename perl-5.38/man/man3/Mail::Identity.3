.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Identity 3"
.TH Mail::Identity 3 2023-04-17 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Mail::Identity \- an e\-mail role
.SH INHERITANCE
.IX Header "INHERITANCE"
.Vb 2
\& Mail::Identity
\&   is a User::Identity::Item
.Ve
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 5
\& use User::Identity;
\& use Mail::Identity;
\& my $me   = User::Identity\->new(...);
\& my $addr = Mail::Identity\->new(address => \*(Aqx@y\*(Aq);
\& $me\->add(email => $addr);
\&
\& # Simpler
\&
\& use User::Identity;
\& my $me   = User::Identity\->new(...);
\& my $addr = $me\->add(email => \*(Aqx@y\*(Aq);
\& my $addr = $me\->add( email => \*(Aqhome\*(Aq
\&                    , address => \*(Aqx@y\*(Aq);
\&
\& # Conversion
\& my $ma   = Mail::Address\->new(...);
\& my $mi   = Mail::Identity\->coerce($ma);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
The \f(CW\*(C`Mail::Identity\*(C'\fR object contains the description of role played by
a human when sending e\-mail.  Most people have more than one role these
days: for instance, a private and a company role with different e\-mail
addresses.
.PP
An \f(CW\*(C`Mail::Identity\*(C'\fR object combines an e\-mail address, user description
("phrase"), a signature, pgp-key, and so on.  All fields are optional,
and some fields are smart.  One such set of data represents one role.
\&\f(CW\*(C`Mail::Identity\*(C'\fR is therefore the smart cousine of the Mail::Address
object.
.PP
Extends "DESCRIPTION" in User::Identity::Item.
.SH METHODS
.IX Header "METHODS"
Extends "METHODS" in User::Identity::Item.
.SS Constructors
.IX Subsection "Constructors"
Extends "Constructors" in User::Identity::Item.
.ie n .IP "Mail::Identity\->\fBnew\fR( [$name], %options )" 4
.el .IP "Mail::Identity\->\fBnew\fR( [$name], \f(CW%options\fR )" 4
.IX Item "Mail::Identity->new( [$name], %options )"
.Vb 10
\& \-Option      \-\-Defined in          \-\-Default
\&  address                             <username@domain or name>
\&  charset                             <user\*(Aqs charset>
\&  comment                             <user\*(Aqs fullname if phrase is different>
\&  description   User::Identity::Item  undef
\&  domain                              <from email or localhost>
\&  language                            <from user>
\&  location                            <random user\*(Aqs location>
\&  name          User::Identity::Item  <phrase or user\*(Aqs fullName>
\&  organization                        <location\*(Aqs organization>
\&  parent        User::Identity::Item  undef
\&  pgp_key                             undef
\&  phrase                              <user\*(Aqs fullName>
\&  signature                           undef
\&  username                            <from address or user\*(Aqs nickname>
.Ve
.RS 4
.IP "address => STRING" 2
.IX Item "address => STRING"
The e\-mail address is constructed from the username/domain, but
when both do not exist, the name is taken.
.IP "charset => STRING" 2
.IX Item "charset => STRING"
.PD 0
.IP "comment => STRING" 2
.IX Item "comment => STRING"
.IP "description => STRING" 2
.IX Item "description => STRING"
.IP "domain => STRING" 2
.IX Item "domain => STRING"
.IP "language => STRING" 2
.IX Item "language => STRING"
.IP "location => NAME|OBJECT" 2
.IX Item "location => NAME|OBJECT"
.PD
The user's location which relates to this mail identity.  This can be
specified as location name (which will be looked-up when needed), or
as User::Identity::Location object.
.IP "name => STRING" 2
.IX Item "name => STRING"
.PD 0
.IP "organization => STRING" 2
.IX Item "organization => STRING"
.PD
Usually defined for e\-mail addresses which are used by a company or
other organization, but less common for personal addresses.  This
value will be used to fill the \f(CW\*(C`Organization\*(C'\fR header field of messages.
.IP "parent => OBJECT" 2
.IX Item "parent => OBJECT"
.PD 0
.IP "pgp_key => STRING|FILENAME" 2
.IX Item "pgp_key => STRING|FILENAME"
.IP "phrase => STRING" 2
.IX Item "phrase => STRING"
.IP "signature => STRING" 2
.IX Item "signature => STRING"
.IP "username => STRING" 2
.IX Item "username => STRING"
.RE
.RS 4
.RE
.PD
.SS Attributes
.IX Subsection "Attributes"
Extends "Attributes" in User::Identity::Item.
.ie n .IP $obj\->\fBaddress\fR() 4
.el .IP \f(CW$obj\fR\->\fBaddress\fR() 4
.IX Item "$obj->address()"
Returns the e\-mail address for this role.  If none was specified, it will
be constructed from the username and domain.  If those are not present
as well, then the \fBname()\fR is used when it contains a \f(CW\*(C`@\*(C'\fR, else the
user's nickname is taken.
.ie n .IP $obj\->\fBcharset\fR() 4
.el .IP \f(CW$obj\fR\->\fBcharset\fR() 4
.IX Item "$obj->charset()"
Returns the character set used in comment and phrase.  When set to
\&\f(CW\*(C`undef\*(C'\fR, the strings (are already encoded to) contain only ASCII
characters.  This defaults to the value of the user's charset, if a user
is defined.
.ie n .IP "$obj\->\fBcomment\fR( [STRING] )" 4
.el .IP "\f(CW$obj\fR\->\fBcomment\fR( [STRING] )" 4
.IX Item "$obj->comment( [STRING] )"
E\-mail address \-when included in message MIME headers\- can contain a comment.
The RFCs advice not to store useful information in these comments, but it
you really want to, you can do it.  The comment defaults to the user's
fullname if the phrase is not the fullname and there is a user defined.
.Sp
Comments will be enclosed in parenthesis when used. Parenthesis (matching)
or non-matching) which are already in the string will carefully escaped
when needed.  You do not need to worry.
.ie n .IP $obj\->\fBdescription\fR() 4
.el .IP \f(CW$obj\fR\->\fBdescription\fR() 4
.IX Item "$obj->description()"
Inherited, see "Attributes" in User::Identity::Item
.ie n .IP $obj\->\fBdomain\fR() 4
.el .IP \f(CW$obj\fR\->\fBdomain\fR() 4
.IX Item "$obj->domain()"
The domain is the part of the e\-mail address after the \f(CW\*(C`@\*(C'\fR\-sign.
When this is not defined, it can be deducted from the email address
(see \fBaddress()\fR).  If nothing is known, \f(CW\*(C`localhost\*(C'\fR is returned.
.ie n .IP $obj\->\fBlanguage\fR() 4
.el .IP \f(CW$obj\fR\->\fBlanguage\fR() 4
.IX Item "$obj->language()"
Returns the language which is used for the description fields of this
e\-mail address, which defaults to the user's language.
.ie n .IP $obj\->\fBlocation\fR() 4
.el .IP \f(CW$obj\fR\->\fBlocation\fR() 4
.IX Item "$obj->location()"
Returns the object which describes to which location this mail address relates.
The location may be used to find the name of the organization involved, or
to create a signature.  If no location is specified, but a user is defined
which has locations, one of those is randomly chosen.
.ie n .IP "$obj\->\fBname\fR( [$newname] )" 4
.el .IP "\f(CW$obj\fR\->\fBname\fR( [$newname] )" 4
.IX Item "$obj->name( [$newname] )"
Inherited, see "Attributes" in User::Identity::Item
.ie n .IP $obj\->\fBorganization\fR() 4
.el .IP \f(CW$obj\fR\->\fBorganization\fR() 4
.IX Item "$obj->organization()"
Returns the organization which relates to this e\-mail identity.  If not
explicitly specified, it is tried to be found via the location.
.ie n .IP $obj\->\fBphrase\fR() 4
.el .IP \f(CW$obj\fR\->\fBphrase\fR() 4
.IX Item "$obj->phrase()"
The phrase is used in an e\-mail address to explain who is sending the
message.  This usually is the fullname (the user's fullname is used by
default), description of your function (Webmaster), or any other text.
.Sp
When an email string is produced, the phase will be quoted if needed.
Quotes which are within the string will automatically be escaped, so
you do no need to worry: input cannot break the outcome!
.ie n .IP $obj\->\fBusername\fR() 4
.el .IP \f(CW$obj\fR\->\fBusername\fR() 4
.IX Item "$obj->username()"
Returns the username of this e\-mail address.  If none is specified, first
it is tried to extract it from the specified e\-mail address.  If there is
also no username in the e\-mail address, the user identity's nickname is
taken.
.SS Collections
.IX Subsection "Collections"
Extends "Collections" in User::Identity::Item.
.ie n .IP "$obj\->\fBadd\fR($collection, $role)" 4
.el .IP "\f(CW$obj\fR\->\fBadd\fR($collection, \f(CW$role\fR)" 4
.IX Item "$obj->add($collection, $role)"
Inherited, see "Collections" in User::Identity::Item
.ie n .IP "$obj\->\fBaddCollection\fR( $object | <[$type], %options> )" 4
.el .IP "\f(CW$obj\fR\->\fBaddCollection\fR( \f(CW$object\fR | <[$type], \f(CW%options\fR> )" 4
.IX Item "$obj->addCollection( $object | <[$type], %options> )"
Inherited, see "Collections" in User::Identity::Item
.ie n .IP $obj\->\fBcollection\fR($name) 4
.el .IP \f(CW$obj\fR\->\fBcollection\fR($name) 4
.IX Item "$obj->collection($name)"
Inherited, see "Collections" in User::Identity::Item
.ie n .IP "$obj\->\fBparent\fR( [$parent] )" 4
.el .IP "\f(CW$obj\fR\->\fBparent\fR( [$parent] )" 4
.IX Item "$obj->parent( [$parent] )"
Inherited, see "Collections" in User::Identity::Item
.ie n .IP $obj\->\fBremoveCollection\fR($object|$name) 4
.el .IP \f(CW$obj\fR\->\fBremoveCollection\fR($object|$name) 4
.IX Item "$obj->removeCollection($object|$name)"
Inherited, see "Collections" in User::Identity::Item
.ie n .IP $obj\->\fBtype\fR() 4
.el .IP \f(CW$obj\fR\->\fBtype\fR() 4
.IX Item "$obj->type()"
.PD 0
.IP Mail::Identity\->\fBtype\fR() 4
.IX Item "Mail::Identity->type()"
.PD
Inherited, see "Collections" in User::Identity::Item
.ie n .IP $obj\->\fBuser\fR() 4
.el .IP \f(CW$obj\fR\->\fBuser\fR() 4
.IX Item "$obj->user()"
Inherited, see "Collections" in User::Identity::Item
.SS Searching
.IX Subsection "Searching"
Extends "Searching" in User::Identity::Item.
.ie n .IP "$obj\->\fBfind\fR($collection, $role)" 4
.el .IP "\f(CW$obj\fR\->\fBfind\fR($collection, \f(CW$role\fR)" 4
.IX Item "$obj->find($collection, $role)"
Inherited, see "Searching" in User::Identity::Item
.SH DIAGNOSTICS
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: $object is not a collection." 4
.el .IP "Error: \f(CW$object\fR is not a collection." 4
.IX Item "Error: $object is not a collection."
The first argument is an object, but not of a class which extends
User::Identity::Collection.
.ie n .IP "Error: Cannot load collection module for $type ($class)." 4
.el .IP "Error: Cannot load collection module for \f(CW$type\fR ($class)." 4
.IX Item "Error: Cannot load collection module for $type ($class)."
Either the specified \f(CW$type\fR does not exist, or that module named \f(CW$class\fR returns
compilation errors.  If the type as specified in the warning is not
the name of a package, you specified a nickname which was not defined.
Maybe you forgot the 'require' the package which defines the nickname.
.ie n .IP "Error: Creation of a collection via $class failed." 4
.el .IP "Error: Creation of a collection via \f(CW$class\fR failed." 4
.IX Item "Error: Creation of a collection via $class failed."
The \f(CW$class\fR did compile, but it was not possible to create an object
of that class using the options you specified.
.IP "Error: Don't know what type of collection you want to add." 4
.IX Item "Error: Don't know what type of collection you want to add."
If you add a collection, it must either by a collection object or a
list of options which can be used to create a collection object.  In
the latter case, the type of collection must be specified.
.ie n .IP "Warning: No collection $name" 4
.el .IP "Warning: No collection \f(CW$name\fR" 4
.IX Item "Warning: No collection $name"
The collection with \f(CW$name\fR does not exist and can not be created.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of User-Identity distribution version 1.02,
built on April 17, 2023. Website: \fIhttp://perl.overmeer.net/CPAN/\fR
.SH LICENSE
.IX Header "LICENSE"
Copyrights 2003\-2023 by [Mark Overmeer <markov@cpan.org>]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://dev.perl.org/licenses/\fR
