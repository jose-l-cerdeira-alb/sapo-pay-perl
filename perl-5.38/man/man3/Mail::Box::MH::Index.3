.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Box::MH::Index 3"
.TH Mail::Box::MH::Index 3 2023-07-18 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Mail::Box::MH::Index \- keep index files for messages.
.SH INHERITANCE
.IX Header "INHERITANCE"
.Vb 2
\& Mail::Box::MH::Index
\&   is a Mail::Reporter
.Ve
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 3
\& my $index = Mail::Box::MH::Index\->new;
\& $index\->read(...)
\& $index\->write(...)
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Message folders which store their data in one single file per message are
very inefficient for producing subject overviews and for computing message
threads.  The \f(CW\*(C`Mail::Box::MH::Index\*(C'\fR object is able to store and read a the
headers of a set of \f(CW\*(C`Mail::Box::MH::Message\*(C'\fR messages which are
part of a single \f(CW\*(C`Mail::Box::MH\*(C'\fR folder in one file.
.PP
When the \f(CW\*(C`Mail::Box::MH::Index\*(C'\fR functionality is enabled by specifying
Mail::Box::MH::new(keep_index) when opening a folder, the index file
is automatically read.  When the folder is closed, a new index file is
created.
.PP
Special care is taken to avoid problems which occur when the user changes
or removes message files without updating the index. If the index is not
trustworthy it will not be used (costing some performance for the reader
of the folder).
.PP
Extends "DESCRIPTION" in Mail::Reporter.
.SH METHODS
.IX Header "METHODS"
Extends "METHODS" in Mail::Reporter.
.SS Constructors
.IX Subsection "Constructors"
Extends "Constructors" in Mail::Reporter.
.IP Mail::Box::MH::Index\->\fBnew\fR(%options) 4
.IX Item "Mail::Box::MH::Index->new(%options)"
.Vb 6
\& \-Option   \-\-Defined in     \-\-Default
\&  filename                    <required>
\&  head_type                   Mail::Message::Head::Subset
\&  head_wrap                   72
\&  log        Mail::Reporter   \*(AqWARNINGS\*(Aq
\&  trace      Mail::Reporter   \*(AqWARNINGS\*(Aq
.Ve
.RS 4
.IP "filename => FILENAME" 2
.IX Item "filename => FILENAME"
The FILENAME which is used to store the headers of all the e\-mails for
one folder. This must be an absolute pathname.
.IP "head_type => CLASS" 2
.IX Item "head_type => CLASS"
The type of headers which will be used to store header information when
it is read from the index file.  You can not be sure the index contains
all header line (the mailbox may have been updated without updating
the index) so this will usually be (an sub-class of)
Mail::Message::Head::Subset.
.IP "head_wrap => INTEGER" 2
.IX Item "head_wrap => INTEGER"
The preferred number of character in each header line.
.IP "log => LEVEL" 2
.IX Item "log => LEVEL"
.PD 0
.IP "trace => LEVEL" 2
.IX Item "trace => LEVEL"
.RE
.RS 4
.RE
.PD
.SS "The Index"
.IX Subsection "The Index"
.ie n .IP $obj\->\fBappend\fR($messages) 4
.el .IP \f(CW$obj\fR\->\fBappend\fR($messages) 4
.IX Item "$obj->append($messages)"
Append \f(CW$messages\fR to the index file.
.ie n .IP $obj\->\fBfilename\fR() 4
.el .IP \f(CW$obj\fR\->\fBfilename\fR() 4
.IX Item "$obj->filename()"
Returns the name of the index file.
.ie n .IP $obj\->\fBget\fR($msgfile) 4
.el .IP \f(CW$obj\fR\->\fBget\fR($msgfile) 4
.IX Item "$obj->get($msgfile)"
Look if there is header info for the specified \f(CW$msgfile\fR.  The filename
represents one message in folder type which are organized as directory.
This method will return an object of the new(head_type) as specified
during creation of the index object, or \f(CW\*(C`undef\*(C'\fR if the information
is not known or not trustworthy \-i.e. the file size changed.
.ie n .IP $obj\->\fBread\fR() 4
.el .IP \f(CW$obj\fR\->\fBread\fR() 4
.IX Item "$obj->read()"
Read the index file.  The header objects can after this be requested
with the \fBget()\fR method.
.ie n .IP $obj\->\fBwrite\fR($messages) 4
.el .IP \f(CW$obj\fR\->\fBwrite\fR($messages) 4
.IX Item "$obj->write($messages)"
Write an index file containing the headers specified \f(CW$messages\fR
(Mail::Message objects).
.SS "Error handling"
.IX Subsection "Error handling"
Extends "Error handling" in Mail::Reporter.
.ie n .IP $obj\->\fBAUTOLOAD\fR() 4
.el .IP \f(CW$obj\fR\->\fBAUTOLOAD\fR() 4
.IX Item "$obj->AUTOLOAD()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBaddReport\fR($object) 4
.el .IP \f(CW$obj\fR\->\fBaddReport\fR($object) 4
.IX Item "$obj->addReport($object)"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "$obj->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD 0
.ie n .IP "Mail::Box::MH::Index\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "Mail::Box::MH::Index\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "Mail::Box::MH::Index->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBerrors\fR() 4
.el .IP \f(CW$obj\fR\->\fBerrors\fR() 4
.IX Item "$obj->errors()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR( [$level, [$strings]] )" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "$obj->log( [$level, [$strings]] )"
.PD 0
.IP "Mail::Box::MH::Index\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "Mail::Box::MH::Index->log( [$level, [$strings]] )"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBlogPriority\fR($level) 4
.el .IP \f(CW$obj\fR\->\fBlogPriority\fR($level) 4
.IX Item "$obj->logPriority($level)"
.PD 0
.IP Mail::Box::MH::Index\->\fBlogPriority\fR($level) 4
.IX Item "Mail::Box::MH::Index->logPriority($level)"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBlogSettings\fR() 4
.el .IP \f(CW$obj\fR\->\fBlogSettings\fR() 4
.IX Item "$obj->logSettings()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBnotImplemented\fR() 4
.el .IP \f(CW$obj\fR\->\fBnotImplemented\fR() 4
.IX Item "$obj->notImplemented()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR( [$level] )" 4
.IX Item "$obj->report( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR( [$level] )" 4
.IX Item "$obj->reportAll( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR( [$level] )" 4
.IX Item "$obj->trace( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBwarnings\fR() 4
.el .IP \f(CW$obj\fR\->\fBwarnings\fR() 4
.IX Item "$obj->warnings()"
Inherited, see "Error handling" in Mail::Reporter
.SS Cleanup
.IX Subsection "Cleanup"
Extends "Cleanup" in Mail::Reporter.
.ie n .IP $obj\->\fBDESTROY\fR() 4
.el .IP \f(CW$obj\fR\->\fBDESTROY\fR() 4
.IX Item "$obj->DESTROY()"
Inherited, see "Cleanup" in Mail::Reporter
.SH DIAGNOSTICS
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Package $package does not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR does not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package does not implement $method."
Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 3.010,
built on July 18, 2023. Website: \fIhttp://perl.overmeer.net/CPAN/\fR
.SH LICENSE
.IX Header "LICENSE"
Copyrights 2001\-2023 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://dev.perl.org/licenses/\fR
