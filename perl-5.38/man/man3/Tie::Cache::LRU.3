.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Tie::Cache::LRU 3"
.TH Tie::Cache::LRU 3 2015-03-01 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Tie::Cache::LRU \- A Least\-Recently Used cache
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    use Tie::Cache::LRU;
\&
\&    tie %cache, \*(AqTie::Cache::LRU\*(Aq, 500;
\&    tie %cache, \*(AqTie::Cache::LRU\*(Aq, \*(Aq400k\*(Aq; #UNIMPLEMENTED
\&
\&    # Use like a normal hash.
\&
\&    $cache_obj = tied %cache;
\&    $current_size = $cache_obj\->curr_size;
\&
\&    $max_size = $cache_obj\->max_size;
\&    $cache_obj\->max_size($new_size);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
\&\fBNOTE\fR There are no plans to update this module.  Please consider
using CHI or other caching framework.
.PP
This is an implementation of a least-recently used (LRU) cache keeping
the cache in RAM.
.PP
A LRU cache is similar to the kind of cache used by a web browser.
New items are placed into the top of the cache.  When the cache grows
past its size limit, it throws away items off the bottom.  The trick
is that whenever an item is \-accessed\-, it is pulled back to the top.
The end result of all this is that items which are frequently accessed
tend to stay in the cache.
.SH USAGE
.IX Header "USAGE"
The cache is extremely simple, is just holds a simple scalar.  If you
want to cache an object, just place it into the cache:
.PP
.Vb 1
\&    $cache{$obj\->id} = $obj;
.Ve
.PP
This doesn't make a copy of the object, it just holds a reference to
it.  (Note: This means that your object's destructor will not be
called until it has fallen out of the cache (and all other references
to it have disappeared, of course)!)
.PP
If you want to cache an array, place a reference to it in the cache:
.PP
.Vb 1
\&    $cache{$some_id} = \e@array;
.Ve
.PP
Or, if you're worried about the consequences of tossing around
references and want to cache a copy instead, you can do something like
this:
.PP
.Vb 1
\&    $cache{$some_id} = [@array];
.Ve
.SS "Tied Interface"
.IX Subsection "Tied Interface"
.IP \fBtie\fR 4
.IX Item "tie"
.Vb 2
\&    tie %cache, \*(AqTie::Cache::LRU\*(Aq;
\&    tie %cache, \*(AqTie::Cache::LRU\*(Aq, $cache_size;
.Ve
.Sp
This ties a cache to \f(CW%cache\fR which will hold a maximum of \f(CW$cache_size\fR
keys.  If \f(CW$cache_size\fR is not given it uses a default value,
Tie::Cache::LRU\->DEFAULT_MAX_SIZE.
.Sp
If the size is set to 0, the cache is effectively turned off.  This is
useful for "removing" the cache from a program without having to make
deep alterations to the program itself, or for checking performance
differences with and without a cache.
.Sp
All of the expected hash operations (exists, delete, slices, etc...) 
work on the \f(CW%cache\fR.
.SS "Object Interface"
.IX Subsection "Object Interface"
There's a few things you just can't do through the tied interface.  To
do them, you need to get at the underlying object, which you do with
\&\fBtied()\fR.
.PP
.Vb 1
\&    $cache_obj = tied %cache;
.Ve
.PP
And then you can call a few methods on that object:
.IP \fBmax_size\fR 4
.IX Item "max_size"
.Vb 2
\&  $cache_obj\->max_size($size);
\&  $size = $cache_obj\->max_size;
.Ve
.Sp
An accessor to alter the maximum size of the cache on the fly.
.Sp
If \fBmax_size()\fR is reset, and it is lower than the current size, the cache
is immediately truncated.
.Sp
The size must be an integer greater than or equal to 0.
.IP \fBcurr_size\fR 4
.IX Item "curr_size"
.Vb 1
\&  $size = $cache_obj\->curr_size;
.Ve
.Sp
Returns the current number of items in the cache.
.SH NOTES
.IX Header "NOTES"
This is just a thin subclass of Tie::Cache::LRU::Array.
.SH TODO
.IX Header "TODO"
Should eventually allow the cache to be in shared memory.
.PP
Max size by memory use unimplemented.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 1999\-2015 by Michael G Schwern <schwern@pobox.com>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl 5 itself.
.PP
See <http://dev.perl.org/licenses/>
.SH AUTHOR
.IX Header "AUTHOR"
Michael G Schwern <schwern@pobox.com>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
CHI for a more modern cache implementation.
.PP
Tie::Cache::LRU::Array, Tie::Cache::LRU::LinkedList,
Tie::Cache::LRU::Virtual, Tie::Cache
