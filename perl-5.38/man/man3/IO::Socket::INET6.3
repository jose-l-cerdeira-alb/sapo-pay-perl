.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "IO::Socket::INET6 3"
.TH IO::Socket::INET6 3 2024-01-18 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
IO::Socket::INET6 \- [ DEPRECATED!! ] Object interface for AF_INET/AF_INET6 domain sockets
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::Socket::INET6;
.Ve
.SH WARNING
.IX Header "WARNING"
\&\fBWARNING!! IO\-Socket\-INET6 is deprecated.\fR
.PP
IO\-Socket\-INET6 was now succeeded by Paul
Evans' IO::Socket::IP . Please
convert old code from IO\-Socket\-INET6 to IO-Socket-IP.
.SH DESCRIPTION
.IX Header "DESCRIPTION"
\&\f(CW\*(C`IO::Socket::INET6\*(C'\fR provides an object interface to creating and using sockets
in either AF_INET or AF_INET6 domains. It is built upon the IO::Socket interface and
inherits all the methods defined by IO::Socket.
.SH CONSTRUCTOR
.IX Header "CONSTRUCTOR"
.IP "new ( [ARGS] )" 4
.IX Item "new ( [ARGS] )"
Creates an \f(CW\*(C`IO::Socket::INET6\*(C'\fR object, which is a reference to a
newly created symbol (see the \f(CW\*(C`Symbol\*(C'\fR package). \f(CW\*(C`new\*(C'\fR
optionally takes arguments, these arguments are in key-value pairs.
.Sp
In addition to the key-value pairs accepted by IO::Socket,
\&\f(CW\*(C`IO::Socket::INET6\*(C'\fR provides.
.Sp
.Vb 10
\&    Domain      Address family               AF_INET | AF_INET6 | AF_UNSPEC (default)
\&    PeerAddr    Remote host address          <hostname>[:<port>]
\&    PeerHost    Synonym for PeerAddr
\&    PeerPort    Remote port or service       <service>[(<no>)] | <no>
\&    PeerFlow    Remote flow information
\&    PeerScope   Remote address scope
\&    LocalAddr   Local host bind address      hostname[:port]
\&    LocalHost   Synonym for LocalAddr
\&    LocalPort   Local host bind port         <service>[(<no>)] | <no>
\&    LocalFlow   Local host flow information
\&    LocalScope  Local host address scope
\&    Proto       Protocol name (or number)    "tcp" | "udp" | ...
\&    Type        Socket type                  SOCK_STREAM | SOCK_DGRAM | ...
\&    Listen      Queue size for listen
\&    ReuseAddr   Set SO_REUSEADDR before binding
\&    Reuse       Set SO_REUSEADDR before binding (deprecated, prefer ReuseAddr)
\&    ReusePort   Set SO_REUSEPORT before binding
\&    Broadcast   Set SO_BROADCAST before binding
\&    Timeout     Timeout value for various operations
\&    MultiHomed  Try all addresses for multi\-homed hosts
\&    Blocking    Determine if connection will be blocking mode
.Ve
.Sp
If \f(CW\*(C`Listen\*(C'\fR is defined then a listen socket is created, else if the
socket type, which is derived from the protocol, is SOCK_STREAM then
\&\fBconnect()\fR is called.
.Sp
Although it is not illegal, the use of \f(CW\*(C`MultiHomed\*(C'\fR on a socket
which is in non-blocking mode is of little use. This is because the
first connect will never fail with a timeout as the connect call
will not block.
.Sp
The \f(CW\*(C`PeerAddr\*(C'\fR can be a hostname,  the IPv6\-address on the
"2001:800:40:2a05::10" form , or the IPv4\-address on the "213.34.234.245" form.
The \f(CW\*(C`PeerPort\*(C'\fR can be a number or a symbolic
service name.  The service name might be followed by a number in
parenthesis which is used if the service is not known by the system.
The \f(CW\*(C`PeerPort\*(C'\fR specification can also be embedded in the \f(CW\*(C`PeerAddr\*(C'\fR
by preceding it with a ":", and closing the IPv6 address on brackets "[]" if
necessary: "124.678.12.34:23","[2a05:345f::10]:23","any.server.com:23".
.Sp
If \f(CW\*(C`Domain\*(C'\fR is not given, AF_UNSPEC is assumed, that is, both AF_INET and AF_INET6 will
be both considered when resolving DNS names. AF_INET6 has priority.
If you guess you are in trouble not reaching the peer,(the service is not available via
AF_INET6 but AF_INET) you can either try Multihomed (try any address/family until reach)
or concrete your address \f(CW\*(C`family\*(C'\fR (AF_INET, AF_INET6).
.Sp
If \f(CW\*(C`Proto\*(C'\fR is not given and you specify a symbolic \f(CW\*(C`PeerPort\*(C'\fR port,
then the constructor will try to derive \f(CW\*(C`Proto\*(C'\fR from the service
name.  As a last resort \f(CW\*(C`Proto\*(C'\fR "tcp" is assumed.  The \f(CW\*(C`Type\*(C'\fR
parameter will be deduced from \f(CW\*(C`Proto\*(C'\fR if not specified.
.Sp
If the constructor is only passed a single argument, it is assumed to
be a \f(CW\*(C`PeerAddr\*(C'\fR specification.
.Sp
If \f(CW\*(C`Blocking\*(C'\fR is set to 0, the connection will be in nonblocking mode.
If not specified it defaults to 1 (blocking mode).
.Sp
Examples:
.Sp
.Vb 3
\&   $sock = IO::Socket::INET6\->new(PeerAddr => \*(Aqwww.perl.org\*(Aq,
\&                                 PeerPort => \*(Aqhttp(80)\*(Aq,
\&                                 Proto    => \*(Aqtcp\*(Aq);
.Ve
.Sp
Suppose either you have no IPv6 connectivity or www.perl.org has no http service on IPv6. Then,
.Sp
(Trying all address/families until reach)
.Sp
.Vb 4
\&   $sock = IO::Socket::INET6\->new(PeerAddr => \*(Aqwww.perl.org\*(Aq,
\&                                 PeerPort => \*(Aqhttp(80)\*(Aq,
\&                                 Multihomed => 1 ,
\&                                 Proto    => \*(Aqtcp\*(Aq);
.Ve
.Sp
(Concrete to IPv4 protocol)
.Sp
.Vb 4
\&   $sock = IO::Socket::INET6\->new(PeerAddr => \*(Aqwww.perl.org\*(Aq,
\&                                 PeerPort => \*(Aqhttp(80)\*(Aq,
\&                                 Domain => AF_INET ,
\&                                 Proto    => \*(Aqtcp\*(Aq);
\&
\&
\&   $sock = IO::Socket::INET6\->new(PeerAddr => \*(Aqlocalhost:smtp(25)\*(Aq);
\&
\&   $sock = IO::Socket::INET6\->new(Listen    => 5,
\&                                 LocalAddr => \*(Aqlocalhost\*(Aq,
\&                                 LocalPort => 9000,
\&                                 Proto     => \*(Aqtcp\*(Aq);
\&
\&   $sock = IO::Socket::INET6\->new(\*(Aq[::1]:25\*(Aq);
\&
\&   $sock = IO::Socket::INET6\->new(PeerPort  => 9999,
\&                                 PeerAddr  => Socket6::inet_ntop(AF_INET6,in6addr_broadcast),
\&                                 Proto     => udp,
\&                                 LocalAddr => \*(Aqlocalhost\*(Aq,
\&                                 Broadcast => 1 )
\&                             or die "Can\*(Aqt bind : $@\en";
\&
\& NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
.Ve
.Sp
As of VERSION 1.18 all IO::Socket objects have autoflush turned on
by default. This was not the case with earlier releases.
.Sp
.Vb 1
\& NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE
.Ve
.SS METHODS
.IX Subsection "METHODS"
.IP "accept ()" 4
.IX Item "accept ()"
See IO::Socket::INET.
.IP "bind ()" 4
.IX Item "bind ()"
See IO::Socket::INET.
.IP "configure ()" 4
.IX Item "configure ()"
This function exists in this module, but I (= Shlomi Fish) don't know what it
does, or understand it. It's also not tested anywhere. I'll be happy to be
enlightened.
.IP "connect ()" 4
.IX Item "connect ()"
See IO::Socket::INET.
.IP "sockaddr ()" 4
.IX Item "sockaddr ()"
Return the address part of the sockaddr structure for the socket
.IP \fBsockdomain()\fR 4
.IX Item "sockdomain()"
Returns the domain of the socket \- AF_INET or AF_INET6 or whatever.
.IP "sockport ()" 4
.IX Item "sockport ()"
Return the port number that the socket is using on the local host
.IP "sockhost ()" 4
.IX Item "sockhost ()"
Return the address part of the sockaddr structure for the socket in a
text form ("2001:800:40:2a05::10" or "245.245.13.27")
.IP "sockflow ()" 4
.IX Item "sockflow ()"
Return the flow information part of the sockaddr structure for the socket
.IP "sockscope ()" 4
.IX Item "sockscope ()"
Return the scope identification part of the sockaddr structure for the socket
.IP "peeraddr ()" 4
.IX Item "peeraddr ()"
Return the address part of the sockaddr structure for the socket on
the peer host
.IP "peerport ()" 4
.IX Item "peerport ()"
Return the port number for the socket on the peer host.
.IP "peerhost ()" 4
.IX Item "peerhost ()"
Return the address part of the sockaddr structure for the socket on the
peer host in a text form ("2001:800:40:2a05::10" or "245.245.13.27")
.IP "peerflow ()" 4
.IX Item "peerflow ()"
Return the flow information part of the sockaddr structure for the socket
on the peer host
.IP "peerscope ()" 4
.IX Item "peerscope ()"
Return the scope identification part of the sockaddr structure for the socket
on the peer host
.SH REPOSITORY
.IX Header "REPOSITORY"
The Subversion repository for this module carrying complete version history
and other information is:
.PP
<http://svn.berlios.de/svnroot/repos/web\-cpan/IO\-Socket\-INET6/>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Socket,Socket6, IO::Socket
.SH AUTHOR
.IX Header "AUTHOR"
This program is based on IO::Socket::INET by Graham Barr
<gbarr@pobox.com> and currently maintained by the Perl Porters.
.PP
Modified by Rafael Martinez Torres <rafael.martinez@novagnet.com> and
Euro6IX project.
.PP
Modified further by Shlomi Fish <shlomif@iglu.org.il>, while disclaiming
all copyrights.
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright (c) 2003\- Rafael Martinez Torres <rafael.martinez@novagnet.com>.
.PP
Copyright (c) 2003\- Euro6IX project.
.PP
Copyright (c) 1996\-8 Graham Barr <gbarr@pobox.com>.
.PP
All rights reserved.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
