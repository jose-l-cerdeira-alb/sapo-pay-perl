.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Transport::Sendmail 3"
.TH Mail::Transport::Sendmail 3 2020-07-22 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Mail::Transport::Sendmail \- transmit messages using external Sendmail program
.SH INHERITANCE
.IX Header "INHERITANCE"
.Vb 4
\& Mail::Transport::Sendmail
\&   is a Mail::Transport::Send
\&   is a Mail::Transport
\&   is a Mail::Reporter
.Ve
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\& my $sender = Mail::Transport::Sendmail\->new(...);
\& $sender\->send($message);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Implements mail transport using the external \f(CW\*(AqSendmail\*(Aq\fR program.
When instantiated, the mailer will look for the binary in specific system
directories, and the first version found is taken.
.PP
Some people use Postfix as MTA.  Postfix can be installed as replacement
for Sendmail: is provides a program with the same name and options.  So,
this module supports postfix as well.
.PP
\&\fBWARNING:\fR When you do bulk email sending with local delivery via
Postfix, you can probably better use the SMTP backend to connect
to postfix.  The \f(CW\*(C`sendmail\*(C'\fR command delivers to \f(CW\*(C`maildrop\*(C'\fR.  From
\&\f(CW\*(C`maildrop\*(C'\fR, the \f(CW\*(C`pickupd\*(C'\fR will only sequentially insert messages
into \f(CW\*(C`cleanup\*(C'\fR.  That process can take considerable elapse time.
Directly inserting via \f(CW\*(C`smtpd\*(C'\fR will parallellize the cleanup process.
.PP
Extends "DESCRIPTION" in Mail::Transport::Send.
.SH METHODS
.IX Header "METHODS"
Extends "METHODS" in Mail::Transport::Send.
.SS Constructors
.IX Subsection "Constructors"
Extends "Constructors" in Mail::Transport::Send.
.IP Mail::Transport::Sendmail\->\fBnew\fR(%options) 4
.IX Item "Mail::Transport::Sendmail->new(%options)"
.Vb 10
\& \-Option          \-\-Defined in     \-\-Default
\&  executable        Mail::Transport  undef
\&  hostname          Mail::Transport  \*(Aqlocalhost\*(Aq
\&  interval          Mail::Transport  30
\&  log               Mail::Reporter   \*(AqWARNINGS\*(Aq
\&  password          Mail::Transport  undef
\&  port              Mail::Transport  undef
\&  proxy             Mail::Transport  undef
\&  retry             Mail::Transport  <false>
\&  sendmail_options                   []
\&  timeout           Mail::Transport  120
\&  trace             Mail::Reporter   \*(AqWARNINGS\*(Aq
\&  username          Mail::Transport  undef
\&  via               Mail::Transport  \*(Aqsendmail\*(Aq
.Ve
.RS 4
.IP "executable => FILENAME" 2
.IX Item "executable => FILENAME"
.PD 0
.IP "hostname => HOSTNAME|ARRAY" 2
.IX Item "hostname => HOSTNAME|ARRAY"
.IP "interval => SECONDS" 2
.IX Item "interval => SECONDS"
.IP "log => LEVEL" 2
.IX Item "log => LEVEL"
.IP "password => STRING" 2
.IX Item "password => STRING"
.IP "port => INTEGER" 2
.IX Item "port => INTEGER"
.IP "proxy => PATH" 2
.IX Item "proxy => PATH"
.IP "retry => NUMBER|undef" 2
.IX Item "retry => NUMBER|undef"
.IP "sendmail_options => ARRAY" 2
.IX Item "sendmail_options => ARRAY"
.PD
Add to the command-line of the started sendmail MTU a list of
separate words.  So say \f(CW\*(C` [ \*(Aq\-f\*(Aq, $file ] \*(C'\fR and not \f(CW\*(C` [ "\-f $file" ] \*(C'\fR,
because the latter will be taken by sendmail as one word only.
.IP "timeout => SECONDS" 2
.IX Item "timeout => SECONDS"
.PD 0
.IP "trace => LEVEL" 2
.IX Item "trace => LEVEL"
.IP "username => STRING" 2
.IX Item "username => STRING"
.IP "via => CLASS|NAME" 2
.IX Item "via => CLASS|NAME"
.RE
.RS 4
.RE
.PD
.SS "Sending mail"
.IX Subsection "Sending mail"
Extends "Sending mail" in Mail::Transport::Send.
.ie n .IP "$obj\->\fBdestinations\fR( $message, [$address|ARRAY] )" 4
.el .IP "\f(CW$obj\fR\->\fBdestinations\fR( \f(CW$message\fR, [$address|ARRAY] )" 4
.IX Item "$obj->destinations( $message, [$address|ARRAY] )"
Inherited, see "Sending mail" in Mail::Transport::Send
.ie n .IP "$obj\->\fBputContent\fR($message, $fh, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBputContent\fR($message, \f(CW$fh\fR, \f(CW%options\fR)" 4
.IX Item "$obj->putContent($message, $fh, %options)"
Inherited, see "Sending mail" in Mail::Transport::Send
.ie n .IP "$obj\->\fBsend\fR($message, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBsend\fR($message, \f(CW%options\fR)" 4
.IX Item "$obj->send($message, %options)"
Inherited, see "Sending mail" in Mail::Transport::Send
.ie n .IP "$obj\->\fBtrySend\fR($message, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBtrySend\fR($message, \f(CW%options\fR)" 4
.IX Item "$obj->trySend($message, %options)"
.Vb 2
\& \-Option          \-\-Default
\&  sendmail_options  undef
.Ve
.RS 4
.IP "sendmail_options => ARRAY" 2
.IX Item "sendmail_options => ARRAY"
.RE
.RS 4
.RE
.SS "Server connection"
.IX Subsection "Server connection"
Extends "Server connection" in Mail::Transport::Send.
.ie n .IP "$obj\->\fBfindBinary\fR( $name, [@directories] )" 4
.el .IP "\f(CW$obj\fR\->\fBfindBinary\fR( \f(CW$name\fR, [@directories] )" 4
.IX Item "$obj->findBinary( $name, [@directories] )"
Inherited, see "Server connection" in Mail::Transport
.ie n .IP $obj\->\fBremoteHost\fR() 4
.el .IP \f(CW$obj\fR\->\fBremoteHost\fR() 4
.IX Item "$obj->remoteHost()"
Inherited, see "Server connection" in Mail::Transport
.ie n .IP $obj\->\fBretry\fR() 4
.el .IP \f(CW$obj\fR\->\fBretry\fR() 4
.IX Item "$obj->retry()"
Inherited, see "Server connection" in Mail::Transport
.SS "Error handling"
.IX Subsection "Error handling"
Extends "Error handling" in Mail::Transport::Send.
.ie n .IP $obj\->\fBAUTOLOAD\fR() 4
.el .IP \f(CW$obj\fR\->\fBAUTOLOAD\fR() 4
.IX Item "$obj->AUTOLOAD()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBaddReport\fR($object) 4
.el .IP \f(CW$obj\fR\->\fBaddReport\fR($object) 4
.IX Item "$obj->addReport($object)"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "$obj->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD 0
.ie n .IP "Mail::Transport::Sendmail\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "Mail::Transport::Sendmail\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "Mail::Transport::Sendmail->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBerrors\fR() 4
.el .IP \f(CW$obj\fR\->\fBerrors\fR() 4
.IX Item "$obj->errors()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR( [$level, [$strings]] )" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "$obj->log( [$level, [$strings]] )"
.PD 0
.IP "Mail::Transport::Sendmail\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "Mail::Transport::Sendmail->log( [$level, [$strings]] )"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBlogPriority\fR($level) 4
.el .IP \f(CW$obj\fR\->\fBlogPriority\fR($level) 4
.IX Item "$obj->logPriority($level)"
.PD 0
.IP Mail::Transport::Sendmail\->\fBlogPriority\fR($level) 4
.IX Item "Mail::Transport::Sendmail->logPriority($level)"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBlogSettings\fR() 4
.el .IP \f(CW$obj\fR\->\fBlogSettings\fR() 4
.IX Item "$obj->logSettings()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBnotImplemented\fR() 4
.el .IP \f(CW$obj\fR\->\fBnotImplemented\fR() 4
.IX Item "$obj->notImplemented()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR( [$level] )" 4
.IX Item "$obj->report( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR( [$level] )" 4
.IX Item "$obj->reportAll( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR( [$level] )" 4
.IX Item "$obj->trace( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBwarnings\fR() 4
.el .IP \f(CW$obj\fR\->\fBwarnings\fR() 4
.IX Item "$obj->warnings()"
Inherited, see "Error handling" in Mail::Reporter
.SS Cleanup
.IX Subsection "Cleanup"
Extends "Cleanup" in Mail::Transport::Send.
.ie n .IP $obj\->\fBDESTROY\fR() 4
.el .IP \f(CW$obj\fR\->\fBDESTROY\fR() 4
.IX Item "$obj->DESTROY()"
Inherited, see "Cleanup" in Mail::Reporter
.SH DIAGNOSTICS
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Errors when closing sendmail mailer $program: $!" 4
.el .IP "Error: Errors when closing sendmail mailer \f(CW$program:\fR $!" 4
.IX Item "Error: Errors when closing sendmail mailer $program: $!"
The was no problem starting the sendmail mail transfer agent, but for
some specific reason the message could not be handled correctly.
.IP "Warning: Message has no destination" 4
.IX Item "Warning: Message has no destination"
It was not possible to figure-out where the message is intended to go
to.
.ie n .IP "Error: Package $package does not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR does not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package does not implement $method."
Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.
.IP "Warning: Resent group does not specify a destination" 4
.IX Item "Warning: Resent group does not specify a destination"
The message which is sent is the result of a bounce (for instance
created with \fBMail::Message::bounce()\fR), and therefore starts with a
\&\f(CW\*(C`Received\*(C'\fR header field.  With the \f(CW\*(C`bounce\*(C'\fR, the new destination(s)
of the message are given, which should be included as \f(CW\*(C`Resent\-To\*(C'\fR,
\&\f(CW\*(C`Resent\-Cc\*(C'\fR, and \f(CW\*(C`Resent\-Bcc\*(C'\fR.
.Sp
The \f(CW\*(C`To\*(C'\fR, \f(CW\*(C`Cc\*(C'\fR, and \f(CW\*(C`Bcc\*(C'\fR header information is only used if no
\&\f(CW\*(C`Received\*(C'\fR was found.  That seems to be the best explanation of the RFC.
.Sp
As alternative, you may also specify the \f(CW\*(C`to\*(C'\fR option to some of the senders
(for instance Mail::Transport::SMTP::send(to) to overrule any information
found in the message itself about the destination.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Transport distribution version 3.005,
built on July 22, 2020. Website: \fIhttp://perl.overmeer.net/CPAN/\fR
.SH LICENSE
.IX Header "LICENSE"
Copyrights 2001\-2020 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://dev.perl.org/licenses/\fR
