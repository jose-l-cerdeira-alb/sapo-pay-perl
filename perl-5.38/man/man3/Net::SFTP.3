.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::SFTP 3"
.TH Net::SFTP 3 2017-06-27 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Net::SFTP \- Secure File Transfer Protocol client
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 4
\&    use Net::SFTP;
\&    my $sftp = Net::SFTP\->new($host);
\&    $sftp\->get("foo", "bar");
\&    $sftp\->put("bar", "baz");
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
\&\fINet::SFTP\fR is a pure-Perl implementation of the Secure File
Transfer Protocol (SFTP) \- file transfer built on top of the
SSH2 protocol. \fINet::SFTP\fR uses \fINet::SSH::Perl\fR to build a
secure, encrypted tunnel through which files can be transferred
and managed. It provides a subset of the commands listed in
the SSH File Transfer Protocol IETF draft, which can be found
at \fIhttp://www.openssh.com/txt/draft\-ietf\-secsh\-filexfer\-00.txt\fR.
.PP
SFTP stands for Secure File Transfer Protocol and is a method of
transferring files between machines over a secure, encrypted
connection (as opposed to regular FTP, which functions over an
insecure connection). The security in SFTP comes through its
integration with SSH, which provides an encrypted transport
layer over which the SFTP commands are executed, and over which
files can be transferred. The SFTP protocol defines a client
and a server; only the client, not the server, is implemented
in \fINet::SFTP\fR.
.PP
Because it is built upon SSH, SFTP inherits all of the built-in
functionality provided by \fINet::SSH::Perl\fR: encrypted
communications between client and server, multiple supported
authentication methods (eg. password, public key, etc.).
.SH USAGE
.IX Header "USAGE"
.ie n .SS "Net::SFTP\->new($host, %args)"
.el .SS "Net::SFTP\->new($host, \f(CW%args\fP)"
.IX Subsection "Net::SFTP->new($host, %args)"
Opens a new SFTP connection with a remote host \fR\f(CI$host\fR\fI\fR, and
returns a \fINet::SFTP\fR object representing that open
connection.
.PP
\&\fR\f(CI%args\fR\fI\fR can contain:
.IP \(bu 4
user
.Sp
The username to use to log in to the remote server. This should
be your SSH login, and can be empty, in which case the username
is drawn from the user executing the process.
.Sp
See the \fIlogin\fR method in \fINet::SSH::Perl\fR for more details.
.IP \(bu 4
password
.Sp
The password to use to log in to the remote server. This should
be your SSH password, if you use password authentication in
SSH; if you use public key authentication, this argument is
unused.
.Sp
See the \fIlogin\fR method in \fINet::SSH::Perl\fR for more details.
.IP \(bu 4
debug
.Sp
If set to a true value, debugging messages will be printed out
for both the SSH and SFTP protocols. This automatically turns
on the \fIdebug\fR parameter in \fINet::SSH::Perl\fR.
.Sp
The default is false.
.IP \(bu 4
warn
.Sp
If given a sub ref, the sub is called with \f(CW$self\fR and any warning
message; if set to false, warnings are supressed; otherwise they
are output with 'warn' (default).
.IP \(bu 4
ssh_args
.Sp
Specifies a reference to a list or hash of named arguments that
should be given to the constructor of the \fINet::SSH::Perl\fR object
underlying the \fINet::SFTP\fR connection.
.Sp
For example, you could use this to set up your authentication
identity files, to set a specific cipher for encryption, etc.,
e.g. \f(CW\*(C`ssh_args => [ cipher => \*(Aqaes256\-cbc\*(Aq, options =<gt\*(C'\fR 
[ "MACs +hmac\-sha1", "HashKnownHosts yes" ] ]>.
.Sp
See the \fInew\fR method in \fINet::SSH::Perl\fR for more details.
.ie n .SS $sftp\->status
.el .SS \f(CW$sftp\fP\->status
.IX Subsection "$sftp->status"
Returns the last remote SFTP status value.  Only useful after one
of the following methods has failed.  Returns SSH2_FX_OK if there
is no remote error (e.g. local file not found).  In list context,
returns a list of (status code, status text from \f(CW\*(C`fx2txt\*(C'\fR).
.PP
If a low-level protocol error or unexpected local error occurs,
we die with an error message.
.ie n .SS "$sftp\->get($remote [, $local [, \e&callback ] ])"
.el .SS "\f(CW$sftp\fP\->get($remote [, \f(CW$local\fP [, \e&callback ] ])"
.IX Subsection "$sftp->get($remote [, $local [, &callback ] ])"
Downloads a file \fR\f(CI$remote\fR\fI\fR from the remote host. If \fI\fR\f(CI$local\fR\fI\fR
is specified, it is opened/created, and the contents of the
remote file \fI\fR\f(CI$remote\fR\fI\fR are written to \fI\fR\f(CI$local\fR\fI\fR. In addition,
its filesystem attributes (atime, mtime, permissions, etc.)
will be set to those of the remote file.
.PP
If \fIget\fR is called in a non-void context, returns the contents
of \fR\f(CI$remote\fR\fI\fR (as well as writing them to \fI\fR\f(CI$local\fR\fI\fR, if \fI\fR\f(CI$local\fR\fI\fR
is provided.  Undef is returned on failure.
.PP
\&\fR\f(CI$local\fR\fI\fR is optional. If not provided, the contents of the
remote file \fI\fR\f(CI$remote\fR\fI\fR will be either discarded, if \fIget\fR is
called in void context, or returned from \fIget\fR if called in
a non-void context. Presumably, in the former case, you will
use the callback function \fI\e&callback\fR to "do something" with
the contents of \fI\fR\f(CI$remote\fR\fI\fR.
.PP
If \fI\e&callback\fR is specified, it should be a reference to a
subroutine. The subroutine will be executed at each iteration
of the read loop (files are generally read in 8192\-byte
blocks, although this depends on the server implementation).
The callback function will receive as arguments: a
\&\fINet::SFTP\fR object with an open SFTP connection; the data
read from the SFTP server; the offset from the beginning of
the file (in bytes); and the total size of the file (in
bytes). You can use this mechanism to provide status messages,
download progress meters, etc.:
.PP
.Vb 4
\&    sub callback {
\&        my($sftp, $data, $offset, $size) = @_;
\&        print "Read $offset / $size bytes\er";
\&    }
.Ve
.ie n .SS "$sftp\->put($local, $remote [, \e&callback ])"
.el .SS "\f(CW$sftp\fP\->put($local, \f(CW$remote\fP [, \e&callback ])"
.IX Subsection "$sftp->put($local, $remote [, &callback ])"
Uploads a file \fR\f(CI$local\fR\fI\fR from the local host to the remote
host, and saves it as \fI\fR\f(CI$remote\fR\fI\fR.
.PP
If \fI\e&callback\fR is specified, it should be a reference to a
subroutine. The subroutine will be executed at each iteration
of the write loop, directly after the data has been read from
the local file. The callback function will receive as arguments:
a \fINet::SFTP\fR object with an open SFTP connection; the data
read from \fR\f(CI$local\fR\fI\fR, generally in 8192\-byte chunks;; the offset
from the beginning of the file (in bytes); and the total size
of the file (in bytes). You can use this mechanism to provide
status messages, upload progress meters, etc.:
.PP
.Vb 4
\&    sub callback {
\&        my($sftp, $data, $offset, $size) = @_;
\&        print "Wrote $offset / $size bytes\er";
\&    }
.Ve
.PP
Returns true on success, undef on error.
.ie n .SS "$sftp\->ls($remote [, $subref ])"
.el .SS "\f(CW$sftp\fP\->ls($remote [, \f(CW$subref\fP ])"
.IX Subsection "$sftp->ls($remote [, $subref ])"
Fetches a directory listing of \fR\f(CI$remote\fR\fI\fR.
.PP
If \fR\f(CI$subref\fR\fI\fR is specified, for each entry in the directory,
\&\fI\fR\f(CI$subref\fR\fI\fR will be called and given a reference to a hash
with three keys: \fIfilename\fR, the name of the entry in the
directory listing; \fIlongname\fR, an entry in a "long" listing
like \f(CW\*(C`ls \-l\*(C'\fR; and \fIa\fR, a \fINet::SFTP::Attributes\fR object,
which contains the file attributes of the entry (atime, mtime,
permissions, etc.).
.PP
If \fR\f(CI$subref\fR\fI\fR is not specified, returns a list of directory
entries, each of which is a reference to a hash as described
in the previous paragraph.
.SH "COMMAND METHODS"
.IX Header "COMMAND METHODS"
\&\fINet::SFTP\fR supports all of the commands listed in the SFTP
version 3 protocol specification. Each command is available
for execution as a separate method, with a few exceptions:
\&\fISSH_FXP_INIT\fR, \fISSH_FXP_VERSION\fR, and \fISSH_FXP_READDIR\fR.
.PP
These are the available command methods:
.ie n .SS "$sftp\->do_open($path, $flags [, $attrs ])"
.el .SS "\f(CW$sftp\fP\->do_open($path, \f(CW$flags\fP [, \f(CW$attrs\fP ])"
.IX Subsection "$sftp->do_open($path, $flags [, $attrs ])"
Sends the \fISSH_FXP_OPEN\fR command to open a remote file \fR\f(CI$path\fR\fI\fR,
and returns an open handle on success. On failure returns
\&\fIundef\fR. The "open handle" is not a Perl filehandle, nor is
it a file descriptor; it is merely a marker used to identify
the open file between the client and the server.
.PP
\&\fR\f(CI$flags\fR\fI\fR should be a bitmask of open flags, whose values can
be obtained from \fINet::SFTP::Constants\fR:
.PP
.Vb 1
\&    use Net::SFTP::Constants qw( :flags );
.Ve
.PP
\&\fR\f(CI$attrs\fR\fI\fR should be a \fINet::SFTP::Attributes\fR object,
specifying the initial attributes for the file \fI\fR\f(CI$path\fR\fI\fR. If
you're opening the file for reading only, \fI\fR\f(CI$attrs\fR\fI\fR can be
left blank, in which case it will be initialized to an
empty set of attributes.
.ie n .SS "$sftp\->do_read($handle, $offset, $copy_size)"
.el .SS "\f(CW$sftp\fP\->do_read($handle, \f(CW$offset\fP, \f(CW$copy_size\fP)"
.IX Subsection "$sftp->do_read($handle, $offset, $copy_size)"
Sends the \fISSH_FXP_READ\fR command to read from an open file
handle \fR\f(CI$handle\fR\fI\fR, starting at \fI\fR\f(CI$offset\fR\fI\fR, and reading at most
\&\fI\fR\f(CI$copy_size\fR\fI\fR bytes.
.PP
Returns a two-element list consisting of the data read from
the SFTP server in the first slot, and the status code (if any)
in the second. In the case of a successful read, the status code
will be \fIundef\fR, and the data will be defined and true. In the
case of EOF, the status code will be \fISSH2_FX_EOF\fR, and the
data will be \fIundef\fR. And in the case of an error in the read,
a warning will be emitted, the status code will contain the
error code, and the data will be \fIundef\fR.
.ie n .SS "$sftp\->do_write($handle, $offset, $data)"
.el .SS "\f(CW$sftp\fP\->do_write($handle, \f(CW$offset\fP, \f(CW$data\fP)"
.IX Subsection "$sftp->do_write($handle, $offset, $data)"
Sends the \fISSH_FXP_WRITE\fR command to write to an open file handle
\&\fR\f(CI$handle\fR\fI\fR, starting at \fI\fR\f(CI$offset\fR\fI\fR, and where the data to be
written is in \fI\fR\f(CI$data\fR\fI\fR.
.PP
Returns the status code. On a successful write, the status code
will be equal to SSH2_FX_OK; in the case of an unsuccessful
write, a warning will be emitted, and the status code will
contain the error returned from the server.
.ie n .SS $sftp\->do_close($handle)
.el .SS \f(CW$sftp\fP\->do_close($handle)
.IX Subsection "$sftp->do_close($handle)"
Sends the \fISSH_FXP_CLOSE\fR command to close either an open
file or open directory, identified by \fR\f(CI$handle\fR\fI\fR (the handle
returned from either \fIdo_open\fR or \fIdo_opendir\fR).
.PP
Emits a warning if the \fICLOSE\fR fails.
.PP
Returns the status code for the operation. To turn the
status code into a text message, take a look at the \f(CW\*(C`fx2txt\*(C'\fR
function in \fINet::SFTP::Util\fR.
.ie n .SS $sftp\->do_lstat($path)
.el .SS \f(CW$sftp\fP\->do_lstat($path)
.IX Subsection "$sftp->do_lstat($path)"
.ie n .SS $sftp\->do_fstat($handle)
.el .SS \f(CW$sftp\fP\->do_fstat($handle)
.IX Subsection "$sftp->do_fstat($handle)"
.ie n .SS $sftp\->do_stat($path)
.el .SS \f(CW$sftp\fP\->do_stat($path)
.IX Subsection "$sftp->do_stat($path)"
These three methods all perform similar functionality: they
run a \fIstat\fR on a remote file and return the results in a
\&\fINet::SFTP::Attributes\fR object on success.
.PP
On failure, all three methods return \fIundef\fR, and emit a
warning.
.PP
\&\fIdo_lstat\fR sends a \fISSH_FXP_LSTAT\fR command to obtain file
attributes for a named file \fR\f(CI$path\fR\fI\fR. \fIdo_stat\fR sends a
\&\fISSH_FXP_STAT\fR command, and differs from \fIdo_lstat\fR only
in that \fIdo_stat\fR follows symbolic links on the server,
whereas \fIdo_lstat\fR does not follow symbolic links.
.PP
\&\fIdo_fstat\fR sends a \fISSH_FXP_FSTAT\fR command to obtain file
attributes for an open file handle \fR\f(CI$handle\fR\fI\fR.
.ie n .SS "$sftp\->do_setstat($path, $attrs)"
.el .SS "\f(CW$sftp\fP\->do_setstat($path, \f(CW$attrs\fP)"
.IX Subsection "$sftp->do_setstat($path, $attrs)"
.ie n .SS "$sftp\->do_fsetstat($handle, $attrs)"
.el .SS "\f(CW$sftp\fP\->do_fsetstat($handle, \f(CW$attrs\fP)"
.IX Subsection "$sftp->do_fsetstat($handle, $attrs)"
These two methods both perform similar functionality: they
set the file attributes of a remote file. In both cases
\&\fR\f(CI$attrs\fR\fI\fR should be a \fINet::SFTP::Attributes\fR object.
.PP
\&\fIdo_setstat\fR sends a \fISSH_FXP_SETSTAT\fR command to set file
attributes for a remote named file \fR\f(CI$path\fR\fI\fR to \fI\fR\f(CI$attrs\fR\fI\fR.
.PP
\&\fIdo_fsetstat\fR sends a \fISSH_FXP_FSETSTAT\fR command to set the
attributes of an open file handle \fR\f(CI$handle\fR\fI\fR to \fI\fR\f(CI$attrs\fR\fI\fR.
.PP
Both methods emit a warning if the operation failes, and
both return the status code for the operation. To turn the
status code into a text message, take a look at the \f(CW\*(C`fx2txt\*(C'\fR
function in \fINet::SFTP::Util\fR.
.ie n .SS $sftp\->do_opendir($path)
.el .SS \f(CW$sftp\fP\->do_opendir($path)
.IX Subsection "$sftp->do_opendir($path)"
Sends a \fISSH_FXP_OPENDIR\fR command to open the remote
directory \fR\f(CI$path\fR\fI\fR, and returns an open handle on success.
On failure returns \fIundef\fR.
.ie n .SS $sftp\->do_remove($path)
.el .SS \f(CW$sftp\fP\->do_remove($path)
.IX Subsection "$sftp->do_remove($path)"
Sends a \fISSH_FXP_REMOVE\fR command to remove the remote file
\&\fR\f(CI$path\fR\fI\fR.
.PP
Emits a warning if the operation fails.
.PP
Returns the status code for the operation. To turn the
status code into a text message, take a look at the \f(CW\*(C`fx2txt\*(C'\fR
function in \fINet::SFTP::Util\fR.
.ie n .SS "$sftp\->do_mkdir($path, $attrs)"
.el .SS "\f(CW$sftp\fP\->do_mkdir($path, \f(CW$attrs\fP)"
.IX Subsection "$sftp->do_mkdir($path, $attrs)"
Sends a \fISSH_FXP_MKDIR\fR command to create a remote directory
\&\fR\f(CI$path\fR\fI\fR whose attributes should be initialized to \fI\fR\f(CI$attrs\fR\fI\fR,
a \fINet::SFTP::Attributes\fR object.
.PP
Emits a warning if the operation fails.
.PP
Returns the status code for the operation. To turn the
status code into a text message, take a look at the \f(CW\*(C`fx2txt\*(C'\fR
function in \fINet::SFTP::Util\fR.
.ie n .SS $sftp\->do_rmdir($path)
.el .SS \f(CW$sftp\fP\->do_rmdir($path)
.IX Subsection "$sftp->do_rmdir($path)"
Sends a \fISSH_FXP_RMDIR\fR command to remove a remote directory
\&\fR\f(CI$path\fR\fI\fR.
.PP
Emits a warning if the operation fails.
.PP
Returns the status code for the operation. To turn the
status code into a text message, take a look at the \f(CW\*(C`fx2txt\*(C'\fR
function in \fINet::SFTP::Util\fR.
.ie n .SS $sftp\->do_realpath($path)
.el .SS \f(CW$sftp\fP\->do_realpath($path)
.IX Subsection "$sftp->do_realpath($path)"
Sends a \fISSH_FXP_REALPATH\fR command to canonicalise \fR\f(CI$path\fR\fI\fR
to an absolute path. This can be useful for turning paths
containing \fI'..'\fR into absolute paths.
.PP
Returns the absolute path on success, \fIundef\fR on failure.
.ie n .SS "$sftp\->do_rename($old, $new)"
.el .SS "\f(CW$sftp\fP\->do_rename($old, \f(CW$new\fP)"
.IX Subsection "$sftp->do_rename($old, $new)"
Sends a \fISSH_FXP_RENAME\fR command to rename \fR\f(CI$old\fR\fI\fR to \fI\fR\f(CI$new\fR\fI\fR.
.PP
Emits a warning if the operation fails.
.PP
Returns the status code for the operation. To turn the
status code into a text message, take a look at the \f(CW\*(C`fx2txt\*(C'\fR
function in \fINet::SFTP::Util\fR.
.SH SUPPORT
.IX Header "SUPPORT"
For samples/tutorials, take a look at the scripts in \fIeg/\fR in
the distribution directory.
.PP
There is a mailing list for development discussion and usage
questions.  Posting is limited to subscribers only.  You can sign up
at http://lists.sourceforge.net/lists/listinfo/ssh\-sftp\-perl\-users
.PP
Please report all bugs via rt.cpan.org at
https://rt.cpan.org/NoAuth/ReportBug.html?Queue=net%3A%3Asftp
.SH AUTHOR
.IX Header "AUTHOR"
Current maintainer is David Robins, dbrobins@cpan.org.
.PP
Previous maintainer was Dave Rolsky, autarch@urth.org.
.PP
Originally written by Benjamin Trott.
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright (c) 2001\-2003 Benjamin Trott, Copyright (c) 2003\-2004 David
Rolsky.  Copyright (c) David Robins.  All rights reserved.  This
program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
The full text of the license can be found in the LICENSE file included
with this module.
