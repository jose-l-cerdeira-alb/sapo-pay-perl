.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "AnyEvent::HTTP::Request 3"
.TH AnyEvent::HTTP::Request 3 2013-06-13 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
AnyEvent::HTTP::Request \- HTTP Request object for AnyEvent::HTTP
.SH VERSION
.IX Header "VERSION"
version 0.302
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 8
\&  # parses the same argument list as AnyEvent::HTTP::http_request
\&  my $req = AnyEvent::HTTP::Request\->new(
\&    POST => $uri,
\&    body => $body,
\&    headers => \e%headers,
\&    %params,
\&    sub { ... }
\&  );
\&
\&  # provides introspection
\&  print $req\->header(\*(Aquser\-agent\*(Aq);
\&  print $req\->uri;
\&
\&  # can be upgraded to an HTTP::Request object
\&  my $http_req = $req\->to_http_message;
\&
\&  # or submitted via AnyEvent::HTTP::http_request
\&  $req\->send();
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This class creates a lightweight object
to represent an HTTP request as used by AnyEvent::HTTP.
.PP
It was created to provide simple, clear test code
for parsing the parameters passed to "http_request" in AnyEvent::HTTP.
.PP
Instead of code that looks something like this:
.PP
.Vb 5
\&  is $args[0],       \*(AqPOST\*(Aq,              \*(Aqrequest method\*(Aq;
\&  is $args[1],       \*(Aqhttp://some/where\*(Aq, \*(Aqrequest uri\*(Aq;
\&  is ref($args[\-1]), \*(AqCODE\*(Aq,              \*(Aqhttp_request callback\*(Aq;
\&  is_deeply { @args[ 2 .. $#args \- 1 ] }\->{headers},
\&    \e%expected_headers, \*(Aqrequest headers\*(Aq;
.Ve
.PP
You can write clearer, simpler code like this:
.PP
.Vb 1
\&  my $req = AnyEvent::HTTP::Request\->new(@args);
\&
\&  is $req\->method,  \*(AqPOST\*(Aq,              \*(Aqrequest method\*(Aq;
\&  is $req\->uri,     \*(Aqhttp://some/where\*(Aq, \*(Aqrequest uri\*(Aq;
\&  is ref($req\->cb), \*(AqCODE\*(Aq,              \*(Aqhttp_request callback\*(Aq;
\&  is_deeply $req\->headers, \e%expected_headers, \*(Aqrequest headers\*(Aq;
.Ve
.PP
It's a little less weird, and easier to maintain (and do again).
.PP
This class also allows you to build an object by passing a hashref
of named parameters in case you'd prefer that.
You can then call "send" to actually make the request
(via "http_request" in AnyEvent::HTTP),
or "args" to get the list of arguments the object would pass.
.PP
It can also be converted from or to
the more featureful
HTTP::Request.
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.SS new
.IX Subsection "new"
Accepts the same argument list as
"http_request" in AnyEvent::HTTP
(see "parse_args"):
.PP
.Vb 7
\&  AnyEvent::HTTP::Request\->new(
\&    $method => $uri,
\&    body    => $body,
\&    headers => \e%headers,
\&    %params,
\&    sub { ... }
\&  );
.Ve
.PP
Alternatively accepts an instance of
HTTP::Request
with an optional hashref of extra attributes
(see "from_http_message"):
.PP
.Vb 7
\&  AnyEvent::HTTP::Request\->new(
\&    HTTP::Request\->new( $method, $uri, $headers, $body ),
\&    {
\&      cb => sub { ... },
\&      params => \e%params,
\&    }
\&  );
.Ve
.PP
Also accepts a single hashref of named attributes
(see "ATTRIBUTES"):
.PP
.Vb 8
\&  AnyEvent::HTTP::Request\->new({
\&    method  => \*(AqPOST\*(Aq,
\&    uri     => \*(Aqhttp://example.com\*(Aq,
\&    cb      => sub { ... },
\&    params  => \e%params,
\&    headers => \e%headers,
\&    body    => $body,
\&  });
.Ve
.SS parse_args
.IX Subsection "parse_args"
Called by the constructor
to parse the argument list
for
"http_request" in AnyEvent::HTTP
and return a hashref which will be the basis for the object.
.PP
The list should look like
\&\f(CW\*(C`($method, $uri, %optional, \e&callback)\*(C'\fR
where the \f(CW%optional\fR hash may include \f(CW\*(C`body\*(C'\fR, \f(CW\*(C`headers\*(C'\fR,
and any of the other options accepted by
"http_request" in AnyEvent::HTTP
(which will become "params").
.SS from_http_message
.IX Subsection "from_http_message"
Called by the constructor
when "new" is passed an instance of HTTP::Request.
.PP
Since only \f(CW\*(C`method\*(C'\fR, \f(CW\*(C`uri\*(C'\fR, \f(CW\*(C`headers\*(C'\fR, and \f(CW\*(C`body\*(C'\fR
can be determined from HTTP::Request,
a hashref can be passed as a second parameter
containing \f(CW\*(C`cb\*(C'\fR and \f(CW\*(C`params\*(C'\fR.
.SH ATTRIBUTES
.IX Header "ATTRIBUTES"
.SS method
.IX Subsection "method"
Request method (GET, POST, etc)
(first argument to "http_request" in AnyEvent::HTTP)
.SS uri
.IX Subsection "uri"
Request uri (string)
(second argument to "http_request" in AnyEvent::HTTP)
.SS body
.IX Subsection "body"
Request content body
.SS content
.IX Subsection "content"
Alias for "body"
.SS headers
.IX Subsection "headers"
A hashref of the HTTP request headers
.SS params
.IX Subsection "params"
A hashref of the function parameters
(optional middle (key => value) arguments to "http_request" in AnyEvent::HTTP)
.PP
\&\fBNote\fR that these are connection params like
\&\f(CW\*(C`persistent\*(C'\fR and \f(CW\*(C`timeout\*(C'\fR,
not query params like in \f(CW\*(C`CGI\*(C'\fR.
.PP
\&\fBNote\fR that \f(CW\*(C`body\*(C'\fR and \f(CW\*(C`headers\*(C'\fR will not be included.
This hashref is essentially \fIuser-agent\fR parameters.
.SS cb
.IX Subsection "cb"
Callback subroutine reference
(last argument to "http_request" in AnyEvent::HTTP)
.PP
\&\fBNote\fR: For consistency with the other attributes
(and to avoid confusion with other modules)
this is a read-only accessor and will \f(CW\*(C`croak\*(C'\fR if passed any arguments.
.PP
If you intend to execute the callback (to simulate a response)
you can dereference the return value:
.PP
.Vb 1
\&  $req\->cb\->($body, $headers);
.Ve
.PP
or use "respond_with".
.SH METHODS
.IX Header "METHODS"
.SS args
.IX Subsection "args"
Returns a list of arguments that can be passed to
"http_request" in AnyEvent::HTTP
(beware the sub's prototype, though).
.SS respond_with
.IX Subsection "respond_with"
.Vb 3
\&  $req\->respond_with($body, \e%headers);
\&  $req\->respond_with(AnyEvent::HTTP::Response\->new(@args));
\&  $req\->respond_with(HTTP::Response\->new($code, $message, \e@headers, $body));
.Ve
.PP
Simulate a response by calling "cb".
This method is mostly useful for testing,
but then again so is the whole module.
.PP
For convenience this method can accept an instance of
AnyEvent::HTTP::Response
or any list of arguments that can be passed to
"new" in AnyEvent::HTTP::Response.
.SS send
.IX Subsection "send"
Actually submit the request by passing "args"
to "http_request" in AnyEvent::HTTP
.SS to_http_message
.IX Subsection "to_http_message"
Returns an instance of HTTP::Request
to provide additional functionality.
.PP
\&\fBNote\fR that "cb" and "params"
will not be represented in the HTTP::Request object
(since they are for the user-agent and not the request).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP \(bu 4
AnyEvent::HTTP
.IP \(bu 4
AnyEvent::HTTP::Message (base class)
.IP \(bu 4
HTTP::Request \- More featureful object
.SH AUTHOR
.IX Header "AUTHOR"
Randy Stauner <rwstauner@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2012 by Randy Stauner.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
