.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test::XML 3"
.TH Test::XML 3 2024-01-18 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Test::XML \- Compare XML in perl tests
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 6
\&  use Test::XML tests => 3;
\&  is_xml( \*(Aq<foo />\*(Aq, \*(Aq<foo></foo>\*(Aq );   # PASS
\&  is_xml( \*(Aq<foo />\*(Aq, \*(Aq<bar />\*(Aq );       # FAIL
\&  isnt_xml( \*(Aq<foo />\*(Aq, \*(Aq<bar />\*(Aq );     # PASS
\&  is_well_formed_xml(\*(Aq<foo/>\*(Aq);               # PASS
\&  is_well_formed_xml(\*(Aq<foo>\*(Aq);                # FAIL
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module contains generic XML testing tools.  See below for a list of
other modules with functions relating to specific XML modules.
.SH FUNCTIONS
.IX Header "FUNCTIONS"
.IP "is_xml ( GOT, EXPECTED [, TESTNAME ] )" 4
.IX Item "is_xml ( GOT, EXPECTED [, TESTNAME ] )"
This function compares GOT and EXPECTED, both of which are strings of
XML.  The comparison works semantically and will ignore differences in
syntax which are meaningless in xml, such as different quote characters
for attributes, order of attributes or empty tag styles.
.Sp
Returns true or false, depending upon test success.
.IP "isnt_xml( GOT, MUST_NOT_BE [, TESTNAME ] )" 4
.IX Item "isnt_xml( GOT, MUST_NOT_BE [, TESTNAME ] )"
This function is similiar to \fBis_xml()\fR, except that it will fail if GOT
and MUST_NOT_BE are identical.
.IP "is_well_formed_xml( XML [, TESTNAME ] )" 4
.IX Item "is_well_formed_xml( XML [, TESTNAME ] )"
This function determines whether or not a given XML string is parseable
as XML.
.IP "is_good_xml ( XML [, TESTNAME ] )" 4
.IX Item "is_good_xml ( XML [, TESTNAME ] )"
This is an alias for \fBis_well_formed_xml()\fR.
.SH NOTES
.IX Header "NOTES"
There are several features of XML::SemanticDiff that may suprise you
if you are not aware of them.  In particular:
.IP \(bu 4
Leading and trailing whitespace is always stripped, even in elements
with character content.
.IP \(bu 4
Whitespace inside character content is always stripped down to a single
space.
.IP \(bu 4
In mixed content elements (ie: an element with both text and elements
beneath it), all text is treated as a single value.
.IP \(bu 4
The order of elements is ignored.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Test::XML::SAX, Test::XML::Twig.
.PP
Test::More, XML::SemanticDiff.
.SH AUTHOR
.IX Header "AUTHOR"
Dominic Mitchell, <cpan2 (at) semantico.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2002 by semantico
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
