.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "XML::LibXML::AttributeHash 3"
.TH XML::LibXML::AttributeHash 3 2023-07-15 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
XML::LibXML::AttributeHash \- tie an XML::LibXML::Element to a hash to access its attributes
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 3
\& tie my %hash, \*(AqXML::LibXML::AttributeHash\*(Aq, $element;
\& $hash{\*(Aqhref\*(Aq} = \*(Aqhttp://example.com/\*(Aq;
\& print $element\->getAttribute(\*(Aqhref\*(Aq) . "\en";
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This class allows an element's attributes to be accessed as if they were a
plain old Perl hash. Attribute names become hash keys. Namespaced attributes
are keyed using Clark notation.
.PP
.Vb 4
\& my $XLINK = \*(Aqhttp://www.w3.org/1999/xlink\*(Aq;
\& tie my %hash, \*(AqXML::LibXML::AttributeHash\*(Aq, $element;
\& $hash{"{$XLINK}href"} = \*(Aqhttp://localhost/\*(Aq;
\& print $element\->getAttributeNS($XLINK, \*(Aqhref\*(Aq) . "\en";
.Ve
.PP
There is rarely any need to use XML::LibXML::AttributeHash directly. In
general, it is possible to take advantage of XML::LibXML::Element's
overloading. The example in the SYNOPSIS could have been written:
.PP
.Vb 2
\& $element\->{\*(Aqhref\*(Aq} = \*(Aqhttp://example.com/\*(Aq;
\& print $element\->getAttribute(\*(Aqhref\*(Aq) . "\en";
.Ve
.PP
The tie interface allows the passing of additional arguments to
XML::LibXML::AttributeHash:
.PP
.Vb 1
\& tie my %hash, \*(AqXML::LibXML::AttributeHash\*(Aq, $element, %args;
.Ve
.PP
Currently only one argument is supported, the boolean "weaken" which (if
true) indicates that the tied object's reference to the element should be
a weak reference. This is used by XML::LibXML::Element's overloading. The
"weaken" argument is ignored if you don't have a working Scalar::Util::weaken.
