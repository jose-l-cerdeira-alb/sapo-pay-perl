.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "LevenshteinXS 3"
.TH LevenshteinXS 3 2004-06-29 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Text::LevenshteinXS \- An XS implementation of the Levenshtein edit distance
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\& use Text::LevenshteinXS qw(distance);
\&
\& print distance("foo","four");
\& # prints "2"
\&
\& print distance("foo","bar");
\& # prints "3"
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module implements the Levenshtein edit distance in a XS way.
.PP
The Levenshtein edit distance is a measure of the degree of proximity between two strings.
This distance is the number of substitutions, deletions or insertions ("edits") 
needed to transform one string into the other one (and vice versa).
When two strings have distance 0, they are the same.
A good point to start is: <http://www.merriampark.com/ld.htm>
.SH CREDITS
.IX Header "CREDITS"
All the credits go to Vladimir Levenshtein the author of the algorithm and to 
Lorenzo Seidenari who made the C implementation <http://www.merriampark.com/ldc.htm>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Text::Levenshtein , Text::WagnerFischer , Text::Brew , String::Approx
.SH AUTHOR
.IX Header "AUTHOR"
Copyright 2003 Dree Mistrut <\fIdree@friul.it\fR>
Modifications Copyright 2004 Josh Goldberg <\fIjosh@3io.com\fR>
.PP
This package is free software and is provided "as is" without express
or implied warranty.  You can redistribute it and/or modify it under 
the same terms as Perl itself.
