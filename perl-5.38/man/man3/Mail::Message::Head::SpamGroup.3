.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Message::Head::SpamGroup 3"
.TH Mail::Message::Head::SpamGroup 3 2023-12-11 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Mail::Message::Head::SpamGroup \- spam fighting related header fields
.SH INHERITANCE
.IX Header "INHERITANCE"
.Vb 3
\& Mail::Message::Head::SpamGroup
\&   is a Mail::Message::Head::FieldGroup
\&   is a Mail::Reporter
.Ve
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\& my $sg = Mail::Message::Head::SpamGroup\->new(head => $head, ...);
\& $head\->addSpamGroup($sg);
\&
\& my $sg = $head\->addSpamGroup( <options> );
\& $sg\->delete;
\& 
\& my @sgs = $head\->spamGroups;
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
A \fIspam group\fR is a set of header fields which are added by spam detection
and spam fighting software.  This class knows various details about
that software.
.PP
Extends "DESCRIPTION" in Mail::Message::Head::FieldGroup.
.SH METHODS
.IX Header "METHODS"
Extends "METHODS" in Mail::Message::Head::FieldGroup.
.SS Constructors
.IX Subsection "Constructors"
Extends "Constructors" in Mail::Message::Head::FieldGroup.
.ie n .IP $obj\->\fBclone\fR() 4
.el .IP \f(CW$obj\fR\->\fBclone\fR() 4
.IX Item "$obj->clone()"
Inherited, see "Constructors" in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBfighter\fR( $name, [$settings] )" 4
.el .IP "\f(CW$obj\fR\->\fBfighter\fR( \f(CW$name\fR, [$settings] )" 4
.IX Item "$obj->fighter( $name, [$settings] )"
.PD 0
.ie n .IP "Mail::Message::Head::SpamGroup\->\fBfighter\fR( $name, [$settings] )" 4
.el .IP "Mail::Message::Head::SpamGroup\->\fBfighter\fR( \f(CW$name\fR, [$settings] )" 4
.IX Item "Mail::Message::Head::SpamGroup->fighter( $name, [$settings] )"
.PD
Get the \f(CW$settings\fR of a certain spam-fighter, optionally after setting them.
The \fBknownFighters()\fR method returns the defined names.  The names
are case-sensitive.
.Sp
.Vb 4
\& \-Option \-\-Default
\&  fields   <required>
\&  isspam   <required>
\&  version  undef
.Ve
.RS 4
.IP "fields => REGEXP" 2
.IX Item "fields => REGEXP"
The regular expression which indicates which of the header fields are
added by the spam fighter software.
.IP "isspam => CODE" 2
.IX Item "isspam => CODE"
The CODE must return true or false, to indicate whether the spam fighter
thinks that the message contains spam.  The CODE ref is called with
the spamgroup object (under construction) and the header which is inspected.
.IP "version => CODE" 2
.IX Item "version => CODE"
Can be called to collect the official name and the version of the
software which is used to detect spam.  The CODE ref is called with
the spamgroup object (under construction) and the header which is inspected.
.RE
.RS 4
.Sp
example: adding your own spam-fighter definitions
.Sp
.Vb 4
\& Mail::Message::Head::SpamGroup\->fighter( \*(AqMY\-OWN\*(Aq,
\&    fields => qw/^x\-MY\-SPAM\-DETECTOR\-/,
\&    isspam => sub { my ($sg, $head) = @_; $head\->fields > 100 }
\&   );
.Ve
.RE
.ie n .IP "$obj\->\fBfrom\fR($head|$message, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBfrom\fR($head|$message, \f(CW%options\fR)" 4
.IX Item "$obj->from($head|$message, %options)"
Returns a list of \f(CW\*(C`Mail::Message::Head::SpamGroup\*(C'\fR objects, based on the
specified \f(CW$message\fR or message \f(CW$head\fR.
.Sp
.Vb 2
\& \-Option\-\-Default
\&  types   undef
.Ve
.RS 4
.IP "types => ARRAY-OF-NAMES" 2
.IX Item "types => ARRAY-OF-NAMES"
Only the specified types will be tried.  If the ARRAY is empty, an empty
list is returned.  Without this option, all sets are returned.
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBhabeasSweFieldsCorrect\fR( [$message|$head] )" 4
.el .IP "\f(CW$obj\fR\->\fBhabeasSweFieldsCorrect\fR( [$message|$head] )" 4
.IX Item "$obj->habeasSweFieldsCorrect( [$message|$head] )"
.PD 0
.IP "Mail::Message::Head::SpamGroup\->\fBhabeasSweFieldsCorrect\fR( [$message|$head] )" 4
.IX Item "Mail::Message::Head::SpamGroup->habeasSweFieldsCorrect( [$message|$head] )"
.PD
Returns a true value if the \f(CW$message\fR or \f(CW$head\fR contains \f(CW\*(C`Habeas\-SWE\*(C'\fR fields
which are correct.  Without argument, this is used as instance method on
an existing Spam-Group.
.Sp
example: checking Habeas-SWE fields
.Sp
.Vb 3
\& if(Mail::Message::Head::SpamGroup\->habeasSweFieldsCorrect($message))
\& {   $message\->label(spam => 0);
\& }
\&
\& my $sg = $message\->head\->spamGroups(\*(AqHabeas\-SWE\*(Aq);
\& if($sg\->habeasSweFieldsCorrect) { ... };
\&
\& use List::Util \*(Aqfirst\*(Aq;
\& if(first {$_\->habeasSweFieldsCorrect} $head\->spamGroups)
\& {   ...
\& }
.Ve
.ie n .IP $obj\->\fBimplementedTypes\fR() 4
.el .IP \f(CW$obj\fR\->\fBimplementedTypes\fR() 4
.IX Item "$obj->implementedTypes()"
.PD 0
.IP Mail::Message::Head::SpamGroup\->\fBimplementedTypes\fR() 4
.IX Item "Mail::Message::Head::SpamGroup->implementedTypes()"
.PD
Inherited, see "Constructors" in Mail::Message::Head::FieldGroup
.ie n .IP $obj\->\fBisSpamGroupFieldName\fR($name) 4
.el .IP \f(CW$obj\fR\->\fBisSpamGroupFieldName\fR($name) 4
.IX Item "$obj->isSpamGroupFieldName($name)"
.PD 0
.IP Mail::Message::Head::SpamGroup\->\fBisSpamGroupFieldName\fR($name) 4
.IX Item "Mail::Message::Head::SpamGroup->isSpamGroupFieldName($name)"
.ie n .IP $obj\->\fBknownFighters\fR() 4
.el .IP \f(CW$obj\fR\->\fBknownFighters\fR() 4
.IX Item "$obj->knownFighters()"
.IP Mail::Message::Head::SpamGroup\->\fBknownFighters\fR() 4
.IX Item "Mail::Message::Head::SpamGroup->knownFighters()"
.PD
Returns an unsorted list of all names representing pre-defined spam-fighter
software.  You can ask details about them, and register more fighters with
the \fBfighter()\fR method.
.ie n .IP "Mail::Message::Head::SpamGroup\->\fBnew\fR($fields, %options)" 4
.el .IP "Mail::Message::Head::SpamGroup\->\fBnew\fR($fields, \f(CW%options\fR)" 4
.IX Item "Mail::Message::Head::SpamGroup->new($fields, %options)"
Construct an object which maintains one set of fields which were added
by spam fighting software.
.Sp
.Vb 7
\& \-Option  \-\-Defined in                     \-\-Default
\&  head      Mail::Message::Head::FieldGroup  undef
\&  log       Mail::Reporter                   \*(AqWARNINGS\*(Aq
\&  software  Mail::Message::Head::FieldGroup  undef
\&  trace     Mail::Reporter                   \*(AqWARNINGS\*(Aq
\&  type      Mail::Message::Head::FieldGroup  undef
\&  version   Mail::Message::Head::FieldGroup  undef
.Ve
.RS 4
.IP "head => HEAD" 2
.IX Item "head => HEAD"
.PD 0
.IP "log => LEVEL" 2
.IX Item "log => LEVEL"
.IP "software => STRING" 2
.IX Item "software => STRING"
.IP "trace => LEVEL" 2
.IX Item "trace => LEVEL"
.IP "type => STRING" 2
.IX Item "type => STRING"
.IP "version => STRING" 2
.IX Item "version => STRING"
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBspamDetected\fR( [BOOLEAN] )" 4
.el .IP "\f(CW$obj\fR\->\fBspamDetected\fR( [BOOLEAN] )" 4
.IX Item "$obj->spamDetected( [BOOLEAN] )"
.PD
Returns (after setting) whether this group of spam headers thinks that
this is spam.  See \fBMail::Message::Head::Complete::spamDetected()\fR.
.Sp
example:
.Sp
.Vb 1
\&  die if $head\->spamDetected;
\&
\&  foreach my $sg ($head\->spamGroups)
\&  {   print $sg\->type." found spam\en" if $sg\->spamDetected;
\&  }
.Ve
.SS "The header"
.IX Subsection "The header"
Extends "The header" in Mail::Message::Head::FieldGroup.
.ie n .IP "$obj\->\fBadd\fR( <$field, $value> | $object )" 4
.el .IP "\f(CW$obj\fR\->\fBadd\fR( <$field, \f(CW$value\fR> | \f(CW$object\fR )" 4
.IX Item "$obj->add( <$field, $value> | $object )"
Inherited, see "The header" in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBaddFields\fR( [$fieldnames] )" 4
.el .IP "\f(CW$obj\fR\->\fBaddFields\fR( [$fieldnames] )" 4
.IX Item "$obj->addFields( [$fieldnames] )"
Inherited, see "The header" in Mail::Message::Head::FieldGroup
.ie n .IP $obj\->\fBattach\fR($head) 4
.el .IP \f(CW$obj\fR\->\fBattach\fR($head) 4
.IX Item "$obj->attach($head)"
Inherited, see "The header" in Mail::Message::Head::FieldGroup
.ie n .IP $obj\->\fBdelete\fR() 4
.el .IP \f(CW$obj\fR\->\fBdelete\fR() 4
.IX Item "$obj->delete()"
Inherited, see "The header" in Mail::Message::Head::FieldGroup
.ie n .IP $obj\->\fBfieldNames\fR() 4
.el .IP \f(CW$obj\fR\->\fBfieldNames\fR() 4
.IX Item "$obj->fieldNames()"
Inherited, see "The header" in Mail::Message::Head::FieldGroup
.ie n .IP $obj\->\fBfields\fR() 4
.el .IP \f(CW$obj\fR\->\fBfields\fR() 4
.IX Item "$obj->fields()"
Inherited, see "The header" in Mail::Message::Head::FieldGroup
.ie n .IP $obj\->\fBhead\fR() 4
.el .IP \f(CW$obj\fR\->\fBhead\fR() 4
.IX Item "$obj->head()"
Inherited, see "The header" in Mail::Message::Head::FieldGroup
.SS "Access to the header"
.IX Subsection "Access to the header"
Extends "Access to the header" in Mail::Message::Head::FieldGroup.
.ie n .IP $obj\->\fBsoftware\fR() 4
.el .IP \f(CW$obj\fR\->\fBsoftware\fR() 4
.IX Item "$obj->software()"
Inherited, see "Access to the header" in Mail::Message::Head::FieldGroup
.ie n .IP $obj\->\fBtype\fR() 4
.el .IP \f(CW$obj\fR\->\fBtype\fR() 4
.IX Item "$obj->type()"
Inherited, see "Access to the header" in Mail::Message::Head::FieldGroup
.ie n .IP $obj\->\fBversion\fR() 4
.el .IP \f(CW$obj\fR\->\fBversion\fR() 4
.IX Item "$obj->version()"
Inherited, see "Access to the header" in Mail::Message::Head::FieldGroup
.SS Internals
.IX Subsection "Internals"
Extends "Internals" in Mail::Message::Head::FieldGroup.
.ie n .IP "$obj\->\fBcollectFields\fR( [$name] )" 4
.el .IP "\f(CW$obj\fR\->\fBcollectFields\fR( [$name] )" 4
.IX Item "$obj->collectFields( [$name] )"
Inherited, see "Internals" in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBdetected\fR($type, $software, $version)" 4
.el .IP "\f(CW$obj\fR\->\fBdetected\fR($type, \f(CW$software\fR, \f(CW$version\fR)" 4
.IX Item "$obj->detected($type, $software, $version)"
Inherited, see "Internals" in Mail::Message::Head::FieldGroup
.SS "Error handling"
.IX Subsection "Error handling"
Extends "Error handling" in Mail::Message::Head::FieldGroup.
.ie n .IP $obj\->\fBAUTOLOAD\fR() 4
.el .IP \f(CW$obj\fR\->\fBAUTOLOAD\fR() 4
.IX Item "$obj->AUTOLOAD()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBaddReport\fR($object) 4
.el .IP \f(CW$obj\fR\->\fBaddReport\fR($object) 4
.IX Item "$obj->addReport($object)"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "$obj->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD 0
.ie n .IP "Mail::Message::Head::SpamGroup\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "Mail::Message::Head::SpamGroup\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "Mail::Message::Head::SpamGroup->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBdetails\fR() 4
.el .IP \f(CW$obj\fR\->\fBdetails\fR() 4
.IX Item "$obj->details()"
Inherited, see "Error handling" in Mail::Message::Head::FieldGroup
.ie n .IP $obj\->\fBerrors\fR() 4
.el .IP \f(CW$obj\fR\->\fBerrors\fR() 4
.IX Item "$obj->errors()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR( [$level, [$strings]] )" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "$obj->log( [$level, [$strings]] )"
.PD 0
.IP "Mail::Message::Head::SpamGroup\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "Mail::Message::Head::SpamGroup->log( [$level, [$strings]] )"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBlogPriority\fR($level) 4
.el .IP \f(CW$obj\fR\->\fBlogPriority\fR($level) 4
.IX Item "$obj->logPriority($level)"
.PD 0
.IP Mail::Message::Head::SpamGroup\->\fBlogPriority\fR($level) 4
.IX Item "Mail::Message::Head::SpamGroup->logPriority($level)"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBlogSettings\fR() 4
.el .IP \f(CW$obj\fR\->\fBlogSettings\fR() 4
.IX Item "$obj->logSettings()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBnotImplemented\fR() 4
.el .IP \f(CW$obj\fR\->\fBnotImplemented\fR() 4
.IX Item "$obj->notImplemented()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBprint\fR( [$fh] )" 4
.el .IP "\f(CW$obj\fR\->\fBprint\fR( [$fh] )" 4
.IX Item "$obj->print( [$fh] )"
Inherited, see "Error handling" in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBreport\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR( [$level] )" 4
.IX Item "$obj->report( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR( [$level] )" 4
.IX Item "$obj->reportAll( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR( [$level] )" 4
.IX Item "$obj->trace( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBwarnings\fR() 4
.el .IP \f(CW$obj\fR\->\fBwarnings\fR() 4
.IX Item "$obj->warnings()"
Inherited, see "Error handling" in Mail::Reporter
.SS Cleanup
.IX Subsection "Cleanup"
Extends "Cleanup" in Mail::Message::Head::FieldGroup.
.ie n .IP $obj\->\fBDESTROY\fR() 4
.el .IP \f(CW$obj\fR\->\fBDESTROY\fR() 4
.IX Item "$obj->DESTROY()"
Inherited, see "Cleanup" in Mail::Reporter
.SH DETAILS
.IX Header "DETAILS"
.SS "Spam fighting fields"
.IX Subsection "Spam fighting fields"
\fIDetected spam fighting software\fR
.IX Subsection "Detected spam fighting software"
.PP
The Mail::Message::Head::SpamGroup class can be used to detect
fields which were produced by different spam fighting software.
.IP \(bu 4
SpamAssassin
.Sp
These fields are added by Mail::SpamAssassin, which is the central
implementation of the spam-assassin package.  The homepage of this
GPL'ed project can be found at <http://spamassassin.org>.
.IP \(bu 4
Habeas-SWE
.Sp
Habeas tries to fight spam via the standard copyright protection
mechanism: Sender Warranted E\-mail (SWE). Only when you have a contract
with Habeas, you are permitted to add a few copyrighted lines to your
e\-mail. Spam senders will be refused a contract.  Mail clients which
see these nine lines are (quite) sure that the message is sincere.
.Sp
See <http://www.habeas.com> for all the details on this commercial
product.
.IP \(bu 4
MailScanner
.Sp
The MailScanner filter is developed and maintained by
transtec Computers.  The software is available for free download from
<http://www.sng.ecs.soton.ac.uk/mailscanner/>.  Commercial support
is provided via <http://www.mailscanner.biz>.
.SH DIAGNOSTICS
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Package $package does not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR does not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package does not implement $method."
Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Message distribution version 3.015,
built on December 11, 2023. Website: \fIhttp://perl.overmeer.net/CPAN/\fR
.SH LICENSE
.IX Header "LICENSE"
Copyrights 2001\-2023 by [Mark Overmeer <markov@cpan.org>]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://dev.perl.org/licenses/\fR
