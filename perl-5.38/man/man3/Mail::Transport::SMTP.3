.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Transport::SMTP 3"
.TH Mail::Transport::SMTP 3 2020-07-22 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Mail::Transport::SMTP \- transmit messages without external program
.SH INHERITANCE
.IX Header "INHERITANCE"
.Vb 4
\& Mail::Transport::SMTP
\&   is a Mail::Transport::Send
\&   is a Mail::Transport
\&   is a Mail::Reporter
.Ve
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\& my $sender = Mail::Transport::SMTP\->new(...);
\& $sender\->send($message);
\&
\& $message\->send(via => \*(Aqsmtp\*(Aq);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module implements transport of \f(CW\*(C`Mail::Message\*(C'\fR objects by negotiating
to the destination host directly by using the SMTP protocol, without help of
\&\f(CW\*(C`sendmail\*(C'\fR, \f(CW\*(C`mail\*(C'\fR, or other programs on the local host.
.PP
\&\fBwarning:\fR you may need to install Net::SMTPS, to get TLS support.
.PP
Extends "DESCRIPTION" in Mail::Transport::Send.
.SH METHODS
.IX Header "METHODS"
Extends "METHODS" in Mail::Transport::Send.
.SS Constructors
.IX Subsection "Constructors"
Extends "Constructors" in Mail::Transport::Send.
.IP Mail::Transport::SMTP\->\fBnew\fR(%options) 4
.IX Item "Mail::Transport::SMTP->new(%options)"
.Vb 10
\& \-Option       \-\-Defined in     \-\-Default
\&  esmtp_options                   {}
\&  executable     Mail::Transport  undef
\&  from                            undef
\&  helo                            <from Net::Config>
\&  hostname       Mail::Transport  <from Net::Config>
\&  interval       Mail::Transport  30
\&  log            Mail::Reporter   \*(AqWARNINGS\*(Aq
\&  password                        undef
\&  port           Mail::Transport  25
\&  proxy          Mail::Transport  <from Net::Config>
\&  retry          Mail::Transport  <false>
\&  smtp_debug                      <false>
\&  timeout                         120
\&  trace          Mail::Reporter   \*(AqWARNINGS\*(Aq
\&  username                        undef
\&  via            Mail::Transport  \*(Aqsmtp\*(Aq
.Ve
.RS 4
.IP "esmtp_options => HASH" 2
.IX Item "esmtp_options => HASH"
[2.116] ESMTP options to pass to Net::SMTP.  See the Net::SMTP
documentation for full details. Options can also be passed at send time.
For example: \f(CW\*(C`{ XVERP => 1 }\*(C'\fR
.IP "executable => FILENAME" 2
.IX Item "executable => FILENAME"
.PD 0
.IP "from => ADDRESS" 2
.IX Item "from => ADDRESS"
.PD
Allows a default sender address to be specified globally.
See \fBtrySend()\fR for full details.
.IP "helo => HOST" 2
.IX Item "helo => HOST"
The fully qualified name of the sender's host (your system) which
is used for the greeting message to the receiver.  If not specified,
Net::Config or else Net::Domain are questioned to find it.
When even these do not supply a valid name, the name of the domain in the
\&\f(CW\*(C`From\*(C'\fR line of the message is assumed.
.IP "hostname => HOSTNAME|ARRAY" 2
.IX Item "hostname => HOSTNAME|ARRAY"
.PD 0
.IP "interval => SECONDS" 2
.IX Item "interval => SECONDS"
.IP "log => LEVEL" 2
.IX Item "log => LEVEL"
.IP "password => STRING" 2
.IX Item "password => STRING"
.PD
The password to be used with the new(username) to log in to the remote
server.
.IP "port => INTEGER" 2
.IX Item "port => INTEGER"
.PD 0
.IP "proxy => PATH" 2
.IX Item "proxy => PATH"
.IP "retry => NUMBER|undef" 2
.IX Item "retry => NUMBER|undef"
.IP "smtp_debug => BOOLEAN" 2
.IX Item "smtp_debug => BOOLEAN"
.PD
Simulate transmission: the SMTP protocol output will be sent to your
screen.
.IP "timeout => SECONDS" 2
.IX Item "timeout => SECONDS"
The number of seconds to wait for a valid response from the server before
failing.
.IP "trace => LEVEL" 2
.IX Item "trace => LEVEL"
.PD 0
.IP "username => STRING" 2
.IX Item "username => STRING"
.PD
Use SASL authentication to contact the remote SMTP server (RFC2554).
This username in combination with new(password) is passed as arguments
to Net::SMTP method auth.  Other forms of authentication are not
supported by Net::SMTP.  The \f(CW\*(C`username\*(C'\fR can also be specified as an
Authen::SASL object.
.IP "via => CLASS|NAME" 2
.IX Item "via => CLASS|NAME"
.RE
.RS 4
.RE
.SS "Sending mail"
.IX Subsection "Sending mail"
Extends "Sending mail" in Mail::Transport::Send.
.ie n .IP "$obj\->\fBdestinations\fR( $message, [$address|ARRAY] )" 4
.el .IP "\f(CW$obj\fR\->\fBdestinations\fR( \f(CW$message\fR, [$address|ARRAY] )" 4
.IX Item "$obj->destinations( $message, [$address|ARRAY] )"
Inherited, see "Sending mail" in Mail::Transport::Send
.ie n .IP "$obj\->\fBputContent\fR($message, $fh, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBputContent\fR($message, \f(CW$fh\fR, \f(CW%options\fR)" 4
.IX Item "$obj->putContent($message, $fh, %options)"
Inherited, see "Sending mail" in Mail::Transport::Send
.ie n .IP "$obj\->\fBsend\fR($message, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBsend\fR($message, \f(CW%options\fR)" 4
.IX Item "$obj->send($message, %options)"
Inherited, see "Sending mail" in Mail::Transport::Send
.ie n .IP "$obj\->\fBtrySend\fR($message, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBtrySend\fR($message, \f(CW%options\fR)" 4
.IX Item "$obj->trySend($message, %options)"
Try to send the \f(CW$message\fR once.   This may fail, in which case this
method will return \f(CW\*(C`false\*(C'\fR.  In list context, the reason for failure
can be caught: in list context \f(CW\*(C`trySend\*(C'\fR will return a list of
six values:
.Sp
.Vb 1
\& (success, rc, rc\-text, error location, quit success, accept)
.Ve
.Sp
Success and quit success are booleans.  The error code and \-text are
protocol specific codes and texts.  The location tells where the
problem occurred.
.Sp
[3.003] the 'accept' returns the message of the \fBdataend()\fR instruction.
Some servers may provide useful information in there, like an internal
message registration id.  For example, postfix may return "2.0.0 Ok:
queued as 303EA380EE".  You can only use this parameter when running
local delivery (which is a smart choice anyway)
.Sp
.Vb 4
\& \-Option       \-\-Default
\&  esmtp_options  {}
\&  from           < >
\&  to             []
.Ve
.RS 4
.IP "esmtp_options => HASH" 2
.IX Item "esmtp_options => HASH"
Additional or overridden EMSTP options. See new(esmtp_options)
.IP "from => ADDRESS" 2
.IX Item "from => ADDRESS"
Your own identification.  This may be fake.  If not specified, it is
taken from \fBMail::Message::sender()\fR, which means the content of the
\&\f(CW\*(C`Sender\*(C'\fR field of the message or the first address of the \f(CW\*(C`From\*(C'\fR
field.  This defaults to "< >", which represents "no address".
.IP "to => ADDRESS|[ADDRESSES]" 2
.IX Item "to => ADDRESS|[ADDRESSES]"
Alternative destinations.  If not specified, the \f(CW\*(C`To\*(C'\fR, \f(CW\*(C`Cc\*(C'\fR and \f(CW\*(C`Bcc\*(C'\fR
fields of the header are used.  An address is a string or a Mail::Address
object.
.RE
.RS 4
.RE
.SS "Server connection"
.IX Subsection "Server connection"
Extends "Server connection" in Mail::Transport::Send.
.ie n .IP $obj\->\fBcontactAnyServer\fR() 4
.el .IP \f(CW$obj\fR\->\fBcontactAnyServer\fR() 4
.IX Item "$obj->contactAnyServer()"
Creates the connection to the SMTP server.  When more than one hostname
was specified, the first which accepts a connection is taken.  An
IO::Socket::INET object is returned.
.ie n .IP "$obj\->\fBfindBinary\fR( $name, [@directories] )" 4
.el .IP "\f(CW$obj\fR\->\fBfindBinary\fR( \f(CW$name\fR, [@directories] )" 4
.IX Item "$obj->findBinary( $name, [@directories] )"
Inherited, see "Server connection" in Mail::Transport
.ie n .IP $obj\->\fBremoteHost\fR() 4
.el .IP \f(CW$obj\fR\->\fBremoteHost\fR() 4
.IX Item "$obj->remoteHost()"
Inherited, see "Server connection" in Mail::Transport
.ie n .IP $obj\->\fBretry\fR() 4
.el .IP \f(CW$obj\fR\->\fBretry\fR() 4
.IX Item "$obj->retry()"
Inherited, see "Server connection" in Mail::Transport
.ie n .IP "$obj\->\fBtryConnectTo\fR($host, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBtryConnectTo\fR($host, \f(CW%options\fR)" 4
.IX Item "$obj->tryConnectTo($host, %options)"
Try to establish a connection to deliver SMTP to the specified \f(CW$host\fR.  The
\&\f(CW%options\fR are passed to the \f(CW\*(C`new\*(C'\fR method of Net::SMTP.
.SS "Error handling"
.IX Subsection "Error handling"
Extends "Error handling" in Mail::Transport::Send.
.ie n .IP $obj\->\fBAUTOLOAD\fR() 4
.el .IP \f(CW$obj\fR\->\fBAUTOLOAD\fR() 4
.IX Item "$obj->AUTOLOAD()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBaddReport\fR($object) 4
.el .IP \f(CW$obj\fR\->\fBaddReport\fR($object) 4
.IX Item "$obj->addReport($object)"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "$obj->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD 0
.ie n .IP "Mail::Transport::SMTP\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "Mail::Transport::SMTP\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "Mail::Transport::SMTP->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBerrors\fR() 4
.el .IP \f(CW$obj\fR\->\fBerrors\fR() 4
.IX Item "$obj->errors()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR( [$level, [$strings]] )" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "$obj->log( [$level, [$strings]] )"
.PD 0
.IP "Mail::Transport::SMTP\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "Mail::Transport::SMTP->log( [$level, [$strings]] )"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBlogPriority\fR($level) 4
.el .IP \f(CW$obj\fR\->\fBlogPriority\fR($level) 4
.IX Item "$obj->logPriority($level)"
.PD 0
.IP Mail::Transport::SMTP\->\fBlogPriority\fR($level) 4
.IX Item "Mail::Transport::SMTP->logPriority($level)"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBlogSettings\fR() 4
.el .IP \f(CW$obj\fR\->\fBlogSettings\fR() 4
.IX Item "$obj->logSettings()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBnotImplemented\fR() 4
.el .IP \f(CW$obj\fR\->\fBnotImplemented\fR() 4
.IX Item "$obj->notImplemented()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR( [$level] )" 4
.IX Item "$obj->report( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR( [$level] )" 4
.IX Item "$obj->reportAll( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR( [$level] )" 4
.IX Item "$obj->trace( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBwarnings\fR() 4
.el .IP \f(CW$obj\fR\->\fBwarnings\fR() 4
.IX Item "$obj->warnings()"
Inherited, see "Error handling" in Mail::Reporter
.SS Cleanup
.IX Subsection "Cleanup"
Extends "Cleanup" in Mail::Transport::Send.
.ie n .IP $obj\->\fBDESTROY\fR() 4
.el .IP \f(CW$obj\fR\->\fBDESTROY\fR() 4
.IX Item "$obj->DESTROY()"
Inherited, see "Cleanup" in Mail::Reporter
.SH DIAGNOSTICS
.IX Header "DIAGNOSTICS"
.IP "Warning: Message has no destination" 4
.IX Item "Warning: Message has no destination"
It was not possible to figure-out where the message is intended to go
to.
.IP "Notice: No addresses found to send the message to, no connection made" 4
.IX Item "Notice: No addresses found to send the message to, no connection made"
.PD 0
.ie n .IP "Error: Package $package does not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR does not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package does not implement $method."
.PD
Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.
.IP "Warning: Resent group does not specify a destination" 4
.IX Item "Warning: Resent group does not specify a destination"
The message which is sent is the result of a bounce (for instance
created with \fBMail::Message::bounce()\fR), and therefore starts with a
\&\f(CW\*(C`Received\*(C'\fR header field.  With the \f(CW\*(C`bounce\*(C'\fR, the new destination(s)
of the message are given, which should be included as \f(CW\*(C`Resent\-To\*(C'\fR,
\&\f(CW\*(C`Resent\-Cc\*(C'\fR, and \f(CW\*(C`Resent\-Bcc\*(C'\fR.
.Sp
The \f(CW\*(C`To\*(C'\fR, \f(CW\*(C`Cc\*(C'\fR, and \f(CW\*(C`Bcc\*(C'\fR header information is only used if no
\&\f(CW\*(C`Received\*(C'\fR was found.  That seems to be the best explanation of the RFC.
.Sp
As alternative, you may also specify the \f(CW\*(C`to\*(C'\fR option to some of the senders
(for instance Mail::Transport::SMTP::send(to) to overrule any information
found in the message itself about the destination.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Transport distribution version 3.005,
built on July 22, 2020. Website: \fIhttp://perl.overmeer.net/CPAN/\fR
.SH LICENSE
.IX Header "LICENSE"
Copyrights 2001\-2020 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://dev.perl.org/licenses/\fR
