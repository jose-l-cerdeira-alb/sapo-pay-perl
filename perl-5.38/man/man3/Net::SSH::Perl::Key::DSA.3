.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::SSH::Perl::Key::DSA 3"
.TH Net::SSH::Perl::Key::DSA 3 2023-08-07 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Net::SSH::Perl::Key::DSA \- DSA key object
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\&    use Net::SSH::Perl::Key;
\&    my $key = Net::SSH::Perl::Key\->new(\*(AqDSA\*(Aq);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
\&\fINet::SSH::Perl::Key::DSA\fR subclasses \fINet::SSH::Perl::Key\fR
to implement a key object, SSH style. This object provides all
of the methods needed for a DSA key object; the underlying
implementation is provided by \fICrypt::PK::DSA\fR, and this class
wraps around that module to provide SSH-specific functionality
(eg. taking in a \fINet::SSH::Perl::Buffer\fR blob and transforming
it into a key object).
.SH USAGE
.IX Header "USAGE"
\&\fINet::SSH::Perl::Key::DSA\fR implements the interface described in
the documentation for \fINet::SSH::Perl::Key\fR. Any differences or
additions are described here.
.ie n .SS $key\->sign($data)
.el .SS \f(CW$key\fP\->sign($data)
.IX Subsection "$key->sign($data)"
Wraps around \fICrypt::PK::DSA::sign_message\fR to sign \fR\f(CI$data\fR\fI\fR using
the key \fI\fR\f(CI$key\fR\fI\fR, then encodes that signature into an SSH-compatible
signature blob.  The output of \fICrypt::PK::DSA::sign_message\fR is a
DER ASN.1 binary structure, so that must be decoded to extract the
components of the signature.
.PP
Returns the signature blob.
.ie n .SS "$key\->verify($signature, $data)"
.el .SS "\f(CW$key\fP\->verify($signature, \f(CW$data\fP)"
.IX Subsection "$key->verify($signature, $data)"
Given a signature blob \fR\f(CI$signature\fR\fI\fR and the original signed data
\&\fI\fR\f(CI$data\fR\fI\fR, attempts to verify the signature using the key \fI\fR\f(CI$key\fR\fI\fR.
This wraps around \fICrypt::PK::DSA::verify_message\fR to perform the
core verification.  Since \fICrypt::PK::DSA::verify_message\fR requires
a signature in DER ASN.1 format, the signature is reconfigured to
that before being passed.
.PP
\&\fR\f(CI$signature\fR\fI\fR should be an SSH-compatible signature blob, as
returned from \fIsign\fR; \fI\fR\f(CI$data\fR\fI\fR should be a string of data, as
passed to \fIsign\fR.
.PP
Returns true if the verification succeeds, false otherwise.
.SH "AUTHOR & COPYRIGHTS"
.IX Header "AUTHOR & COPYRIGHTS"
Please see the Net::SSH::Perl manpage for author, copyright,
and license information.
