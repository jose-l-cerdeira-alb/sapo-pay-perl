.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "XML::XPath::Literal 3"
.TH XML::XPath::Literal 3 2022-08-09 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
XML::XPath::Literal \- Simple string values.
.SH DESCRIPTION
.IX Header "DESCRIPTION"
In XPath terms a Literal is what we know as a string.
.SH API
.IX Header "API"
.SS new($string)
.IX Subsection "new($string)"
Create a new Literal object with the value in \f(CW$string\fR. Note that &quot; and
&apos; will be converted to " and ' respectively. That is not part of the XPath
specification, but I consider it useful. Note though that you have to go
to extraordinary lengths in an XML template file (be it XSLT or whatever) to
make use of this:
.PP
.Vb 1
\&        <xsl:value\-of select="&quot;I\*(Aqm feeling &amp;quot;sad&amp;quot;&quot;"/>
.Ve
.PP
Which produces a Literal of:
.PP
.Vb 1
\&        I\*(Aqm feeling "sad"
.Ve
.SS \fBvalue()\fP
.IX Subsection "value()"
Also overloaded as stringification, simply returns the literal string value.
.SS cmp($literal)
.IX Subsection "cmp($literal)"
Returns the equivalent of perl's cmp operator against the given \f(CW$literal\fR.
