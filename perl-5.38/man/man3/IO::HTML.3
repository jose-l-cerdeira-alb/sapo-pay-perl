.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "IO::HTML 3"
.TH IO::HTML 3 2020-09-26 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
IO::HTML \- Open an HTML file with automatic charset detection
.SH VERSION
.IX Header "VERSION"
This document describes version 1.004 of
IO::HTML, released September 26, 2020.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\&  use IO::HTML;                 # exports html_file by default
\&  use HTML::TreeBuilder;
\&
\&  my $tree = HTML::TreeBuilder\->new_from_file(
\&               html_file(\*(Aqfoo.html\*(Aq)
\&             );
\&
\&  # Alternative interface:
\&  open(my $in, \*(Aq<:raw\*(Aq, \*(Aqbar.html\*(Aq);
\&  my $encoding = IO::HTML::sniff_encoding($in, \*(Aqbar.html\*(Aq);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
IO::HTML provides an easy way to open a file containing HTML while
automatically determining its encoding.  It uses the HTML5 encoding
sniffing algorithm specified in section 8.2.2.2 of the draft standard.
.PP
The algorithm as implemented here is:
.IP 1. 4
If the file begins with a byte order mark indicating UTF\-16LE,
UTF\-16BE, or UTF\-8, then that is the encoding.
.IP 2. 4
If the first \f(CW$bytes_to_check\fR bytes of the file contain a \f(CW\*(C`<meta>\*(C'\fR tag that
indicates the charset, and Encode recognizes the specified charset
name, then that is the encoding.  (This portion of the algorithm is
implemented by \f(CW\*(C`find_charset_in\*(C'\fR.)
.Sp
The \f(CW\*(C`<meta>\*(C'\fR tag can be in one of two formats:
.Sp
.Vb 2
\&  <meta charset="...">
\&  <meta http\-equiv="Content\-Type" content="...charset=...">
.Ve
.Sp
The search is case-insensitive, and the order of attributes within the
tag is irrelevant.  Any additional attributes of the tag are ignored.
The first matching tag with a recognized encoding ends the search.
.IP 3. 4
If the first \f(CW$bytes_to_check\fR bytes of the file are valid UTF\-8 (with at least 1
non-ASCII character), then the encoding is UTF\-8.
.IP 4. 4
If all else fails, use the default character encoding.  The HTML5
standard suggests the default encoding should be locale dependent, but
currently it is always \f(CW\*(C`cp1252\*(C'\fR unless you set
\&\f(CW$IO::HTML::default_encoding\fR to a different value.  Note:
\&\f(CW\*(C`sniff_encoding\*(C'\fR does not apply this step; only \f(CW\*(C`html_file\*(C'\fR does
that.
.SH SUBROUTINES
.IX Header "SUBROUTINES"
.SS html_file
.IX Subsection "html_file"
.Vb 1
\&  $filehandle = html_file($filename, \e%options);
.Ve
.PP
This function (exported by default) is the primary entry point.  It
opens the file specified by \f(CW$filename\fR for reading, uses
\&\f(CW\*(C`sniff_encoding\*(C'\fR to find a suitable encoding layer, and applies it.
It also applies the \f(CW\*(C`:crlf\*(C'\fR layer.  If the file begins with a BOM,
the filehandle is positioned just after the BOM.
.PP
The optional second argument is a hashref containing options.  The
possible keys are described under \f(CW\*(C`find_charset_in\*(C'\fR.
.PP
If \f(CW\*(C`sniff_encoding\*(C'\fR is unable to determine the encoding, it defaults
to \f(CW$IO::HTML::default_encoding\fR, which is set to \f(CW\*(C`cp1252\*(C'\fR
(a.k.a. Windows\-1252) by default.  According to the standard, the
default should be locale dependent, but that is not currently
implemented.
.PP
It dies if the file cannot be opened, or if \f(CW\*(C`sniff_encoding\*(C'\fR cannot
determine the encoding and \f(CW$IO::HTML::default_encoding\fR has been set
to \f(CW\*(C`undef\*(C'\fR.
.SS html_file_and_encoding
.IX Subsection "html_file_and_encoding"
.Vb 2
\&  ($filehandle, $encoding, $bom)
\&    = html_file_and_encoding($filename, \e%options);
.Ve
.PP
This function (exported only by request) is just like \f(CW\*(C`html_file\*(C'\fR,
but returns more information.  In addition to the filehandle, it
returns the name of the encoding used, and a flag indicating whether a
byte order mark was found (if \f(CW$bom\fR is true, the file began with a
BOM).  This may be useful if you want to write the file out again
(especially in conjunction with the \f(CW\*(C`html_outfile\*(C'\fR function).
.PP
The optional second argument is a hashref containing options.  The
possible keys are described under \f(CW\*(C`find_charset_in\*(C'\fR.
.PP
It dies if the file cannot be opened, or if \f(CW\*(C`sniff_encoding\*(C'\fR cannot
determine the encoding and \f(CW$IO::HTML::default_encoding\fR has been set
to \f(CW\*(C`undef\*(C'\fR.
.PP
The result of calling \f(CW\*(C`html_file_and_encoding\*(C'\fR in scalar context is undefined
(in the C sense of there is no guarantee what you'll get).
.SS html_outfile
.IX Subsection "html_outfile"
.Vb 1
\&  $filehandle = html_outfile($filename, $encoding, $bom);
.Ve
.PP
This function (exported only by request) opens \f(CW$filename\fR for output
using \f(CW$encoding\fR, and writes a BOM to it if \f(CW$bom\fR is true.
If \f(CW$encoding\fR is \f(CW\*(C`undef\*(C'\fR, it defaults to \f(CW$IO::HTML::default_encoding\fR.
\&\f(CW$encoding\fR may be either an encoding name or an Encode::Encoding object.
.PP
It dies if the file cannot be opened, or if both \f(CW$encoding\fR and
\&\f(CW$IO::HTML::default_encoding\fR are \f(CW\*(C`undef\*(C'\fR.
.SS sniff_encoding
.IX Subsection "sniff_encoding"
.Vb 1
\&  ($encoding, $bom) = sniff_encoding($filehandle, $filename, \e%options);
.Ve
.PP
This function (exported only by request) runs the HTML5 encoding
sniffing algorithm on \f(CW$filehandle\fR (which must be seekable, and
should have been opened in \f(CW\*(C`:raw\*(C'\fR mode).  \f(CW$filename\fR is used only
for error messages (if there's a problem using the filehandle), and
defaults to "file" if omitted.  The optional third argument is a
hashref containing options.  The possible keys are described under
\&\f(CW\*(C`find_charset_in\*(C'\fR.
.PP
It returns Perl's canonical name for the encoding, which is not
necessarily the same as the MIME or IANA charset name.  It returns
\&\f(CW\*(C`undef\*(C'\fR if the encoding cannot be determined.  \f(CW$bom\fR is true if the
file began with a byte order mark.  In scalar context, it returns only
\&\f(CW$encoding\fR.
.PP
The filehandle's position is restored to its original position
(normally the beginning of the file) unless \f(CW$bom\fR is true.  In that
case, the position is immediately after the BOM.
.PP
Tip: If you want to run \f(CW\*(C`sniff_encoding\*(C'\fR on a file you've already
loaded into a string, open an in-memory file on the string, and pass
that handle:
.PP
.Vb 3
\&  ($encoding, $bom) = do {
\&    open(my $fh, \*(Aq<\*(Aq, \e$string);  sniff_encoding($fh)
\&  };
.Ve
.PP
(This only makes sense if \f(CW$string\fR contains bytes, not characters.)
.SS find_charset_in
.IX Subsection "find_charset_in"
.Vb 1
\&  $encoding = find_charset_in($string_containing_HTML, \e%options);
.Ve
.PP
This function (exported only by request) looks for charset information
in a \f(CW\*(C`<meta>\*(C'\fR tag in a possibly-incomplete HTML document using
the "two step" algorithm specified by HTML5.  It does not look for a BOM.
The \f(CW\*(C`<meta>\*(C'\fR tag must begin within the first \f(CW$IO::HTML::bytes_to_check\fR
bytes of the string.
.PP
It returns Perl's canonical name for the encoding, which is not
necessarily the same as the MIME or IANA charset name.  It returns
\&\f(CW\*(C`undef\*(C'\fR if no charset is specified or if the specified charset is not
recognized by the Encode module.
.PP
The optional second argument is a hashref containing options.  The
following keys are recognized:
.ie n .IP """encoding""" 4
.el .IP \f(CWencoding\fR 4
.IX Item "encoding"
If true, return the Encode::Encoding object instead of its name.
Defaults to false.
.ie n .IP """need_pragma""" 4
.el .IP \f(CWneed_pragma\fR 4
.IX Item "need_pragma"
If true (the default), follow the HTML5 spec and examine the
\&\f(CW\*(C`content\*(C'\fR attribute only of \f(CW\*(C`<meta http\-equiv="Content\-Type"\*(C'\fR.
If set to 0, relax the HTML5 spec, and look for "charset=" in the
\&\f(CW\*(C`content\*(C'\fR attribute of \fIevery\fR meta tag.
.SH EXPORTS
.IX Header "EXPORTS"
By default, only \f(CW\*(C`html_file\*(C'\fR is exported.  Other functions may be
exported on request.
.PP
For people who prefer not to export functions, all functions beginning
with \f(CW\*(C`html_\*(C'\fR have an alias without that prefix (e.g. you can call
\&\f(CWIO::HTML::file(...)\fR instead of \f(CWIO::HTML::html_file(...)\fR.  These
aliases are not exportable.
.PP
The following export tags are available:
.ie n .IP """:all""" 4
.el .IP \f(CW:all\fR 4
.IX Item ":all"
All exportable functions.
.ie n .IP """:rw""" 4
.el .IP \f(CW:rw\fR 4
.IX Item ":rw"
\&\f(CW\*(C`html_file\*(C'\fR, \f(CW\*(C`html_file_and_encoding\*(C'\fR, \f(CW\*(C`html_outfile\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The HTML5 specification, section 8.2.2.2 Determining the character encoding:
<http://www.w3.org/TR/html5/syntax.html#determining\-the\-character\-encoding>
.SH DIAGNOSTICS
.IX Header "DIAGNOSTICS"
.ie n .IP """Could not read %s: %s""" 4
.el .IP "\f(CWCould not read %s: %s\fR" 4
.IX Item "Could not read %s: %s"
The specified file could not be read from for the reason specified by \f(CW$!\fR.
.ie n .IP """Could not seek %s: %s""" 4
.el .IP "\f(CWCould not seek %s: %s\fR" 4
.IX Item "Could not seek %s: %s"
The specified file could not be rewound for the reason specified by \f(CW$!\fR.
.ie n .IP """Failed to open %s: %s""" 4
.el .IP "\f(CWFailed to open %s: %s\fR" 4
.IX Item "Failed to open %s: %s"
The specified file could not be opened for reading for the reason
specified by \f(CW$!\fR.
.ie n .IP """No default encoding specified""" 4
.el .IP "\f(CWNo default encoding specified\fR" 4
.IX Item "No default encoding specified"
The \f(CW\*(C`sniff_encoding\*(C'\fR algorithm didn't find an encoding to use, and
you set \f(CW$IO::HTML::default_encoding\fR to \f(CW\*(C`undef\*(C'\fR.
.SH "CONFIGURATION AND ENVIRONMENT"
.IX Header "CONFIGURATION AND ENVIRONMENT"
There are two global variables that affect IO::HTML.  If you need to
change them, you should do so using \f(CW\*(C`local\*(C'\fR if possible:
.PP
.Vb 5
\&  my $file = do {
\&    # This file may define the charset later in the header
\&    local $IO::HTML::bytes_to_check = 4096;
\&    html_file(...);
\&  };
.Ve
.ie n .IP $bytes_to_check 4
.el .IP \f(CW$bytes_to_check\fR 4
.IX Item "$bytes_to_check"
This is the number of bytes that \f(CW\*(C`sniff_encoding\*(C'\fR will read from the
stream.  It is also the number of bytes that \f(CW\*(C`find_charset_in\*(C'\fR will
search for a \f(CW\*(C`<meta>\*(C'\fR tag containing charset information.
It must be a positive integer.
.Sp
The HTML 5 specification recommends using the default value of 1024,
but some pages do not follow the specification.
.ie n .IP $default_encoding 4
.el .IP \f(CW$default_encoding\fR 4
.IX Item "$default_encoding"
This is the encoding that \f(CW\*(C`html_file\*(C'\fR and \f(CW\*(C`html_file_and_encoding\*(C'\fR
will use if no encoding can be detected by \f(CW\*(C`sniff_encoding\*(C'\fR.
The default value is \f(CW\*(C`cp1252\*(C'\fR (a.k.a. Windows\-1252).
.Sp
Setting it to \f(CW\*(C`undef\*(C'\fR will cause the file subroutines to croak if
\&\f(CW\*(C`sniff_encoding\*(C'\fR fails to determine the encoding.  (\f(CW\*(C`sniff_encoding\*(C'\fR
itself does not use \f(CW$default_encoding\fR).
.SH DEPENDENCIES
.IX Header "DEPENDENCIES"
IO::HTML has no non-core dependencies for Perl 5.8.7+.  With earlier
versions of Perl 5.8, you need to upgrade Encode to at least
version 2.10, and
you may need to upgrade Exporter to at least version
5.57.
.SH INCOMPATIBILITIES
.IX Header "INCOMPATIBILITIES"
None reported.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
No bugs have been reported.
.SH AUTHOR
.IX Header "AUTHOR"
Christopher J. Madsen  \f(CW\*(C`<perl\ AT\ cjmweb.net>\*(C'\fR
.PP
Please report any bugs or feature requests
to \f(CW\*(C`<bug\-IO\-HTML\ AT\ rt.cpan.org>\*(C'\fR
or through the web interface at
<http://rt.cpan.org/Public/Bug/Report.html?Queue=IO\-HTML>.
.PP
You can follow or contribute to IO-HTML's development at
<https://github.com/madsen/io\-html>.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Christopher J. Madsen.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
.SH "DISCLAIMER OF WARRANTY"
.IX Header "DISCLAIMER OF WARRANTY"
BECAUSE THIS SOFTWARE IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE SOFTWARE, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE SOFTWARE "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE SOFTWARE IS WITH
YOU. SHOULD THE SOFTWARE PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
NECESSARY SERVICING, REPAIR, OR CORRECTION.
.PP
IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE SOFTWARE AS PERMITTED BY THE ABOVE LICENSE, BE
LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL,
OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
THE SOFTWARE (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.
