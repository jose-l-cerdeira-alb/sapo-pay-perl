.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Box::Parser::Perl 3"
.TH Mail::Box::Parser::Perl 3 2023-12-11 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Mail::Box::Parser::Perl \- reading messages from file using Perl
.SH INHERITANCE
.IX Header "INHERITANCE"
.Vb 3
\& Mail::Box::Parser::Perl
\&   is a Mail::Box::Parser
\&   is a Mail::Reporter
.Ve
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.SH DESCRIPTION
.IX Header "DESCRIPTION"
The \f(CW\*(C`Mail::Box::Parser::Perl\*(C'\fR implements parsing of messages
in Perl.  This may be a little slower than the \f(CW\*(C`C\*(C'\fR based parser
Mail::Box::Parser::C, but will also work on platforms where no C
compiler is available.
.PP
Extends "DESCRIPTION" in Mail::Box::Parser.
.SH METHODS
.IX Header "METHODS"
Extends "METHODS" in Mail::Box::Parser.
.SS Constructors
.IX Subsection "Constructors"
Extends "Constructors" in Mail::Box::Parser.
.IP Mail::Box::Parser::Perl\->\fBnew\fR(%options) 4
.IX Item "Mail::Box::Parser::Perl->new(%options)"
.Vb 8
\& \-Option           \-\-Defined in       \-\-Default
\&  file               Mail::Box::Parser  undef
\&  filename           Mail::Box::Parser  <required>
\&  fix_header_errors                     <false>
\&  log                Mail::Reporter     \*(AqWARNINGS\*(Aq
\&  mode               Mail::Box::Parser  \*(Aqr\*(Aq
\&  trace              Mail::Reporter     \*(AqWARNINGS\*(Aq
\&  trusted                               <false>
.Ve
.RS 4
.IP "file => FILE-HANDLE" 2
.IX Item "file => FILE-HANDLE"
.PD 0
.IP "filename => FILENAME" 2
.IX Item "filename => FILENAME"
.IP "fix_header_errors => BOOLEAN" 2
.IX Item "fix_header_errors => BOOLEAN"
.PD
When header errors are detected, the parsing of the header will
be stopped.  Other header lines will become part of the body of
the message.  Set this flag to have the erroneous line added to
the previous header line.
.IP "log => LEVEL" 2
.IX Item "log => LEVEL"
.PD 0
.IP "mode => OPENMODE" 2
.IX Item "mode => OPENMODE"
.IP "trace => LEVEL" 2
.IX Item "trace => LEVEL"
.IP "trusted => BOOLEAN" 2
.IX Item "trusted => BOOLEAN"
.PD
Is the input from the file to be trusted, or does it require extra
tests.  Related to Mail::Box::new(trusted).
.RE
.RS 4
.RE
.SS "The parser"
.IX Subsection "The parser"
Extends "The parser" in Mail::Box::Parser.
.ie n .IP $obj\->\fBfileChanged\fR() 4
.el .IP \f(CW$obj\fR\->\fBfileChanged\fR() 4
.IX Item "$obj->fileChanged()"
Inherited, see "The parser" in Mail::Box::Parser
.ie n .IP $obj\->\fBfilename\fR() 4
.el .IP \f(CW$obj\fR\->\fBfilename\fR() 4
.IX Item "$obj->filename()"
Inherited, see "The parser" in Mail::Box::Parser
.ie n .IP "$obj\->\fBfixHeaderErrors\fR( [BOOLEAN] )" 4
.el .IP "\f(CW$obj\fR\->\fBfixHeaderErrors\fR( [BOOLEAN] )" 4
.IX Item "$obj->fixHeaderErrors( [BOOLEAN] )"
If set to \f(CW\*(C`true\*(C'\fR, parsing of a header will not stop on an error, but
attempt to add the erroneous this line to previous field.  Without BOOLEAN,
the current setting is returned.
.Sp
example:
.Sp
.Vb 2
\& $folder\->parser\->fixHeaderErrors(1);
\& my $folder = $mgr\->open(\*(Aqfolder\*(Aq, fix_header_errors => 1);
.Ve
.ie n .IP $obj\->\fBrestart\fR() 4
.el .IP \f(CW$obj\fR\->\fBrestart\fR() 4
.IX Item "$obj->restart()"
Inherited, see "The parser" in Mail::Box::Parser
.ie n .IP $obj\->\fBstart\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBstart\fR(%options) 4
.IX Item "$obj->start(%options)"
Inherited, see "The parser" in Mail::Box::Parser
.ie n .IP $obj\->\fBstop\fR() 4
.el .IP \f(CW$obj\fR\->\fBstop\fR() 4
.IX Item "$obj->stop()"
Inherited, see "The parser" in Mail::Box::Parser
.SS Parsing
.IX Subsection "Parsing"
Extends "Parsing" in Mail::Box::Parser.
.ie n .IP "$obj\->\fBbodyAsFile\fR( $fh [$chars, [$lines]] )" 4
.el .IP "\f(CW$obj\fR\->\fBbodyAsFile\fR( \f(CW$fh\fR [$chars, [$lines]] )" 4
.IX Item "$obj->bodyAsFile( $fh [$chars, [$lines]] )"
Inherited, see "Parsing" in Mail::Box::Parser
.ie n .IP "$obj\->\fBbodyAsList\fR( [$chars, [$lines]] )" 4
.el .IP "\f(CW$obj\fR\->\fBbodyAsList\fR( [$chars, [$lines]] )" 4
.IX Item "$obj->bodyAsList( [$chars, [$lines]] )"
Inherited, see "Parsing" in Mail::Box::Parser
.ie n .IP "$obj\->\fBbodyAsString\fR( [$chars, [$lines]] )" 4
.el .IP "\f(CW$obj\fR\->\fBbodyAsString\fR( [$chars, [$lines]] )" 4
.IX Item "$obj->bodyAsString( [$chars, [$lines]] )"
Inherited, see "Parsing" in Mail::Box::Parser
.ie n .IP "$obj\->\fBbodyDelayed\fR( [$chars, [$lines]] )" 4
.el .IP "\f(CW$obj\fR\->\fBbodyDelayed\fR( [$chars, [$lines]] )" 4
.IX Item "$obj->bodyDelayed( [$chars, [$lines]] )"
Inherited, see "Parsing" in Mail::Box::Parser
.ie n .IP "$obj\->\fBfilePosition\fR( [$position] )" 4
.el .IP "\f(CW$obj\fR\->\fBfilePosition\fR( [$position] )" 4
.IX Item "$obj->filePosition( [$position] )"
Inherited, see "Parsing" in Mail::Box::Parser
.ie n .IP $obj\->\fBlineSeparator\fR() 4
.el .IP \f(CW$obj\fR\->\fBlineSeparator\fR() 4
.IX Item "$obj->lineSeparator()"
Inherited, see "Parsing" in Mail::Box::Parser
.ie n .IP $obj\->\fBpopSeparator\fR() 4
.el .IP \f(CW$obj\fR\->\fBpopSeparator\fR() 4
.IX Item "$obj->popSeparator()"
Inherited, see "Parsing" in Mail::Box::Parser
.ie n .IP $obj\->\fBpushSeparator\fR(STRING|Regexp) 4
.el .IP \f(CW$obj\fR\->\fBpushSeparator\fR(STRING|Regexp) 4
.IX Item "$obj->pushSeparator(STRING|Regexp)"
Inherited, see "Parsing" in Mail::Box::Parser
.ie n .IP $obj\->\fBreadHeader\fR() 4
.el .IP \f(CW$obj\fR\->\fBreadHeader\fR() 4
.IX Item "$obj->readHeader()"
.PD 0
.ie n .IP $obj\->\fBreadSeparator\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBreadSeparator\fR(%options) 4
.IX Item "$obj->readSeparator(%options)"
.PD
Inherited, see "Parsing" in Mail::Box::Parser
.SS Internals
.IX Subsection "Internals"
Extends "Internals" in Mail::Box::Parser.
.ie n .IP $obj\->\fBcloseFile\fR() 4
.el .IP \f(CW$obj\fR\->\fBcloseFile\fR() 4
.IX Item "$obj->closeFile()"
Inherited, see "Internals" in Mail::Box::Parser
.ie n .IP "$obj\->\fBdefaultParserType\fR( [$class] )" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultParserType\fR( [$class] )" 4
.IX Item "$obj->defaultParserType( [$class] )"
.PD 0
.IP "Mail::Box::Parser::Perl\->\fBdefaultParserType\fR( [$class] )" 4
.IX Item "Mail::Box::Parser::Perl->defaultParserType( [$class] )"
.PD
Inherited, see "Internals" in Mail::Box::Parser
.ie n .IP $obj\->\fBopenFile\fR($args) 4
.el .IP \f(CW$obj\fR\->\fBopenFile\fR($args) 4
.IX Item "$obj->openFile($args)"
Inherited, see "Internals" in Mail::Box::Parser
.ie n .IP $obj\->\fBtakeFileInfo\fR() 4
.el .IP \f(CW$obj\fR\->\fBtakeFileInfo\fR() 4
.IX Item "$obj->takeFileInfo()"
Inherited, see "Internals" in Mail::Box::Parser
.SS "Error handling"
.IX Subsection "Error handling"
Extends "Error handling" in Mail::Box::Parser.
.ie n .IP $obj\->\fBAUTOLOAD\fR() 4
.el .IP \f(CW$obj\fR\->\fBAUTOLOAD\fR() 4
.IX Item "$obj->AUTOLOAD()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBaddReport\fR($object) 4
.el .IP \f(CW$obj\fR\->\fBaddReport\fR($object) 4
.IX Item "$obj->addReport($object)"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "$obj->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD 0
.ie n .IP "Mail::Box::Parser::Perl\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "Mail::Box::Parser::Perl\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "Mail::Box::Parser::Perl->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBerrors\fR() 4
.el .IP \f(CW$obj\fR\->\fBerrors\fR() 4
.IX Item "$obj->errors()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR( [$level, [$strings]] )" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "$obj->log( [$level, [$strings]] )"
.PD 0
.IP "Mail::Box::Parser::Perl\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "Mail::Box::Parser::Perl->log( [$level, [$strings]] )"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBlogPriority\fR($level) 4
.el .IP \f(CW$obj\fR\->\fBlogPriority\fR($level) 4
.IX Item "$obj->logPriority($level)"
.PD 0
.IP Mail::Box::Parser::Perl\->\fBlogPriority\fR($level) 4
.IX Item "Mail::Box::Parser::Perl->logPriority($level)"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBlogSettings\fR() 4
.el .IP \f(CW$obj\fR\->\fBlogSettings\fR() 4
.IX Item "$obj->logSettings()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBnotImplemented\fR() 4
.el .IP \f(CW$obj\fR\->\fBnotImplemented\fR() 4
.IX Item "$obj->notImplemented()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR( [$level] )" 4
.IX Item "$obj->report( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR( [$level] )" 4
.IX Item "$obj->reportAll( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR( [$level] )" 4
.IX Item "$obj->trace( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBwarnings\fR() 4
.el .IP \f(CW$obj\fR\->\fBwarnings\fR() 4
.IX Item "$obj->warnings()"
Inherited, see "Error handling" in Mail::Reporter
.SS Cleanup
.IX Subsection "Cleanup"
Extends "Cleanup" in Mail::Box::Parser.
.ie n .IP $obj\->\fBDESTROY\fR() 4
.el .IP \f(CW$obj\fR\->\fBDESTROY\fR() 4
.IX Item "$obj->DESTROY()"
Inherited, see "Cleanup" in Mail::Reporter
.SH DIAGNOSTICS
.IX Header "DIAGNOSTICS"
.ie n .IP "Warning: File $filename changed during access." 4
.el .IP "Warning: File \f(CW$filename\fR changed during access." 4
.IX Item "Warning: File $filename changed during access."
When a message parser starts working, it takes size and modification time
of the file at hand.  If the folder is written, it checks whether there
were changes in the file made by external programs.
.Sp
Calling \fBMail::Box::update()\fR on a folder before it being closed
will read these new messages.  But the real source of this problem is
locking: some external program (for instance the mail transfer agent,
like sendmail) uses a different locking mechanism as you do and therefore
violates your rights.
.ie n .IP "Error: Package $package does not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR does not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package does not implement $method."
Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.
.ie n .IP "Warning: Unexpected end of header in $source: $line" 4
.el .IP "Warning: Unexpected end of header in \f(CW$source:\fR \f(CW$line\fR" 4
.IX Item "Warning: Unexpected end of header in $source: $line"
While parsing a message from the specified source (usually a file name),
the parser found a syntax error.  According to the MIME specification in the
RFCs, each header line must either contain a colon, or start with a blank
to indicate a folded field.  Apparently, this header contains a line which
starts on the first position, but not with a field name.
.Sp
By default, parsing of the header will be stopped.  If there are more header
lines after the erroneous line, they will be added to the body of the message.
In case of new(fix_headers) set, the parsing of the header will be continued.
The erroneous line will be added to the preceding field.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Message distribution version 3.015,
built on December 11, 2023. Website: \fIhttp://perl.overmeer.net/CPAN/\fR
.SH LICENSE
.IX Header "LICENSE"
Copyrights 2001\-2023 by [Mark Overmeer <markov@cpan.org>]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://dev.perl.org/licenses/\fR
