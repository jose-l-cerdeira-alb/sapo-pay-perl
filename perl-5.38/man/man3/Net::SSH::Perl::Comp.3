.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::SSH::Perl::Comp 3"
.TH Net::SSH::Perl::Comp 3 2023-08-07 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Net::SSH::Perl::Comp \- Compression/Decompression base class
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 3
\&    use Net::SSH::Perl::Comp;
\&    my $comp = Net::SSH::Perl::Comp\->new( $comp_type );
\&    $comp\->compress($data);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
\&\fINet::SSH::Perl::Comp\fR is a base class for compression/decompression
classes. Currently the only such class is the Zlib implementation
(using \fICompress::Zlib\fR), which is the class \fINet::SSH::Perl::Comp::Zlib\fR.
.PP
Each compression object generally has its own internal "state"; this
state changes when you compress or decompress data. The SSH protocol
dictates that you must have two \fIseparate\fR objects to compress and
decompress data: one for compression, one for decompression. So, for
example, you would create two \fINet::SSH::Perl::Comp\fR objects:
.PP
.Vb 2
\&    my $in = Net::SSH::Perl::Comp\->new(\*(AqZlib\*(Aq);
\&    my $inflated = $in\->decompress($data);
\&
\&    my $out = Net::SSH::Perl::Comp\->new(\*(AqZlib\*(Aq);
\&    my $deflated = $out\->compress($data);
.Ve
.SH USAGE
.IX Header "USAGE"
.ie n .SS "$comp = Net::SSH::Perl::Comp\->new( $comp_type [, @args ] )"
.el .SS "\f(CW$comp\fP = Net::SSH::Perl::Comp\->new( \f(CW$comp_type\fP [, \f(CW@args\fP ] )"
.IX Subsection "$comp = Net::SSH::Perl::Comp->new( $comp_type [, @args ] )"
Constructs a new compression object of compression type \fR\f(CI$comp_type\fR\fI\fR
and returns that object.
.PP
If \fR\f(CI@args\fR\fI\fR are provided, the class's \fIinit\fR method is called with
those arguments, for any post-creation initialization.
.ie n .SS $comp\->init($level)
.el .SS \f(CW$comp\fP\->init($level)
.IX Subsection "$comp->init($level)"
Initializes \fR\f(CI$comp\fR\fI\fR and sets the compression level to \fI\fR\f(CI$level\fR\fI\fR.
This method will be called automatically from \fInew\fR if you've
provided \fI\fR\f(CI@args\fR\fI\fR to \fInew\fR. So, for example, you could write:
.PP
.Vb 1
\&    my $comp = Net::SSH::Perl::Comp\->new(\*(AqZlib\*(Aq, 5);
.Ve
.PP
To create a new \fIZlib\fR compression object and initialize its
compression level to 5.
.ie n .SS "$comp\->compress( $data )"
.el .SS "\f(CW$comp\fP\->compress( \f(CW$data\fP )"
.IX Subsection "$comp->compress( $data )"
Compresses \fR\f(CI$data\fR\fI\fR using the underlying compression mechanism;
returns the compressed data.
.ie n .SS "$comp\->decompress( $data )"
.el .SS "\f(CW$comp\fP\->decompress( \f(CW$data\fP )"
.IX Subsection "$comp->decompress( $data )"
Decompresses \fR\f(CI$data\fR\fI\fR using the underlying decompression mechanism;
returns the decompressed data.
.ie n .SS $comp\->enable
.el .SS \f(CW$comp\fP\->enable
.IX Subsection "$comp->enable"
"Enables" the compression object. This is useful in the context of
the key exchange (\fIKex\fR) classes, which create a new compression
object during key negotiation, but don't actually turn it on ("enable"
it) until receiving/sending the \fISSH2_MSG_NEWKEYS\fR message.
.PP
\&\fINet::SSH::Perl::Comp\fR objects (and subclasses) are disabled by
default.
.ie n .SS $comp\->enabled
.el .SS \f(CW$comp\fP\->enabled
.IX Subsection "$comp->enabled"
Returns the state of the "enabled" flag, ie. whether the compression
object is "turned on".
.PP
This is used by \fINet::SSH::Perl::Packet\fR when determining whether
data it receives/sends to the server should be decompressed/compressed,
respectively.
.SH "AUTHOR & COPYRIGHTS"
.IX Header "AUTHOR & COPYRIGHTS"
Please see the Net::SSH::Perl manpage for author, copyright,
and license information.
