.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DateTime::TimeZone 3"
.TH DateTime::TimeZone 3 2023-12-30 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
DateTime::TimeZone \- Time zone object base class and factory
.SH VERSION
.IX Header "VERSION"
version 2.61
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\&  use DateTime;
\&  use DateTime::TimeZone;
\&
\&  my $tz = DateTime::TimeZone\->new( name => \*(AqAmerica/Chicago\*(Aq );
\&
\&  my $dt = DateTime\->now();
\&  my $offset = $tz\->offset_for_datetime($dt);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This class is the base class for all time zone objects.  A time zone is
represented internally as a set of observances, each of which describes the
offset from GMT for a given time period.
.PP
Note that without the DateTime module, this module does not do much.  It's
primary interface is through a DateTime object, and most users will not need
to directly use \f(CW\*(C`DateTime::TimeZone\*(C'\fR methods.
.SS "Special Case Platforms"
.IX Subsection "Special Case Platforms"
If you are on the Win32 platform, you will want to also install
DateTime::TimeZone::Local::Win32. This will enable you to specify a time
zone of \f(CW\*(Aqlocal\*(Aq\fR when creating a DateTime object.
.PP
If you are on HPUX, install DateTime::TimeZone::HPUX. This provides support
for HPUX style time zones like \f(CW\*(AqMET\-1METDST\*(Aq\fR.
.SH USAGE
.IX Header "USAGE"
This class has the following methods:
.ie n .SS "DateTime::TimeZone\->new( name => $tz_name )"
.el .SS "DateTime::TimeZone\->new( name => \f(CW$tz_name\fP )"
.IX Subsection "DateTime::TimeZone->new( name => $tz_name )"
Given a valid time zone name, this method returns a new time zone blessed into
the appropriate subclass.  Subclasses are named for the given time zone, so
that the time zone "America/Chicago" is the
DateTime::TimeZone::America::Chicago class.
.PP
If the name given is a "link" name in the Olson database, the object created
may have a different name.  For example, there is a link from the old "EST5EDT"
name to "America/New_York".
.PP
When loading a time zone from the Olson database, the constructor checks the
version of the loaded class to make sure it matches the version of the current
DateTime::TimeZone installation. If they do not match it will issue a warning.
This is useful because time zone names may fall out of use, but you may have an
old module file installed for that time zone.
.PP
There are also several special values that can be given as names.
.PP
If the "name" parameter is "floating", then a \f(CW\*(C`DateTime::TimeZone::Floating\*(C'\fR
object is returned.  A floating time zone does not have \fIany\fR offset, and is
always the same time.  This is useful for calendaring applications, which may
need to specify that a given event happens at the same \fIlocal\fR time,
regardless of where it occurs. See RFC
2445 <https://www.ietf.org/rfc/rfc2445.txt> for more details.
.PP
If the "name" parameter is "UTC", then a \f(CW\*(C`DateTime::TimeZone::UTC\*(C'\fR object is
returned.
.PP
If the "name" is an offset string, it is converted to a number, and a
\&\f(CW\*(C`DateTime::TimeZone::OffsetOnly\*(C'\fR object is returned.
.PP
\fIThe "local" time zone\fR
.IX Subsection "The ""local"" time zone"
.PP
If the "name" parameter is "local", then the module attempts to determine the
local time zone for the system.
.PP
The method for finding the local zone varies by operating system. See the
appropriate module for details of how we check for the local time zone.
.IP \(bu 4
DateTime::TimeZone::Local::Unix
.IP \(bu 4
DateTime::TimeZone::Local::Android
.IP \(bu 4
DateTime::TimeZone::Local::hpux
.IP \(bu 4
DateTime::TimeZone::Local::Win32
.IP \(bu 4
DateTime::TimeZone::Local::VMS
.PP
If a local time zone is not found, then an exception will be thrown. This
exception will always stringify to something containing the text \f(CW"Cannot
determine local time zone"\fR.
.PP
If you are writing code for users to run on systems you do not control, you
should try to account for the possibility that this exception may be thrown.
Falling back to UTC might be a reasonable alternative.
.PP
When writing tests for your modules that might be run on others' systems, you
are strongly encouraged to either not use \f(CW\*(C`local\*(C'\fR when creating DateTime
objects or to set \f(CW$ENV{TZ}\fR to a known value in your test code. All of the
per-OS classes check this environment variable.
.ie n .SS "$tz\->offset_for_datetime( $dt )"
.el .SS "\f(CW$tz\fP\->offset_for_datetime( \f(CW$dt\fP )"
.IX Subsection "$tz->offset_for_datetime( $dt )"
Given a \f(CW\*(C`DateTime\*(C'\fR object, this method returns the offset in seconds for the
given datetime.  This takes into account historical time zone information, as
well as Daylight Saving Time.  The offset is determined by looking at the
object's UTC Rata Die days and seconds.
.ie n .SS "$tz\->offset_for_local_datetime( $dt )"
.el .SS "\f(CW$tz\fP\->offset_for_local_datetime( \f(CW$dt\fP )"
.IX Subsection "$tz->offset_for_local_datetime( $dt )"
Given a \f(CW\*(C`DateTime\*(C'\fR object, this method returns the offset in seconds for the
given datetime.  Unlike the previous method, this method uses the local time's
Rata Die days and seconds.  This should only be done when the corresponding UTC
time is not yet known, because local times can be ambiguous due to Daylight
Saving Time rules.
.ie n .SS "$tz\->is_dst_for_datetime( $dt )"
.el .SS "\f(CW$tz\fP\->is_dst_for_datetime( \f(CW$dt\fP )"
.IX Subsection "$tz->is_dst_for_datetime( $dt )"
Given a \f(CW\*(C`DateTime\*(C'\fR object, this method returns true if the DateTime is
currently in Daylight Saving Time.
.ie n .SS $tz\->name
.el .SS \f(CW$tz\fP\->name
.IX Subsection "$tz->name"
Returns the name of the time zone.
.ie n .SS "$tz\->short_name_for_datetime( $dt )"
.el .SS "\f(CW$tz\fP\->short_name_for_datetime( \f(CW$dt\fP )"
.IX Subsection "$tz->short_name_for_datetime( $dt )"
Given a \f(CW\*(C`DateTime\*(C'\fR object, this method returns the "short name" for the
current observance and rule this datetime is in.  These are names like "EST",
"GMT", etc.
.PP
It is \fBstrongly\fR recommended that you do not rely on these names for anything
other than display.  These names are not official, and many of them are simply
the invention of the Olson database maintainers. Moreover, these names are not
unique.  For example, there is an "EST" at both \-0500 and +1000/+1100.
.ie n .SS $tz\->is_floating
.el .SS \f(CW$tz\fP\->is_floating
.IX Subsection "$tz->is_floating"
Returns a boolean indicating whether or not this object represents a floating
time zone, as defined by RFC 2445 <https://www.ietf.org/rfc/rfc2445.txt>.
.ie n .SS $tz\->is_utc
.el .SS \f(CW$tz\fP\->is_utc
.IX Subsection "$tz->is_utc"
Indicates whether or not this object represents the UTC (GMT) time zone.
.ie n .SS $tz\->has_dst_changes
.el .SS \f(CW$tz\fP\->has_dst_changes
.IX Subsection "$tz->has_dst_changes"
Indicates whether or not this zone has \fIever\fR had a change to and from DST,
either in the past or future.
.ie n .SS $tz\->is_olson
.el .SS \f(CW$tz\fP\->is_olson
.IX Subsection "$tz->is_olson"
Returns true if the time zone is a named time zone from the Olson database.
.ie n .SS $tz\->category
.el .SS \f(CW$tz\fP\->category
.IX Subsection "$tz->category"
Returns the part of the time zone name before the first slash.  For example,
the "America/Chicago" time zone would return "America".
.SS DateTime::TimeZone\->is_valid_name($name)
.IX Subsection "DateTime::TimeZone->is_valid_name($name)"
Given a string, this method returns a boolean value indicating whether or not
the string is a valid time zone name.  If you are using
\&\f(CW\*(C`DateTime::TimeZone::Alias\*(C'\fR, any aliases you've created will be valid.
.SS DateTime::TimeZone\->all_names
.IX Subsection "DateTime::TimeZone->all_names"
This returns a pre-sorted list of all the time zone names.  This list does not
include link names.  In scalar context, it returns an array reference, while in
list context it returns an array.
.SS DateTime::TimeZone\->categories
.IX Subsection "DateTime::TimeZone->categories"
This returns a list of all time zone categories.  In scalar context, it returns
an array reference, while in list context it returns an array.
.SS DateTime::TimeZone\->links
.IX Subsection "DateTime::TimeZone->links"
This returns a hash of all time zone links, where the keys are the old,
deprecated names, and the values are the new names.  In scalar context, it
returns a hash reference, while in list context it returns a hash.
.ie n .SS "DateTime::TimeZone\->names_in_category( $category )"
.el .SS "DateTime::TimeZone\->names_in_category( \f(CW$category\fP )"
.IX Subsection "DateTime::TimeZone->names_in_category( $category )"
Given a valid category, this method returns a list of the names in that
category, without the category portion.  So the list for the "America" category
would include the strings "Chicago", "Kentucky/Monticello", and "New_York". In
scalar context, it returns an array reference, while in list context it returns
an array.
.SS DateTime::TimeZone\->\fBcountries()\fP
.IX Subsection "DateTime::TimeZone->countries()"
Returns a sorted list of all the valid country codes (in lower-case) which can
be passed to \f(CWnames_in_country()\fR. In scalar context, it returns an array
reference, while in list context it returns an array.
.PP
If you need to convert country codes to names or vice versa you can use
\&\f(CW\*(C`Locale::Country\*(C'\fR to do so. Note that one of the codes returned is "uk", which
is an alias for the country code "gb", and is not a valid ISO country code.
.ie n .SS "DateTime::TimeZone\->names_in_country( $country_code )"
.el .SS "DateTime::TimeZone\->names_in_country( \f(CW$country_code\fP )"
.IX Subsection "DateTime::TimeZone->names_in_country( $country_code )"
Given a two-letter ISO3166 country code, this method returns a list of time
zones used in that country. The country code may be of any case. In scalar
context, it returns an array reference, while in list context it returns an
array.
.PP
This list is returned in an order vaguely based on geography and population. In
general, the least used zones come last, but there are not guarantees of a
specific order from one release to the next. This order is probably the best
option for presenting zones names to end users.
.ie n .SS "DateTime::TimeZone\->offset_as_seconds( $offset )"
.el .SS "DateTime::TimeZone\->offset_as_seconds( \f(CW$offset\fP )"
.IX Subsection "DateTime::TimeZone->offset_as_seconds( $offset )"
Given an offset as a string, this returns the number of seconds represented by
the offset as a positive or negative number.  Returns \f(CW\*(C`undef\*(C'\fR if \f(CW$offset\fR is
not in the range \f(CW\*(C`\-99:59:59\*(C'\fR to \f(CW\*(C`+99:59:59\*(C'\fR.
.PP
The offset is expected to match either
\&\f(CW\*(C`/^([\e+\e\-])?(\ed\ed?):(\ed\ed)(?::(\ed\ed))?$/\*(C'\fR or
\&\f(CW\*(C`/^([\e+\e\-])?(\ed\ed)(\ed\ed)(\ed\ed)?$/\*(C'\fR.  If it doesn't match either of these,
\&\f(CW\*(C`undef\*(C'\fR will be returned.
.PP
This means that if you want to specify hours as a single digit, then each
element of the offset must be separated by a colon (:).
.ie n .SS "DateTime::TimeZone\->offset_as_string( $offset, $sep )"
.el .SS "DateTime::TimeZone\->offset_as_string( \f(CW$offset\fP, \f(CW$sep\fP )"
.IX Subsection "DateTime::TimeZone->offset_as_string( $offset, $sep )"
Given an offset as a number, this returns the offset as a string. Returns
\&\f(CW\*(C`undef\*(C'\fR if \f(CW$offset\fR is not in the range \f(CW\-359999\fR to \f(CW359999\fR.
.PP
You can also provide an optional separator which will go between the hours,
minutes, and seconds (if applicable) portions of the offset.
.SS "Storable Hooks"
.IX Subsection "Storable Hooks"
This module provides freeze and thaw hooks for \f(CW\*(C`Storable\*(C'\fR so that the huge
data structures for Olson time zones are not actually stored in the serialized
structure.
.PP
If you subclass \f(CW\*(C`DateTime::TimeZone\*(C'\fR, you will inherit its hooks, which may
not work for your module, so please test the interaction of your module with
Storable.
.SH "LOADING TIME ZONES IN A PRE-FORKING SYSTEM"
.IX Header "LOADING TIME ZONES IN A PRE-FORKING SYSTEM"
If you are running an application that does pre-forking (for example with
Starman), then you should try to load all the time zones that you'll need in
the parent process. Time zones are loaded on-demand, so loading them once in
each child will waste memory that could otherwise be shared.
.SH CREDITS
.IX Header "CREDITS"
This module was inspired by Jesse Vincent's work on Date::ICal::Timezone, and
written with much help from the datetime@perl.org list.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
datetime@perl.org mailing list
.PP
The tools directory of the DateTime::TimeZone distribution includes two scripts
that may be of interest to some people.  They are parse_olson and
tests_from_zdump.  Please run them with the \-\-help flag to see what they can be
used for.
.SH SUPPORT
.IX Header "SUPPORT"
Support for this module is provided via the datetime@perl.org email list.
.PP
Bugs may be submitted at <https://github.com/houseabsolute/DateTime\-TimeZone/issues>.
.SH SOURCE
.IX Header "SOURCE"
The source code repository for DateTime-TimeZone can be found at <https://github.com/houseabsolute/DateTime\-TimeZone>.
.SH DONATIONS
.IX Header "DONATIONS"
If you'd like to thank me for the work I've done on this module, please
consider making a "donation" to me via PayPal. I spend a lot of free time
creating free software, and would appreciate any support you'd care to offer.
.PP
Please note that \fBI am not suggesting that you must do this\fR in order for me
to continue working on this particular software. I will continue to do so,
inasmuch as I have in the past, for as long as it interests me.
.PP
Similarly, a donation made in this way will probably not make me work on this
software much more, unless I get so many donations that I can consider working
on free software full time (let's all have a chuckle at that together).
.PP
To donate, log into PayPal and send money to autarch@urth.org, or use the
button at <https://houseabsolute.com/foss\-donations/>.
.SH AUTHOR
.IX Header "AUTHOR"
Dave Rolsky <autarch@urth.org>
.SH CONTRIBUTORS
.IX Header "CONTRIBUTORS"
.IP \(bu 4
Alexey Molchanov <alexey.molchanov@gmail.com>
.IP \(bu 4
Alfie John <alfiej@fastmail.fm>
.IP \(bu 4
Andrew Paprocki <apaprocki@bloomberg.net>
.IP \(bu 4
Brian Fraser <brian.fraser@booking.com>
.IP \(bu 4
Bron Gondwana <brong@fastmail.fm>
.IP \(bu 4
Daisuke Maki <dmaki@cpan.org>
.IP \(bu 4
David Pinkowitz <dave@pinkowitz.com>
.IP \(bu 4
Iain Truskett <deceased>
.IP \(bu 4
Jakub Wilk <jwilk@jwilk.net>
.IP \(bu 4
James E Keenan <jkeenan@cpan.org>
.IP \(bu 4
Joshua Hoblitt <jhoblitt@cpan.org>
.IP \(bu 4
Karen Etheridge <ether@cpan.org>
.IP \(bu 4
karupanerura <karupa@cpan.org>
.IP \(bu 4
kclaggett <kclaggett@proofpoint.com>
.IP \(bu 4
Matthew Horsfall <wolfsage@gmail.com>
.IP \(bu 4
Mohammad S Anwar <mohammad.anwar@yahoo.com>
.IP \(bu 4
Olaf Alders <olaf@wundersolutions.com>
.IP \(bu 4
Peter Rabbitson <ribasushi@cpan.org>
.IP \(bu 4
Tom Wyant <wyant@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2023 by Dave Rolsky.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
.PP
The full text of the license can be found in the
\&\fILICENSE\fR file included with this distribution.
