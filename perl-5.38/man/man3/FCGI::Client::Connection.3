.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "FCGI::Client::Connection 3"
.TH FCGI::Client::Connection 3 2018-07-16 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
FCGI::Client::Connection \- connection to FastCGI server
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module handles connection to FastCGI server.
.SH ATTRIBUTES
.IX Header "ATTRIBUTES"
.IP sock 4
.IX Item "sock"
the socket object.
.IP timeout 4
.IX Item "timeout"
read only integer value, default is 10seconds.
.SH METHODS
.IX Header "METHODS"
.ie n .IP "my ($stdout, $stderr, $appstatus) = $self\->request($env, $content)" 4
.el .IP "my ($stdout, \f(CW$stderr\fR, \f(CW$appstatus\fR) = \f(CW$self\fR\->request($env, \f(CW$content\fR)" 4
.IX Item "my ($stdout, $stderr, $appstatus) = $self->request($env, $content)"
\&\f(CW$env\fR is environment hash, same as CGI.$content is request body string.
This method returns \f(CW$stdout\fR and \f(CW$stderr\fR strings.When error got, return undef.
\&\f(CW$appstatus\fR is the status code of FastCGI server, this is one of the following code.
.Sp
.Vb 4
\&    #define FCGI_REQUEST_COMPLETE 0
\&    #define FCGI_CANT_MPX_CONN    1
\&    #define FCGI_OVERLOADED       2
\&    #define FCGI_UNKNOWN_ROLE     3
.Ve
.Sp
These constants defined at FCGI::Client::Constat.
.SH FAQ
.IX Header "FAQ"
.IP "Why don't support FCGI_KEEP_CONN?" 4
.IX Item "Why don't support FCGI_KEEP_CONN?"
FCGI_KEEP_CONN is not used by lighttpd's mod_fastcgi.c, and mod_fast_cgi for apache.
And, FCGI.xs doesn't support it.
.Sp
I seems FCGI_KEEP_CONN is not used in real world.
