.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Message::Part 3"
.TH Mail::Message::Part 3 2023-12-11 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Mail::Message::Part \- a part of a message, but a message by itself
.SH INHERITANCE
.IX Header "INHERITANCE"
.Vb 3
\& Mail::Message::Part
\&   is a Mail::Message
\&   is a Mail::Reporter
.Ve
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 3
\& my Mail::Message $message = ...;
\& if($message\->isMultipart) {
\&    my Mail::Message::Part $part;
\&
\&    foreach $part ($message\->body\->parts) {
\&       $part\->print(\e*OUT);
\&       my $attached_head = $part\->head;
\&       my $attached_body = $part\->body;      # encoded as read
\&       my $attached_body = $part\->decoded;   # transfer\-encoding removed
\&    }
\& }
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
A \f(CW\*(C`Mail::Message::Part\*(C'\fR object contains a message which is included in
the body of another message.  For instance \fIattachments\fR are \fIparts\fR.
.PP
READ Mail::Message FIRST.  A part is a special message: it has a
reference to its parent message, and will usually not be sub-classed
into mail folder specific variants.
.PP
Extends "DESCRIPTION" in Mail::Message.
.SH METHODS
.IX Header "METHODS"
Extends "METHODS" in Mail::Message.
.SS Constructors
.IX Subsection "Constructors"
Extends "Constructors" in Mail::Message.
.ie n .IP $obj\->\fBclone\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBclone\fR(%options) 4
.IX Item "$obj->clone(%options)"
Inherited, see "Constructors" in Mail::Message
.IP Mail::Message::Part\->\fBnew\fR(%options) 4
.IX Item "Mail::Message::Part->new(%options)"
Create a message part.
.Sp
.Vb 10
\& \-Option    \-\-Defined in     \-\-Default
\&  body        Mail::Message    undef
\&  body_type   Mail::Message    Mail::Message::Body::Lines
\&  container                    <required>
\&  deleted     Mail::Message    <false>
\&  field_type  Mail::Message    undef
\&  head        Mail::Message    <empty header>
\&  head_type   Mail::Message    Mail::Message::Head::Complete
\&  labels      Mail::Message    {}
\&  log         Mail::Reporter   \*(AqWARNINGS\*(Aq
\&  messageId   Mail::Message    undef
\&  modified    Mail::Message    <false>
\&  trace       Mail::Reporter   \*(AqWARNINGS\*(Aq
\&  trusted     Mail::Message    <false>
.Ve
.RS 4
.IP "body => OBJECT" 2
.IX Item "body => OBJECT"
.PD 0
.IP "body_type => CLASS" 2
.IX Item "body_type => CLASS"
.IP "container => BODY" 2
.IX Item "container => BODY"
.PD
Reference to the parental Mail::Message::Body object where this part
is a member of.  That object may be a Mail::Message::Body::Multipart
or a Mail::Message::Body::Nested.
.IP "deleted => BOOLEAN" 2
.IX Item "deleted => BOOLEAN"
.PD 0
.IP "field_type => CLASS" 2
.IX Item "field_type => CLASS"
.IP "head => OBJECT" 2
.IX Item "head => OBJECT"
.IP "head_type => CLASS" 2
.IX Item "head_type => CLASS"
.IP "labels => ARRAY|HASH" 2
.IX Item "labels => ARRAY|HASH"
.IP "log => LEVEL" 2
.IX Item "log => LEVEL"
.IP "messageId => STRING" 2
.IX Item "messageId => STRING"
.IP "modified => BOOLEAN" 2
.IX Item "modified => BOOLEAN"
.IP "trace => LEVEL" 2
.IX Item "trace => LEVEL"
.IP "trusted => BOOLEAN" 2
.IX Item "trusted => BOOLEAN"
.RE
.RS 4
.RE
.PD
.SS "Constructing a message"
.IX Subsection "Constructing a message"
Extends "Constructing a message" in Mail::Message.
.ie n .IP "$obj\->\fBbounce\fR( [<$rg_object|%options>] )" 4
.el .IP "\f(CW$obj\fR\->\fBbounce\fR( [<$rg_object|%options>] )" 4
.IX Item "$obj->bounce( [<$rg_object|%options>] )"
Inherited, see "Constructing a message" in Mail::Message::Construct::Bounce
.ie n .IP "Mail::Message::Part\->\fBbuild\fR( [$message|$part|$body], $content )" 4
.el .IP "Mail::Message::Part\->\fBbuild\fR( [$message|$part|$body], \f(CW$content\fR )" 4
.IX Item "Mail::Message::Part->build( [$message|$part|$body], $content )"
Inherited, see "Constructing a message" in Mail::Message::Construct::Build
.ie n .IP "Mail::Message::Part\->\fBbuildFromBody\fR($body, $container, $headers)" 4
.el .IP "Mail::Message::Part\->\fBbuildFromBody\fR($body, \f(CW$container\fR, \f(CW$headers\fR)" 4
.IX Item "Mail::Message::Part->buildFromBody($body, $container, $headers)"
Shape a message part around a \f(CW$body\fR.  Bodies have information about their
content in them, which is used to construct a header for the message.
Next to that, more \f(CW$headers\fR can be specified.  No headers are obligatory.
No extra headers are fabricated automatically.
.Sp
example:
.Sp
.Vb 2
\& my $multi = Mail::Message::Body::Multipart\->new;
\& my $part  = Mail::Message::Part\->buildFromBody($body, $multi);
.Ve
.ie n .IP $obj\->\fBforward\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBforward\fR(%options) 4
.IX Item "$obj->forward(%options)"
Inherited, see "Constructing a message" in Mail::Message::Construct::Forward
.ie n .IP $obj\->\fBforwardAttach\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBforwardAttach\fR(%options) 4
.IX Item "$obj->forwardAttach(%options)"
Inherited, see "Constructing a message" in Mail::Message::Construct::Forward
.ie n .IP $obj\->\fBforwardEncapsulate\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBforwardEncapsulate\fR(%options) 4
.IX Item "$obj->forwardEncapsulate(%options)"
Inherited, see "Constructing a message" in Mail::Message::Construct::Forward
.ie n .IP $obj\->\fBforwardInline\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBforwardInline\fR(%options) 4
.IX Item "$obj->forwardInline(%options)"
Inherited, see "Constructing a message" in Mail::Message::Construct::Forward
.ie n .IP $obj\->\fBforwardNo\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBforwardNo\fR(%options) 4
.IX Item "$obj->forwardNo(%options)"
Inherited, see "Constructing a message" in Mail::Message::Construct::Forward
.ie n .IP $obj\->\fBforwardPostlude\fR() 4
.el .IP \f(CW$obj\fR\->\fBforwardPostlude\fR() 4
.IX Item "$obj->forwardPostlude()"
Inherited, see "Constructing a message" in Mail::Message::Construct::Forward
.ie n .IP $obj\->\fBforwardPrelude\fR() 4
.el .IP \f(CW$obj\fR\->\fBforwardPrelude\fR() 4
.IX Item "$obj->forwardPrelude()"
Inherited, see "Constructing a message" in Mail::Message::Construct::Forward
.ie n .IP $obj\->\fBforwardSubject\fR(STRING) 4
.el .IP \f(CW$obj\fR\->\fBforwardSubject\fR(STRING) 4
.IX Item "$obj->forwardSubject(STRING)"
Inherited, see "Constructing a message" in Mail::Message::Construct::Forward
.ie n .IP "Mail::Message::Part\->\fBread\fR($fh|STRING|SCALAR|ARRAY, %options)" 4
.el .IP "Mail::Message::Part\->\fBread\fR($fh|STRING|SCALAR|ARRAY, \f(CW%options\fR)" 4
.IX Item "Mail::Message::Part->read($fh|STRING|SCALAR|ARRAY, %options)"
Inherited, see "Constructing a message" in Mail::Message::Construct::Read
.ie n .IP $obj\->\fBrebuild\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBrebuild\fR(%options) 4
.IX Item "$obj->rebuild(%options)"
Inherited, see "Constructing a message" in Mail::Message::Construct::Rebuild
.ie n .IP $obj\->\fBreply\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBreply\fR(%options) 4
.IX Item "$obj->reply(%options)"
Inherited, see "Constructing a message" in Mail::Message::Construct::Reply
.ie n .IP "$obj\->\fBreplyPrelude\fR( [STRING|$field|$address|ARRAY\-$of\-$things] )" 4
.el .IP "\f(CW$obj\fR\->\fBreplyPrelude\fR( [STRING|$field|$address|ARRAY\-$of\-$things] )" 4
.IX Item "$obj->replyPrelude( [STRING|$field|$address|ARRAY-$of-$things] )"
Inherited, see "Constructing a message" in Mail::Message::Construct::Reply
.ie n .IP $obj\->\fBreplySubject\fR(STRING) 4
.el .IP \f(CW$obj\fR\->\fBreplySubject\fR(STRING) 4
.IX Item "$obj->replySubject(STRING)"
.PD 0
.IP Mail::Message::Part\->\fBreplySubject\fR(STRING) 4
.IX Item "Mail::Message::Part->replySubject(STRING)"
.PD
Inherited, see "Constructing a message" in Mail::Message::Construct::Reply
.SS "The message"
.IX Subsection "The message"
Extends "The message" in Mail::Message.
.ie n .IP $obj\->\fBcontainer\fR() 4
.el .IP \f(CW$obj\fR\->\fBcontainer\fR() 4
.IX Item "$obj->container()"
Inherited, see "The message" in Mail::Message
.ie n .IP $obj\->\fBisDummy\fR() 4
.el .IP \f(CW$obj\fR\->\fBisDummy\fR() 4
.IX Item "$obj->isDummy()"
Inherited, see "The message" in Mail::Message
.ie n .IP $obj\->\fBisPart\fR() 4
.el .IP \f(CW$obj\fR\->\fBisPart\fR() 4
.IX Item "$obj->isPart()"
Inherited, see "The message" in Mail::Message
.ie n .IP $obj\->\fBmessageId\fR() 4
.el .IP \f(CW$obj\fR\->\fBmessageId\fR() 4
.IX Item "$obj->messageId()"
Inherited, see "The message" in Mail::Message
.ie n .IP $obj\->\fBpartNumber\fR() 4
.el .IP \f(CW$obj\fR\->\fBpartNumber\fR() 4
.IX Item "$obj->partNumber()"
Inherited, see "The message" in Mail::Message
.ie n .IP "$obj\->\fBprint\fR( [$fh] )" 4
.el .IP "\f(CW$obj\fR\->\fBprint\fR( [$fh] )" 4
.IX Item "$obj->print( [$fh] )"
Inherited, see "The message" in Mail::Message
.ie n .IP $obj\->\fBprintEscapedFrom\fR($fh) 4
.el .IP \f(CW$obj\fR\->\fBprintEscapedFrom\fR($fh) 4
.IX Item "$obj->printEscapedFrom($fh)"
Prints the message part, but all lines which start with 'From ' will get
a leading >.  See \fBMail::Message::Body::printEscapedFrom()\fR.
.ie n .IP "$obj\->\fBsend\fR( [$mailer], %options )" 4
.el .IP "\f(CW$obj\fR\->\fBsend\fR( [$mailer], \f(CW%options\fR )" 4
.IX Item "$obj->send( [$mailer], %options )"
Inherited, see "The message" in Mail::Message
.ie n .IP $obj\->\fBsize\fR() 4
.el .IP \f(CW$obj\fR\->\fBsize\fR() 4
.IX Item "$obj->size()"
Inherited, see "The message" in Mail::Message
.ie n .IP $obj\->\fBtoplevel\fR() 4
.el .IP \f(CW$obj\fR\->\fBtoplevel\fR() 4
.IX Item "$obj->toplevel()"
Inherited, see "The message" in Mail::Message
.ie n .IP "$obj\->\fBwrite\fR( [$fh] )" 4
.el .IP "\f(CW$obj\fR\->\fBwrite\fR( [$fh] )" 4
.IX Item "$obj->write( [$fh] )"
Inherited, see "The message" in Mail::Message
.SS "The header"
.IX Subsection "The header"
Extends "The header" in Mail::Message.
.ie n .IP $obj\->\fBbcc\fR() 4
.el .IP \f(CW$obj\fR\->\fBbcc\fR() 4
.IX Item "$obj->bcc()"
Inherited, see "The header" in Mail::Message
.ie n .IP $obj\->\fBcc\fR() 4
.el .IP \f(CW$obj\fR\->\fBcc\fR() 4
.IX Item "$obj->cc()"
Inherited, see "The header" in Mail::Message
.ie n .IP $obj\->\fBdate\fR() 4
.el .IP \f(CW$obj\fR\->\fBdate\fR() 4
.IX Item "$obj->date()"
Inherited, see "The header" in Mail::Message
.ie n .IP $obj\->\fBdestinations\fR() 4
.el .IP \f(CW$obj\fR\->\fBdestinations\fR() 4
.IX Item "$obj->destinations()"
Inherited, see "The header" in Mail::Message
.ie n .IP $obj\->\fBfrom\fR() 4
.el .IP \f(CW$obj\fR\->\fBfrom\fR() 4
.IX Item "$obj->from()"
Inherited, see "The header" in Mail::Message
.ie n .IP $obj\->\fBget\fR($fieldname) 4
.el .IP \f(CW$obj\fR\->\fBget\fR($fieldname) 4
.IX Item "$obj->get($fieldname)"
Inherited, see "The header" in Mail::Message
.ie n .IP $obj\->\fBguessTimestamp\fR() 4
.el .IP \f(CW$obj\fR\->\fBguessTimestamp\fR() 4
.IX Item "$obj->guessTimestamp()"
Inherited, see "The header" in Mail::Message
.ie n .IP "$obj\->\fBhead\fR( [$head] )" 4
.el .IP "\f(CW$obj\fR\->\fBhead\fR( [$head] )" 4
.IX Item "$obj->head( [$head] )"
Inherited, see "The header" in Mail::Message
.ie n .IP $obj\->\fBnrLines\fR() 4
.el .IP \f(CW$obj\fR\->\fBnrLines\fR() 4
.IX Item "$obj->nrLines()"
Inherited, see "The header" in Mail::Message
.ie n .IP $obj\->\fBsender\fR() 4
.el .IP \f(CW$obj\fR\->\fBsender\fR() 4
.IX Item "$obj->sender()"
Inherited, see "The header" in Mail::Message
.ie n .IP $obj\->\fBstudy\fR($fieldname) 4
.el .IP \f(CW$obj\fR\->\fBstudy\fR($fieldname) 4
.IX Item "$obj->study($fieldname)"
Inherited, see "The header" in Mail::Message
.ie n .IP $obj\->\fBsubject\fR() 4
.el .IP \f(CW$obj\fR\->\fBsubject\fR() 4
.IX Item "$obj->subject()"
Inherited, see "The header" in Mail::Message
.ie n .IP $obj\->\fBtimestamp\fR() 4
.el .IP \f(CW$obj\fR\->\fBtimestamp\fR() 4
.IX Item "$obj->timestamp()"
Inherited, see "The header" in Mail::Message
.ie n .IP $obj\->\fBto\fR() 4
.el .IP \f(CW$obj\fR\->\fBto\fR() 4
.IX Item "$obj->to()"
Inherited, see "The header" in Mail::Message
.SS "The body"
.IX Subsection "The body"
Extends "The body" in Mail::Message.
.ie n .IP "$obj\->\fBbody\fR( [$body] )" 4
.el .IP "\f(CW$obj\fR\->\fBbody\fR( [$body] )" 4
.IX Item "$obj->body( [$body] )"
Inherited, see "The body" in Mail::Message
.ie n .IP $obj\->\fBcontentType\fR() 4
.el .IP \f(CW$obj\fR\->\fBcontentType\fR() 4
.IX Item "$obj->contentType()"
Inherited, see "The body" in Mail::Message
.ie n .IP $obj\->\fBdecoded\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBdecoded\fR(%options) 4
.IX Item "$obj->decoded(%options)"
Inherited, see "The body" in Mail::Message
.ie n .IP $obj\->\fBencode\fR(%options) 4
.el .IP \f(CW$obj\fR\->\fBencode\fR(%options) 4
.IX Item "$obj->encode(%options)"
Inherited, see "The body" in Mail::Message
.ie n .IP $obj\->\fBisMultipart\fR() 4
.el .IP \f(CW$obj\fR\->\fBisMultipart\fR() 4
.IX Item "$obj->isMultipart()"
Inherited, see "The body" in Mail::Message
.ie n .IP $obj\->\fBisNested\fR() 4
.el .IP \f(CW$obj\fR\->\fBisNested\fR() 4
.IX Item "$obj->isNested()"
Inherited, see "The body" in Mail::Message
.ie n .IP "$obj\->\fBparts\fR( [<'ALL'|'ACTIVE'|'DELETED'|'RECURSE'|$filter>] )" 4
.el .IP "\f(CW$obj\fR\->\fBparts\fR( [<'ALL'|'ACTIVE'|'DELETED'|'RECURSE'|$filter>] )" 4
.IX Item "$obj->parts( [<'ALL'|'ACTIVE'|'DELETED'|'RECURSE'|$filter>] )"
Inherited, see "The body" in Mail::Message
.SS Flags
.IX Subsection "Flags"
Extends "Flags" in Mail::Message.
.ie n .IP $obj\->\fBdelete\fR() 4
.el .IP \f(CW$obj\fR\->\fBdelete\fR() 4
.IX Item "$obj->delete()"
Inherited, see "Flags" in Mail::Message
.ie n .IP "$obj\->\fBdeleted\fR( [BOOLEAN] )" 4
.el .IP "\f(CW$obj\fR\->\fBdeleted\fR( [BOOLEAN] )" 4
.IX Item "$obj->deleted( [BOOLEAN] )"
Inherited, see "Flags" in Mail::Message
.ie n .IP $obj\->\fBisDeleted\fR() 4
.el .IP \f(CW$obj\fR\->\fBisDeleted\fR() 4
.IX Item "$obj->isDeleted()"
Inherited, see "Flags" in Mail::Message
.ie n .IP $obj\->\fBisModified\fR() 4
.el .IP \f(CW$obj\fR\->\fBisModified\fR() 4
.IX Item "$obj->isModified()"
Inherited, see "Flags" in Mail::Message
.ie n .IP $obj\->\fBlabel\fR($label|PAIRS) 4
.el .IP \f(CW$obj\fR\->\fBlabel\fR($label|PAIRS) 4
.IX Item "$obj->label($label|PAIRS)"
Inherited, see "Flags" in Mail::Message
.ie n .IP $obj\->\fBlabels\fR() 4
.el .IP \f(CW$obj\fR\->\fBlabels\fR() 4
.IX Item "$obj->labels()"
Inherited, see "Flags" in Mail::Message
.ie n .IP $obj\->\fBlabelsToStatus\fR() 4
.el .IP \f(CW$obj\fR\->\fBlabelsToStatus\fR() 4
.IX Item "$obj->labelsToStatus()"
Inherited, see "Flags" in Mail::Message
.ie n .IP "$obj\->\fBmodified\fR( [BOOLEAN] )" 4
.el .IP "\f(CW$obj\fR\->\fBmodified\fR( [BOOLEAN] )" 4
.IX Item "$obj->modified( [BOOLEAN] )"
Inherited, see "Flags" in Mail::Message
.ie n .IP $obj\->\fBstatusToLabels\fR() 4
.el .IP \f(CW$obj\fR\->\fBstatusToLabels\fR() 4
.IX Item "$obj->statusToLabels()"
Inherited, see "Flags" in Mail::Message
.SS "The whole message as text"
.IX Subsection "The whole message as text"
Extends "The whole message as text" in Mail::Message.
.ie n .IP $obj\->\fBfile\fR() 4
.el .IP \f(CW$obj\fR\->\fBfile\fR() 4
.IX Item "$obj->file()"
Inherited, see "The whole message as text" in Mail::Message::Construct::Text
.ie n .IP $obj\->\fBlines\fR() 4
.el .IP \f(CW$obj\fR\->\fBlines\fR() 4
.IX Item "$obj->lines()"
Inherited, see "The whole message as text" in Mail::Message::Construct::Text
.ie n .IP "$obj\->\fBprintStructure\fR( [$fh|undef],[$indent] )" 4
.el .IP "\f(CW$obj\fR\->\fBprintStructure\fR( [$fh|undef],[$indent] )" 4
.IX Item "$obj->printStructure( [$fh|undef],[$indent] )"
Inherited, see "The whole message as text" in Mail::Message::Construct::Text
.ie n .IP $obj\->\fBstring\fR() 4
.el .IP \f(CW$obj\fR\->\fBstring\fR() 4
.IX Item "$obj->string()"
Inherited, see "The whole message as text" in Mail::Message::Construct::Text
.SS Internals
.IX Subsection "Internals"
Extends "Internals" in Mail::Message.
.ie n .IP $obj\->\fBclonedFrom\fR() 4
.el .IP \f(CW$obj\fR\->\fBclonedFrom\fR() 4
.IX Item "$obj->clonedFrom()"
Inherited, see "Internals" in Mail::Message
.ie n .IP "Mail::Message::Part\->\fBcoerce\fR( <$body|$message>, $multipart, @headers )" 4
.el .IP "Mail::Message::Part\->\fBcoerce\fR( <$body|$message>, \f(CW$multipart\fR, \f(CW@headers\fR )" 4
.IX Item "Mail::Message::Part->coerce( <$body|$message>, $multipart, @headers )"
Transforms a \f(CW$body\fR or \f(CW$message\fR to a real message part.  The \f(CW$multipart\fR
refers to the parental body.
.Sp
When ta \f(CW$body\fR is specified, extra \f(CW@headers\fR can be supplied as well.
Bodies are coerced into message parts by calling \fBbuildFromBody()\fR.
If you specify a \f(CW$message\fR residing in a folder, this message will
automatically be cloned.
.ie n .IP $obj\->\fBisDelayed\fR() 4
.el .IP \f(CW$obj\fR\->\fBisDelayed\fR() 4
.IX Item "$obj->isDelayed()"
Inherited, see "Internals" in Mail::Message
.ie n .IP "$obj\->\fBreadBody\fR( $parser, $head, [$bodytype] )" 4
.el .IP "\f(CW$obj\fR\->\fBreadBody\fR( \f(CW$parser\fR, \f(CW$head\fR, [$bodytype] )" 4
.IX Item "$obj->readBody( $parser, $head, [$bodytype] )"
Inherited, see "Internals" in Mail::Message
.ie n .IP "$obj\->\fBreadFromParser\fR( $parser, [$bodytype] )" 4
.el .IP "\f(CW$obj\fR\->\fBreadFromParser\fR( \f(CW$parser\fR, [$bodytype] )" 4
.IX Item "$obj->readFromParser( $parser, [$bodytype] )"
Inherited, see "Internals" in Mail::Message
.ie n .IP "$obj\->\fBreadHead\fR( $parser, [$class] )" 4
.el .IP "\f(CW$obj\fR\->\fBreadHead\fR( \f(CW$parser\fR, [$class] )" 4
.IX Item "$obj->readHead( $parser, [$class] )"
Inherited, see "Internals" in Mail::Message
.ie n .IP "$obj\->\fBrecursiveRebuildPart\fR($part, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBrecursiveRebuildPart\fR($part, \f(CW%options\fR)" 4
.IX Item "$obj->recursiveRebuildPart($part, %options)"
Inherited, see "Internals" in Mail::Message::Construct::Rebuild
.ie n .IP $obj\->\fBstoreBody\fR($body) 4
.el .IP \f(CW$obj\fR\->\fBstoreBody\fR($body) 4
.IX Item "$obj->storeBody($body)"
Inherited, see "Internals" in Mail::Message
.ie n .IP "$obj\->\fBtakeMessageId\fR( [STRING] )" 4
.el .IP "\f(CW$obj\fR\->\fBtakeMessageId\fR( [STRING] )" 4
.IX Item "$obj->takeMessageId( [STRING] )"
Inherited, see "Internals" in Mail::Message
.SS "Error handling"
.IX Subsection "Error handling"
Extends "Error handling" in Mail::Message.
.ie n .IP $obj\->\fBAUTOLOAD\fR() 4
.el .IP \f(CW$obj\fR\->\fBAUTOLOAD\fR() 4
.IX Item "$obj->AUTOLOAD()"
Inherited, see "METHODS" in Mail::Message::Construct
.ie n .IP $obj\->\fBaddReport\fR($object) 4
.el .IP \f(CW$obj\fR\->\fBaddReport\fR($object) 4
.IX Item "$obj->addReport($object)"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "$obj->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD 0
.ie n .IP "Mail::Message::Part\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "Mail::Message::Part\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "Mail::Message::Part->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBerrors\fR() 4
.el .IP \f(CW$obj\fR\->\fBerrors\fR() 4
.IX Item "$obj->errors()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR( [$level, [$strings]] )" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "$obj->log( [$level, [$strings]] )"
.PD 0
.IP "Mail::Message::Part\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "Mail::Message::Part->log( [$level, [$strings]] )"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBlogPriority\fR($level) 4
.el .IP \f(CW$obj\fR\->\fBlogPriority\fR($level) 4
.IX Item "$obj->logPriority($level)"
.PD 0
.IP Mail::Message::Part\->\fBlogPriority\fR($level) 4
.IX Item "Mail::Message::Part->logPriority($level)"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBlogSettings\fR() 4
.el .IP \f(CW$obj\fR\->\fBlogSettings\fR() 4
.IX Item "$obj->logSettings()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBnotImplemented\fR() 4
.el .IP \f(CW$obj\fR\->\fBnotImplemented\fR() 4
.IX Item "$obj->notImplemented()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR( [$level] )" 4
.IX Item "$obj->report( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR( [$level] )" 4
.IX Item "$obj->reportAll( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBshortSize\fR( [$value] )" 4
.el .IP "\f(CW$obj\fR\->\fBshortSize\fR( [$value] )" 4
.IX Item "$obj->shortSize( [$value] )"
.PD 0
.IP "Mail::Message::Part\->\fBshortSize\fR( [$value] )" 4
.IX Item "Mail::Message::Part->shortSize( [$value] )"
.PD
Inherited, see "Error handling" in Mail::Message
.ie n .IP $obj\->\fBshortString\fR() 4
.el .IP \f(CW$obj\fR\->\fBshortString\fR() 4
.IX Item "$obj->shortString()"
Inherited, see "Error handling" in Mail::Message
.ie n .IP "$obj\->\fBtrace\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR( [$level] )" 4
.IX Item "$obj->trace( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBwarnings\fR() 4
.el .IP \f(CW$obj\fR\->\fBwarnings\fR() 4
.IX Item "$obj->warnings()"
Inherited, see "Error handling" in Mail::Reporter
.SS Cleanup
.IX Subsection "Cleanup"
Extends "Cleanup" in Mail::Message.
.ie n .IP $obj\->\fBDESTROY\fR() 4
.el .IP \f(CW$obj\fR\->\fBDESTROY\fR() 4
.IX Item "$obj->DESTROY()"
Inherited, see "Cleanup" in Mail::Reporter
.ie n .IP $obj\->\fBdestruct\fR() 4
.el .IP \f(CW$obj\fR\->\fBdestruct\fR() 4
.IX Item "$obj->destruct()"
Message parts can not be destructed per part: only whole messages can
be forcefully freed from memory.  Of course, you can \fBdelete()\fR separate
parts, which only sets a flag not to write a part again.  Furthermore,
you may cosider \fBrebuild()\fR to get rit of deleted parts.
.SH DETAILS
.IX Header "DETAILS"
Extends "DETAILS" in Mail::Message.
.SH DIAGNOSTICS
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Cannot include forward source as $include." 4
.el .IP "Error: Cannot include forward source as \f(CW$include\fR." 4
.IX Item "Error: Cannot include forward source as $include."
Unknown alternative for the forward(include).  Valid choices are
\&\f(CW\*(C`NO\*(C'\fR, \f(CW\*(C`INLINE\*(C'\fR, \f(CW\*(C`ATTACH\*(C'\fR, and \f(CW\*(C`ENCAPSULATE\*(C'\fR.
.ie n .IP "Error: Cannot include reply source as $include." 4
.el .IP "Error: Cannot include reply source as \f(CW$include\fR." 4
.IX Item "Error: Cannot include reply source as $include."
Unknown alternative for the \f(CW\*(C`include\*(C'\fR option of \fBreply()\fR.  Valid
choices are \f(CW\*(C`NO\*(C'\fR, \f(CW\*(C`INLINE\*(C'\fR, and \f(CW\*(C`ATTACH\*(C'\fR.
.IP "Error: Method bounce requires To, Cc, or Bcc" 4
.IX Item "Error: Method bounce requires To, Cc, or Bcc"
The message \fBbounce()\fR method forwards a received message off to someone
else without modification; you must specified it's new destination.
If you have the urge not to specify any destination, you probably
are looking for \fBreply()\fR. When you wish to modify the content, use
\&\fBforward()\fR.
.IP "Error: Method forwardAttach requires a preamble" 4
.IX Item "Error: Method forwardAttach requires a preamble"
.PD 0
.IP "Error: Method forwardEncapsulate requires a preamble" 4
.IX Item "Error: Method forwardEncapsulate requires a preamble"
.IP "Error: No address to create forwarded to." 4
.IX Item "Error: No address to create forwarded to."
.PD
If a forward message is created, a destination address must be specified.
.IP "Error: No default mailer found to send message." 4
.IX Item "Error: No default mailer found to send message."
The message \fBsend()\fR mechanism had not enough information to automatically
find a mail transfer agent to sent this message.  Specify a mailer
explicitly using the \f(CW\*(C`via\*(C'\fR options.
.ie n .IP "Error: No rebuild rule $name defined." 4
.el .IP "Error: No rebuild rule \f(CW$name\fR defined." 4
.IX Item "Error: No rebuild rule $name defined."
.PD 0
.IP "Error: Only \fBbuild()\fR Mail::Message's; they are not in a folder yet" 4
.IX Item "Error: Only build() Mail::Message's; they are not in a folder yet"
.PD
You may wish to construct a message to be stored in a some kind
of folder, but you need to do that in two steps.  First, create a
normal Mail::Message, and then add it to the folder.  During this
\&\fBMail::Box::addMessage()\fR process, the message will get \fBcoerce()\fR\-d
into the right message type, adding storage information and the like.
.ie n .IP "Error: Package $package does not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR does not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package does not implement $method."
Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.
.IP "Error: You cannot destruct message parts, only whole messages" 4
.IX Item "Error: You cannot destruct message parts, only whole messages"
Message parts can not be destructed per part: only whole messages can
be forcefully freed from memory. Consider \fBdelete()\fR or \fBrebuild()\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Message distribution version 3.015,
built on December 11, 2023. Website: \fIhttp://perl.overmeer.net/CPAN/\fR
.SH LICENSE
.IX Header "LICENSE"
Copyrights 2001\-2023 by [Mark Overmeer <markov@cpan.org>]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://dev.perl.org/licenses/\fR
