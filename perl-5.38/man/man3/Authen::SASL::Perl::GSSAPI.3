.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Authen::SASL::Perl::GSSAPI 3"
.TH Authen::SASL::Perl::GSSAPI 3 2023-08-10 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Authen::SASL::Perl::GSSAPI \- GSSAPI (Kerberosv5) Authentication class
.SH VERSION
.IX Header "VERSION"
version 2.1700
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&  use Authen::SASL qw(Perl);
\&
\&  $sasl = Authen::SASL\->new( mechanism => \*(AqGSSAPI\*(Aq );
\&
\&  $sasl = Authen::SASL\->new( mechanism => \*(AqGSSAPI\*(Aq,
\&                             callback => { pass => $mycred });
\&
\&  $sasl\->client_start( $service, $host );
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This method implements the client part of the GSSAPI SASL algorithm,
as described in RFC 2222 section 7.2.1 resp. draft\-ietf\-sasl\-gssapi\-XX.txt.
.PP
With a valid Kerberos 5 credentials cache (aka TGT) it allows
to connect to \fIservice\fR@\fIhost\fR given as the first two parameters
to Authen::SASL's \fBclient_start()\fR method.  Alternatively, a GSSAPI::Cred
object can be passed in via the Authen::SASL callback hash using
the `pass' key.
.PP
Please note that this module does not currently implement a SASL
security layer following authentication. Unless the connection is
protected by other means, such as TLS, it will be vulnerable to
man-in-the-middle attacks. If security layers are required, then the
Authen::SASL::XS GSSAPI module should be used instead.
.SS CALLBACK
.IX Subsection "CALLBACK"
The callbacks used are:
.IP authname 4
.IX Item "authname"
The authorization identity to be used in SASL exchange
.IP gssmech 4
.IX Item "gssmech"
The GSS mechanism to be used in the connection
.IP pass 4
.IX Item "pass"
The GSS credentials to be used in the connection (optional)
.SH EXAMPLE
.IX Header "EXAMPLE"
.Vb 1
\& #! /usr/bin/perl \-w
\&
\& use strict;
\&use warnings;
\&
\& use Net::LDAP 0.33;
\& use Authen::SASL 2.10;
\&
\& # \-\-\-\-\-\-\-\- Adjust to your environment \-\-\-\-\-\-\-\-
\& my $adhost      = \*(Aqtheserver.bla.net\*(Aq;
\& my $ldap_base   = \*(Aqdc=bla,dc=net\*(Aq;
\& my $ldap_filter = \*(Aq(&(sAMAccountName=BLAAGROL))\*(Aq;
\&
\& my $sasl = Authen::SASL\->new(mechanism => \*(AqGSSAPI\*(Aq);
\& my $ldap;
\&
\& eval {
\&     $ldap = Net::LDAP\->new($adhost,
\&                            onerror => \*(Aqdie\*(Aq)
\&       or  die "Cannot connect to LDAP host \*(Aq$adhost\*(Aq: \*(Aq$@\*(Aq";
\&     $ldap\->bind(sasl => $sasl);
\& };
\&
\& if ($@) {
\&     chomp $@;
\&     die   "\enBind error         : $@",
\&           "\enDetailed SASL error: ", $sasl\->error,
\&           "\enTerminated";
\& }
\&
\& print "\enLDAP bind() succeeded, working in authenticated state";
\&
\& my $mesg = $ldap\->search(base   => $ldap_base,
\&                          filter => $ldap_filter);
\&
\& # \-\-\-\-\-\-\-\- evaluate $mesg
.Ve
.SS PROPERTIES
.IX Subsection "PROPERTIES"
The properties used are:
.IP maxbuf 4
.IX Item "maxbuf"
The maximum buffer size for receiving cipher text
.IP minssf 4
.IX Item "minssf"
The minimum SSF value that should be provided by the SASL security layer.
The default is 0
.IP maxssf 4
.IX Item "maxssf"
The maximum SSF value that should be provided by the SASL security layer.
The default is 2**31
.IP externalssf 4
.IX Item "externalssf"
The SSF value provided by an underlying external security layer.
The default is 0
.IP ssf 4
.IX Item "ssf"
The actual SSF value provided by the SASL security layer after the SASL
authentication phase has been completed. This value is read-only and set
by the implementation after the SASL authentication phase has been completed.
.IP maxout 4
.IX Item "maxout"
The maximum plaintext buffer size for sending data to the peer.
This value is set by the implementation after the SASL authentication
phase has been completed and a SASL security layer is in effect.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Authen::SASL,
Authen::SASL::Perl
.SH AUTHORS
.IX Header "AUTHORS"
Written by Simon Wilkinson, with patches and extensions by Achim Grolms
and Peter Marschall.
.PP
Please report any bugs, or post any suggestions, to the perl-ldap mailing list
<perl\-ldap@perl.org>
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright (c) 2006 Simon Wilkinson, Achim Grolms and Peter Marschall.
All rights reserved. This program is free software; you can redistribute 
it and/or modify it under the same terms as Perl itself.
