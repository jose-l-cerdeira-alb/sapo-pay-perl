.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::SSH::Perl::Cipher 3"
.TH Net::SSH::Perl::Cipher 3 2023-08-07 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Net::SSH::Perl::Cipher \- Base cipher class, plus utility methods
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    use Net::SSH::Perl::Cipher;
\&
\&    # Get list of supported cipher IDs.
\&    my $supported = Net::SSH::Perl::Cipher::supported();
\&
\&    # Translate a cipher name into an ID.
\&    my $id = Net::SSH::Perl::Cipher::id($name);
\&
\&    # Translate a cipher ID into a name.
\&    my $name = Net::SSH::Perl::Cipher::name($id);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
\&\fINet::SSH::Perl::Cipher\fR provides a base class for each of
the encryption cipher classes. In addition, it defines
a set of utility methods that can be called either as
functions or object methods.
.SH "UTILITY METHODS"
.IX Header "UTILITY METHODS"
.ie n .SS "supported( [ protocol => $protocol, ] [ $ciph_id [, $server_supports ] ])"
.el .SS "supported( [ protocol => \f(CW$protocol\fP, ] [ \f(CW$ciph_id\fP [, \f(CW$server_supports\fP ] ])"
.IX Subsection "supported( [ protocol => $protocol, ] [ $ciph_id [, $server_supports ] ])"
Without arguments returns a reference to an array of
ciphers supported by \fINet::SSH::Perl\fR. These are ciphers
that have working Net::SSH::Perl::Cipher:: implementations,
essentially.  Pass 'protocol => 2' to get a list of
SSH2 ciphers.
.PP
With one argument \fR\f(CI$ciph_id\fR\fI\fR, returns a true value if
that cipher is supported by \fINet::SSH::Perl\fR, and false
otherwise.
.PP
With two arguments, \fR\f(CI$ciph_id\fR\fI\fR and \fI\fR\f(CI$server_supports\fR\fI\fR,
returns true if the cipher represented by \fI\fR\f(CI$ciph_id\fR\fI\fR
is supported both by \fINet::SSH::Perl\fR and by the sshd
server. The list of ciphers supported by the server
should be in \fI\fR\f(CI$server_supports\fR\fI\fR, a bit mask sent
from the server during the session identification
phase.
.PP
Can be called either as a non-exported function, i.e.
.PP
.Vb 1
\&    my $i_support = Net::SSH::Perl::Cipher::supported();
.Ve
.PP
or as an object method of a \fINet::SSH::Perl::Cipher\fR
object, or an object of a subclass:
.PP
.Vb 3
\&    if ($ciph\->supported($server_supports)) {
\&        print "Server supports cipher $ciph";
\&    }
.Ve
.ie n .SS "id( [ $cipher_name ] )"
.el .SS "id( [ \f(CW$cipher_name\fP ] )"
.IX Subsection "id( [ $cipher_name ] )"
Translates a cipher name into a cipher ID.
.PP
If given \fR\f(CI$cipher_name\fR\fI\fR translates that name into
the corresponding ID. If called as an object method,
translates the object's cipher class name into the
ID.
.ie n .SS "name( [ $cipher_id ] )"
.el .SS "name( [ \f(CW$cipher_id\fP ] )"
.IX Subsection "name( [ $cipher_id ] )"
Translates a cipher ID into a cipher name.
.PP
If given \fR\f(CI$cipher_id\fR\fI\fR translates that ID into the
corresponding name. If called as an object method,
returns the (stripped) object's cipher class name;
for example, if the object were of type
\&\fINet::SSH::Perl::Cipher::IDEA\fR, \fIname\fR would return
\&\fIIDEA\fR.
.SH "CIPHER USAGE"
.IX Header "CIPHER USAGE"
.ie n .SS "Net::SSH::Perl::Cipher\->new($cipher_name, $key)"
.el .SS "Net::SSH::Perl::Cipher\->new($cipher_name, \f(CW$key\fP)"
.IX Subsection "Net::SSH::Perl::Cipher->new($cipher_name, $key)"
Instantiates a new cipher object of the type
\&\fR\f(CI$cipher_name\fR\fI\fR with the key \fI\fR\f(CI$key\fR\fI\fR; returns
the cipher object, which will be blessed into the
actual cipher subclass.
.PP
If \fR\f(CI$cipher_name\fR\fI\fR is the special type \fI'None'\fR
(no encryption cipher), the object will actually
be blessed directly into the base class, and
text to be encrypted and decrypted will be passed
through without change.
.ie n .SS $cipher\->encrypt($text)
.el .SS \f(CW$cipher\fP\->encrypt($text)
.IX Subsection "$cipher->encrypt($text)"
Encrypts \fR\f(CI$text\fR\fI\fR and returns the encrypted string.
.ie n .SS $cipher\->decrypt($text)
.el .SS \f(CW$cipher\fP\->decrypt($text)
.IX Subsection "$cipher->decrypt($text)"
Decrypts \fR\f(CI$text\fR\fI\fR and returns the decrypted string.
.SH "CIPHER DEVELOPMENT"
.IX Header "CIPHER DEVELOPMENT"
Classes implementing an encryption cipher must
implement the following three methods:
.IP \(bu 4
\&\f(CW$class\fR\->new($key)
.Sp
Given a key \fR\f(CI$key\fR\fI\fR, should construct a new cipher
object and bless it into \fI\fR\f(CI$class\fR\fI\fR, presumably.
.IP \(bu 4
\&\f(CW$cipher\fR\->encrypt($text)
.Sp
Given plain text \fR\f(CI$text\fR\fI\fR, should encrypt the text
and return the encrypted string.
.IP \(bu 4
\&\f(CW$cipher\fR\->decrypt($text)
.Sp
Given encrypted text \fR\f(CI$text\fR\fI\fR, should decrypt the
text and return the decrypted string.
.SH "AUTHOR & COPYRIGHTS"
.IX Header "AUTHOR & COPYRIGHTS"
Please see the Net::SSH::Perl manpage for author, copyright,
and license information.
