.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "XML::Edifact 3"
.TH XML::Edifact 3 2003-07-31 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
XML::Edifact \- Perl module to handle XML::Edifact messages.
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\&    use XML::Edifact;
\&    use IO::File;
\&
\&    # open the database
\&    XML::Edifact::open_dbm();
\&
\&    # read edi message
\&    XML::Edifact::read_edi_message("some.edi");
\&
\&    # print xml to standout
\&    print &XML::Edifact::make_xml_message();
\&
\&    # print xml to somefile
\&    $xml=new IO::File(">some.xml");
\&    XML::Edifact::make_xml_message($xml);
\&    $xml\->close();
\&
\&    # close database
\&    XML::Edifact::close_dbm();
\&0;
.Ve
.PP
\&\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.PP
.Vb 2
\&    use XML::Edifact;
\&    use IO::File;
\&
\&    # open the database
\&    XML::Edifact::open_dbm();
\&
\&    # read xml message
\&    XML::Edifact::read_xml_message($ARGV[0]);
\&
\&    # print edi to standout
\&    XML::Edifact::make_edi_message();
\&
\&    # print edi to somefile
\&    $edi=new IO::File(">some.edi");
\&    XML::Edifact::make_edi_message($edi);
\&    $edi\->close();
\&
\&    # close database
\&    XML::Edifact::close_dbm();
\&0;
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
XML-Edifact started as Onyx-EDI which was a gawk script.
XML::Edifact\-0.4x still shows its bad ancestry (a2p)
in some places.
.PP
The current module is able to generate some SDBM files for
the directory pointed to by open_dbm, by parsing the original
United Nations EDIFACT documents during Bootstrap.PL. Those
files will be stored during make install.
.PP
The first typical usage will read an EDIFACT message into a
buffer global to the package, and will print this message
as XML on STDOUT. The second usage will do the opposite.
.PP
Those two files will be installed as edi2xml and xml2edi
in your local bin directory. Use those two scripts and dont
touch the internal affairs of the module. An object-oriented
module is planned for the next release!
.PP
I'm calling this 0.4x track an interim, because I'm
just saving a stable state (I hope) before I start to muddle
all things around while going on an object(ive) raid.
.PP
If you have other EDIFACT files, I would like to include
them in the next version. I'm also open to any comments;
as they say, "everything is still in flux" !
.SH AUTHOR
.IX Header "AUTHOR"
Michael Koehne, Kraehe@Copyleft.de
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBperl\fR\|(1), \fBXML::Parser\fR\|(3), UN/EDIFACT Draft.
