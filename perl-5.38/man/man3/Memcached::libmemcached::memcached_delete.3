.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Memcached::libmemcached::memcached_delete 3"
.TH Memcached::libmemcached::memcached_delete 3 2015-05-07 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
memcached_delete \- Delete a key
.SH LIBRARY
.IX Header "LIBRARY"
C Client Library for memcached (libmemcached, \-lmemcached)
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&  #include <memcached.h>
\&
\&  memcached_return_t
\&    memcached_delete (memcached_st *ptr,
\&                      const char *key, size_t key_length,
\&                      time_t expiration);
\&
\&  memcached_return_t
\&  memcached_delete_by_key (memcached_st *ptr,
\&                           const char *master_key, size_t master_key_length,
\&                           const char *key, size_t key_length,
\&                           time_t expiration);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
\&\fBmemcached_delete()\fR is used to delete a particular key. 
\&\fBmemcached_delete_by_key()\fR works the same, but it takes a master key to
find the given value.
.PP
Expiration works by placing the item into a delete queue, which means that
it won't possible to retrieve it by the "get" command, but "add" and 
"replace" command with this key will also fail (the "set" command will 
succeed, however). After the time passes, the item is finally deleted from server memory.
.PP
Please note the the Danga memcached server removed support for expiration in
the 1.4 version.
.SH RETURN
.IX Header "RETURN"
A value of type \f(CW\*(C`memcached_return_t\*(C'\fR is returned
On success that value will be \f(CW\*(C`MEMCACHED_SUCCESS\*(C'\fR.
Use \fBmemcached_strerror()\fR to translate this value to a printable string.
.PP
If you are using the non-blocking mode of the library, success only
means that the message was queued for delivery.
.SH HOME
.IX Header "HOME"
To find out more information please check:
<https://launchpad.net/libmemcached>
.SH AUTHOR
.IX Header "AUTHOR"
Brian Aker, <brian@tangent.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBmemcached\fR\|(1) \fBlibmemcached\fR\|(3) \fBmemcached_strerror\fR\|(3)
