.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Box::Collection 3"
.TH Mail::Box::Collection 3 2023-07-18 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Mail::Box::Collection \- a collection of subfolders
.SH INHERITANCE
.IX Header "INHERITANCE"
.Vb 3
\& Mail::Box::Collection
\&   is a User::Identity::Collection
\&   is a User::Identity::Item
\&
\& Mail::Box::Collection
\&   is a Mail::Reporter
.Ve
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.SH DESCRIPTION
.IX Header "DESCRIPTION"
The Mail::Box::Collection object maintains a set Mail::Box::Identity
objects, each describing a the location of a single mailbox (folder).  The
collection is used by the Mail::Box::Manage::User object to administer
the folders of a single user, even if those folders are closed.
.PP
Extends "DESCRIPTION" in Mail::Reporter.
.PP
Extends "DESCRIPTION" in User::Identity::Collection.
.SH OVERLOADED
.IX Header "OVERLOADED"
Extends "OVERLOADED" in User::Identity::Collection.
.IP "overload: \fB@{}\fR" 4
.IX Item "overload: @{}"
Inherited, see "OVERLOADED" in User::Identity::Collection
.IP "overload: \fBstringification \fR" 4
.IX Item "overload: stringification "
Inherited, see "OVERLOADED" in User::Identity::Collection
.SH METHODS
.IX Header "METHODS"
Extends "METHODS" in Mail::Reporter.
.PP
Extends "METHODS" in User::Identity::Collection.
.SS Constructors
.IX Subsection "Constructors"
Extends "Constructors" in Mail::Reporter.
.PP
Extends "Constructors" in User::Identity::Collection.
.ie n .IP "Mail::Box::Collection\->\fBnew\fR( [$name], %options )" 4
.el .IP "Mail::Box::Collection\->\fBnew\fR( [$name], \f(CW%options\fR )" 4
.IX Item "Mail::Box::Collection->new( [$name], %options )"
.Vb 10
\& \-Option     \-\-Defined in                \-\-Default
\&  description  User::Identity::Item        undef
\&  folder_type                              <from parent>
\&  item_type    User::Identity::Collection  Mail::Box::Identity
\&  log          Mail::Reporter              \*(AqWARNINGS\*(Aq
\&  manager                                  <from parent>
\&  name         User::Identity::Item        \*(Aqfolders\*(Aq
\&  parent       User::Identity::Item        undef
\&  roles        User::Identity::Collection  undef
\&  trace        Mail::Reporter              \*(AqWARNINGS\*(Aq
.Ve
.RS 4
.IP "description => STRING" 2
.IX Item "description => STRING"
.PD 0
.IP "folder_type => CLASS" 2
.IX Item "folder_type => CLASS"
.IP "item_type => CLASS" 2
.IX Item "item_type => CLASS"
.IP "log => LEVEL" 2
.IX Item "log => LEVEL"
.IP "manager => OBJECT" 2
.IX Item "manager => OBJECT"
.PD
An Mail::Box::Manager OBJECT (could be a Mail::Box::Manage::User).
.IP "name => STRING" 2
.IX Item "name => STRING"
.PD 0
.IP "parent => OBJECT" 2
.IX Item "parent => OBJECT"
.IP "roles => ROLE|ARRAY" 2
.IX Item "roles => ROLE|ARRAY"
.IP "trace => LEVEL" 2
.IX Item "trace => LEVEL"
.RE
.RS 4
.RE
.PD
.SS "Error handling"
.IX Subsection "Error handling"
Extends "Error handling" in Mail::Reporter.
.ie n .IP $obj\->\fBAUTOLOAD\fR() 4
.el .IP \f(CW$obj\fR\->\fBAUTOLOAD\fR() 4
.IX Item "$obj->AUTOLOAD()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBaddReport\fR($object) 4
.el .IP \f(CW$obj\fR\->\fBaddReport\fR($object) 4
.IX Item "$obj->addReport($object)"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "$obj->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD 0
.ie n .IP "Mail::Box::Collection\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "Mail::Box::Collection\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "Mail::Box::Collection->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBerrors\fR() 4
.el .IP \f(CW$obj\fR\->\fBerrors\fR() 4
.IX Item "$obj->errors()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR( [$level, [$strings]] )" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "$obj->log( [$level, [$strings]] )"
.PD 0
.IP "Mail::Box::Collection\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "Mail::Box::Collection->log( [$level, [$strings]] )"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBlogPriority\fR($level) 4
.el .IP \f(CW$obj\fR\->\fBlogPriority\fR($level) 4
.IX Item "$obj->logPriority($level)"
.PD 0
.IP Mail::Box::Collection\->\fBlogPriority\fR($level) 4
.IX Item "Mail::Box::Collection->logPriority($level)"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBlogSettings\fR() 4
.el .IP \f(CW$obj\fR\->\fBlogSettings\fR() 4
.IX Item "$obj->logSettings()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBnotImplemented\fR() 4
.el .IP \f(CW$obj\fR\->\fBnotImplemented\fR() 4
.IX Item "$obj->notImplemented()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR( [$level] )" 4
.IX Item "$obj->report( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR( [$level] )" 4
.IX Item "$obj->reportAll( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR( [$level] )" 4
.IX Item "$obj->trace( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBwarnings\fR() 4
.el .IP \f(CW$obj\fR\->\fBwarnings\fR() 4
.IX Item "$obj->warnings()"
Inherited, see "Error handling" in Mail::Reporter
.SS Cleanup
.IX Subsection "Cleanup"
Extends "Cleanup" in Mail::Reporter.
.ie n .IP $obj\->\fBDESTROY\fR() 4
.el .IP \f(CW$obj\fR\->\fBDESTROY\fR() 4
.IX Item "$obj->DESTROY()"
Inherited, see "Cleanup" in Mail::Reporter
.SS Attributes
.IX Subsection "Attributes"
Extends "Attributes" in User::Identity::Collection.
.ie n .IP $obj\->\fBdescription\fR() 4
.el .IP \f(CW$obj\fR\->\fBdescription\fR() 4
.IX Item "$obj->description()"
Inherited, see "Attributes" in User::Identity::Item
.ie n .IP "$obj\->\fBfolderType\fR( [$folderclass] )" 4
.el .IP "\f(CW$obj\fR\->\fBfolderType\fR( [$folderclass] )" 4
.IX Item "$obj->folderType( [$folderclass] )"
Returns the type of folder (on this location).  When specified, then
\&\f(CW$folderclass\fR must be a Mail::Box extension.
.ie n .IP $obj\->\fBitemType\fR() 4
.el .IP \f(CW$obj\fR\->\fBitemType\fR() 4
.IX Item "$obj->itemType()"
Inherited, see "Attributes" in User::Identity::Collection
.ie n .IP $obj\->\fBmanager\fR() 4
.el .IP \f(CW$obj\fR\->\fBmanager\fR() 4
.IX Item "$obj->manager()"
The Mail::Box::Manager (usually a Mail::Box::Manage::User object),
which is handling the opening of folders.
.ie n .IP "$obj\->\fBname\fR( [$newname] )" 4
.el .IP "\f(CW$obj\fR\->\fBname\fR( [$newname] )" 4
.IX Item "$obj->name( [$newname] )"
Inherited, see "Attributes" in User::Identity::Item
.ie n .IP $obj\->\fBroles\fR() 4
.el .IP \f(CW$obj\fR\->\fBroles\fR() 4
.IX Item "$obj->roles()"
Inherited, see "Attributes" in User::Identity::Collection
.SS Collections
.IX Subsection "Collections"
Extends "Collections" in User::Identity::Collection.
.ie n .IP "$obj\->\fBadd\fR($collection, $role)" 4
.el .IP "\f(CW$obj\fR\->\fBadd\fR($collection, \f(CW$role\fR)" 4
.IX Item "$obj->add($collection, $role)"
Inherited, see "Collections" in User::Identity::Item
.ie n .IP "$obj\->\fBaddCollection\fR( $object | <[$type], %options> )" 4
.el .IP "\f(CW$obj\fR\->\fBaddCollection\fR( \f(CW$object\fR | <[$type], \f(CW%options\fR> )" 4
.IX Item "$obj->addCollection( $object | <[$type], %options> )"
Inherited, see "Collections" in User::Identity::Item
.ie n .IP $obj\->\fBcollection\fR($name) 4
.el .IP \f(CW$obj\fR\->\fBcollection\fR($name) 4
.IX Item "$obj->collection($name)"
Inherited, see "Collections" in User::Identity::Item
.ie n .IP "$obj\->\fBparent\fR( [$parent] )" 4
.el .IP "\f(CW$obj\fR\->\fBparent\fR( [$parent] )" 4
.IX Item "$obj->parent( [$parent] )"
Inherited, see "Collections" in User::Identity::Item
.ie n .IP $obj\->\fBremoveCollection\fR($object|$name) 4
.el .IP \f(CW$obj\fR\->\fBremoveCollection\fR($object|$name) 4
.IX Item "$obj->removeCollection($object|$name)"
Inherited, see "Collections" in User::Identity::Item
.ie n .IP $obj\->\fBtype\fR() 4
.el .IP \f(CW$obj\fR\->\fBtype\fR() 4
.IX Item "$obj->type()"
.PD 0
.IP Mail::Box::Collection\->\fBtype\fR() 4
.IX Item "Mail::Box::Collection->type()"
.PD
Inherited, see "Collections" in User::Identity::Item
.ie n .IP $obj\->\fBuser\fR() 4
.el .IP \f(CW$obj\fR\->\fBuser\fR() 4
.IX Item "$obj->user()"
Inherited, see "Collections" in User::Identity::Item
.SS "Maintaining roles"
.IX Subsection "Maintaining roles"
Extends "Maintaining roles" in User::Identity::Collection.
.ie n .IP "$obj\->\fBaddRole\fR($role| <[$name],%options> | ARRAY)" 4
.el .IP "\f(CW$obj\fR\->\fBaddRole\fR($role| <[$name],%options> | ARRAY)" 4
.IX Item "$obj->addRole($role| <[$name],%options> | ARRAY)"
Inherited, see "Maintaining roles" in User::Identity::Collection
.ie n .IP $obj\->\fBremoveRole\fR($role|$name) 4
.el .IP \f(CW$obj\fR\->\fBremoveRole\fR($role|$name) 4
.IX Item "$obj->removeRole($role|$name)"
Inherited, see "Maintaining roles" in User::Identity::Collection
.ie n .IP "$obj\->\fBrenameRole\fR( <$role|$oldname>, $newname )" 4
.el .IP "\f(CW$obj\fR\->\fBrenameRole\fR( <$role|$oldname>, \f(CW$newname\fR )" 4
.IX Item "$obj->renameRole( <$role|$oldname>, $newname )"
Inherited, see "Maintaining roles" in User::Identity::Collection
.ie n .IP $obj\->\fBsorted\fR() 4
.el .IP \f(CW$obj\fR\->\fBsorted\fR() 4
.IX Item "$obj->sorted()"
Inherited, see "Maintaining roles" in User::Identity::Collection
.SS Searching
.IX Subsection "Searching"
Extends "Searching" in User::Identity::Collection.
.ie n .IP $obj\->\fBfind\fR($name|CODE|undef) 4
.el .IP \f(CW$obj\fR\->\fBfind\fR($name|CODE|undef) 4
.IX Item "$obj->find($name|CODE|undef)"
Inherited, see "Searching" in User::Identity::Collection
.SH DIAGNOSTICS
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: $object is not a collection." 4
.el .IP "Error: \f(CW$object\fR is not a collection." 4
.IX Item "Error: $object is not a collection."
The first argument is an object, but not of a class which extends
User::Identity::Collection.
.ie n .IP "Error: Cannot create a $type to add this to my collection." 4
.el .IP "Error: Cannot create a \f(CW$type\fR to add this to my collection." 4
.IX Item "Error: Cannot create a $type to add this to my collection."
Some options are specified to create a \f(CW$type\fR object, which is native to
this collection.  However, for some reason this failed.
.ie n .IP "Error: Cannot load collection module for $type ($class)." 4
.el .IP "Error: Cannot load collection module for \f(CW$type\fR ($class)." 4
.IX Item "Error: Cannot load collection module for $type ($class)."
Either the specified \f(CW$type\fR does not exist, or that module named \f(CW$class\fR returns
compilation errors.  If the type as specified in the warning is not
the name of a package, you specified a nickname which was not defined.
Maybe you forgot the 'require' the package which defines the nickname.
.ie n .IP "Error: Cannot rename $name into $newname: already exists" 4
.el .IP "Error: Cannot rename \f(CW$name\fR into \f(CW$newname:\fR already exists" 4
.IX Item "Error: Cannot rename $name into $newname: already exists"
.PD 0
.ie n .IP "Error: Cannot rename $name into $newname: doesn't exist" 4
.el .IP "Error: Cannot rename \f(CW$name\fR into \f(CW$newname:\fR doesn't exist" 4
.IX Item "Error: Cannot rename $name into $newname: doesn't exist"
.ie n .IP "Error: Creation of a collection via $class failed." 4
.el .IP "Error: Creation of a collection via \f(CW$class\fR failed." 4
.IX Item "Error: Creation of a collection via $class failed."
.PD
The \f(CW$class\fR did compile, but it was not possible to create an object
of that class using the options you specified.
.IP "Error: Don't know what type of collection you want to add." 4
.IX Item "Error: Don't know what type of collection you want to add."
If you add a collection, it must either by a collection object or a
list of options which can be used to create a collection object.  In
the latter case, the type of collection must be specified.
.ie n .IP "Warning: No collection $name" 4
.el .IP "Warning: No collection \f(CW$name\fR" 4
.IX Item "Warning: No collection $name"
The collection with \f(CW$name\fR does not exist and can not be created.
.ie n .IP "Error: Package $package does not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR does not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package does not implement $method."
Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.
.ie n .IP "Error: Wrong type of role for $collection: requires a $expect but got a $type" 4
.el .IP "Error: Wrong type of role for \f(CW$collection:\fR requires a \f(CW$expect\fR but got a \f(CW$type\fR" 4
.IX Item "Error: Wrong type of role for $collection: requires a $expect but got a $type"
Each \f(CW$collection\fR groups sets of roles of one specific type ($expect).  You
cannot add objects of a different \f(CW$type\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 3.010,
built on July 18, 2023. Website: \fIhttp://perl.overmeer.net/CPAN/\fR
.SH LICENSE
.IX Header "LICENSE"
Copyrights 2001\-2023 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://dev.perl.org/licenses/\fR
