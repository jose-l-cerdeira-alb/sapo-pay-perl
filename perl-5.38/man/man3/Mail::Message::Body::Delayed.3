.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Message::Body::Delayed 3"
.TH Mail::Message::Body::Delayed 3 2023-07-18 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Mail::Message::Body::Delayed \- body of a Mail::Message but not read yet.
.SH INHERITANCE
.IX Header "INHERITANCE"
.Vb 1
\& Mail::Message::Body::Delayed realizes a Mail::Message::Body
\&
\& Mail::Message::Body::Delayed
\&   is a Mail::Reporter
.Ve
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\& See Mail::Message::Body
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Message bodies of this type will be replaced by another type the moment you
access the content.  In this documentation you will find the description of
how a message body gets delay loaded.
.PP
Extends "DESCRIPTION" in Mail::Reporter.
.SH OVERLOADED
.IX Header "OVERLOADED"
.IP "overload: \fB""""\fR" 4
.IX Item "overload: """""
(stringification) Returns the body as string \-\-which will trigger
completion\-\- unless called to produce a string for \f(CW\*(C`Carp\*(C'\fR.  The latter
to avoid deep recursions.
.Sp
example: stringification of delayed body
.Sp
.Vb 1
\& print $msg\->body;   # implicit by print
\&
\& my $body = $msg\->body;
\& my $x    = "$body"; # explicit by interpolation
.Ve
.IP "overload: \fB@{}\fR" 4
.IX Item "overload: @{}"
When a body object is used as being an array reference, the lines of
the body are returned.  This is the same as using the \f(CW\*(C`lines\*(C'\fR method.
.IP "overload: \fBbool\fR" 4
.IX Item "overload: bool"
Always returns a true value, which is needed to have overloaded
objects to be used as in \f(CWif($body)\fR.  Otherwise, \f(CW\*(C`if(defined $body)\*(C'\fR
would be needed to avoid a runtime error.
.SH METHODS
.IX Header "METHODS"
Extends "METHODS" in Mail::Reporter.
.SS Constructors
.IX Subsection "Constructors"
Extends "Constructors" in Mail::Reporter.
.IP Mail::Message::Body::Delayed\->\fBnew\fR(%options) 4
.IX Item "Mail::Message::Body::Delayed->new(%options)"
.Vb 4
\& \-Option \-\-Defined in     \-\-Default
\&  log      Mail::Reporter   \*(AqWARNINGS\*(Aq
\&  message                   <required>
\&  trace    Mail::Reporter   \*(AqWARNINGS\*(Aq
.Ve
.RS 4
.IP "log => LEVEL" 2
.IX Item "log => LEVEL"
.PD 0
.IP "message => MESSAGE" 2
.IX Item "message => MESSAGE"
.PD
The MESSAGE object which contains this delayed body.
.IP "trace => LEVEL" 2
.IX Item "trace => LEVEL"
.RE
.RS 4
.RE
.SS "The body"
.IX Subsection "The body"
.PD 0
.ie n .IP $obj\->\fBmessage\fR() 4
.el .IP \f(CW$obj\fR\->\fBmessage\fR() 4
.IX Item "$obj->message()"
.PD
.SS "About to the payload"
.IX Subsection "About to the payload"
.ie n .IP $obj\->\fBguessSize\fR() 4
.el .IP \f(CW$obj\fR\->\fBguessSize\fR() 4
.IX Item "$obj->guessSize()"
.PD 0
.ie n .IP $obj\->\fBisDelayed\fR() 4
.el .IP \f(CW$obj\fR\->\fBisDelayed\fR() 4
.IX Item "$obj->isDelayed()"
.ie n .IP $obj\->\fBisModified\fR() 4
.el .IP \f(CW$obj\fR\->\fBisModified\fR() 4
.IX Item "$obj->isModified()"
.ie n .IP $obj\->\fBisMultipart\fR() 4
.el .IP \f(CW$obj\fR\->\fBisMultipart\fR() 4
.IX Item "$obj->isMultipart()"
.ie n .IP $obj\->\fBmodified\fR() 4
.el .IP \f(CW$obj\fR\->\fBmodified\fR() 4
.IX Item "$obj->modified()"
.ie n .IP $obj\->\fBnrLines\fR() 4
.el .IP \f(CW$obj\fR\->\fBnrLines\fR() 4
.IX Item "$obj->nrLines()"
.PD
.SS Internals
.IX Subsection "Internals"
.ie n .IP "$obj\->\fBfileLocation\fR( [$begin, $end] )" 4
.el .IP "\f(CW$obj\fR\->\fBfileLocation\fR( [$begin, \f(CW$end\fR] )" 4
.IX Item "$obj->fileLocation( [$begin, $end] )"
.PD 0
.ie n .IP $obj\->\fBload\fR() 4
.el .IP \f(CW$obj\fR\->\fBload\fR() 4
.IX Item "$obj->load()"
.PD
Returns the loaded version of this body.
.ie n .IP $obj\->\fBmoveLocation\fR($distance) 4
.el .IP \f(CW$obj\fR\->\fBmoveLocation\fR($distance) 4
.IX Item "$obj->moveLocation($distance)"
.PD 0
.ie n .IP "$obj\->\fBread\fR($parser, $head, $bodytype)" 4
.el .IP "\f(CW$obj\fR\->\fBread\fR($parser, \f(CW$head\fR, \f(CW$bodytype\fR)" 4
.IX Item "$obj->read($parser, $head, $bodytype)"
.PD
.SS "Error handling"
.IX Subsection "Error handling"
Extends "Error handling" in Mail::Reporter.
.ie n .IP $obj\->\fBAUTOLOAD\fR() 4
.el .IP \f(CW$obj\fR\->\fBAUTOLOAD\fR() 4
.IX Item "$obj->AUTOLOAD()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBaddReport\fR($object) 4
.el .IP \f(CW$obj\fR\->\fBaddReport\fR($object) 4
.IX Item "$obj->addReport($object)"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "$obj->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD 0
.ie n .IP "Mail::Message::Body::Delayed\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "Mail::Message::Body::Delayed\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "Mail::Message::Body::Delayed->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBerrors\fR() 4
.el .IP \f(CW$obj\fR\->\fBerrors\fR() 4
.IX Item "$obj->errors()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR( [$level, [$strings]] )" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "$obj->log( [$level, [$strings]] )"
.PD 0
.IP "Mail::Message::Body::Delayed\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "Mail::Message::Body::Delayed->log( [$level, [$strings]] )"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBlogPriority\fR($level) 4
.el .IP \f(CW$obj\fR\->\fBlogPriority\fR($level) 4
.IX Item "$obj->logPriority($level)"
.PD 0
.IP Mail::Message::Body::Delayed\->\fBlogPriority\fR($level) 4
.IX Item "Mail::Message::Body::Delayed->logPriority($level)"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBlogSettings\fR() 4
.el .IP \f(CW$obj\fR\->\fBlogSettings\fR() 4
.IX Item "$obj->logSettings()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBnotImplemented\fR() 4
.el .IP \f(CW$obj\fR\->\fBnotImplemented\fR() 4
.IX Item "$obj->notImplemented()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR( [$level] )" 4
.IX Item "$obj->report( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR( [$level] )" 4
.IX Item "$obj->reportAll( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR( [$level] )" 4
.IX Item "$obj->trace( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBwarnings\fR() 4
.el .IP \f(CW$obj\fR\->\fBwarnings\fR() 4
.IX Item "$obj->warnings()"
Inherited, see "Error handling" in Mail::Reporter
.SS Cleanup
.IX Subsection "Cleanup"
Extends "Cleanup" in Mail::Reporter.
.ie n .IP $obj\->\fBDESTROY\fR() 4
.el .IP \f(CW$obj\fR\->\fBDESTROY\fR() 4
.IX Item "$obj->DESTROY()"
Inherited, see "Cleanup" in Mail::Reporter
.SH DIAGNOSTICS
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Package $package does not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR does not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package does not implement $method."
Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 3.010,
built on July 18, 2023. Website: \fIhttp://perl.overmeer.net/CPAN/\fR
.SH LICENSE
.IX Header "LICENSE"
Copyrights 2001\-2023 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://dev.perl.org/licenses/\fR
