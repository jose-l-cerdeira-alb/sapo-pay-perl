.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Box::Tie::ARRAY 3"
.TH Mail::Box::Tie::ARRAY 3 2023-07-18 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Mail::Box::Tie::ARRAY \- access an existing message folder as array
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 3
\& use Mail::Box::Manager;
\& my $mgr    = Mail::Box::Manager\->new;
\& my $folder = $mgr\->open(folder => \*(Aqinbox\*(Aq);
\&
\& use Mail::Box::Tie::ARRAY;
\& tie my(@inbox), \*(AqMail::Box::Tie::ARRAY\*(Aq, $folder;
\&
\& # deprecated, but works too
\& use Mail::Box::Tie;
\& tie my(@inbox), \*(AqMail::Box::Tie\*(Aq, $folder;
\&
\& foreach (@inbox) {print $_\->short}
\& print $_\->print foreach @inbox;
\& my $emails = @inbox;
\&
\& print $inbox[3];
\& print scalar @inbox;
\& push @inbox, Mail::Box::Message\->new(...);
\& delete $inbox[6];
\& print $inbox[0]\->head\->get(\*(Aqstatus\*(Aq);
\&
\& my $folder = tied @inbox;
\& untie @inbox;
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Certainly when you look at a folder as a list of messages, it is logical to
access the folder through an array.
.PP
Not all operations on arrays are supported.  Actually, most functions which
would reduce the size of the array are modified instead to mark messages for
deletion.
.PP
Examples what you \fIcannot\fR do:
.PP
.Vb 1
\& shift/unshift/pop/splice @inbox;
.Ve
.SH METHODS
.IX Header "METHODS"
.SS Constructors
.IX Subsection "Constructors"
.IP "\fBTIEARRAY\fR('Mail::Box::Tie::ARRAY', FOLDER)" 4
.IX Item "TIEARRAY('Mail::Box::Tie::ARRAY', FOLDER)"
Create the tie on an existing folder.
.Sp
example: tie an array to a folder
.Sp
.Vb 3
\& my $mgr   = Mail::Box::Manager\->new;
\& my $inbox = $mgr\->new(folder => $ENV{MAIL});
\& tie my(@inbox), \*(AqMail::Box::Tie::Array\*(Aq, ref $inbox, $inbox;
.Ve
.SS "Tied Interface"
.IX Subsection "Tied Interface"
.ie n .IP $obj\->\fBDELETE\fR() 4
.el .IP \f(CW$obj\fR\->\fBDELETE\fR() 4
.IX Item "$obj->DELETE()"
Flag a message to be removed.  Be warned that the message stays in
the folder, and is not removed before the folder is written.
.Sp
example:
.Sp
.Vb 2
\& delete $inbox[5];
\& $inbox[5]\->delete;   #same
.Ve
.ie n .IP $obj\->\fBFETCH\fR($index) 4
.el .IP \f(CW$obj\fR\->\fBFETCH\fR($index) 4
.IX Item "$obj->FETCH($index)"
Get the message which is at the indicated location in the list of
messages contained in this folder.  Deleted messages will be returned
as \f(CW\*(C`undef\*(C'\fR.
.Sp
example:
.Sp
.Vb 3
\& print $inbox[3];     # 4th message in the folder
\& print @inbox[3,0];   # 4th and first of the folder
\& print $inbox[\-1];    # last message
.Ve
.ie n .IP $obj\->\fBFETCHSIZE\fR() 4
.el .IP \f(CW$obj\fR\->\fBFETCHSIZE\fR() 4
.IX Item "$obj->FETCHSIZE()"
Return the total number of messages in a folder.  This is called when
the folder-array is used in scalar context, for instance.
.Sp
example:
.Sp
.Vb 2
\& if(@inbox > 10)    # contains more than 10 messages?
\& my $nrmsgs = @inbox;
.Ve
.ie n .IP $obj\->\fBPUSH\fR(@messages) 4
.el .IP \f(CW$obj\fR\->\fBPUSH\fR(@messages) 4
.IX Item "$obj->PUSH(@messages)"
Add \f(CW@messages\fR to the end of the folder.
.Sp
example:
.Sp
.Vb 1
\&    push @inbox, $newmsg;
.Ve
.ie n .IP "$obj\->\fBSTORE\fR($index, $message)" 4
.el .IP "\f(CW$obj\fR\->\fBSTORE\fR($index, \f(CW$message\fR)" 4
.IX Item "$obj->STORE($index, $message)"
Random message replacement is not permitted \-\-doing so would disturb threads
etc.  An error occurs if you try to do this. The only thing which is allowed
is to store a message at the first free index at the end of the folder (which
is also achievable with \fBPUSH()\fR).
.Sp
example:
.Sp
.Vb 3
\& $inbox[8] = $add;
\& $inbox[\-1] = $add;
\& push @inbox, $add;
.Ve
.ie n .IP $obj\->\fBSTORESIZE\fR($length) 4
.el .IP \f(CW$obj\fR\->\fBSTORESIZE\fR($length) 4
.IX Item "$obj->STORESIZE($length)"
Sets all messages behind from \f(CW$length\fR to the end of folder to be deleted.
.SH DETAILS
.IX Header "DETAILS"
.SS "Folder tied as array"
.IX Subsection "Folder tied as array"
\fILimitations\fR
.IX Subsection "Limitations"
.PP
This module implements \f(CW\*(C`TIEARRAY\*(C'\fR, \f(CW\*(C`FETCH\*(C'\fR, \f(CW\*(C`STORE\*(C'\fR, \f(CW\*(C`FETCHSIZE\*(C'\fR,
\&\f(CW\*(C`STORESIZE\*(C'\fR, \f(CW\*(C`DELETE\*(C'\fR, \f(CW\*(C`PUSH\*(C'\fR, and \f(CW\*(C`DESTROY\*(C'\fR.
.PP
This module does not implement all other methods as described in
the Tie::Array documentation, because the real array of messages
is not permitted to shrink or be mutilated.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 3.010,
built on July 18, 2023. Website: \fIhttp://perl.overmeer.net/CPAN/\fR
.SH LICENSE
.IX Header "LICENSE"
Copyrights 2001\-2023 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://dev.perl.org/licenses/\fR
