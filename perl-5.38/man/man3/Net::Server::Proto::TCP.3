.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::Server::Proto::TCP 3"
.TH Net::Server::Proto::TCP 3 2022-12-02 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
.Vb 1
\&  Net::Server::Proto::TCP \- Net::Server TCP protocol.
.Ve
.SH SYNOPSIS
.IX Header "SYNOPSIS"
See Net::Server::Proto.
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Protocol module for Net::Server.  This module implements the
SOCK_STREAM socket type under INET (also known as TCP).
See Net::Server::Proto.
.SH PARAMETERS
.IX Header "PARAMETERS"
There are no additional parameters that can be specified.
See Net::Server for more information on reading arguments.
.SH "INTERNAL METHODS"
.IX Header "INTERNAL METHODS"
.ie n .IP """object""" 4
.el .IP \f(CWobject\fR 4
.IX Item "object"
Returns an object with parameters suitable for eventual creation of
a IO::Socket::INET object listening on UDP.
.ie n .IP """log_connect""" 4
.el .IP \f(CWlog_connect\fR 4
.IX Item "log_connect"
Called before binding the socket to provide useful information to the logs.
.ie n .IP """connect""" 4
.el .IP \f(CWconnect\fR 4
.IX Item "connect"
Called when actually binding the port.  Handles default parameters
before calling parent method.
.ie n .IP """reconnect""" 4
.el .IP \f(CWreconnect\fR 4
.IX Item "reconnect"
Called instead of connect method during a server hup.
.ie n .IP """accept""" 4
.el .IP \f(CWaccept\fR 4
.IX Item "accept"
Override of the parent class to make sure necessary parameters are passed down to client sockets.
.ie n .IP """poll_cb""" 4
.el .IP \f(CWpoll_cb\fR 4
.IX Item "poll_cb"
Allow for psgi compatible interface during HTTP server.
.ie n .IP """read_until""" 4
.el .IP \f(CWread_until\fR 4
.IX Item "read_until"
Takes a regular expression, reads from the socket until the regular expression is matched.
.ie n .IP """hup_string""" 4
.el .IP \f(CWhup_string\fR 4
.IX Item "hup_string"
Returns a unique identifier that can be passed to the re-exec'ed process during HUP.
.ie n .IP """show""" 4
.el .IP \f(CWshow\fR 4
.IX Item "show"
Basic dumper of properties stored in the glob.
.ie n .IP """AUTOLOAD""" 4
.el .IP \f(CWAUTOLOAD\fR 4
.IX Item "AUTOLOAD"
Handle accessor methods.
.SH LICENCE
.IX Header "LICENCE"
Distributed under the same terms as Net::Server
