.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test::XML::Twig 3"
.TH Test::XML::Twig 3 2024-01-18 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Test::XML::Twig \- Test XML::Twig handlers
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\&  use Test::XML::Twig tests => 2;
\&  use My::Twig qw( handler );
\&
\&  test_twig_handler(
\&      \e&handler,
\&      \*(Aq<foo/>\*(Aq, \*(Aq<bar/>\*(Aq,
\&      \*(Aqturns foo to bar\*(Aq,
\&  );
\&
\&  test_twig_handlers(
\&      { twig_handlers => { \*(Aqfoo\*(Aq => \e&handler } },
\&      \*(Aq<foo/>\*(Aq, \*(Aq<bar/>\*(Aq,
\&      \*(Aqturns foo into bar\*(Aq,
\&  );
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module is for testing XML::Twig handlers.
.SH FUNCTIONS
.IX Header "FUNCTIONS"
All functions are exported.
.IP "get_twig ( INPUT [, ARGS ] )" 4
.IX Item "get_twig ( INPUT [, ARGS ] )"
Return a parsed twig of INPUT, or undef on parse failure.  Optionally,
ARGS may be supplied as a set of hash-like parameters to be passed into
the twig constructor.
.IP "test_twig_handler ( HANDLER, INPUT, EXPECTED, TESTNAME [, COND ] )" 4
.IX Item "test_twig_handler ( HANDLER, INPUT, EXPECTED, TESTNAME [, COND ] )"
Parse INPUT, using HANDLER as a \fItwig_handler\fR (i.e: it gets called
after the parse tree has been built).  Tests that the result is the same
as EXPECTED (which can be either a string of XML or a quoted regex).
HANDLER must be a code ref.
.Sp
Optionally, COND can be supplied.  Instead of the handler being called
with the root element of INPUT, COND will be used with \fBfirst_child()\fR to
select an alternative element.
.Sp
Returns true / false depending upon test success.
.IP "test_twig_handlers ( ARGS, INPUT, EXPECTED, TESTNAME )" 4
.IX Item "test_twig_handlers ( ARGS, INPUT, EXPECTED, TESTNAME )"
This is similiar to \fBtest_twig_handler()\fR, but with more flexibility.  The
first argument, ARGS, is a hash reference which can be used to specify
any of the ordinary parameters to twig's constructor.  This lets you
test things like \fIstart_tag_handlers\fR, as well as multiple
\&\fItwig_handler\fRs together.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Test::More, Test::XML, XML::Twig.
.SH AUTHOR
.IX Header "AUTHOR"
Dominic Mitchell, <cpan2 (at) semantico.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2002 by semantico
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
