.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "User::Identity::System 3"
.TH User::Identity::System 3 2023-04-17 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
User::Identity::System \- physical system of a person
.SH INHERITANCE
.IX Header "INHERITANCE"
.Vb 2
\& User::Identity::System
\&   is a User::Identity::Item
.Ve
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 5
\& use User::Identity;
\& use User::Identity::System;
\& my $me   = User::Identity\->new(...);
\& my $server = User::Identity::System\->new(...);
\& $me\->add(system => $server);
\&
\& # Simpler
\&
\& use User::Identity;
\& my $me   = User::Identity\->new(...);
\& my $addr = $me\->add(system => ...);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
The \f(CW\*(C`User::Identity::System\*(C'\fR object contains the description of the
user's presence on a system.  The systems are collected
by an User::Identity::Collection::Systems object.
.PP
Nearly all methods can return undef.
.PP
Extends "DESCRIPTION" in User::Identity::Item.
.SH METHODS
.IX Header "METHODS"
Extends "METHODS" in User::Identity::Item.
.SS Constructors
.IX Subsection "Constructors"
Extends "Constructors" in User::Identity::Item.
.ie n .IP "User::Identity::System\->\fBnew\fR( [$name], %options )" 4
.el .IP "User::Identity::System\->\fBnew\fR( [$name], \f(CW%options\fR )" 4
.IX Item "User::Identity::System->new( [$name], %options )"
Create a new system.  You can specify a name as first argument, or
in the OPTION list.  Without a specific name, the organization is used as name.
.Sp
.Vb 9
\& \-Option     \-\-Defined in          \-\-Default
\&  description  User::Identity::Item  undef
\&  hostname                           \*(Aqlocalhost\*(Aq
\&  location                           undef
\&  name         User::Identity::Item  <required>
\&  os                                 undef
\&  parent       User::Identity::Item  undef
\&  password                           undef
\&  username                           undef
.Ve
.RS 4
.IP "description => STRING" 2
.IX Item "description => STRING"
.PD 0
.IP "hostname => DOMAIN" 2
.IX Item "hostname => DOMAIN"
.PD
The hostname of the described system.  It is preferred to use full
system names, not abbreviations.  For instance, you can better use
\&\f(CW\*(C`www.tux.aq\*(C'\fR than \f(CW\*(C`www\*(C'\fR to avoid confusion.
.IP "location => NICKNAME|OBJECT" 2
.IX Item "location => NICKNAME|OBJECT"
The NICKNAME of a location which is defined for the same user.  You can
also specify a User::Identity::Location OBJECT.
.IP "name => STRING" 2
.IX Item "name => STRING"
.PD 0
.IP "os => STRING" 2
.IX Item "os => STRING"
.PD
The name of the operating system which is run on the server.  It is
advised to use the names as used by Perl's \f(CW$^O\fR variable.  See the
perlvar man-page for this variable, and perlport for the possible
values.
.IP "parent => OBJECT" 2
.IX Item "parent => OBJECT"
.PD 0
.IP "password => STRING" 2
.IX Item "password => STRING"
.PD
The password to be used to login.  This password must be un-encoded:
directly usable.  Be warned that storing un-encoded passwords is a
high security list.
.IP "username => STRING" 2
.IX Item "username => STRING"
The username to be used to login to this host.
.RE
.RS 4
.RE
.SS Attributes
.IX Subsection "Attributes"
Extends "Attributes" in User::Identity::Item.
.ie n .IP $obj\->\fBdescription\fR() 4
.el .IP \f(CW$obj\fR\->\fBdescription\fR() 4
.IX Item "$obj->description()"
Inherited, see "Attributes" in User::Identity::Item
.ie n .IP $obj\->\fBhostname\fR() 4
.el .IP \f(CW$obj\fR\->\fBhostname\fR() 4
.IX Item "$obj->hostname()"
.PD 0
.ie n .IP $obj\->\fBlocation\fR() 4
.el .IP \f(CW$obj\fR\->\fBlocation\fR() 4
.IX Item "$obj->location()"
.PD
Returns the object which describes to which location this system relates.
The location may be used to find the name of the organization involved, or
to create a signature.  If no location is specified, undef is returned.
.ie n .IP "$obj\->\fBname\fR( [$newname] )" 4
.el .IP "\f(CW$obj\fR\->\fBname\fR( [$newname] )" 4
.IX Item "$obj->name( [$newname] )"
Inherited, see "Attributes" in User::Identity::Item
.ie n .IP $obj\->\fBos\fR() 4
.el .IP \f(CW$obj\fR\->\fBos\fR() 4
.IX Item "$obj->os()"
.PD 0
.ie n .IP $obj\->\fBpassword\fR() 4
.el .IP \f(CW$obj\fR\->\fBpassword\fR() 4
.IX Item "$obj->password()"
.ie n .IP $obj\->\fBusername\fR() 4
.el .IP \f(CW$obj\fR\->\fBusername\fR() 4
.IX Item "$obj->username()"
.PD
.SS Collections
.IX Subsection "Collections"
Extends "Collections" in User::Identity::Item.
.ie n .IP "$obj\->\fBadd\fR($collection, $role)" 4
.el .IP "\f(CW$obj\fR\->\fBadd\fR($collection, \f(CW$role\fR)" 4
.IX Item "$obj->add($collection, $role)"
Inherited, see "Collections" in User::Identity::Item
.ie n .IP "$obj\->\fBaddCollection\fR( $object | <[$type], %options> )" 4
.el .IP "\f(CW$obj\fR\->\fBaddCollection\fR( \f(CW$object\fR | <[$type], \f(CW%options\fR> )" 4
.IX Item "$obj->addCollection( $object | <[$type], %options> )"
Inherited, see "Collections" in User::Identity::Item
.ie n .IP $obj\->\fBcollection\fR($name) 4
.el .IP \f(CW$obj\fR\->\fBcollection\fR($name) 4
.IX Item "$obj->collection($name)"
Inherited, see "Collections" in User::Identity::Item
.ie n .IP "$obj\->\fBparent\fR( [$parent] )" 4
.el .IP "\f(CW$obj\fR\->\fBparent\fR( [$parent] )" 4
.IX Item "$obj->parent( [$parent] )"
Inherited, see "Collections" in User::Identity::Item
.ie n .IP $obj\->\fBremoveCollection\fR($object|$name) 4
.el .IP \f(CW$obj\fR\->\fBremoveCollection\fR($object|$name) 4
.IX Item "$obj->removeCollection($object|$name)"
Inherited, see "Collections" in User::Identity::Item
.ie n .IP $obj\->\fBtype\fR() 4
.el .IP \f(CW$obj\fR\->\fBtype\fR() 4
.IX Item "$obj->type()"
.PD 0
.IP User::Identity::System\->\fBtype\fR() 4
.IX Item "User::Identity::System->type()"
.PD
Inherited, see "Collections" in User::Identity::Item
.ie n .IP $obj\->\fBuser\fR() 4
.el .IP \f(CW$obj\fR\->\fBuser\fR() 4
.IX Item "$obj->user()"
Inherited, see "Collections" in User::Identity::Item
.SS Searching
.IX Subsection "Searching"
Extends "Searching" in User::Identity::Item.
.ie n .IP "$obj\->\fBfind\fR($collection, $role)" 4
.el .IP "\f(CW$obj\fR\->\fBfind\fR($collection, \f(CW$role\fR)" 4
.IX Item "$obj->find($collection, $role)"
Inherited, see "Searching" in User::Identity::Item
.SH DIAGNOSTICS
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: $object is not a collection." 4
.el .IP "Error: \f(CW$object\fR is not a collection." 4
.IX Item "Error: $object is not a collection."
The first argument is an object, but not of a class which extends
User::Identity::Collection.
.ie n .IP "Error: Cannot load collection module for $type ($class)." 4
.el .IP "Error: Cannot load collection module for \f(CW$type\fR ($class)." 4
.IX Item "Error: Cannot load collection module for $type ($class)."
Either the specified \f(CW$type\fR does not exist, or that module named \f(CW$class\fR returns
compilation errors.  If the type as specified in the warning is not
the name of a package, you specified a nickname which was not defined.
Maybe you forgot the 'require' the package which defines the nickname.
.ie n .IP "Error: Creation of a collection via $class failed." 4
.el .IP "Error: Creation of a collection via \f(CW$class\fR failed." 4
.IX Item "Error: Creation of a collection via $class failed."
The \f(CW$class\fR did compile, but it was not possible to create an object
of that class using the options you specified.
.IP "Error: Don't know what type of collection you want to add." 4
.IX Item "Error: Don't know what type of collection you want to add."
If you add a collection, it must either by a collection object or a
list of options which can be used to create a collection object.  In
the latter case, the type of collection must be specified.
.ie n .IP "Warning: No collection $name" 4
.el .IP "Warning: No collection \f(CW$name\fR" 4
.IX Item "Warning: No collection $name"
The collection with \f(CW$name\fR does not exist and can not be created.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of User-Identity distribution version 1.02,
built on April 17, 2023. Website: \fIhttp://perl.overmeer.net/CPAN/\fR
.SH LICENSE
.IX Header "LICENSE"
Copyrights 2003\-2023 by [Mark Overmeer <markov@cpan.org>]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://dev.perl.org/licenses/\fR
