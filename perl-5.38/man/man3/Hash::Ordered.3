.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Hash::Ordered 3"
.TH Hash::Ordered 3 2019-07-08 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Hash::Ordered \- A fast, pure\-Perl ordered hash class
.SH VERSION
.IX Header "VERSION"
version 0.014
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    use Hash::Ordered;
\&
\&    my $oh = Hash::Ordered\->new( a => 1 );
\&
\&    $oh\->get( \*(Aqa\*(Aq );
\&    $oh\->set( \*(Aqa\*(Aq => 2 );
\&
\&    $oh\->exists( \*(Aqa\*(Aq );
\&    $val = $oh\->delete( \*(Aqa\*(Aq );
\&
\&    @keys  = $oh\->keys;
\&    @vals  = $oh\->values;
\&    @pairs = $oh\->as_list
\&
\&    $oh\->push( c => 3, d => 4 );
\&    $oh\->unshift( e => 5, f => 6 );
\&
\&    ( $k, $v ) = $oh\->pop;
\&    ( $k, $v ) = $oh\->shift;
\&
\&    $iter = $oh\->iterator;
\&    while( ( $k, $v ) = $iter\->() ) { ... }
\&
\&    $copy     = $oh\->clone;
\&    $subset   = $oh\->clone( qw/c d/ );
\&    $reversed = $oh\->clone( reverse $oh\->keys );
\&
\&    @value_slice = $oh\->values(  qw/c f/ ); # qw/3 6/
\&    @pairs_slice = $oh\->as_list( qw/f e/ ); # qw/f 6 e 5/
\&
\&    $oh\->postinc( \*(Aqa\*(Aq );          # like $oh{a}++
\&    $oh\->add( \*(Aqa\*(Aq, 5 );           # like $oh{a} += 5
\&    $oh\->concat( \*(Aqa\*(Aq, \*(Aqhello\*(Aq );  # like $oh{a} .= \*(Aqhello\*(Aq
\&    $oh\->or_equals( \*(Aqg\*(Aq, \*(Aq23\*(Aq );  # like $oh{g} ||= 23
\&    $oh\->dor_equals( \*(Aqg\*(Aq, \*(Aq23\*(Aq ); # like $oh{g} //= 23
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This module implements an ordered hash, meaning that it associates keys with
values like a Perl hash, but keeps the keys in a consistent order.  Because it
is implemented as an object and manipulated with method calls, it is much
slower than a Perl hash.  This is the cost of keeping order.
.PP
However, compared to other \fBordered\fR hash implementations, Hash::Ordered is
optimized for getting and setting individual elements and is generally faster
at most other tasks as well.  For specific details, see
Hash::Ordered::Benchmarks.
.SH METHODS
.IX Header "METHODS"
.SS new
.IX Subsection "new"
.Vb 2
\&    $oh = Hash::Ordered\->new;
\&    $oh = Hash::Ordered\->new( @pairs );
.Ve
.PP
Constructs an object, with an optional list of key-value pairs.
.PP
The position of a key corresponds to the first occurrence in the list, but
the value will be updated if the key is seen more than once.
.PP
Current API available since 0.009.
.SS clone
.IX Subsection "clone"
.Vb 2
\&    $oh2 = $oh\->clone;
\&    $oh2 = $oh\->clone( @keys );
.Ve
.PP
Creates a shallow copy of an ordered hash object.  If no arguments are
given, it produces an exact copy.  If a list of keys is given, the new
object includes only those keys in the given order.  Keys that aren't
in the original will have the value \f(CW\*(C`undef\*(C'\fR.
.SS keys
.IX Subsection "keys"
.Vb 2
\&    @keys = $oh\->keys;
\&    $size = $oh\->keys;
.Ve
.PP
In list context, returns the ordered list of keys.  In scalar context, returns
the number of elements.
.PP
Current API available since 0.005.
.SS values
.IX Subsection "values"
.Vb 2
\&    @values = $oh\->values;
\&    @values = $oh\->values( @keys );
.Ve
.PP
Returns an ordered list of values.  If no arguments are given, returns
the ordered values of the entire hash.  If a list of keys is given, returns
values in order corresponding to those keys.  If a key does not exist, \f(CW\*(C`undef\*(C'\fR
will be returned for that value.
.PP
In scalar context, returns the number of elements.
.PP
Current API available since 0.006.
.SS get
.IX Subsection "get"
.Vb 1
\&    $value = $oh\->get("some key");
.Ve
.PP
Returns the value associated with the key, or \f(CW\*(C`undef\*(C'\fR if it does not exist in
the hash.
.SS set
.IX Subsection "set"
.Vb 1
\&    $oh\->set("some key" => "some value");
.Ve
.PP
Associates a value with a key and returns the value.  If the key does not
already exist in the hash, it will be added at the end.
.SS exists
.IX Subsection "exists"
.Vb 1
\&    if ( $oh\->exists("some key") ) { ... }
.Ve
.PP
Test if some key exists in the hash (without creating it).
.SS delete
.IX Subsection "delete"
.Vb 1
\&    $value = $oh\->delete("some key");
.Ve
.PP
Removes a key-value pair from the hash and returns the value.
.SS clear
.IX Subsection "clear"
.Vb 1
\&    $oh\->clear;
.Ve
.PP
Removes all key-value pairs from the hash.  Returns undef in scalar context
or an empty list in list context.
.PP
Current API available since 0.003.
.SS push
.IX Subsection "push"
.Vb 1
\&    $oh\->push( one => 1, two => 2);
.Ve
.PP
Add a list of key-value pairs to the end of the ordered hash.  If a key already
exists in the hash, it will be deleted and re-inserted at the end with the new
value.
.PP
Returns the number of keys after the push is complete.
.SS pop
.IX Subsection "pop"
.Vb 2
\&    ($key, $value) = $oh\->pop;
\&    $value = $oh\->pop;
.Ve
.PP
Removes and returns the last key-value pair in the ordered hash.
In scalar context, only the value is returned.  If the hash is empty,
the returned key and value will be \f(CW\*(C`undef\*(C'\fR.
.SS unshift
.IX Subsection "unshift"
.Vb 1
\&    $oh\->unshift( one => 1, two => 2 );
.Ve
.PP
Adds a list of key-value pairs to the beginning of the ordered hash.  If a key
already exists, it will be deleted and re-inserted at the beginning with the
new value.
.PP
Returns the number of keys after the unshift is complete.
.SS shift
.IX Subsection "shift"
.Vb 2
\&    ($key, $value) = $oh\->shift;
\&    $value = $oh\->shift;
.Ve
.PP
Removes and returns the first key-value pair in the ordered hash.
In scalar context, only the value is returned.  If the hash is empty,
the returned key and value will be \f(CW\*(C`undef\*(C'\fR.
.SS merge
.IX Subsection "merge"
.Vb 1
\&    $oh\->merge( one => 1, two => 2 );
.Ve
.PP
Merges a list of key-value pairs into the ordered hash.  If a key already
exists, its value is replaced.  Otherwise, the key-value pair is added at
the end of the hash.
.SS as_list
.IX Subsection "as_list"
.Vb 2
\&    @pairs = $oh\->as_list;
\&    @pairs = $oh\->as_list( @keys );
.Ve
.PP
Returns an ordered list of key-value pairs. If no arguments are given, all
pairs in the hash are returned.  If a list of keys is given, the returned list
includes only those key-value pairs in the given order.  Keys that aren't in
the original will have the value \f(CW\*(C`undef\*(C'\fR.
.SS iterator
.IX Subsection "iterator"
.Vb 2
\&    $iter = $oh\->iterator;
\&    $iter = $oh\->iterator( reverse $oh\->keys ); # reverse
\&
\&    while ( my ($key,$value) = $iter\->() ) { ... }
.Ve
.PP
Returns a code reference that returns a single key-value pair (in order) on
each invocation, or the empty list if all keys are visited.
.PP
If no arguments are given, the iterator walks the entire hash in order.  If a
list of keys is provided, the iterator walks the hash in that order. Unknown
keys will return \f(CW\*(C`undef\*(C'\fR.
.PP
The list of keys to return is set when the iterator is generator.  Keys added
later will not be returned.  Subsequently deleted keys will return \f(CW\*(C`undef\*(C'\fR
for the value.
.SS preinc
.IX Subsection "preinc"
.Vb 1
\&    $oh\->preinc($key);      # like ++$hash{$key}
.Ve
.PP
This method is sugar for incrementing a key without having to call \f(CW\*(C`set\*(C'\fR and
\&\f(CW\*(C`get\*(C'\fR explicitly. It returns the new value.
.PP
Current API available since 0.005.
.SS postinc
.IX Subsection "postinc"
.Vb 1
\&    $oh\->postinc($key);     # like $hash{$key}++
.Ve
.PP
This method is sugar for incrementing a key without having to call \f(CW\*(C`set\*(C'\fR and
\&\f(CW\*(C`get\*(C'\fR explicitly.  It returns the old value.
.PP
Current API available since 0.005.
.SS predec
.IX Subsection "predec"
.Vb 1
\&    $oh\->predec($key);      # like \-\-$hash{$key}
.Ve
.PP
This method is sugar for decrementing a key without having to call \f(CW\*(C`set\*(C'\fR and
\&\f(CW\*(C`get\*(C'\fR explicitly. It returns the new value.
.PP
Current API available since 0.005.
.SS postdec
.IX Subsection "postdec"
.Vb 1
\&    $oh\->postdec($key);      # like $hash{$key}\-\-
.Ve
.PP
This method is sugar for decrementing a key without having to call \f(CW\*(C`set\*(C'\fR and
\&\f(CW\*(C`get\*(C'\fR explicitly.  It returns the old value.
.PP
Current API available since 0.005.
.SS add
.IX Subsection "add"
.Vb 1
\&    $oh\->add($key, $n);     # like $hash{$key} += $n
.Ve
.PP
This method is sugar for adding a value to a key without having to call
\&\f(CW\*(C`set\*(C'\fR and \f(CW\*(C`get\*(C'\fR explicitly. With no value to add, it is treated as "0".
It returns the new value.
.PP
Current API available since 0.005.
.SS subtract
.IX Subsection "subtract"
.Vb 1
\&    $oh\->subtract($key, $n);  # like $hash{$key} \-= $n
.Ve
.PP
This method is sugar for subtracting a value from a key without having to call
\&\f(CW\*(C`set\*(C'\fR and \f(CW\*(C`get\*(C'\fR explicitly. With no value to subtract, it is treated as "0".
It returns the new value.
.PP
Current API available since 0.005.
.SS concat
.IX Subsection "concat"
.Vb 1
\&    $oh\->concat($key, $str); # like $hash{$key} .= $str
.Ve
.PP
This method is sugar for concatenating a string onto the value of a key without
having to call \f(CW\*(C`set\*(C'\fR and \f(CW\*(C`get\*(C'\fR explicitly. It returns the new value.  If the
value to append is not defined, no concatenation is done and no warning is
given.
.PP
Current API available since 0.005.
.SS or_equals
.IX Subsection "or_equals"
.Vb 1
\&    $oh\->or_equals($key, $str); # like $hash{$key} ||= $str
.Ve
.PP
This method is sugar for assigning to a key if the existing value is false
without having to call \f(CW\*(C`set\*(C'\fR and \f(CW\*(C`get\*(C'\fR explicitly. It returns the new value.
.PP
Current API available since 0.005.
.SS dor_equals
.IX Subsection "dor_equals"
.Vb 1
\&    $oh\->dor_equals($key, $str); # like $hash{$key} //= $str
.Ve
.PP
This method is sugar for assigning to a key if the existing value is not
defined without having to call \f(CW\*(C`set\*(C'\fR and \f(CW\*(C`get\*(C'\fR explicitly. It returns the new
value.
.PP
Current API available since 0.005.
.SH OVERLOADING
.IX Header "OVERLOADING"
.SS Boolean
.IX Subsection "Boolean"
.Vb 1
\&    if ( $oh ) { ... }
.Ve
.PP
When used in boolean context, a Hash::Ordered object is true if it has any entries
and false otherwise.
.SS String
.IX Subsection "String"
.Vb 1
\&    say "$oh";
.Ve
.PP
When used in string context, a Hash::Ordered object stringifies like typical
Perl objects. E.g. \f(CW\*(C`Hash::Ordered=ARRAY(0x7f815302cac0)\*(C'\fR
.PP
Current API available since 0.005.
.SS Numeric
.IX Subsection "Numeric"
.Vb 1
\&    $count = 0 + $oh;
.Ve
.PP
When used in numeric context, a Hash::Ordered object numifies as the decimal
representation of its memory address, just like typical Perl objects. E.g.
\&\f(CW140268162536552\fR
.PP
For the number of keys, call the "keys" method in scalar context.
.PP
Current API available since 0.005.
.SS Fallback
.IX Subsection "Fallback"
Other overload methods are derived from these three, if possible.
.SH "TIED INTERFACE"
.IX Header "TIED INTERFACE"
Using \f(CW\*(C`tie\*(C'\fR is slower than using method calls directly.  But for
compatibility with libraries that can only take hashes, it's available if
you really need it:
.PP
.Vb 1
\&    tie my %hash, "Hash::Ordered", @pairs;
.Ve
.PP
If you want to access the underlying object for method calls, use \f(CW\*(C`tied\*(C'\fR:
.PP
.Vb 1
\&    tied( %hash )\->unshift( @data );
.Ve
.PP
Tied hash API available since 0.005.
.SH CAVEATS
.IX Header "CAVEATS"
.SS "Deletion and order modification with push, pop, etc."
.IX Subsection "Deletion and order modification with push, pop, etc."
This can be expensive, as the ordered list of keys has to be updated.  For
small hashes with no more than 25 keys, keys are found and spliced out with
linear search.  As an optimization for larger hashes, the first change to the
ordered list of keys will construct an index to the list of keys.  Thereafter,
removed keys will be marked with a "tombstone" record.  Tombstones will be
garbage collected whenever the number of tombstones exceeds the number of valid
keys.
.PP
These internal implementation details largely shouldn't concern you.  The
important things to note are:
.IP \(bu 4
The costs of efficient deletion are deferred until you need it
.IP \(bu 4
Deleting lots of keys will temporarily appear to leak memory until garbage collection occurs
.SH MOTIVATION
.IX Header "MOTIVATION"
For a long time, I used Tie::IxHash for ordered hashes, but I grew
frustrated with things it lacked, like a cheap way to copy an IxHash object or
a convenient iterator when not using the tied interface.  As I looked at its
implementation, it seemed more complex than I though it needed, with an extra
level of indirection that slows data access.
.PP
Given that frustration, I started experimenting with the simplest thing I
thought could work for an ordered hash: a hash of key-value pairs and an array
with key order.
.PP
As I worked on this, I also started searching for other modules doing similar
things.  What I found fell broadly into two camps: modules based on tie (even
if they offered an OO interface), and pure OO modules.  They all either lacked
features I deemed necessary or else seemed overly-complex in either
implementation or API.
.PP
Hash::Ordered attempts to find the sweet spot with simple implementation,
reasonably good efficiency for most common operations, and a rich, intuitive
API.
.PP
After discussions with Mario Roy about the potential use of Hash::Ordered
with MCE, I optimized deletion of larger hashes and provided a tied
interface for compatibility.  Mario's suggestions and feedback about
optimization were quite valuable.  Thank you, Mario!
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This section describes other ordered-hash modules I found on CPAN.  For
benchmarking results, see Hash::Ordered::Benchmarks.
.SS "Tie modules"
.IX Subsection "Tie modules"
The following modules offer some sort of tie interface.  I don't like ties,
in general, because of the extra indirection involved over a direct method
call. Still, you can make any tied interface into a faster OO one with
\&\f(CW\*(C`tied\*(C'\fR:
.PP
.Vb 1
\&    tied( %tied_hash )\->FETCH($key);
.Ve
.PP
Tie::Hash::Indexed is implemented in XS and thus seems promising if
pure-Perl isn't a criterion; it generally fails tests on Perl 5.18 and
above due to the hash randomization change.  Despite being XS, it is slower
than Hash::Ordered at everything exception creation and deletion.
.PP
Tie::IxHash is probably the most well known and includes an OO API.
Given the performance problems it has, "well known" is the only real reason
to use it.
.PP
These other modules below have very specific designs/limitations and I
didn't find any of them suitable for general purpose use:
.IP \(bu 4
Tie::Array::AsHash — array elements split with separator; tie API only
.IP \(bu 4
Tie::Hash::Array — ordered alphabetically; tie API only
.IP \(bu 4
Tie::InsertOrderHash —\ ordered by insertion; tie API only
.IP \(bu 4
Tie::LLHash — linked-list implementation; quite slow
.IP \(bu 4
Tie::StoredOrderHash — ordered by last update; tie API only
.SS "Other ordered hash modules"
.IX Subsection "Other ordered hash modules"
Other modules stick with an object-oriented API, with a wide variety of
implementation approaches.
.PP
Array::AsHash is essentially an inverse implementation from
Hash::Ordered.  It keeps pairs in an array and uses a hash to index into
the array.  This indirection would already make hash-like operations
slower, but the specific implementation makes it even worse, with
abstractions and function calls that make getting or setting individual
items up to 10x slower than Hash::Ordered.
.PP
However, \f(CW\*(C`Array::AsHash\*(C'\fR takes an arrayref to initialize, which is very
fast and can return the list of pairs faster, too.  If you mostly create
and list out very large ordered hashes and very rarely touch individual
entries, I think this could be something to very cautiously consider.
.PP
These other modules below have restrictions or particularly complicated
implementations (often relying on \f(CW\*(C`tie\*(C'\fR) and thus I didn't think any of
them really suitable for use:
.IP \(bu 4
Array::Assign — arrays with named access; restricted keys
.IP \(bu 4
Array::OrdHash — overloads array/hash deref and uses internal tied data
.IP \(bu 4
Data::Pairs — array of key-value hashrefs; allows duplicate keys
.IP \(bu 4
Data::OMap — array of key-value hashrefs; no duplicate keys
.IP \(bu 4
Data::XHash — blessed, tied hashref with doubly-linked-list
.SH SUPPORT
.IX Header "SUPPORT"
.SS "Bugs / Feature Requests"
.IX Subsection "Bugs / Feature Requests"
Please report any bugs or feature requests through the issue tracker
at <https://github.com/dagolden/Hash\-Ordered/issues>.
You will be notified automatically of any progress on your issue.
.SS "Source Code"
.IX Subsection "Source Code"
This is open source software.  The code repository is available for
public review and contribution under the terms of the license.
.PP
<https://github.com/dagolden/Hash\-Ordered>
.PP
.Vb 1
\&  git clone https://github.com/dagolden/Hash\-Ordered.git
.Ve
.SH AUTHOR
.IX Header "AUTHOR"
David Golden <dagolden@cpan.org>
.SH CONTRIBUTORS
.IX Header "CONTRIBUTORS"
.IP \(bu 4
Andy Lester <andy@petdance.com>
.IP \(bu 4
Benct Philip Jonsson <bpjonsson@gmail.com>
.IP \(bu 4
Mario Roy <marioeroy@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2014 by David Golden.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve
