.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Geo::IP::Record 3"
.TH Geo::IP::Record 3 2017-10-12 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
.Vb 1
\&  Geo::IP::Record \- Contains city information for GeoIP Legacy City Edition
.Ve
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&  use Geo::IP;
\&
\&  my $gi = Geo::IP\->open("/usr/local/share/GeoIP/GeoIPCity.dat", GEOIP_STANDARD);
\&
\&  my $record = $gi\->record_by_addr(\*(Aq24.24.24.24\*(Aq);
\&
\&  print $record\->country_code,
\&    $record\->country_code3,
\&    $record\->country_name,
\&    $record\->region,
\&    $record\->region_name,
\&    $record\->city,
\&    $record\->postal_code,
\&    $record\->latitude,
\&    $record\->longitude,
\&    $record\->time_zone,
\&    $record\->area_code,
\&    $record\->continent_code,
\&    $record\->metro_code;
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Geo::IP::Record represents objects containing location information returned by
the GeoIP Legacy City database.  It works with both the commercial GeoIP
Legacy City and free GeoLite Legacy City databases.
.SH "OBJECT METHODS"
.IX Header "OBJECT METHODS"
.ie n .IP "$code = $record\->country_code;" 4
.el .IP "\f(CW$code\fR = \f(CW$record\fR\->country_code;" 4
.IX Item "$code = $record->country_code;"
Returns the ISO 3166 country code from the location object.
.ie n .IP "$code3 = $record\->country_code3;" 4
.el .IP "\f(CW$code3\fR = \f(CW$record\fR\->country_code3;" 4
.IX Item "$code3 = $record->country_code3;"
Returns the ISO 3166 3 letter country code from the location object.
.ie n .IP "$name = $record\->country_name;" 4
.el .IP "\f(CW$name\fR = \f(CW$record\fR\->country_name;" 4
.IX Item "$name = $record->country_name;"
Returns the country name from the location object.
.ie n .IP "$region = $record\->region;" 4
.el .IP "\f(CW$region\fR = \f(CW$record\fR\->region;" 4
.IX Item "$region = $record->region;"
Returns the region code from the location object.
.ie n .IP "$region = $record\->region_name;" 4
.el .IP "\f(CW$region\fR = \f(CW$record\fR\->region_name;" 4
.IX Item "$region = $record->region_name;"
Returns the region name from the location object.
.ie n .IP "$city = $record\->city;" 4
.el .IP "\f(CW$city\fR = \f(CW$record\fR\->city;" 4
.IX Item "$city = $record->city;"
Returns the city from the location object.
.ie n .IP "$postal_code = $record\->postal_code;" 4
.el .IP "\f(CW$postal_code\fR = \f(CW$record\fR\->postal_code;" 4
.IX Item "$postal_code = $record->postal_code;"
Returns the postal code from the location object.
.ie n .IP "$lat = $record\->latitude;" 4
.el .IP "\f(CW$lat\fR = \f(CW$record\fR\->latitude;" 4
.IX Item "$lat = $record->latitude;"
Returns the approximate latitude of the location associated with the IP
address. This value is not precise and should not be used to identify a
particular address or household.
.ie n .IP "$lon = $record\->longitude;" 4
.el .IP "\f(CW$lon\fR = \f(CW$record\fR\->longitude;" 4
.IX Item "$lon = $record->longitude;"
Returns the approximate longitude of the location associated with the IP
address. This value is not precise and should not be used to identify a
particular address or household.
.ie n .IP "$time_zone = $record\->time_zone;" 4
.el .IP "\f(CW$time_zone\fR = \f(CW$record\fR\->time_zone;" 4
.IX Item "$time_zone = $record->time_zone;"
Returns the time zone from the location object.
.ie n .IP "$area_code = $record\->area_code;" 4
.el .IP "\f(CW$area_code\fR = \f(CW$record\fR\->area_code;" 4
.IX Item "$area_code = $record->area_code;"
Returns the area code from the location object (for city-level US locations only)
.ie n .IP "$metro_code = $record\->metro_code;" 4
.el .IP "\f(CW$metro_code\fR = \f(CW$record\fR\->metro_code;" 4
.IX Item "$metro_code = $record->metro_code;"
Returns the metro code from the location object (for city-level US locations only)
.ie n .IP "$continent_code = $record\->continent_code;" 4
.el .IP "\f(CW$continent_code\fR = \f(CW$record\fR\->continent_code;" 4
.IX Item "$continent_code = $record->continent_code;"
.Vb 2
\& Returns the continent code from the location object.
\& Possible continent codes are AF, AS, EU, NA, OC, SA for Africa, Asia, Europe, North America, Oceania  and South America.
.Ve
.SH VERSION
.IX Header "VERSION"
1.51
.SH AUTHOR
.IX Header "AUTHOR"
Copyright (c) 2016, MaxMind LLC
.PP
All rights reserved.  This package is free software; you can redistribute it
and/or modify it under the same terms as Perl itself.
