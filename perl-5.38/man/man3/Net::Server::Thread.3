.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::Server::Thread 3"
.TH Net::Server::Thread 3 2022-12-02 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Net::Server::Thread \- Net::Server personality
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&    use base qw(Net::Server::Thread);
\&
\&    sub process_request {
\&        #...code...
\&    }
\&
\&    _\|_PACKAGE_\|_\->run();
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
Please read the pod on Net::Server first.  This module is a
personality, or extension, or sub class, of the Net::Server module.
.PP
This personality binds to one or more ports and then waits for a
client connection.  When a connection is received, the server spawns a
new thread.  The thread handles the request and then closes.
.PP
Because this Net::Server flavor spawns and destroys a thread for each
request, it really should only be used where the processing of each
request may be lengthy or involved.  If short and light request are
used, perl may not voluntarily give back the used memory.  This is
highly system dependent.
.SH ARGUMENTS
.IX Header "ARGUMENTS"
.IP check_for_dead 4
.IX Item "check_for_dead"
Number of seconds to wait before looking for dead children.  This only
takes place if the maximum number of child processes (max_servers) has
been reached.  Default is 60 seconds.
.IP max_servers 4
.IX Item "max_servers"
The maximum number of children to fork.  The server will not accept
connections until there are free children. Default is 256 children.
.SH "CONFIGURATION FILE"
.IX Header "CONFIGURATION FILE"
See Net::Server.
.SH "PROCESS FLOW"
.IX Header "PROCESS FLOW"
Process flow follows Net::Server until the post_accept phase.  At this
point a child is forked.  The parent is immediately able to wait for
another request.  The child handles the request and then exits.
.SH HOOKS
.IX Header "HOOKS"
The Fork server has the following hooks in addition to the hooks
provided by the Net::Server base class.  See Net::Server
.ie n .IP """$self\->pre_accept_hook()""" 4
.el .IP \f(CW$self\->pre_accept_hook()\fR 4
.IX Item "$self->pre_accept_hook()"
This hook occurs just before the accept is called.
.ie n .IP """$self\->pre_thread_hook()""" 4
.el .IP \f(CW$self\->pre_thread_hook()\fR 4
.IX Item "$self->pre_thread_hook()"
This hook occurs just after accept but before the fork.
.ie n .IP """$self\->post_accept_hook()""" 4
.el .IP \f(CW$self\->post_accept_hook()\fR 4
.IX Item "$self->post_accept_hook()"
This hook occurs in the child after the accept and fork.
.SH "TO DO"
.IX Header "TO DO"
See Net::Server
.SH AUTHOR
.IX Header "AUTHOR"
Paul Seamons <paul@seamons.com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please see also
Net::Server::INET,
Net::Server::Fork,
Net::Server::PreFork,
Net::Server::PreForkSimple,
Net::Server::MultiType,
Net::Server::SIG
Net::Server::Single
