.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Box::Locker::Multi 3"
.TH Mail::Box::Locker::Multi 3 2023-07-18 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Mail::Box::Locker::Multi \- lock a folder in all ways which work
.SH INHERITANCE
.IX Header "INHERITANCE"
.Vb 3
\& Mail::Box::Locker::Multi
\&   is a Mail::Box::Locker
\&   is a Mail::Reporter
.Ve
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\& See Mail::Box::Locker
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
The \f(CW\*(C`::Multi\*(C'\fR locker locks a folder in each way it can.  This way, the
chance is highest that any other program will leave the folder alone
during our access to it.
.PP
NFS-lock and Flock are tried.  More may be added when the ways to
lock are extended.  DotLock overlaps with NFS-lock, but NFS-lock is
safer, so that version is preferred.
.PP
Extends "DESCRIPTION" in Mail::Box::Locker.
.SH METHODS
.IX Header "METHODS"
Extends "METHODS" in Mail::Box::Locker.
.SS Constructors
.IX Subsection "Constructors"
Extends "Constructors" in Mail::Box::Locker.
.IP Mail::Box::Locker::Multi\->\fBnew\fR(%options) 4
.IX Item "Mail::Box::Locker::Multi->new(%options)"
You may also pass all \f(CW%options\fR understood by the initiated lockers
used by the multi locker.
.Sp
.Vb 9
\& \-Option \-\-Defined in       \-\-Default
\&  expires  Mail::Box::Locker  1 hour
\&  file     Mail::Box::Locker  undef
\&  folder   Mail::Box::Locker  <undef>
\&  log      Mail::Reporter     \*(AqWARNINGS\*(Aq
\&  method   Mail::Box::Locker  \*(AqMULTI\*(Aq
\&  timeout  Mail::Box::Locker  10
\&  trace    Mail::Reporter     \*(AqWARNINGS\*(Aq
\&  use                         <all possible>
.Ve
.RS 4
.IP "expires => SECONDS" 2
.IX Item "expires => SECONDS"
.PD 0
.IP "file => FILENAME" 2
.IX Item "file => FILENAME"
.IP "folder => FOLDER" 2
.IX Item "folder => FOLDER"
.IP "log => LEVEL" 2
.IX Item "log => LEVEL"
.IP "method => STRING|CLASS|ARRAY" 2
.IX Item "method => STRING|CLASS|ARRAY"
.IP "timeout => SECONDS|'NOTIMEOUT'" 2
.IX Item "timeout => SECONDS|'NOTIMEOUT'"
.IP "trace => LEVEL" 2
.IX Item "trace => LEVEL"
.IP "use => ARRAY\-of\-(NAMES|LOCKER)" 2
.IX Item "use => ARRAY-of-(NAMES|LOCKER)"
.PD
Array of locker type NAMES or LOCKER objects to be used to lock one
folder.  The type NAMES are converted into objects.  When you create your
own LOCKER objects, be sure to set the timeout very short (preferably
to 1).
.Sp
Some locking types are not available on some platforms, so they will
not be excluded from the default list (NFS POSIX Flock).
.RE
.RS 4
.Sp
example: using a subset of multi-lockers
.Sp
.Vb 1
\& my $locker = Mail::Box::Locker::Multi\->new(use => [\*(AqDOTLOCK\*(Aq,\*(AqFLOCK\*(Aq]);
.Ve
.RE
.SS Attributes
.IX Subsection "Attributes"
Extends "Attributes" in Mail::Box::Locker.
.ie n .IP "$obj\->\fBexpires\fR( [SECONDS] )" 4
.el .IP "\f(CW$obj\fR\->\fBexpires\fR( [SECONDS] )" 4
.IX Item "$obj->expires( [SECONDS] )"
Inherited, see "Attributes" in Mail::Box::Locker
.ie n .IP "$obj\->\fBtimeout\fR( [SECONDS] )" 4
.el .IP "\f(CW$obj\fR\->\fBtimeout\fR( [SECONDS] )" 4
.IX Item "$obj->timeout( [SECONDS] )"
Inherited, see "Attributes" in Mail::Box::Locker
.SS "The Locker"
.IX Subsection "The Locker"
Extends "The Locker" in Mail::Box::Locker.
.ie n .IP "$obj\->\fBfilename\fR( [$filename] )" 4
.el .IP "\f(CW$obj\fR\->\fBfilename\fR( [$filename] )" 4
.IX Item "$obj->filename( [$filename] )"
Inherited, see "The Locker" in Mail::Box::Locker
.ie n .IP "$obj\->\fBfolder\fR( [$folder] )" 4
.el .IP "\f(CW$obj\fR\->\fBfolder\fR( [$folder] )" 4
.IX Item "$obj->folder( [$folder] )"
Inherited, see "The Locker" in Mail::Box::Locker
.ie n .IP $obj\->\fBlockers\fR() 4
.el .IP \f(CW$obj\fR\->\fBlockers\fR() 4
.IX Item "$obj->lockers()"
Returns a list with all locker objects used by this object.
.ie n .IP $obj\->\fBname\fR() 4
.el .IP \f(CW$obj\fR\->\fBname\fR() 4
.IX Item "$obj->name()"
Inherited, see "The Locker" in Mail::Box::Locker
.SS Locking
.IX Subsection "Locking"
Extends "Locking" in Mail::Box::Locker.
.ie n .IP $obj\->\fBhasLock\fR() 4
.el .IP \f(CW$obj\fR\->\fBhasLock\fR() 4
.IX Item "$obj->hasLock()"
Inherited, see "Locking" in Mail::Box::Locker
.ie n .IP $obj\->\fBisLocked\fR() 4
.el .IP \f(CW$obj\fR\->\fBisLocked\fR() 4
.IX Item "$obj->isLocked()"
Inherited, see "Locking" in Mail::Box::Locker
.ie n .IP $obj\->\fBlock\fR($folder) 4
.el .IP \f(CW$obj\fR\->\fBlock\fR($folder) 4
.IX Item "$obj->lock($folder)"
Inherited, see "Locking" in Mail::Box::Locker
.ie n .IP $obj\->\fBunlock\fR() 4
.el .IP \f(CW$obj\fR\->\fBunlock\fR() 4
.IX Item "$obj->unlock()"
Inherited, see "Locking" in Mail::Box::Locker
.SS "Error handling"
.IX Subsection "Error handling"
Extends "Error handling" in Mail::Box::Locker.
.ie n .IP $obj\->\fBAUTOLOAD\fR() 4
.el .IP \f(CW$obj\fR\->\fBAUTOLOAD\fR() 4
.IX Item "$obj->AUTOLOAD()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBaddReport\fR($object) 4
.el .IP \f(CW$obj\fR\->\fBaddReport\fR($object) 4
.IX Item "$obj->addReport($object)"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "$obj->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD 0
.ie n .IP "Mail::Box::Locker::Multi\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "Mail::Box::Locker::Multi\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "Mail::Box::Locker::Multi->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBerrors\fR() 4
.el .IP \f(CW$obj\fR\->\fBerrors\fR() 4
.IX Item "$obj->errors()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR( [$level, [$strings]] )" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "$obj->log( [$level, [$strings]] )"
.PD 0
.IP "Mail::Box::Locker::Multi\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "Mail::Box::Locker::Multi->log( [$level, [$strings]] )"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBlogPriority\fR($level) 4
.el .IP \f(CW$obj\fR\->\fBlogPriority\fR($level) 4
.IX Item "$obj->logPriority($level)"
.PD 0
.IP Mail::Box::Locker::Multi\->\fBlogPriority\fR($level) 4
.IX Item "Mail::Box::Locker::Multi->logPriority($level)"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBlogSettings\fR() 4
.el .IP \f(CW$obj\fR\->\fBlogSettings\fR() 4
.IX Item "$obj->logSettings()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBnotImplemented\fR() 4
.el .IP \f(CW$obj\fR\->\fBnotImplemented\fR() 4
.IX Item "$obj->notImplemented()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR( [$level] )" 4
.IX Item "$obj->report( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR( [$level] )" 4
.IX Item "$obj->reportAll( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR( [$level] )" 4
.IX Item "$obj->trace( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBwarnings\fR() 4
.el .IP \f(CW$obj\fR\->\fBwarnings\fR() 4
.IX Item "$obj->warnings()"
Inherited, see "Error handling" in Mail::Reporter
.SS Cleanup
.IX Subsection "Cleanup"
Extends "Cleanup" in Mail::Box::Locker.
.ie n .IP $obj\->\fBDESTROY\fR() 4
.el .IP \f(CW$obj\fR\->\fBDESTROY\fR() 4
.IX Item "$obj->DESTROY()"
Inherited, see "Cleanup" in Mail::Box::Locker
.SH DIAGNOSTICS
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Package $package does not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR does not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package does not implement $method."
Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 3.010,
built on July 18, 2023. Website: \fIhttp://perl.overmeer.net/CPAN/\fR
.SH LICENSE
.IX Header "LICENSE"
Copyrights 2001\-2023 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://dev.perl.org/licenses/\fR
