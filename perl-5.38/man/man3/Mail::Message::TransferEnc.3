.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Message::TransferEnc 3"
.TH Mail::Message::TransferEnc 3 2023-12-11 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Mail::Message::TransferEnc \- message transfer encoder/decoder
.SH INHERITANCE
.IX Header "INHERITANCE"
.Vb 2
\& Mail::Message::TransferEnc
\&   is a Mail::Reporter
\&
\& Mail::Message::TransferEnc is extended by
\&   Mail::Message::TransferEnc::Base64
\&   Mail::Message::TransferEnc::Binary
\&   Mail::Message::TransferEnc::EightBit
\&   Mail::Message::TransferEnc::QuotedPrint
\&   Mail::Message::TransferEnc::SevenBit
.Ve
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 3
\& my Mail::Message $msg = ...;
\& my $decoded = $msg\->decoded;
\& my $encoded = $msg\->encode(transfer => \*(Aqbase64\*(Aq);
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This class is the base for various encoders and decoders, which are
used during transport of the message.  These packages, and all which are
derived, are invoked by the message's \fBMail::Message::decoded()\fR and
\&\fBMail::Message::encode()\fR methods:
.PP
.Vb 3
\& my $message = $folder\->message(3);
\& my $decoded_body = $message\->decoded;
\& my $encoded_body = $message\->encode(transfer => \*(Aqbase64\*(Aq);
.Ve
.PP
The following coders/decoders are currently available:
.IP \(bu 4
Mail::Message::TransferEnc::Base64
.Sp
\&\f(CW\*(C`base64\*(C'\fR for binary information.
.IP \(bu 4
Mail::Message::TransferEnc::SevenBit
.Sp
\&\f(CW\*(C`7bit\*(C'\fR for plain old ASCII characters only.
.IP \(bu 4
Mail::Message::TransferEnc::EightBit
.Sp
\&\f(CW\*(C`8bit\*(C'\fR for extended character set data, not encoded.
.IP \(bu 4
Mail::Message::TransferEnc::QuotedPrint
.Sp
\&\f(CW\*(C`quoted\-printable\*(C'\fR encdoded extended character set data.
.PP
Extends "DESCRIPTION" in Mail::Reporter.
.SH METHODS
.IX Header "METHODS"
Extends "METHODS" in Mail::Reporter.
.SS Constructors
.IX Subsection "Constructors"
Extends "Constructors" in Mail::Reporter.
.IP Mail::Message::TransferEnc\->\fBnew\fR(%options) 4
.IX Item "Mail::Message::TransferEnc->new(%options)"
Inherited, see "Constructors" in Mail::Reporter
.SS "The Encoder"
.IX Subsection "The Encoder"
.ie n .IP "Mail::Message::TransferEnc\->\fBaddTransferEncoder\fR($type, $class)" 4
.el .IP "Mail::Message::TransferEnc\->\fBaddTransferEncoder\fR($type, \f(CW$class\fR)" 4
.IX Item "Mail::Message::TransferEnc->addTransferEncoder($type, $class)"
Adds one new encoder to the list known by the Mail::Box suite.  The
\&\f(CW$type\fR is found in the message's header in the \f(CW\*(C`Content\-Transfer\-Encoding\*(C'\fR
field.
.ie n .IP "$obj\->\fBcreate\fR($type, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBcreate\fR($type, \f(CW%options\fR)" 4
.IX Item "$obj->create($type, %options)"
Create a new coder/decoder based on the required type.
.ie n .IP $obj\->\fBname\fR() 4
.el .IP \f(CW$obj\fR\->\fBname\fR() 4
.IX Item "$obj->name()"
The name of the encoder.  Case is not significant.
.SS Encoding
.IX Subsection "Encoding"
.ie n .IP "$obj\->\fBcheck\fR($body, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBcheck\fR($body, \f(CW%options\fR)" 4
.IX Item "$obj->check($body, %options)"
Check whether the body is correctly encoded.  If so, the body reference is
returned with the \f(CW\*(C`checked\*(C'\fR flag set.  Otherwise, a new object is created
and returned.
.Sp
.Vb 2
\& \-Option     \-\-Default
\&  result_type  <type of source body>
.Ve
.RS 4
.IP "result_type => CLASS" 2
.IX Item "result_type => CLASS"
The type of the body to be produced, when the checker decides to return
modified data.
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBdecode\fR($body, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBdecode\fR($body, \f(CW%options\fR)" 4
.IX Item "$obj->decode($body, %options)"
Use the encoder to decode the content of \f(CW$body\fR.  A new body is returned.
.Sp
.Vb 2
\& \-Option     \-\-Default
\&  result_type  <type of source body>
.Ve
.RS 4
.IP "result_type => CLASS" 2
.IX Item "result_type => CLASS"
The type of the body to be produced, when the decoder decides to return
modified data.
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBencode\fR($body, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBencode\fR($body, \f(CW%options\fR)" 4
.IX Item "$obj->encode($body, %options)"
Use the encoder to encode the content of \f(CW$body\fR.
.Sp
.Vb 2
\& \-Option     \-\-Default
\&  result_type  <type of source body>
.Ve
.RS 4
.IP "result_type => CLASS" 2
.IX Item "result_type => CLASS"
The type of the body to be produced, when the decoder decides to return
modified data.
.RE
.RS 4
.RE
.SS "Error handling"
.IX Subsection "Error handling"
Extends "Error handling" in Mail::Reporter.
.ie n .IP $obj\->\fBAUTOLOAD\fR() 4
.el .IP \f(CW$obj\fR\->\fBAUTOLOAD\fR() 4
.IX Item "$obj->AUTOLOAD()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBaddReport\fR($object) 4
.el .IP \f(CW$obj\fR\->\fBaddReport\fR($object) 4
.IX Item "$obj->addReport($object)"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "$obj->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD 0
.ie n .IP "Mail::Message::TransferEnc\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "Mail::Message::TransferEnc\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "Mail::Message::TransferEnc->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBerrors\fR() 4
.el .IP \f(CW$obj\fR\->\fBerrors\fR() 4
.IX Item "$obj->errors()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR( [$level, [$strings]] )" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "$obj->log( [$level, [$strings]] )"
.PD 0
.IP "Mail::Message::TransferEnc\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "Mail::Message::TransferEnc->log( [$level, [$strings]] )"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBlogPriority\fR($level) 4
.el .IP \f(CW$obj\fR\->\fBlogPriority\fR($level) 4
.IX Item "$obj->logPriority($level)"
.PD 0
.IP Mail::Message::TransferEnc\->\fBlogPriority\fR($level) 4
.IX Item "Mail::Message::TransferEnc->logPriority($level)"
.PD
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBlogSettings\fR() 4
.el .IP \f(CW$obj\fR\->\fBlogSettings\fR() 4
.IX Item "$obj->logSettings()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBnotImplemented\fR() 4
.el .IP \f(CW$obj\fR\->\fBnotImplemented\fR() 4
.IX Item "$obj->notImplemented()"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR( [$level] )" 4
.IX Item "$obj->report( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR( [$level] )" 4
.IX Item "$obj->reportAll( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR( [$level] )" 4
.IX Item "$obj->trace( [$level] )"
Inherited, see "Error handling" in Mail::Reporter
.ie n .IP $obj\->\fBwarnings\fR() 4
.el .IP \f(CW$obj\fR\->\fBwarnings\fR() 4
.IX Item "$obj->warnings()"
Inherited, see "Error handling" in Mail::Reporter
.SS Cleanup
.IX Subsection "Cleanup"
Extends "Cleanup" in Mail::Reporter.
.ie n .IP $obj\->\fBDESTROY\fR() 4
.el .IP \f(CW$obj\fR\->\fBDESTROY\fR() 4
.IX Item "$obj->DESTROY()"
Inherited, see "Cleanup" in Mail::Reporter
.SH DIAGNOSTICS
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Decoder for transfer encoding $type does not work: $@" 4
.el .IP "Error: Decoder for transfer encoding \f(CW$type\fR does not work: $@" 4
.IX Item "Error: Decoder for transfer encoding $type does not work: $@"
Compiling the required transfer encoding resulted in errors, which means
that the decoder can not be used.
.ie n .IP "Warning: No decoder for transfer encoding $type." 4
.el .IP "Warning: No decoder for transfer encoding \f(CW$type\fR." 4
.IX Item "Warning: No decoder for transfer encoding $type."
A decoder for the specified type of transfer encoding is not implemented.
.ie n .IP "Error: Package $package does not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR does not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package does not implement $method."
Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Message distribution version 3.015,
built on December 11, 2023. Website: \fIhttp://perl.overmeer.net/CPAN/\fR
.SH LICENSE
.IX Header "LICENSE"
Copyrights 2001\-2023 by [Mark Overmeer <markov@cpan.org>]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://dev.perl.org/licenses/\fR
