.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::SSH::Perl::Mac 3"
.TH Net::SSH::Perl::Mac 3 2023-08-07 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
Net::SSH::Perl::Mac \- MAC support for SSH2
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 3
\&    use Net::SSH::Perl::Mac;
\&    my $mac = Net::SSH::Perl::Mac\->new(\*(Aqhmac\-sha1\*(Aq, $key);
\&    $mac\->hmac("foo bar");
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
\&\fINet::SSH::Perl::Mac\fR (and its subclasses) provides MAC support
for the SSH2 implementation in \fINet::SSH::Perl\fR. In the SSH2
protocol, each packet sent between client and server (after the
key exchange and algorithm negotiation phase) contains a MAC
to protect its integrity. The sending party computes the MAC over
the length, padding, and (encrypted) payload fields of the packet,
then appends the MAC; and the receiving party recomputes the MAC
against the data that it receives.
.PP
The MAC is computed using part of the key that is negotiated
during the key exchange phase. During negotiation, packets do
not contain MAC; after the \fISSH_MSG_NEWKEYS\fR message is sent,
each side turns on its respective encryption, MAC, and compression
code, for each packet that is sent after that point.
.PP
\&\fINet::SSH::Perl\fR supports two MAC algorithms: \fIhmac\-sha1\fR and
\&\fIhmac\-md5\fR. These algorithms are implemented, respectively,
by \fIDigest::HMAC_SHA1\fR and \fIDigest::HMAC_MD5\fR.
.SH USAGE
.IX Header "USAGE"
Each MAC object supports the following methods:
.ie n .SS "$mac = Net::SSH::Perl::Mac\->new( $name )"
.el .SS "\f(CW$mac\fP = Net::SSH::Perl::Mac\->new( \f(CW$name\fP )"
.IX Subsection "$mac = Net::SSH::Perl::Mac->new( $name )"
Constructs a new MAC object and returns that object.
.ie n .SS "$mac\->init( $key )"
.el .SS "\f(CW$mac\fP\->init( \f(CW$key\fP )"
.IX Subsection "$mac->init( $key )"
Initializes \fR\f(CI$mac\fR\fI\fR and sets its key to \fI\fR\f(CI$key\fR\fI\fR (or rather,
to a substring of key, \fIkey_len\fR bytes long). As this implies,
the \fIkey_len\fR method should be called before \fIinit\fR to set
the intended length of the key.
.ie n .SS "$mac\->hmac( $data )"
.el .SS "\f(CW$mac\fP\->hmac( \f(CW$data\fP )"
.IX Subsection "$mac->hmac( $data )"
Computes the MAC over \fR\f(CI$data\fR\fI\fR, using the key set in the
initialization phase, and returns the MAC.
.ie n .SS $mac\->len
.el .SS \f(CW$mac\fP\->len
.IX Subsection "$mac->len"
Returns the length of the MAC (eg. \f(CW20\fR for HMAC_SHA1).
.ie n .SS "$mac\->key_len( $len )"
.el .SS "\f(CW$mac\fP\->key_len( \f(CW$len\fP )"
.IX Subsection "$mac->key_len( $len )"
Given \fR\f(CI$len\fR\fI\fR sets the key length of \fI\fR\f(CI$mac\fR\fI\fR to \fI\fR\f(CI$len\fR\fI\fR.
This should be called \fIbefore\fR the \fIinit\fR method, because
\&\fIinit\fR uses this value to take a substring of the provided
key value.
.PP
Most of the time this should just be set to the MAC length
(the \fIlen\fR method); certain SSH implementations have a bug,
however, wherein they always use only the first 16 bytes of
the provided key.
.ie n .SS $mac\->enable
.el .SS \f(CW$mac\fP\->enable
.IX Subsection "$mac->enable"
Enables the MAC object. This is used by \fINet::SSH::Perl::Kex\fR
to "turn on" the MAC after key negotiation.
.ie n .SS $mac\->enabled
.el .SS \f(CW$mac\fP\->enabled
.IX Subsection "$mac->enabled"
Tests the \fIenabled\fR flag (set with the \fIenable\fR method).
This is used by \fINet::SSH::Perl::Packet\fR to determine whether
or not to compute a MAC on an outgoing packet.
.SH "AUTHOR & COPYRIGHTS"
.IX Header "AUTHOR & COPYRIGHTS"
Please see the Net::SSH::Perl manpage for author, copyright,
and license information.
.PP
hmac\-sha2\-256 and hmac\-sha2\-512 support added by:
Lance Kinley E<lkinley@loyaltymethods.com>
.PP
Copyright (c) 2015 Loyalty Methods, Inc.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 180:" 4
.IX Item "Around line 180:"
Unknown E content in E<lkinley@loyaltymethods.com>
