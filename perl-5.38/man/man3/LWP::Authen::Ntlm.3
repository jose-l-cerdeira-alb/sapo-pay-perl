.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "LWP::Authen::Ntlm 3"
.TH LWP::Authen::Ntlm 3 2024-01-13 "perl v5.38.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
LWP::Authen::Ntlm \- Library for enabling NTLM authentication (Microsoft) in LWP
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 3
\& use LWP::UserAgent;
\& use HTTP::Request::Common;
\& my $url = \*(Aqhttp://www.company.com/protected_page.html\*(Aq;
\&
\& # Set up the ntlm client and then the base64 encoded ntlm handshake message
\& my $ua = LWP::UserAgent\->new(keep_alive=>1);
\& $ua\->credentials(\*(Aqwww.company.com:80\*(Aq, \*(Aq\*(Aq, "MyDomain\e\eMyUserCode", \*(AqMyPassword\*(Aq);
\&
\& $request = GET $url;
\& print "\-\-Performing request now...\-\-\-\-\-\-\-\-\-\-\-\en";
\& $response = $ua\->request($request);
\& print "\-\-Done with request\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\en";
\&
\& if ($response\->is_success) {print "It worked!\->" . $response\->code . "\en"}
\& else {print "It didn\*(Aqt work!\->" . $response\->code . "\en"}
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
LWP::Authen::Ntlm allows LWP to authenticate against servers that are using the
NTLM authentication scheme popularized by Microsoft.  This type of authentication is
common on intranets of Microsoft-centric organizations.
.PP
The module takes advantage of the Authen::NTLM module by Mark Bush.  Since there
is also another Authen::NTLM module available from CPAN by Yee Man Chan with an
entirely different interface, it is necessary to ensure that you have the correct
NTLM module.
.PP
In addition, there have been problems with incompatibilities between different
versions of Mime::Base64, which Bush's Authen::NTLM makes use of.  Therefore, it is
necessary to ensure that your Mime::Base64 module supports exporting of the
\&\f(CW\*(C`encode_base64\*(C'\fR and \f(CW\*(C`decode_base64\*(C'\fR functions.
.SH USAGE
.IX Header "USAGE"
The module is used indirectly through LWP, rather than including it directly in your
code.  The LWP system will invoke the NTLM authentication when it encounters the
authentication scheme while attempting to retrieve a URL from a server.  In order
for the NTLM authentication to work, you must have a few things set up in your
code prior to attempting to retrieve the URL:
.IP \(bu 4
Enable persistent HTTP connections
.Sp
To do this, pass the \f(CW"keep_alive=>1"\fR option to the LWP::UserAgent when creating it, like this:
.Sp
.Vb 1
\&    my $ua = LWP::UserAgent\->new(keep_alive=>1);
.Ve
.IP \(bu 4
Set the credentials on the UserAgent object
.Sp
The credentials must be set like this:
.Sp
.Vb 1
\&   $ua\->credentials(\*(Aqwww.company.com:80\*(Aq, \*(Aq\*(Aq, "MyDomain\e\eMyUserCode", \*(AqMyPassword\*(Aq);
.Ve
.Sp
Note that you cannot use the HTTP::Request object's \f(CWauthorization_basic()\fR method to set
the credentials.  Note, too, that the \f(CW\*(Aqwww.company.com:80\*(Aq\fR portion only sets credentials
on the specified port AND it is case-sensitive (this is due to the way LWP is coded, and
has nothing to do with LWP::Authen::Ntlm)
.SH AVAILABILITY
.IX Header "AVAILABILITY"
General queries regarding LWP should be made to the LWP Mailing List.
.PP
Questions specific to LWP::Authen::Ntlm can be forwarded to jtillman@bigfoot.com
.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright (c) 2002 James Tillman. All rights reserved. This
program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
LWP, LWP::UserAgent, lwpcook.
