.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LUHN 3"
.TH LUHN 3 "2002-03-25" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Algorithm::LUHN \- Calculate the Modulus 10 Double Add Double checksum
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Algorithm::LUHN qw/check_digit is_valid/;
\&
\&  $c = check_digit("43881234567");
\&  print "It works\en" if is_valid("43881234567$c");
\&
\&  $c = check_digit("A2C4E6G8"); # this will cause an error
\&
\&  print "Valid LUHN characters are:\en";
\&  my %vc = Algorithm::LUHN::valid_chars();
\&  for (sort keys %vc) {
\&    print "$_ => $vc{$_}\en";
\&  }
\&
\&  Algorithm::LUHN::valid_chars(map {$_ => ord($_)\-ord(\*(AqA\*(Aq)+10} A..Z);
\&  $c = check_digit("A2C4E6G8");
\&  print "It worked again\en" if is_valid("A2C4E6G8$c");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module calculates the Modulus 10 Double Add Double checksum, also known as
the \s-1LUHN\s0 Formula. This algorithm is used to verify credit card numbers and
Standard & Poor's security identifiers such as \s-1CUSIP\s0's and \s-1CSIN\s0's.
.PP
You can find plenty of information about the algorithm by searching the web for
\&\*(L"modulus 10 double add double\*(R".
.SH "FUNCTION"
.IX Header "FUNCTION"
.IP "is_valid \s-1CHECKSUMMED_NUM\s0" 4
.IX Item "is_valid CHECKSUMMED_NUM"
This function returns true if the final character of \s-1CHECKSUMMED_NUM\s0 is the
correct checksum for the rest of the number and false if not. Obviously the
final character does not factor into the checksum calculation. False will also
be returned if \s-1NUM\s0 contains in an invalid character as defined by
\&\fIvalid_chars()\fR. If \s-1NUM\s0 is not valid, \f(CW$Algorithm::LUHN::ERROR\fR will contain the
reason.
.Sp
This function is equivalent to
.Sp
.Vb 1
\&  substr $N,length($N)\-1 eq check_digit(substr $N,0,length($N)\-1)
.Ve
.IP "check_digit \s-1NUM\s0" 4
.IX Item "check_digit NUM"
This function returns the checksum of the given number. If it cannot calculate
the check_digit it will return undef and set \f(CW$Algorithm::LUHN::ERROR\fR to contain
the reason why.
.IP "valid_chars \s-1LIST\s0" 4
.IX Item "valid_chars LIST"
By default this module only recognizes 0..9 as valid characters, but sometimes
you want to consider other characters as valid, e.g. Standard & Poor's
identifers may contain 0..9, A..Z, @, #, *. This function allows you to add
additional characters to the accepted list.
.Sp
\&\s-1LIST\s0 is a mapping of c<character> => c<value>. For example, Standard & Poor's
maps A..Z to 10..35 so the \s-1LIST\s0 to add these valid characters would be (A, 10,
B, 11, C, 12, ...)
.Sp
Please note that this \fIadds\fR or \fIre-maps\fR characters, so any characters
already considered valid but not in \s-1LIST\s0 will remain valid.
.Sp
If you do not provide \s-1LIST\s0, this function returns the current valid character
map.
.SH "AUTHOR"
.IX Header "AUTHOR"
This module was written by
Tim Ayers (http://search.cpan.org/search?author=TAYERS).
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2001 Tim Ayers. All rights reserved.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.
