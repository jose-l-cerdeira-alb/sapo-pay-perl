.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "File::LibMagic 3"
.TH File::LibMagic 3 "2013-09-02" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
File::LibMagic \- Determine MIME types of data or files using libmagic
.SH "VERSION"
.IX Header "VERSION"
version 1.00
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use File::LibMagic;
\&
\&  my $magic = File::LibMagic\->new();
\&
\&  # prints a description like "ASCII text"
\&  print $magic\->describe_filename(\*(Aqpath/to/file\*(Aq);
\&  print $magic\->describe_contents(\*(Aqthis is some data\*(Aq);
\&
\&  # Prints a MIME type like "text/plain; charset=us\-ascii"
\&  print $magic\->checktype_filename(\*(Aqpath/to/file\*(Aq);
\&  print $magic\->checktype_contents(\*(Aqthis is some data\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`File::LibMagic\*(C'\fR is a simple perl interface to libmagic from
the file package (version 4.x or 5.x).
.SH "API"
.IX Header "API"
This module provides an object-oriented \s-1API\s0 with the following methods:
.SS "File::LibMagic\->\fInew()\fP"
.IX Subsection "File::LibMagic->new()"
Creates a new File::LibMagic object.
.PP
Using the object oriented interface provides an efficient way to repeatedly
determine the magic of a file.
.PP
Each File::LibMagic object loads the magic database independently of other
File::LibMagic objects, so you may want to share a single object across many
modules as a singleton.
.PP
This method takes an optional argument containing a path to the magic file. If
the file doesn't exist this will throw an exception (but only with libmagic
4.17+).
.PP
If you don't pass an argument, it will throw an exception if it can't find any
magic files at all.
.ie n .SS "$magic\->checktype_contents($data)"
.el .SS "\f(CW$magic\fP\->checktype_contents($data)"
.IX Subsection "$magic->checktype_contents($data)"
Returns the \s-1MIME\s0 type of the data given as the first argument. The data can be
passed as a plain scalar or as a reference to a scalar.
.PP
This is the same value as would be returned by the \f(CW\*(C`file\*(C'\fR command with the
\&\f(CW\*(C`\-i\*(C'\fR switch.
.ie n .SS "$magic\->checktype_filename($filename)"
.el .SS "\f(CW$magic\fP\->checktype_filename($filename)"
.IX Subsection "$magic->checktype_filename($filename)"
Returns the \s-1MIME\s0 type of the given file.
.PP
This is the same value as would be returned by the \f(CW\*(C`file\*(C'\fR command with the
\&\f(CW\*(C`\-i\*(C'\fR switch.
.ie n .SS "$magic\->describe_contents($data)"
.el .SS "\f(CW$magic\fP\->describe_contents($data)"
.IX Subsection "$magic->describe_contents($data)"
Returns a description (as a string) of the data given as the first argument.
The data can be passed as a plain scalar or as a reference to a scalar.
.PP
This is the same value as would be returned by the \f(CW\*(C`file\*(C'\fR command with no
switches.
.ie n .SS "$magic\->describe_filename($filename)"
.el .SS "\f(CW$magic\fP\->describe_filename($filename)"
.IX Subsection "$magic->describe_filename($filename)"
Returns a description (as a string) of the given file.
.PP
This is the same value as would be returned by the \f(CW\*(C`file\*(C'\fR command with no
switches.
.SH "DEPRECATED APIS"
.IX Header "DEPRECATED APIS"
This module offers two different procedural \s-1APIS\s0 based on optional exports,
the \*(L"easy\*(R" and \*(L"complete\*(R" interfaces. These \s-1APIS\s0 are now deprecated. I
strongly recommend you use the \s-1OO\s0 interface. It's simpler than the complete
interface and more efficient than the easy interface.
.ie n .SS "The ""easy"" interface"
.el .SS "The ``easy'' interface"
.IX Subsection "The easy interface"
This interface is exported by:
.PP
.Vb 1
\&  use File::LibMagic \*(Aq:easy\*(Aq;
.Ve
.PP
This interface exports two subroutines:
.IP "\(bu" 4
MagicBuffer($data)
.Sp
Returns the description of a chunk of data, just like the \f(CW\*(C`describe_contents\*(C'\fR
method.
.IP "\(bu" 4
MagicFile($filename)
.Sp
Returns the description of a file, just like the \f(CW\*(C`describe_filename\*(C'\fR method.
.ie n .SS "The ""complete"" interface"
.el .SS "The ``complete'' interface"
.IX Subsection "The complete interface"
This interface is exported by:
.PP
.Vb 1
\&  use File::LibMagic \*(Aq:easy\*(Aq;
.Ve
.PP
This interface exports several subroutines:
.IP "\(bu" 4
magic_open($flags)
.Sp
This subroutine opens creates a magic handle. See the libmagic man page for a
description of all the flags. These are exported by the \f(CW\*(C`:complete\*(C'\fR import.
.Sp
.Vb 1
\&  my $handle = magic_open(MAGIC_MIME);
.Ve
.IP "\(bu" 4
magic_load($handle, \f(CW$filename\fR)
.Sp
This subroutine actually loads the magic file. The \f(CW$filename\fR argument is
optional. There should be a sane default compiled into your \f(CW\*(C`libmagic\*(C'\fR
library.
.IP "\(bu" 4
magic_buffer($handle, \f(CW$data\fR)
.Sp
This returns information about a chunk of data as a string. What it returns
depends on the flags you passed to \f(CW\*(C`magic_open\*(C'\fR, a description, a \s-1MIME\s0 type,
etc.
.IP "\(bu" 4
magic_file($handle, \f(CW$filename\fR)
.Sp
This returns information about a file as a string. What it returns depends on
the flags you passed to \f(CW\*(C`magic_open\*(C'\fR, a description, a \s-1MIME\s0 type, etc.
.IP "\(bu" 4
magic_close($handle)
.Sp
Closes the magic handle.
.SH "EXCEPTIONS"
.IX Header "EXCEPTIONS"
This module can throw an exception if you system runs out of memory when
trying to call \f(CW\*(C`magic_open\*(C'\fR internally.
.SH "SUPPORT"
.IX Header "SUPPORT"
Please submit bugs to the \s-1CPAN\s0 \s-1RT\s0 system at
http://rt.cpan.org/NoAuth/Bugs.html?Dist=File\-LibMagic or via email at
bug\-file\-libmagic@rt.cpan.org.
.SH "BUGS"
.IX Header "BUGS"
This module is totally dependent on the version of file on your system. It's
possible that the tests will fail because of this. Please report these
failures so I can make the tests smarter. Please make sure to report the
version of file on your system as well!
.SH "DEPENDENCIES/PREREQUISITES"
.IX Header "DEPENDENCIES/PREREQUISITES"
This module requires file 4.x or file 5x and the associated libmagic library
and headers (http://darwinsys.com/file/).
.SH "RELATED MODULES"
.IX Header "RELATED MODULES"
Andreas created File::LibMagic because he wanted to use libmagic (from
file 4.x) File::MMagic only worked with file 3.x.
.PP
File::MimeInfo::Magic uses the magic file from freedesktop.org which is
encoded in \s-1XML\s0, and is thus not the fastest approach. See
<http://mail.gnome.org/archives/nautilus\-list/2003\-December/msg00260.html>
for a discussion of this issue.
.PP
File::Type uses a relatively small magic file, which is directly hacked into
the module code. It is quite fast but the database is quite small relative to
the file package.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Andreas Fitzner
.IP "\(bu" 4
Michael Hendricks <michael@ndrix.org>
.IP "\(bu" 4
Dave Rolsky <autarch@urth.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2013 by Andreas Fitzner, Michael Hendricks, and Dave Rolsky.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
