.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Transport::Send 3"
.TH Mail::Transport::Send 3 "2014-08-24" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Transport::Send \- send a message
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 3
\& Mail::Transport::Send
\&   is a Mail::Transport
\&   is a Mail::Reporter
\&
\& Mail::Transport::Send is extended by
\&   Mail::Transport::Exim
\&   Mail::Transport::Mailx
\&   Mail::Transport::Qmail
\&   Mail::Transport::SMTP
\&   Mail::Transport::Sendmail
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& my $message = Mail::Message\->new(...);
\&
\& # Some extensions implement sending:
\& $message\->send;
\& $message\->send(via => \*(Aqsendmail\*(Aq);
\&
\& my $sender = Mail::Transport::SMTP\->new(...);
\& $sender\->send($message);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Send a message to the destinations as specified in the header.  The
\&\f(CW\*(C`Mail::Transport::Send\*(C'\fR module is capable of autodetecting which of the
following modules work on your system; you may simply call \f(CW\*(C`send\*(C'\fR
without \f(CW\*(C`via\*(C'\fR options to get a message transported.
.IP "\(bu" 4
Mail::Transport::Sendmail
.Sp
Use sendmail to process and deliver the mail.  This requires the
\&\f(CW\*(C`sendmail\*(C'\fR program to be installed on your system.  Whether this
is an original sendmail, or a replacement from Postfix does matter.
.IP "\(bu" 4
Mail::Transport::Exim
.Sp
Use \f(CW\*(C`exim\*(C'\fR to distribute the message.
.IP "\(bu" 4
Mail::Transport::Qmail
.Sp
Use \f(CW\*(C`qmail\-inject\*(C'\fR to distribute the message.
.IP "\(bu" 4
Mail::Transport::SMTP
.Sp
In this case, Perl is handling mail transport on its own.  This is
less desired but more portable than sending with sendmail or qmail.
The advantage is that this sender is environment independent, and easier
to configure.  However, there is no daemon involved which means that
your program will wait until the message is delivered, and the message
is lost when your program is interrupted during delivery (which may take
hours to complete).
.IP "\(bu" 4
Mail::Transport::Mailx
.Sp
Use the external \f(CW\*(C`mail\*(C'\fR, \f(CW\*(C`mailx\*(C'\fR, or \f(CW\*(C`Mail\*(C'\fR programs to send the
message.  Usually, the result is poor, because some versions of these
programs do not support \s-1MIME\s0 headers.  Besides, these programs are
known to have exploitable security breaches.
.PP
Extends \*(L"\s-1DESCRIPTION\s0\*(R" in Mail::Transport.
.SH "METHODS"
.IX Header "METHODS"
Extends \*(L"\s-1METHODS\s0\*(R" in Mail::Transport.
.SS "Constructors"
.IX Subsection "Constructors"
Extends \*(L"Constructors\*(R" in Mail::Transport.
.IP "Mail::Transport::Send\->\fBnew\fR(%options)" 4
.IX Item "Mail::Transport::Send->new(%options)"
.Vb 10
\& \-Option    \-\-Defined in     \-\-Default
\&  executable  Mail::Transport  undef
\&  hostname    Mail::Transport  \*(Aqlocalhost\*(Aq
\&  interval    Mail::Transport  30
\&  log         Mail::Reporter   \*(AqWARNINGS\*(Aq
\&  password    Mail::Transport  undef
\&  port        Mail::Transport  undef
\&  proxy       Mail::Transport  undef
\&  retry       Mail::Transport  <false>
\&  timeout     Mail::Transport  120
\&  trace       Mail::Reporter   \*(AqWARNINGS\*(Aq
\&  username    Mail::Transport  undef
\&  via         Mail::Transport  \*(Aqsendmail\*(Aq
.Ve
.RS 4
.IP "executable => \s-1FILENAME\s0" 2
.IX Item "executable => FILENAME"
.PD 0
.IP "hostname => HOSTNAME|ARRAY" 2
.IX Item "hostname => HOSTNAME|ARRAY"
.IP "interval => \s-1SECONDS\s0" 2
.IX Item "interval => SECONDS"
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
.IP "password => \s-1STRING\s0" 2
.IX Item "password => STRING"
.IP "port => \s-1INTEGER\s0" 2
.IX Item "port => INTEGER"
.IP "proxy => \s-1PATH\s0" 2
.IX Item "proxy => PATH"
.IP "retry => NUMBER|undef" 2
.IX Item "retry => NUMBER|undef"
.IP "timeout => \s-1SECONDS\s0" 2
.IX Item "timeout => SECONDS"
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
.IP "username => \s-1STRING\s0" 2
.IX Item "username => STRING"
.IP "via => CLASS|NAME" 2
.IX Item "via => CLASS|NAME"
.RE
.RS 4
.RE
.PD
.SS "Sending mail"
.IX Subsection "Sending mail"
.ie n .IP "$obj\->\fBdestinations\fR( $message, [$address|ARRAY] )" 4
.el .IP "\f(CW$obj\fR\->\fBdestinations\fR( \f(CW$message\fR, [$address|ARRAY] )" 4
.IX Item "$obj->destinations( $message, [$address|ARRAY] )"
Determine the destination for this message.  If a valid \f(CW$address\fR is defined,
this is used to overrule the addresses within the message.  If the \f(CW$address\fR
is \f(CW\*(C`undef\*(C'\fR it is ignored.  It may also be an \s-1ARRAY\s0 of addresses.
.Sp
If no \f(CW$address\fR is specified, the message is scanned for resent groups
(see \fIMail::Message::Head::Complete::resentGroups()\fR).  The addresses
found in the first (is latest added) group are used.  If no resent groups
are found, the normal \f(CW\*(C`To\*(C'\fR, \f(CW\*(C`Cc\*(C'\fR, and \f(CW\*(C`Bcc\*(C'\fR lines are taken.
.ie n .IP "$obj\->\fBputContent\fR($message, $fh, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBputContent\fR($message, \f(CW$fh\fR, \f(CW%options\fR)" 4
.IX Item "$obj->putContent($message, $fh, %options)"
Print the content of the \f(CW$message\fR to the \f(CW$fh\fR.
.Sp
.Vb 3
\& \-Option     \-\-Default
\&  body_only    <false>
\&  undisclosed  <false>
.Ve
.RS 4
.IP "body_only => \s-1BOOLEAN\s0" 2
.IX Item "body_only => BOOLEAN"
Print only the body of the message, not the whole.
.IP "undisclosed => \s-1BOOLEAN\s0" 2
.IX Item "undisclosed => BOOLEAN"
Do not print the \f(CW\*(C`Bcc\*(C'\fR and \f(CW\*(C`Resent\-Bcc\*(C'\fR lines.  Default false, which
means that they are not printed.
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBsend\fR($message, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBsend\fR($message, \f(CW%options\fR)" 4
.IX Item "$obj->send($message, %options)"
Transmit the \f(CW$message\fR, which may be anything what can be coerced into a
Mail::Message, so including Mail::Internet and MIME::Entity
messages.  It returns true when the transmission was successfully completed.
.Sp
.Vb 4
\& \-Option  \-\-Default
\&  interval  new(interval)
\&  retry     new(retry)
\&  to        undef
.Ve
.RS 4
.IP "interval => \s-1SECONDS\s0" 2
.IX Item "interval => SECONDS"
.PD 0
.IP "retry => \s-1INTEGER\s0" 2
.IX Item "retry => INTEGER"
.IP "to => \s-1STRING\s0" 2
.IX Item "to => STRING"
.PD
Overrules the destination(s) of the message, which is by default taken
from the (Resent\-)To, (Resent\-)Cc, and (Resent\-)Bcc.
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBtrySend\fR($message, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBtrySend\fR($message, \f(CW%options\fR)" 4
.IX Item "$obj->trySend($message, %options)"
Try to send the message. This will return true if successful, and
false in case some problems where detected.  The \f(CW$?\fR contains
the exit status of the command which was started.
.SS "Server connection"
.IX Subsection "Server connection"
Extends \*(L"Server connection\*(R" in Mail::Transport.
.ie n .IP "$obj\->\fBfindBinary\fR( $name, [@directories] )" 4
.el .IP "\f(CW$obj\fR\->\fBfindBinary\fR( \f(CW$name\fR, [@directories] )" 4
.IX Item "$obj->findBinary( $name, [@directories] )"
Inherited, see \*(L"Server connection\*(R" in Mail::Transport
.ie n .IP "$obj\->\fBremoteHost\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBremoteHost\fR()" 4
.IX Item "$obj->remoteHost()"
Inherited, see \*(L"Server connection\*(R" in Mail::Transport
.ie n .IP "$obj\->\fBretry\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBretry\fR()" 4
.IX Item "$obj->retry()"
Inherited, see \*(L"Server connection\*(R" in Mail::Transport
.SS "Error handling"
.IX Subsection "Error handling"
Extends \*(L"Error handling\*(R" in Mail::Transport.
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR($object)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR($object)" 4
.IX Item "$obj->addReport($object)"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "$obj->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD 0
.ie n .IP "Mail::Transport::Send\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "Mail::Transport::Send\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "Mail::Transport::Send->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR( [$level, [$strings]] )" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "$obj->log( [$level, [$strings]] )"
.PD 0
.IP "Mail::Transport::Send\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "Mail::Transport::Send->log( [$level, [$strings]] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR($level)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR($level)" 4
.IX Item "$obj->logPriority($level)"
.PD 0
.IP "Mail::Transport::Send\->\fBlogPriority\fR($level)" 4
.IX Item "Mail::Transport::Send->logPriority($level)"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR( [$level] )" 4
.IX Item "$obj->report( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR( [$level] )" 4
.IX Item "$obj->reportAll( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR( [$level] )" 4
.IX Item "$obj->trace( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
Extends \*(L"Cleanup\*(R" in Mail::Transport.
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
Inherited, see \*(L"Cleanup\*(R" in Mail::Reporter
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.IP "Warning: Message has no destination" 4
.IX Item "Warning: Message has no destination"
It was not possible to figure-out where the message is intended to go
to.
.ie n .IP "Error: Package $package does not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR does not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package does not implement $method."
Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.
.IP "Warning: Resent group does not specify a destination" 4
.IX Item "Warning: Resent group does not specify a destination"
The message which is sent is the result of a bounce (for instance
created with \fIMail::Message::bounce()\fR), and therefore starts with a
\&\f(CW\*(C`Received\*(C'\fR header field.  With the \f(CW\*(C`bounce\*(C'\fR, the new destination(s)
of the message are given, which should be included as \f(CW\*(C`Resent\-To\*(C'\fR,
\&\f(CW\*(C`Resent\-Cc\*(C'\fR, and \f(CW\*(C`Resent\-Bcc\*(C'\fR.
.Sp
The \f(CW\*(C`To\*(C'\fR, \f(CW\*(C`Cc\*(C'\fR, and \f(CW\*(C`Bcc\*(C'\fR header information is only used if no
\&\f(CW\*(C`Received\*(C'\fR was found.  That seems to be the best explanation of the \s-1RFC\s0.
.Sp
As alternative, you may also specify the \f(CW\*(C`to\*(C'\fR option to some of the senders
(for instance Mail::Transport::SMTP::send(to) to overrule any information
found in the message itself about the destination.
.ie n .IP "Error: Transporters of type $class cannot send." 4
.el .IP "Error: Transporters of type \f(CW$class\fR cannot send." 4
.IX Item "Error: Transporters of type $class cannot send."
The Mail::Transport object of the specified type can not send messages,
but only receive message.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.117,
built on August 24, 2014. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2014 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
