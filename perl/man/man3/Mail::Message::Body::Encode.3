.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Message::Body::Encode 3"
.TH Mail::Message::Body::Encode 3 "2014-08-24" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Message::Body::Encode \- organize general message encodings
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\& my Mail::Message $msg = ...;
\& my $decoded = $msg\->decoded;
\& my $encoded = $msg\->encode(mime_type => \*(Aqimage/gif\*(Aq,
\&     transfer_encoding => \*(Aqbase64\*(Aq);
\&
\& my $body = $msg\->body;
\& my $decoded = $body\->decoded;
\& my $encoded = $body\->encode(transfer_encoding => \*(Aq7bit\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Manages the message's body encodings and decodings on request of the
main program.  This package adds functionality to the Mail::Message::Body
class when the \fIdecoded()\fR or \fIencode()\fR method is called.
.PP
Four types of encodings are handled (in the right order)
.IP "\(bu" 4
eol encoding
.Sp
Various operating systems have different ideas about how to encode the
line termination.  \s-1UNIX\s0 uses a \s-1LF\s0 character, MacOS uses a \s-1CR\s0, and
Windows uses a \s-1CR/LF\s0 combination.  Messages which are transported over
Internet will always use the \s-1CRLF\s0 separator.
.IP "\(bu" 4
transfer encoding
.Sp
Messages transmitted over Internet have to be plain \s-1ASCII\s0.  Complicated
characters and binary files (like images and archives) must be encoded
during transmission to an \s-1ASCII\s0 representation.
.Sp
The implementation of the required encoders and decoders is found in
the Mail::Message::TransferEnc set of packages.  The related
manual page lists the transfer encodings which are supported.
.IP "\(bu" 4
mime-type translation
.Sp
\&\s-1NOT\s0 \s-1IMPLEMENTED\s0 \s-1YET\s0
.IP "\(bu" 4
charset conversion
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructing a body"
.IX Subsection "Constructing a body"
.ie n .IP "$obj\->\fBcheck\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBcheck\fR()" 4
.IX Item "$obj->check()"
Check the content of the body not to include illegal characters.  Which
characters are considered illegal depends on the encoding of this body.
.Sp
A body is returned which is checked.  This may be the body where this
method is called upon, but also a new object, when serious changes had
to be made.  If the check could not be made, because the decoder is not
defined, then \f(CW\*(C`undef\*(C'\fR is returned.
.ie n .IP "$obj\->\fBencode\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBencode\fR(%options)" 4
.IX Item "$obj->encode(%options)"
Encode (translate) a Mail::Message::Body into a different format.
See the \s-1DESCRIPTION\s0 above.  Options which are not specified will not trigger
conversions.
.Sp
.Vb 5
\& \-Option           \-\-Default
\&  charset            PERL if text
\&  mime_type          undef
\&  result_type        <same as source>
\&  transfer_encoding  undef
.Ve
.RS 4
.IP "charset => CODESET|'\s-1PERL\s0'" 2
.IX Item "charset => CODESET|'PERL'"
If the \s-1CODESET\s0 is explicitly specified (for instance \f(CW\*(C`iso\-8859\-10\*(C'\fR, then
the data is interpreted as raw bytes (blob), not as text.  However, in
case of \f(CW\*(C`PERL\*(C'\fR, it is considered to be an internal representation of
characters (either latin1 or Perl's utf8 \-\-not the same as utf\-8\-\-, you should
not know).
.IP "mime_type => STRING|FIELD" 2
.IX Item "mime_type => STRING|FIELD"
Convert into the specified mime type, which can be specified as \s-1STRING\s0
or \s-1FIELD\s0.  The \s-1FIELD\s0 is a Mail::Message::Field, and the \s-1STRING\s0 is
converted in such object before use.
.IP "result_type => \s-1CLASS\s0" 2
.IX Item "result_type => CLASS"
The type of body to be created when the body is changed to fulfill the request
on re-coding.  Also the intermediate stages in the translation process (if
needed) will use this type. \s-1CLASS\s0 must extend Mail::Message::Body.
.IP "transfer_encoding => STRING|FIELD" 2
.IX Item "transfer_encoding => STRING|FIELD"
.RE
.RS 4
.RE
.PD 0
.ie n .IP "$obj\->\fBencoded\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBencoded\fR()" 4
.IX Item "$obj->encoded()"
.PD
Encode the body to a format what is acceptable to transmit or write to
a folder file.  This returns the body where this method was called
upon when everything was already prepared, or a new encoded body
otherwise.  In either case, the body is checked.
.ie n .IP "$obj\->\fBunify\fR($body)" 4
.el .IP "\f(CW$obj\fR\->\fBunify\fR($body)" 4
.IX Item "$obj->unify($body)"
Unify the type of the given \f(CW$body\fR objects with the type of the called
body.  \f(CW\*(C`undef\*(C'\fR is returned when unification is impossible.  If the
bodies have the same settings, the \f(CW$body\fR object is returned unchanged.
.Sp
Examples:
.Sp
.Vb 3
\& my $bodytype = Mail::Message::Body::Lines;
\& my $html  = $bodytype\->new(mime_type=>\*(Aqtext/html\*(Aq, data => []);
\& my $plain = $bodytype\->new(mime_type=>\*(Aqtext/plain\*(Aq, ...);
\&
\& my $unified = $html\->unify($plain);
\& # $unified is the data of plain translated to html (if possible).
.Ve
.SS "About the payload"
.IX Subsection "About the payload"
.ie n .IP "$obj\->\fBdispositionFilename\fR( [$directory] )" 4
.el .IP "\f(CW$obj\fR\->\fBdispositionFilename\fR( [$directory] )" 4
.IX Item "$obj->dispositionFilename( [$directory] )"
Returns the name which can be used as filename to store the information
in the indicated \f(CW$directory\fR. To get a filename, various fields are searched
for \f(CW\*(C`filename\*(C'\fR and \f(CW\*(C`name\*(C'\fR attributes.  Without \f(CW$directory\fR, the name found
will be returned.
.Sp
Only the basename of the found name will be used, for security reasons:
otherwise, it may be possible to access other directories than the
one indicated.  If no name was found, or the name is already in use,
then an unique name is generated.
.ie n .IP "$obj\->\fBisBinary\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisBinary\fR()" 4
.IX Item "$obj->isBinary()"
Returns true when the un-encoded message is binary data.  This information
is retrieved from knowledge provided by MIME::Types.
.ie n .IP "$obj\->\fBisText\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisText\fR()" 4
.IX Item "$obj->isText()"
Returns true when the un-encoded message contains printable
text.
.SS "Internals"
.IX Subsection "Internals"
.ie n .IP "$obj\->\fBaddTransferEncHandler\fR( $name, <$class|$object> )" 4
.el .IP "\f(CW$obj\fR\->\fBaddTransferEncHandler\fR( \f(CW$name\fR, <$class|$object> )" 4
.IX Item "$obj->addTransferEncHandler( $name, <$class|$object> )"
.PD 0
.ie n .IP "Mail::Message::Body\->\fBaddTransferEncHandler\fR( $name, <$class|$object> )" 4
.el .IP "Mail::Message::Body\->\fBaddTransferEncHandler\fR( \f(CW$name\fR, <$class|$object> )" 4
.IX Item "Mail::Message::Body->addTransferEncHandler( $name, <$class|$object> )"
.PD
Relate the NAMEd transfer encoding to an OBJECTs or object of the specified
\&\f(CW$class\fR.  In the latter case, an object of that \f(CW$class\fR will be created on the
moment that one is needed to do encoding or decoding.
.Sp
The \f(CW$class\fR or \f(CW$object\fR must extend Mail::Message::TransferEnc.  It will
replace existing class and object for this \f(CW$name\fR.
.Sp
Why aren't you contributing this class to MailBox?
.ie n .IP "$obj\->\fBgetTransferEncHandler\fR($type)" 4
.el .IP "\f(CW$obj\fR\->\fBgetTransferEncHandler\fR($type)" 4
.IX Item "$obj->getTransferEncHandler($type)"
Get the transfer encoder/decoder which is able to handle \f(CW$type\fR, or return
undef if there is no such handler.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Warning: Charset $name is not known" 4
.el .IP "Warning: Charset \f(CW$name\fR is not known" 4
.IX Item "Warning: Charset $name is not known"
The encoding or decoding of a message body encounters a character set which
is not understood by Perl's Encode module.
.ie n .IP "Warning: No decoder defined for transfer encoding $name." 4
.el .IP "Warning: No decoder defined for transfer encoding \f(CW$name\fR." 4
.IX Item "Warning: No decoder defined for transfer encoding $name."
The data (message body) is encoded in a way which is not currently understood,
therefore no decoding (or recoding) can take place.
.ie n .IP "Warning: No encoder defined for transfer encoding $name." 4
.el .IP "Warning: No encoder defined for transfer encoding \f(CW$name\fR." 4
.IX Item "Warning: No encoder defined for transfer encoding $name."
The data (message body) has been decoded, but the required encoding is
unknown.  The decoded data is returned.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.117,
built on August 24, 2014. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2014 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
