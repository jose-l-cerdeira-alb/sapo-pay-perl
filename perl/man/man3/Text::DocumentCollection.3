.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DocumentCollection 3"
.TH DocumentCollection 3 "2001-11-20" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
.Vb 1
\&  Text::DocumentCollection \- a collection of documents
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.SS "new"
.IX Subsection "new"
The constructor; arguments must be passed as maps
from keys to values. The key \f(CW\*(C`file\*(C'\fR is mandatory.
.PP
.Vb 1
\&  my $c = Text::DocumentCollection\->new( file => \*(Aqcoll.db\*(Aq );
.Ve
.PP
Documents from the collection are saved as in the  specified file,
which is  currently handled by a \f(CW\*(C`DB_File\*(C'\fR hash.
.SH "INSTANCE METHODS"
.IX Header "INSTANCE METHODS"
.SS "Add"
.IX Subsection "Add"
Add a document to the collection, tagging it with
a unique key.
.PP
.Vb 1
\&  $c\->Add( $key, $doc );
.Ve
.PP
\&\f(CW\*(C`Add\*(C'\fR \f(CW\*(C`die\*(C'\fRs if the key is already present.
.PP
To change an existing key, use \f(CW\*(C`Delete\*(C'\fR and then \f(CW\*(C`Add\*(C'\fR.
.SS "Delete"
.IX Subsection "Delete"
Discard a document from the collection.
.SS "NewFromDB"
.IX Subsection "NewFromDB"
Loads the collection from the given \s-1DB\s0 file:
.PP
.Vb 1
\&  my $c = Text::DocumentCollection\->NewFromDB( file => \*(Aqcoll.db\*(Aq );
.Ve
.PP
The file must be either empty or created by a former invocation
of \f(CW\*(C`new\*(C'\fR or \f(CW\*(C`NewFromDB\*(C'\fR, followed by any number of \f(CW\*(C`Add\*(C'\fR
and/or \f(CW\*(C`Delete\*(C'\fR.
.PP
Currently, all documents in  the  collection are  revived
(by calling \f(CW\*(C`NewFromString\*(C'\fR). This poses performance problems
for huge collections; a caching mechanism would be an option
in this case.
.SS "\s-1IDF\s0"
.IX Subsection "IDF"
Inverse Term frequency of a given term.
.PP
The definition we used is, given a term \fIt\fR, a set of documents
\&\fI\s-1DOC\s0\fR and the binary relationship \fIhas-term\fR:
.PP
.Vb 1
\&  IDF(t) = log2( #DOC / #{ d in DOC | d has\-term t } )
.Ve
.PP
The logarithm is in base 2, since this is related to an
information measurement, and # is the cardinality operator.
.SS "EnumerateV"
.IX Subsection "EnumerateV"
Enumerates all the document in the collection. Called as:
.PP
.Vb 1
\&  my @result = $c\->EnumerateV( \e&Callback, \*(Aqthe rock\*(Aq );
.Ve
.PP
The function \f(CW\*(C`Callback\*(C'\fR will be called on each element
of the collection as:
.PP
.Vb 1
\&  my @l = CallBack( $c, $key, $doc, $rock );
.Ve
.PP
where \f(CW$rock\fR is the second argument to \f(CW\*(C`Callback\*(C'\fR.
.PP
Since \f(CW$c\fR is the first argument, the callback may be
an instance method of \f(CW\*(C`Text::DocumentCollection\*(C'\fR.
.PP
The final result is obtained by concatenating all the
partial results (\f(CW@l\fR in the example above).  If you do
not want a result, simply return the empty list ().
.PP
There is no particular order of enumeration, so there
is no particular order in which results are concatenated.
.SH "AUTHORS"
.IX Header "AUTHORS"
.Vb 2
\&  spinellia@acm.org
\&  walter@humans.net
.Ve
