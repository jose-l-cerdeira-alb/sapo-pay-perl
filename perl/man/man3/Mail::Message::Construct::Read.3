.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Message::Construct::Read 3"
.TH Mail::Message::Construct::Read 3 "2014-08-24" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Message::Construct::Read \- read a Mail::Message from a file handle
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& my $msg1 = Mail::Message\->read(\e*STDIN);
\& my $msg2 = Mail::Message\->read(\e@lines);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
When complex methods are called on a \f(CW\*(C`Mail::Message\*(C'\fR object, this package
is autoloaded to support the reading of messages directly from any file
handle.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructing a message"
.IX Subsection "Constructing a message"
.ie n .IP "Mail::Message\->\fBread\fR($fh|STRING|SCALAR|ARRAY, %options)" 4
.el .IP "Mail::Message\->\fBread\fR($fh|STRING|SCALAR|ARRAY, \f(CW%options\fR)" 4
.IX Item "Mail::Message->read($fh|STRING|SCALAR|ARRAY, %options)"
Read a message from a \f(CW$fh\fR, \s-1STRING\s0, \s-1SCALAR\s0, or a reference to an
\&\s-1ARRAY\s0 of lines.  Most \f(CW%options\fR are passed to the \fInew()\fR of the message
which is created, but a few extra are defined.
.Sp
Please have a look at \fIbuild()\fR and \fIbuildFromBody()\fR before thinking about
this \f(CW\*(C`read\*(C'\fR method.  Use this \f(CW\*(C`read\*(C'\fR only when you have a file-handle
like \s-1STDIN\s0 to parse from, or some external source of message lines.
When you already have a separate set of head and body lines, then \f(CW\*(C`read\*(C'\fR
is certainly \fBnot\fR your best choice.
.Sp
Some people use this method in a procmail script: the message arrives
at stdin, so we only have a filehandle.  In this case, you are stuck
with this method.  The message is preceded by a line which can be used
as message separator in mbox folders.  See the example how to handle
that one.
.Sp
This method will remove \f(CW\*(C`Status\*(C'\fR and \f(CW\*(C`X\-Status\*(C'\fR fields when they appear
in the source, to avoid the risk that these fields accidentally interfere
with your internal administration, which may have security implications.
.Sp
.Vb 3
\& \-Option             \-\-Default
\&  body_type            undef
\&  strip_status_fields  <true>
.Ve
.RS 4
.IP "body_type => \s-1CLASS\s0" 2
.IX Item "body_type => CLASS"
Force a body type (any specific implementation of a Mail::Message::Body)
to be used to store the message content.  When the body is a multipart or
nested, this will be overruled.
.IP "strip_status_fields => \s-1BOOLEAN\s0" 2
.IX Item "strip_status_fields => BOOLEAN"
Remove the \f(CW\*(C`Status\*(C'\fR and \f(CW\*(C`X\-Status\*(C'\fR fields from the message after
reading, to lower the risk that received messages from external
sources interfere with your internal administration.  If you want
fields not to be stripped (you would like to disable the stripping)
you probably process folders yourself, which is a Bad Thing!
.RE
.RS 4
.Sp
example:
.Sp
.Vb 3
\& my $msg1 = Mail::Message\->read(\e*STDIN);
\& my $msg2 = Mail::Message\->read(\e@lines, log => \*(AqPROGRESS\*(Aq);
\& $folder\->addMessages($msg1, $msg2);
\&
\& my $msg3 = Mail::Message\->read(<<MSG);
\& Subject: hello world
\& To: you@example.com
\&                      # warning: empty line required !!!
\& Hi, greetings!
\& MSG
\&
\& # promail example
\& my $fromline = <STDIN>;
\& my $msg      = Mail::Message\->read(\e*STDIN);
\& my $coerced  = $mboxfolder\->addMessage($msg);
\& $coerced\->fromLine($fromline);
.Ve
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.117,
built on August 24, 2014. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2014 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
