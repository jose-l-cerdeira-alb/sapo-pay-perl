.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Perlbal::Manual::Configuration 3"
.TH Perlbal::Manual::Configuration 3 "2012-02-20" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Perlbal::Manual::Configuration \- How to configure Perlbal
.SS "\s-1VERSION\s0"
.IX Subsection "VERSION"
Perlbal 1.78.
.SS "\s-1DESCRIPTION\s0"
.IX Subsection "DESCRIPTION"
By default, Perlbal looks for a configuration file at \fI/etc/perlbal/perlbal.conf\fR.
.PP
You can also point perlbal at a different configuration file with the \fB\-c\fR flag.
.PP
.Vb 1
\&    $ perlbal \-c /home/user/perlbal.conf
.Ve
.PP
\&\fB\-c\fR has the alias \fB\-\-conf\fR.
.SS "Setting up Perlbal as a daemon"
.IX Subsection "Setting up Perlbal as a daemon"
You can run \f(CW\*(C`perlbal\*(C'\fR as a daemon:
.PP
.Vb 1
\&    $ perlbal \-\-daemon \-c /home/user/perlbal.conf
.Ve
.PP
\&\fB\-\-daemon\fR has the alias \fB\-d\fR.
.PP
A common practice is to create a \f(CW\*(C`perlbal.sh\*(C'\fR file that supports the common operations you'll require (start, stop, restart) and place it under \f(CW\*(C`/etc/init.d\*(C'\fR. You can find a sample file in \f(CW\*(C`debian/perlbal.init\*(C'\fR.
.SS "Configuration file"
.IX Subsection "Configuration file"
A Perlbal's configuration file is a text file where you create pools and services, add servers to pools, set services' parameters and enable/disable services.
.PP
Indentation is not mandatory, but it's considered a good practice for readability issues.
.PP
Configuration is case insensitive, but it's also a good practice to uppercase all directives.
.PP
\fIPools\fR
.IX Subsection "Pools"
.PP
Here's a sample configuration of a pool:
.PP
.Vb 3
\&    CREATE POOL mywebsite
\&        POOL mywebsite ADD 10.0.0.1:80
\&        POOL mywebsite ADD 10.0.0.2:80
.Ve
.PP
The first line creates a pool called \f(CW\*(C`mywebsite\*(C'\fR. The second and third lines add two different servers to that pool.
.PP
From here on you'll be able to use this pool in a service.
.PP
Also, note that right after creating the pool, you don't need to specify which pool you're adding servers to, as it is considered to be the active pool:
.PP
.Vb 3
\&    CREATE POOL mywebsite
\&        POOL ADD 10.0.0.1:80
\&        POOL ADD 10.0.0.2:80
.Ve
.PP
Configuring a pool in a separate file
.IX Subsection "Configuring a pool in a separate file"
.PP
You can create a pool in a separate file by using the \f(CW\*(C`nodefile\*(C'\fR parameter:
.PP
.Vb 2
\&    CREATE POOL dynamic
\&        SET nodefile = conf/nodelist.dat
.Ve
.PP
This separate file should contain addresses in the form of \f(CW\*(C`ip:port\*(C'\fR, one per line (empty lines are ignored, as well as comments started by the \f(CW\*(C`#\*(C'\fR sign).
.PP
Perlbal will check the file periodically for updates.
.PP
The path to the file is relative to where perlbal was started.
.PP
Note that:
.PP
.Vb 2
\&    SET pool nodefile = none
\&    (also undef, null, "", \*(Aq\*(Aq)
.Ve
.PP
\&...unsets the nodefile, but does not remove current members.
.PP
Also note: If you set a nodefile, then modify the pool via \s-1POOL\s0 \s-1ADD\s0 or \s-1POOL\s0 \s-1REMOVE\s0, Perlbal will stop checking the nodefile for updates!
.PP
Check \fIconf/load\-balancer.conf\fR and \fIconf/nodelist.dat\fR for an example.
.PP
Pool balance method
.IX Subsection "Pool balance method"
.PP
You can set the pool balance method:
.PP
.Vb 1
\&    SET pool balance_method = \*(Aqrandom\*(Aq
.Ve
.PP
At the present time, \f(CW\*(C`random\*(C'\fR is the only load balancing method available.
.PP
\fIServices\fR
.IX Subsection "Services"
.PP
Here's a sample service:
.PP
.Vb 4
\&    CREATE SERVICE service_mywebsite
\&        SET role            = reverse_proxy
\&        SET pool            = mywebsite
\&        SET listen          = 10.0.0.3:80
.Ve
.PP
The first line creates a service called \f(CW\*(C`service_mywebsite\*(C'\fR.
.PP
On the three following lines we are setting up three parameters for that service (you can see this same example in Perlbal::Manual::LoadBalancer in more detail).
.PP
It is good practice to always start a service with the definition of its role; this way you'll avoid error messages caused by attempting to set parameters that are only acceptable for certain roles while Perlbal doesn't know which role the service is supposed to be yet.
.PP
\fISetting parameters\fR
.IX Subsection "Setting parameters"
.PP
You can set parameters via commands of either forms:
.PP
.Vb 2
\&    SET <service\-name> <param> = <value>
\&    SET <param> = <value>
.Ve
.PP
For a full list of parameters see Perlbal::Manual::LoadBalancer, Perlbal::Manual::ReverseProxy or Perlbal::Manual::WebServer.
.PP
\fBNote on types\fR:
.IX Subsection "Note on types:"
.PP
\&'bool' values can be set using one of 1, true, yes, on, 0, false, off, or no.
.PP
\&'size' values are in integer bytes, or an integer followed by 'b', 'k', or 'm' (case-insensitive) for bytes, KiB, or MiB.
.PP
\fISetting parameter defaults\fR
.IX Subsection "Setting parameter defaults"
.PP
Outside the scope of a service you can set parameter defaults for all following created services:
.PP
.Vb 1
\&    SET <param> = <value>
.Ve
.PP
This takes the same parameters as the section above "\*(L"Setting parameters\*(R"
.PP
\fIEnabling/Disabling services\fR
.IX Subsection "Enabling/Disabling services"
.PP
To enable a service:
.PP
.Vb 1
\&    ENABLE service_mywebsite
.Ve
.PP
To disable a service:
.PP
.Vb 1
\&    DISABLE service_mywebsite
.Ve
.PP
These lines is what allows you to have several services configured in a file even if they are not currently active (a common scenario is to configure everything on the file and then enable/disable services on-the-fly as required; see Perlbal::Manual::Management for more information on this process).
.PP
\fIIncluding configuration files\fR
.IX Subsection "Including configuration files"
.PP
While Perlbal doesn't natively let you include a configuration file within another, one of its core Plugins does.
.PP
By using Perlbal::Plugin::Include you can use this feature:
.PP
.Vb 3
\&    LOAD include
\&    INCLUDE = /etc/perlbal/my.conf
\&    INCLUDE = /etc/perlbal/other.conf /etc/perlbal/*.conf
.Ve
.PP
See Perlbal::Plugin::Include for further examples and more information.
.PP
\fIExpansions\fR
.IX Subsection "Expansions"
.PP
The following things expand/interpolate in config files/commands:
.ie n .IP """${ip:eth0}""" 4
.el .IP "\f(CW${ip:eth0}\fR" 4
.IX Item "${ip:eth0}"
Expands to the configured \s-1IP\s0 for interface \*(L"eth0\*(R". Probably only works on Linux.
.PP
\fIComments\fR
.IX Subsection "Comments"
.PP
Comments in Perlbal's configuration files start with a \f(CW\*(C`#\*(C'\fR:
.PP
.Vb 2
\&    # this is a comment
\&    ENABLE myservice # this is also a comment
.Ve
.SS "Environment variables"
.IX Subsection "Environment variables"
\fI\s-1DANGABUILD_DAEMONONLY\s0\fR
.IX Subsection "DANGABUILD_DAEMONONLY"
.PP
Used in \f(CW\*(C`Makefile.PL\*(C'\fR. If set to a true value the modules will not be built.
.PP
\fI\s-1DANGABUILD_MODULESONLY\s0\fR
.IX Subsection "DANGABUILD_MODULESONLY"
.PP
Used in \f(CW\*(C`Makefile.PL\*(C'\fR. If set to a true value only the modules will be built, not the \f(CW\*(C`perlbal\*(C'\fR executable.
.PP
\fI\s-1PERLBAL_DEBUG\s0\fR
.IX Subsection "PERLBAL_DEBUG"
.PP
There are four levels of debugging in Perlbal.
.PP
By setting this variable to a value between 0 and 4 (included) you will activate Perbal's debug.
.PP
.Vb 1
\&    PERLBAL_DEBUG = 0 # no debug
\&
\&    PERLBAL_DEBUG = 4 # debug everything
.Ve
.PP
These four levels are described in more detail in Perlbal::Manual::Debugging.
.PP
\fI\s-1PERLBAL_DEBUG_BUFFERED_UPLOADS\s0\fR
.IX Subsection "PERLBAL_DEBUG_BUFFERED_UPLOADS"
.PP
By setting this variable to 1 you can tell Perlbal to add a \f(CW\*(C`X\-PERLBAL\-BUFFERED\-UPLOAD\-REASON\*(C'\fR header to requests that have to be buffered.
.PP
This can be useful to let your backend machine know that Perlbal is buffering the request.
.PP
The value of the header contains the reason why the request was buffered.
.PP
\fI\s-1PERLBAL_DEBUG_OBJ\s0\fR
.IX Subsection "PERLBAL_DEBUG_OBJ"
.PP
This is the variable you'll have to set to a true value in order to properly use the commands \f(CW\*(C`obj\*(C'\fR or \f(CW\*(C`track\*(C'\fR.
.PP
See Perlbal::Manual::Management for more information.
.PP
\fI\s-1PERLBAL_REMOVE_FIELDS\s0\fR
.IX Subsection "PERLBAL_REMOVE_FIELDS"
.PP
Setting this variable true will give perlbal an extra speed boost on perl 5.10+ by removing run-time locking
of field names on internal objects. As a tradeoff this will make code such as plugins or patch sets that
incorrectly handling fields in perlbal to silently fail rather than giving warnings and errors.
.PP
Use with caution until you trust your combination of perlbal version, plugins and versions and other
patches you may have applied. Once you trust you perlbal instance to have no problems this option should
simply make perlbal faster.
.PP
\fI\s-1PERLBAL_TEST_ALPHA\s0\fR
.IX Subsection "PERLBAL_TEST_ALPHA"
.PP
This is a variable used to test Perlbal's alpha features.
.PP
If you're a developer working on one of these features, first set the variable to a true value:
.PP
.Vb 1
\&    PERLBAL_TEST_ALPHA = 1
.Ve
.PP
And then, on your test file, use something like:
.PP
.Vb 6
\&    unless ($ENV{PERLBAL_TEST_ALPHA}) {
\&        plan skip_all => \*(AqAlpha feature; test skipped without $ENV{PERLBAL_TEST_ALPHA}\*(Aq;
\&        exit 0;
\&    } else {
\&        plan tests => 4;
\&    }
.Ve
.PP
\fI\s-1PERLBAL_TRACK_STATES\s0\fR
.IX Subsection "PERLBAL_TRACK_STATES"
.PP
This is the variable you'll have to set to a true value in order to properly use the command \f(CW\*(C`state changes\*(C'\fR.
.PP
See Perlbal::Manual::Management for more information.
.PP
\fI\s-1PERLBAL_XS_HEADERS\s0\fR
.IX Subsection "PERLBAL_XS_HEADERS"
.PP
By setting to a true value you can enable Perlbal::XS::HTTPHeaders, if installed.
.PP
Note that if you enable Perlbal::XS::HTTPHeaders you won't have access to the fields of Perlbal::HTTPHeaders.
.PP
\fI\s-1TEST_PERLBAL_FOREGROUND\s0\fR
.IX Subsection "TEST_PERLBAL_FOREGROUND"
.PP
This variable is used by Perlbal::Test to test Perlbal.
.PP
\&\f(CW\*(C`TEST_PERLBAL_FOREGROUND\*(C'\fR with a true value tells Perlbal::Test that it should run a server in the foreground.
.PP
See Perlbal::Test for more information.
.PP
\fI\s-1TEST_PERLBAL_USE_EXISTING\s0\fR
.IX Subsection "TEST_PERLBAL_USE_EXISTING"
.PP
This variable is used by Perlbal::Test to test Perlbal.
.PP
If \f(CW\*(C`TEST_PERLBAL_USE_EXISTING\*(C'\fR is set to a true value then \f(CW\*(C`Perlbal::Test::start_server\*(C'\fR will be return a socket which is connected to an existing server's management port.
.PP
See Perlbal::Test for more information.
.SS "\s-1SEE\s0 \s-1ALSO\s0"
.IX Subsection "SEE ALSO"
Perlbal::Manual::Management.
