.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "AnyEvent::HTTP::Response 3"
.TH AnyEvent::HTTP::Response 3 "2013-06-13" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
AnyEvent::HTTP::Response \- HTTP Response object for AnyEvent::HTTP
.SH "VERSION"
.IX Header "VERSION"
version 0.302
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  # parses argument list passed to AnyEvent::HTTP::http_request callback
\&  AnyEvent::HTTP::http_request(
\&    GET => $uri,
\&    sub {
\&      my $res = AnyEvent::HTTP::Response\->new(@_);
\&
\&      # inspect attributes
\&      print $res\->header(\*(AqContent\-Type\*(Aq);
\&      print $res\->body;
\&
\&      # upgrade to HTTP::Response
\&      my $http_res = $res\->to_http_message;
\&      if( !$http_res\->is_success ){
\&        print $http_res\->status_line;
\&      }
\&    }
\&  );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object represents an \s-1HTTP\s0 response from AnyEvent::HTTP.
.PP
This is a companion class to AnyEvent::HTTP::Request.
.PP
It parses the arguments passed to the final callback in
\&\*(L"http_request\*(R" in AnyEvent::HTTP
(or produces the arguments that should be passed to that,
depending on how you'd like to use it).
and wraps them in an object.
.PP
It can also be converted from or to
the more featureful
HTTP::Response.
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.SS "new"
.IX Subsection "new"
Accepts an argument list like the callback provided to
\&\*(L"http_request\*(R" in AnyEvent::HTTP
(see \*(L"parse_args\*(R"):
.PP
.Vb 1
\&  AnyEvent::HTTP::Response\->new($body, \e%headers);
.Ve
.PP
Alternatively accepts an instance of
HTTP::Response
(see \*(L"from_http_message\*(R"):
.PP
.Vb 3
\&  AnyEvent::HTTP::Response\->new(
\&    HTTP::Response\->new( $code, $reason, $headers, $body )
\&  );
.Ve
.PP
Also accepts a single hashref of named attributes
(see \*(L"\s-1ATTRIBUTES\s0\*(R"):
.PP
.Vb 5
\&  AnyEvent::HTTP::Response\->new({
\&    body    => $body,
\&    headers => \e%headers,
\&    pseudo_headers => \e%pseudo,
\&  });
.Ve
.SS "parse_args"
.IX Subsection "parse_args"
Called by the constructor
to parse the argument list
passed to the callback in
\&\*(L"http_request\*(R" in AnyEvent::HTTP
and return a hashref which will be the basis for the object.
.PP
The list should look like
\&\f(CW\*(C`($body, \e%headers)\*(C'\fR.
.PP
This will separate the \*(L"pseudo\*(R" headers
from the regular http headers
as described by
\&\*(L"http_request\*(R" in AnyEvent::HTTP
(http headers are lower-cased
and pseudo headers start with an upper case letter).
.SS "from_http_message"
.IX Subsection "from_http_message"
Called by the constructor
when \*(L"new\*(R" is passed an instance of HTTP::Response.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "body"
.IX Subsection "body"
Response content body
.SS "content"
.IX Subsection "content"
Alias for \*(L"body\*(R"
.SS "headers"
.IX Subsection "headers"
\&\s-1HTTP\s0 Response headers
.SS "pseudo_headers"
.IX Subsection "pseudo_headers"
A hashref of extra fields
that \*(L"http_request\*(R" in AnyEvent::HTTP returns with the http headers
(the ones that start with an upper-case letter... Status, Reason, etc).
.SH "METHODS"
.IX Header "METHODS"
.SS "args"
.IX Subsection "args"
Returns a list of arguments like those passed to the callback in
\&\*(L"http_request\*(R" in AnyEvent::HTTP.
.SS "to_http_message"
.IX Subsection "to_http_message"
Returns an instance of HTTP::Response
to provide additional functionality.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
AnyEvent::HTTP
.IP "\(bu" 4
AnyEvent::HTTP::Message (base class)
.IP "\(bu" 4
HTTP::Response More featureful object
.IP "\(bu" 4
HTTP::Message::PSGI Create an HTTP::Response from a \s-1PSGI\s0 arrayref
.SH "AUTHOR"
.IX Header "AUTHOR"
Randy Stauner <rwstauner@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2012 by Randy Stauner.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
