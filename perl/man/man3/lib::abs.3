.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "lib::abs 3"
.TH lib::abs 3 "2010-11-16" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
lib::abs \- \f(CW\*(C`lib\*(C'\fR that makes relative path absolute to caller.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Simple use like \f(CW\*(C`use lib ...\*(C'\fR:
.PP
.Vb 2
\&        use lib::abs qw(./mylibs1 ../mylibs2);
\&        use lib::abs \*(Aqmylibs\*(Aq;
.Ve
.PP
Extended syntax (glob)
.PP
.Vb 1
\&        use lib::abs \*(Aqmodules/*/lib\*(Aq;
.Ve
.PP
There are also may be used helper function from lib::abs (see example/ex4):
.PP
.Vb 3
\&        use lib::abs;
\&        # ...
\&        my $path = lib::abs::path(\*(Aq../path/relative/to/me\*(Aq); # returns absolute path
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The main reason of this library is transformate relative paths to absolute at the \f(CW\*(C`BEGIN\*(C'\fR stage, and push transformed to \f(CW@INC\fR.
Relative path basis is not the current working directory, but the location of file, where the statement is (caller file).
When using common \f(CW\*(C`lib\*(C'\fR, relative paths stays relative to curernt working directory,
.PP
.Vb 3
\&        # For ex:
\&        # script: /opt/scripts/my.pl
\&        use lib::abs \*(Aq../lib\*(Aq;
\&
\&        # We run \`/opt/scripts/my.pl\` having cwd /home/mons
\&        # The @INC will contain \*(Aq/opt/lib\*(Aq;
\&
\&        # We run \`./my.pl\` having cwd /opt
\&        # The @INC will contain \*(Aq/opt/lib\*(Aq;
\&
\&        # We run \`../my.pl\` having cwd /opt/lib
\&        # The @INC will contain \*(Aq/opt/lib\*(Aq;
.Ve
.PP
Also this module is useful when writing tests, when you want to load strictly the module from ../lib, respecting the test file.
.PP
.Vb 2
\&        # t/00\-test.t
\&        use lib::abs \*(Aq../lib\*(Aq;
.Ve
.PP
Also this is useful, when you running under \f(CW\*(C`mod_perl\*(C'\fR, use something like \f(CW\*(C`Apache::StatINC\*(C'\fR, and your application may change working directory.
So in case of chdir \f(CW\*(C`StatINC\*(C'\fR fails to reload module if the \f(CW@INC\fR contain relative paths.
.SH "RATIONALE"
.IX Header "RATIONALE"
Q: We already have \f(CW\*(C`FindBin\*(C'\fR and \f(CW\*(C`lib\*(C'\fR, why we need this module?
.PP
A: There are several reasons:
.ie n .IP "1) ""FindBin"" could find path incorrectly under ""mod_perl""" 4
.el .IP "1) \f(CWFindBin\fR could find path incorrectly under \f(CWmod_perl\fR" 4
.IX Item "1) FindBin could find path incorrectly under mod_perl"
.PD 0
.ie n .IP "2) ""FindBin"" works relatively to executed binary instead of relatively to caller" 4
.el .IP "2) \f(CWFindBin\fR works relatively to executed binary instead of relatively to caller" 4
.IX Item "2) FindBin works relatively to executed binary instead of relatively to caller"
.ie n .IP "3) Perl is linguistic language, and \`use lib::abs ""...""\*(Aq semantically more clear and looks more beautiful than \`use FindBin; use lib ""$FindBin::Bin/../lib"";\*(Aq" 4
.el .IP "3) Perl is linguistic language, and \f(CW\`use lib::abs ``...''\*(Aq\fR semantically more clear and looks more beautiful than \f(CW\`use FindBin; use lib ``$FindBin::Bin/../lib'';\*(Aq\fR" 4
.IX Item "3) Perl is linguistic language, and use lib::abs ""..."" semantically more clear and looks more beautiful than use FindBin; use lib ""$FindBin::Bin/../lib"";"
.ie n .IP "4) ""FindBin"" b<will> work incorrectly, if will be called not from executed binary (see <http://github.com/Mons/lib\-abs\-vs\-findbin> comparison for details)" 4
.el .IP "4) \f(CWFindBin\fR b<will> work incorrectly, if will be called not from executed binary (see <http://github.com/Mons/lib\-abs\-vs\-findbin> comparison for details)" 4
.IX Item "4) FindBin b<will> work incorrectly, if will be called not from executed binary (see <http://github.com/Mons/lib-abs-vs-findbin> comparison for details)"
.PD
.SH "BUGS"
.IX Header "BUGS"
None known
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2007\-2010 Mons Anderson.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.SH "AUTHOR"
.IX Header "AUTHOR"
Mons Anderson, \f(CW\*(C`<mons@cpan.org>\*(C'\fR
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Oleg Kostyuk, \f(CW\*(C`<cub@cpan.org>\*(C'\fR
