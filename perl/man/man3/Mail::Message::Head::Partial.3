.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Message::Head::Partial 3"
.TH Mail::Message::Head::Partial 3 "2014-08-24" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Message::Head::Partial \- subset of header information of a message
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 4
\& Mail::Message::Head::Partial
\&   is a Mail::Message::Head::Complete
\&   is a Mail::Message::Head
\&   is a Mail::Reporter
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\& my $partial = $head\->strip;
\& $partial\->isa(\*(AqMail::Message::Head\*(Aq)  # true
\& $partial\->isDelayed                      # false
\& $partial\->isPartial                      # true
\&
\& $partial\->removeFields( qr/^X\-/ );
\& $partial\->removeFieldsExcept( qw/To From/ );
\& $partial\->removeResentGroups;
\& $partial\->removeListGroup;
\& $partial\->removeSpamGroups;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Header information consumes a considerable amount of memory.  Most of this
information is only useful during a short period of time in your program,
or sometimes it is not used at all.  You then can decide to remove most
of the header information.  However, be warned that it will be lost
permanently: the header (and therefore the message) gets mutulated!
.PP
Extends \*(L"\s-1DESCRIPTION\s0\*(R" in Mail::Message::Head::Complete.
.SH "OVERLOADED"
.IX Header "OVERLOADED"
Extends \*(L"\s-1OVERLOADED\s0\*(R" in Mail::Message::Head::Complete.
.ie n .IP "overload: \fB""""\fR" 4
.el .IP "overload: \fB``''\fR" 4
.IX Item "overload: """""
Inherited, see \*(L"\s-1OVERLOADED\s0\*(R" in Mail::Message::Head
.IP "overload: \fBbool\fR" 4
.IX Item "overload: bool"
Inherited, see \*(L"\s-1OVERLOADED\s0\*(R" in Mail::Message::Head
.SH "METHODS"
.IX Header "METHODS"
Extends \*(L"\s-1METHODS\s0\*(R" in Mail::Message::Head::Complete.
.SS "Constructors"
.IX Subsection "Constructors"
Extends \*(L"Constructors\*(R" in Mail::Message::Head::Complete.
.ie n .IP "$obj\->\fBbuild\fR( [PAIR|$field], ... )" 4
.el .IP "\f(CW$obj\fR\->\fBbuild\fR( [PAIR|$field], ... )" 4
.IX Item "$obj->build( [PAIR|$field], ... )"
Inherited, see \*(L"Constructors\*(R" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBclone\fR( [@names|ARRAY|Regexps] )" 4
.el .IP "\f(CW$obj\fR\->\fBclone\fR( [@names|ARRAY|Regexps] )" 4
.IX Item "$obj->clone( [@names|ARRAY|Regexps] )"
Inherited, see \*(L"Constructors\*(R" in Mail::Message::Head::Complete
.IP "Mail::Message::Head::Partial\->\fBnew\fR(%options)" 4
.IX Item "Mail::Message::Head::Partial->new(%options)"
Inherited, see \*(L"Constructors\*(R" in Mail::Message::Head
.SS "The header"
.IX Subsection "The header"
Extends \*(L"The header\*(R" in Mail::Message::Head::Complete.
.ie n .IP "$obj\->\fBisDelayed\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisDelayed\fR()" 4
.IX Item "$obj->isDelayed()"
Inherited, see \*(L"The header\*(R" in Mail::Message::Head
.ie n .IP "$obj\->\fBisEmpty\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisEmpty\fR()" 4
.IX Item "$obj->isEmpty()"
Inherited, see \*(L"The header\*(R" in Mail::Message::Head
.ie n .IP "$obj\->\fBisModified\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisModified\fR()" 4
.IX Item "$obj->isModified()"
Inherited, see \*(L"The header\*(R" in Mail::Message::Head
.ie n .IP "$obj\->\fBknownNames\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBknownNames\fR()" 4
.IX Item "$obj->knownNames()"
Inherited, see \*(L"The header\*(R" in Mail::Message::Head
.ie n .IP "$obj\->\fBmessage\fR( [$message] )" 4
.el .IP "\f(CW$obj\fR\->\fBmessage\fR( [$message] )" 4
.IX Item "$obj->message( [$message] )"
Inherited, see \*(L"The header\*(R" in Mail::Message::Head
.ie n .IP "$obj\->\fBmodified\fR( [\s-1BOOLEAN\s0] )" 4
.el .IP "\f(CW$obj\fR\->\fBmodified\fR( [\s-1BOOLEAN\s0] )" 4
.IX Item "$obj->modified( [BOOLEAN] )"
Inherited, see \*(L"The header\*(R" in Mail::Message::Head
.ie n .IP "$obj\->\fBnrLines\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnrLines\fR()" 4
.IX Item "$obj->nrLines()"
Inherited, see \*(L"The header\*(R" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBorderedFields\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBorderedFields\fR()" 4
.IX Item "$obj->orderedFields()"
Inherited, see \*(L"The header\*(R" in Mail::Message::Head
.ie n .IP "$obj\->\fBsize\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBsize\fR()" 4
.IX Item "$obj->size()"
Inherited, see \*(L"The header\*(R" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBwrap\fR($integer)" 4
.el .IP "\f(CW$obj\fR\->\fBwrap\fR($integer)" 4
.IX Item "$obj->wrap($integer)"
Inherited, see \*(L"The header\*(R" in Mail::Message::Head::Complete
.SS "Access to the header"
.IX Subsection "Access to the header"
Extends \*(L"Access to the header\*(R" in Mail::Message::Head::Complete.
.ie n .IP "$obj\->\fBadd\fR( $field | $line | <$name, $body, [$attrs]> )" 4
.el .IP "\f(CW$obj\fR\->\fBadd\fR( \f(CW$field\fR | \f(CW$line\fR | <$name, \f(CW$body\fR, [$attrs]> )" 4
.IX Item "$obj->add( $field | $line | <$name, $body, [$attrs]> )"
Inherited, see \*(L"Access to the header\*(R" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBaddListGroup\fR($object)" 4
.el .IP "\f(CW$obj\fR\->\fBaddListGroup\fR($object)" 4
.IX Item "$obj->addListGroup($object)"
Inherited, see \*(L"Access to the header\*(R" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBaddResentGroup\fR($resent_group|$data)" 4
.el .IP "\f(CW$obj\fR\->\fBaddResentGroup\fR($resent_group|$data)" 4
.IX Item "$obj->addResentGroup($resent_group|$data)"
Inherited, see \*(L"Access to the header\*(R" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBaddSpamGroup\fR($object)" 4
.el .IP "\f(CW$obj\fR\->\fBaddSpamGroup\fR($object)" 4
.IX Item "$obj->addSpamGroup($object)"
Inherited, see \*(L"Access to the header\*(R" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBcleanupOrderedFields\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBcleanupOrderedFields\fR()" 4
.IX Item "$obj->cleanupOrderedFields()"
The header maintains a list of fields which are ordered in sequence of
definition.  It is required to maintain the header order to keep the
related fields of resent groups together.  The fields are also included
in a hash, sorted on their name for fast access.
.Sp
The references to field objects in the hash are real, those in the ordered 
list are weak.  So when field objects are removed from the hash, their
references in the ordered list are automagically undef'd.
.Sp
When many fields are removed, for instance with \fIremoveFields()\fR or
\&\fIremoveFieldsExcept()\fR, then it is useful to remove the list of undefs
from the ordered list as well.  In those cases, this method is called
automatically, however you may have your own reasons to call this method.
.ie n .IP "$obj\->\fBcount\fR($name)" 4
.el .IP "\f(CW$obj\fR\->\fBcount\fR($name)" 4
.IX Item "$obj->count($name)"
Inherited, see \*(L"Access to the header\*(R" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBdelete\fR($name)" 4
.el .IP "\f(CW$obj\fR\->\fBdelete\fR($name)" 4
.IX Item "$obj->delete($name)"
Inherited, see \*(L"Access to the header\*(R" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBget\fR( $name, [$index] )" 4
.el .IP "\f(CW$obj\fR\->\fBget\fR( \f(CW$name\fR, [$index] )" 4
.IX Item "$obj->get( $name, [$index] )"
Inherited, see \*(L"Access to the header\*(R" in Mail::Message::Head
.ie n .IP "$obj\->\fBgrepNames\fR( [@names|ARRAY|Regexps] )" 4
.el .IP "\f(CW$obj\fR\->\fBgrepNames\fR( [@names|ARRAY|Regexps] )" 4
.IX Item "$obj->grepNames( [@names|ARRAY|Regexps] )"
Inherited, see \*(L"Access to the header\*(R" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBlistGroup\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlistGroup\fR()" 4
.IX Item "$obj->listGroup()"
Inherited, see \*(L"Access to the header\*(R" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBnames\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnames\fR()" 4
.IX Item "$obj->names()"
Inherited, see \*(L"Access to the header\*(R" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBprint\fR( [$fh] )" 4
.el .IP "\f(CW$obj\fR\->\fBprint\fR( [$fh] )" 4
.IX Item "$obj->print( [$fh] )"
Inherited, see \*(L"Access to the header\*(R" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBprintSelected\fR($fh, <STRING|Regexp>, ...)" 4
.el .IP "\f(CW$obj\fR\->\fBprintSelected\fR($fh, <STRING|Regexp>, ...)" 4
.IX Item "$obj->printSelected($fh, <STRING|Regexp>, ...)"
Inherited, see \*(L"Access to the header\*(R" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBprintUndisclosed\fR( [$fh] )" 4
.el .IP "\f(CW$obj\fR\->\fBprintUndisclosed\fR( [$fh] )" 4
.IX Item "$obj->printUndisclosed( [$fh] )"
Inherited, see \*(L"Access to the header\*(R" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBremoveContentInfo\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBremoveContentInfo\fR()" 4
.IX Item "$obj->removeContentInfo()"
Inherited, see \*(L"Access to the header\*(R" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBremoveField\fR($field)" 4
.el .IP "\f(CW$obj\fR\->\fBremoveField\fR($field)" 4
.IX Item "$obj->removeField($field)"
Inherited, see \*(L"Access to the header\*(R" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBremoveFields\fR( <STRING|Regexp>, ... )" 4
.el .IP "\f(CW$obj\fR\->\fBremoveFields\fR( <STRING|Regexp>, ... )" 4
.IX Item "$obj->removeFields( <STRING|Regexp>, ... )"
Remove the fields from the header which are exactly named '\s-1STRING\s0' (case
insensitive) or match the REGular EXPresssion.  Do not forget to add the
\&'i' modifier to the Regexp, because fields are case insensitive.
.Sp
See also \fIremoveField()\fR which is used to remove one field object from
the header.  The reverse specification can be made with
\&\f(CW\*(C`removeFieldsExcept()\*(C'\fR.
.Sp
example:
.Sp
.Vb 2
\& $head\->removeFields(\*(Aqbcc\*(Aq, \*(Aqreceived\*(Aq);
\& $head\->removeFields( qr/^content\-/i );
.Ve
.ie n .IP "$obj\->\fBremoveFieldsExcept\fR(STRING|Regexp, ...)" 4
.el .IP "\f(CW$obj\fR\->\fBremoveFieldsExcept\fR(STRING|Regexp, ...)" 4
.IX Item "$obj->removeFieldsExcept(STRING|Regexp, ...)"
Remove all fields from the header which are not equivalent to one of the
specified STRINGs (case-insensitive) and which are not matching one of
the REGular EXPressions.  Do not forget to add the 'i' modifier to the
Regexp, because fields are case insensitive.
.Sp
See also \fIremoveField()\fR which is used to remove one field object from
the header.  The reverse specification can be made with \f(CW\*(C`removeFields()\*(C'\fR.
.Sp
example:
.Sp
.Vb 2
\& $head\->removeFieldsExcept(\*(Aqsubject\*(Aq, qr/^content\-/i ); 
\& $head\->removeFieldsExcept( qw/subject to from sender cc/ );
.Ve
.ie n .IP "$obj\->\fBremoveListGroup\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBremoveListGroup\fR()" 4
.IX Item "$obj->removeListGroup()"
Removes all header lines which are used to administer mailing lists.
Which fields that are is explained in Mail::Message::Head::ListGroup.
Returned is the number of removed lines.
.ie n .IP "$obj\->\fBremoveResentGroups\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBremoveResentGroups\fR()" 4
.IX Item "$obj->removeResentGroups()"
Removes all header lines which are member of a \fIresent group\fR, which
are explained in Mail::Message::Head::ResentGroup.  Returned is the
number of removed lines.
.Sp
For removing single groups (for instance because you want to keep the
last), use \fIMail::Message::Head::FieldGroup::delete()\fR.
.ie n .IP "$obj\->\fBremoveSpamGroups\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBremoveSpamGroups\fR()" 4
.IX Item "$obj->removeSpamGroups()"
Removes all header lines which were produced by spam detection and
spam-fighting software.  Which fields that are is explained in
Mail::Message::Head::SpamGroup.  Returned is the number of removed lines.
.ie n .IP "$obj\->\fBresentGroups\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBresentGroups\fR()" 4
.IX Item "$obj->resentGroups()"
Inherited, see \*(L"Access to the header\*(R" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBreset\fR($name, @fields)" 4
.el .IP "\f(CW$obj\fR\->\fBreset\fR($name, \f(CW@fields\fR)" 4
.IX Item "$obj->reset($name, @fields)"
Inherited, see \*(L"Access to the header\*(R" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBset\fR( $field | $line | <$name, $body, [$attrs]> )" 4
.el .IP "\f(CW$obj\fR\->\fBset\fR( \f(CW$field\fR | \f(CW$line\fR | <$name, \f(CW$body\fR, [$attrs]> )" 4
.IX Item "$obj->set( $field | $line | <$name, $body, [$attrs]> )"
Inherited, see \*(L"Access to the header\*(R" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBspamDetected\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBspamDetected\fR()" 4
.IX Item "$obj->spamDetected()"
Inherited, see \*(L"Access to the header\*(R" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBspamGroups\fR( [$names] )" 4
.el .IP "\f(CW$obj\fR\->\fBspamGroups\fR( [$names] )" 4
.IX Item "$obj->spamGroups( [$names] )"
Inherited, see \*(L"Access to the header\*(R" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBstring\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBstring\fR()" 4
.IX Item "$obj->string()"
Inherited, see \*(L"Access to the header\*(R" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBstudy\fR( $name, [$index] )" 4
.el .IP "\f(CW$obj\fR\->\fBstudy\fR( \f(CW$name\fR, [$index] )" 4
.IX Item "$obj->study( $name, [$index] )"
Inherited, see \*(L"Access to the header\*(R" in Mail::Message::Head
.SS "About the body"
.IX Subsection "About the body"
Extends \*(L"About the body\*(R" in Mail::Message::Head::Complete.
.ie n .IP "$obj\->\fBguessBodySize\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBguessBodySize\fR()" 4
.IX Item "$obj->guessBodySize()"
Inherited, see \*(L"About the body\*(R" in Mail::Message::Head
.ie n .IP "$obj\->\fBguessTimeStamp\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBguessTimeStamp\fR()" 4
.IX Item "$obj->guessTimeStamp()"
Inherited, see \*(L"About the body\*(R" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBisMultipart\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisMultipart\fR()" 4
.IX Item "$obj->isMultipart()"
Inherited, see \*(L"About the body\*(R" in Mail::Message::Head
.ie n .IP "$obj\->\fBrecvstamp\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBrecvstamp\fR()" 4
.IX Item "$obj->recvstamp()"
Inherited, see \*(L"About the body\*(R" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBtimestamp\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtimestamp\fR()" 4
.IX Item "$obj->timestamp()"
Inherited, see \*(L"About the body\*(R" in Mail::Message::Head::Complete
.SS "Internals"
.IX Subsection "Internals"
Extends \*(L"Internals\*(R" in Mail::Message::Head::Complete.
.ie n .IP "$obj\->\fBaddNoRealize\fR($field)" 4
.el .IP "\f(CW$obj\fR\->\fBaddNoRealize\fR($field)" 4
.IX Item "$obj->addNoRealize($field)"
Inherited, see \*(L"Internals\*(R" in Mail::Message::Head
.ie n .IP "$obj\->\fBaddOrderedFields\fR($fields)" 4
.el .IP "\f(CW$obj\fR\->\fBaddOrderedFields\fR($fields)" 4
.IX Item "$obj->addOrderedFields($fields)"
Inherited, see \*(L"Internals\*(R" in Mail::Message::Head
.ie n .IP "$obj\->\fBcreateFromLine\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBcreateFromLine\fR()" 4
.IX Item "$obj->createFromLine()"
Inherited, see \*(L"Internals\*(R" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBcreateMessageId\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBcreateMessageId\fR()" 4
.IX Item "$obj->createMessageId()"
Inherited, see \*(L"Internals\*(R" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBfileLocation\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfileLocation\fR()" 4
.IX Item "$obj->fileLocation()"
Inherited, see \*(L"Internals\*(R" in Mail::Message::Head
.ie n .IP "$obj\->\fBload\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBload\fR()" 4
.IX Item "$obj->load()"
Inherited, see \*(L"Internals\*(R" in Mail::Message::Head
.ie n .IP "$obj\->\fBmessageIdPrefix\fR( [$prefix, [$hostname]|CODE] )" 4
.el .IP "\f(CW$obj\fR\->\fBmessageIdPrefix\fR( [$prefix, [$hostname]|CODE] )" 4
.IX Item "$obj->messageIdPrefix( [$prefix, [$hostname]|CODE] )"
.PD 0
.IP "Mail::Message::Head::Partial\->\fBmessageIdPrefix\fR( [$prefix, [$hostname]|CODE] )" 4
.IX Item "Mail::Message::Head::Partial->messageIdPrefix( [$prefix, [$hostname]|CODE] )"
.PD
Inherited, see \*(L"Internals\*(R" in Mail::Message::Head::Complete
.ie n .IP "$obj\->\fBmoveLocation\fR($distance)" 4
.el .IP "\f(CW$obj\fR\->\fBmoveLocation\fR($distance)" 4
.IX Item "$obj->moveLocation($distance)"
Inherited, see \*(L"Internals\*(R" in Mail::Message::Head
.ie n .IP "$obj\->\fBread\fR($parser)" 4
.el .IP "\f(CW$obj\fR\->\fBread\fR($parser)" 4
.IX Item "$obj->read($parser)"
Inherited, see \*(L"Internals\*(R" in Mail::Message::Head
.ie n .IP "$obj\->\fBsetNoRealize\fR($field)" 4
.el .IP "\f(CW$obj\fR\->\fBsetNoRealize\fR($field)" 4
.IX Item "$obj->setNoRealize($field)"
Inherited, see \*(L"Internals\*(R" in Mail::Message::Head
.SS "Error handling"
.IX Subsection "Error handling"
Extends \*(L"Error handling\*(R" in Mail::Message::Head::Complete.
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR($object)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR($object)" 4
.IX Item "$obj->addReport($object)"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "$obj->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD 0
.ie n .IP "Mail::Message::Head::Partial\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "Mail::Message::Head::Partial\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "Mail::Message::Head::Partial->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR( [$level, [$strings]] )" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "$obj->log( [$level, [$strings]] )"
.PD 0
.IP "Mail::Message::Head::Partial\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "Mail::Message::Head::Partial->log( [$level, [$strings]] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR($level)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR($level)" 4
.IX Item "$obj->logPriority($level)"
.PD 0
.IP "Mail::Message::Head::Partial\->\fBlogPriority\fR($level)" 4
.IX Item "Mail::Message::Head::Partial->logPriority($level)"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR( [$level] )" 4
.IX Item "$obj->report( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR( [$level] )" 4
.IX Item "$obj->reportAll( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR( [$level] )" 4
.IX Item "$obj->trace( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
Extends \*(L"Cleanup\*(R" in Mail::Message::Head::Complete.
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
Inherited, see \*(L"Cleanup\*(R" in Mail::Reporter
.SH "DETAILS"
.IX Header "DETAILS"
Extends \*(L"\s-1DETAILS\s0\*(R" in Mail::Message::Head::Complete.
.SS "Ordered header fields"
.IX Subsection "Ordered header fields"
Extends \*(L"Ordered header fields\*(R" in Mail::Message::Head::Complete.
.SS "Head class implementation"
.IX Subsection "Head class implementation"
Extends \*(L"Head class implementation\*(R" in Mail::Message::Head::Complete.
.SS "Subsets of header fields"
.IX Subsection "Subsets of header fields"
Extends \*(L"Subsets of header fields\*(R" in Mail::Message::Head::Complete.
.SS "Reducing the header size"
.IX Subsection "Reducing the header size"
A message header is very large in memory and quite large on disk, and
therefore a good candidate for size reduction.  One way to reduce the
size is by simply eliminating superfluous header fields.  Each field
requires at least 100 bytes of run-time memory, so this may help!
.PP
Before you start playing around with \fIremoveFields()\fR and
\&\fIremoveFieldsExcept()\fR, you may take a look at two large groups
of fields which can be removes as sets: the resent headers and the
mailinglist headers.
.PP
Resent headers describe the intermediate steps in the transmission
process for the messages.  After successful delivery, they are rarely
useful.
.PP
When you are archiving a mailinglist, it is hardly ever useful to
store a the list administration lines for each message as well.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Warning: Cannot remove field $name from header: not found." 4
.el .IP "Warning: Cannot remove field \f(CW$name\fR from header: not found." 4
.IX Item "Warning: Cannot remove field $name from header: not found."
You ask to remove a field which is not known in the header.  Using
\&\fIdelete()\fR, \fIreset()\fR, or \fIset()\fR to do the job will not result
in warnings: those methods check the existence of the field first.
.IP "Warning: Field objects have an implied name ($name)" 4
.IX Item "Warning: Field objects have an implied name ($name)"
.PD 0
.ie n .IP "Error: Package $package does not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR does not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package does not implement $method."
.PD
Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.117,
built on August 24, 2014. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2014 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
