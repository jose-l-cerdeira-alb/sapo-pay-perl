.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "AnyEvent::Connection 3"
.TH AnyEvent::Connection 3 "2010-11-16" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
AnyEvent::Connection \- Base class for tcp connectful clients
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    package MyTCPClient;
\&    use base \*(AqAnyEvent::Connection\*(Aq;
\&
\&    package main;
\&    my $client = MyTCPClient\->new(
\&        host => \*(Aqlocalhost\*(Aq,
\&        port => 12345,
\&    );
\&    $client\->reg_cb(
\&        connected => sub {
\&            my ($client,$connection,$host,$port) = @_;
\&            # ...
\&            $client\->after(
\&                $interval, sub {
\&                    # Called after interval, if connection still alive
\&                }
\&            );
\&        }
\&        connfail = sub {
\&            my ($client,$reason) = @_;
\&            # ...
\&        },
\&        disconnect => sub {
\&            my ($client,$reason) = @_;
\&        },
\&        error => sub {
\&            my ($client,$error) = @_;
\&            # Called in error conditions for callbackless methods
\&        },
\&    );
\&    $client\->connect;
.Ve
.SH "EVENTS"
.IX Header "EVENTS"
.ie n .IP "connected ($connobject, $host, $port)" 4
.el .IP "connected ($connobject, \f(CW$host\fR, \f(CW$port\fR)" 4
.IX Item "connected ($connobject, $host, $port)"
Called when client get connected.
.IP "connfail" 4
.IX Item "connfail"
Called, when client fails to connect
.IP "disconnect" 4
.IX Item "disconnect"
Called whenever client disconnects
.IP "error" 4
.IX Item "error"
Called in error conditions for callbackless methods (for ex: when calling push_write on non-connected client)
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "host" 4
.IX Item "host"
Host to connect to
.IP "port" 4
.IX Item "port"
Port to connect to
.IP "timeout [ = 3 ]" 4
.IX Item "timeout [ = 3 ]"
Connect/read/write timeout in seconds
.IP "reconnect [ = 1 ]" 4
.IX Item "reconnect [ = 1 ]"
If true, automatically reconnect after disconnect/connfail after delay \f(CW$reconnect\fR seconds
.IP "rawcon [ = AnyEvent::Connection::Raw ]" 4
.IX Item "rawcon [ = AnyEvent::Connection::Raw ]"
Class that implements low-level connection
.SH "OPERATION METHODS"
.IX Header "OPERATION METHODS"
.IP "new" 4
.IX Item "new"
Cleates connection object (see \s-1OPTIONS\s0)
.IP "connect" 4
.IX Item "connect"
Begin connection
.IP "disconnect ($reason)" 4
.IX Item "disconnect ($reason)"
Close current connection. reason is optional
.IP "reconnect" 4
.IX Item "reconnect"
Close current connection and establish a new one
.ie n .IP "after($interval, $cb\->())" 4
.el .IP "after($interval, \f(CW$cb\fR\->())" 4
.IX Item "after($interval, $cb->())"
Helper method. AE::timer(after), associated with current connection
.Sp
Will be destroyed if connection is destroyed, so no timer invocation after connection destruction.
.ie n .IP "periodic($interval, $cb\->())" 4
.el .IP "periodic($interval, \f(CW$cb\fR\->())" 4
.IX Item "periodic($interval, $cb->())"
Helper method. AE::timer(periodic), associated with current connection
.Sp
Will be destroyed if connection is destroyed, so no timer invocation after connection destruction.
.IP "\fIperiodic_stop()\fR" 4
.IX Item "periodic_stop()"
If called within periodic callback, periodic will be stopped.
.Sp
.Vb 4
\&    my $count;
\&    $client\->periodic(1,sub {
\&        $client\->periodic_stop if ++$count > 10;
\&    });
\&    
\&    # callback will be called only 10 times;
.Ve
.IP "destroy" 4
.IX Item "destroy"
Close connection, destroy all associated objects and timers, clean self
.SH "CONNECT METHODS"
.IX Header "CONNECT METHODS"
When connected, there are some methods, that proxied to raw connection or to AE::Handle
.IP "push_write" 4
.IX Item "push_write"
See AE::Handle::push_write
.IP "push_read" 4
.IX Item "push_read"
See AE::Handle::push_read
.IP "unshift_read" 4
.IX Item "unshift_read"
See AE::Handle::unshift_read
.IP "say" 4
.IX Item "say"
Same as push_write + newline
.IP "reply" 4
.IX Item "reply"
Same as push_write + newline
.PP
For next methods there is a feature.
Callback will be called in any way, either by successful processing or by error or object destruction
.ie n .IP "recv($bytes, %args, cb => $cb\->())" 4
.el .IP "recv($bytes, \f(CW%args\fR, cb => \f(CW$cb\fR\->())" 4
.IX Item "recv($bytes, %args, cb => $cb->())"
Similar to
.Sp
.Vb 1
\&    $fh\->push_read(chunk => $bytes, $cb\->());
.Ve
.ie n .IP "command($data, %args, cb => $cb\->());" 4
.el .IP "command($data, \f(CW%args\fR, cb => \f(CW$cb\fR\->());" 4
.IX Item "command($data, %args, cb => $cb->());"
Similar to
.Sp
.Vb 2
\&    $fh\->push_write($data);
\&    $fh\->push_read(line => $cb\->());
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Mons Anderson, \f(CW\*(C`<mons at cpan.org>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-anyevent\-connection at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=AnyEvent\-Connection>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc AnyEvent::Connection
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
\&\s-1RT:\s0 \s-1CPAN\s0's request tracker
.Sp
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=AnyEvent\-Connection>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/AnyEvent\-Connection>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/AnyEvent\-Connection>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/AnyEvent\-Connection/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2009 Mons Anderson, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
