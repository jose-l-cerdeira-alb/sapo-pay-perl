.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Box::Manage::User 3"
.TH Mail::Box::Manage::User 3 "2019-10-04" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Box::Manage::User \- manage the folders of a user
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 3
\& Mail::Box::Manage::User
\&   is a Mail::Box::Manager
\&   is a Mail::Reporter
\&
\& Mail::Box::Manage::User is extended by
\&   Mail::Server::IMAP4::User
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Mail::Box::Manage::User;
\& use User::Identity;
\&
\& my $id      = User::Identity\->new(...);
\& my $user    = Mail::Box::Manage::User\->new
\&   ( identity  => $id
\&   , folderdir => "$ENV{HOME}/Mail"
\&   , inbox     => $ENV{MAIL}
\&   );
\&
\& my $inbox   = $user\->open($user\->inbox);
\& my $top     = $user\->topfolder;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Where the Mail::Box::Manager takes care of some set of open folder,
this extension will add knowledge about some related person.  At the
same time, it will try to cache some information about that person's
folder files.
.PP
Extends \*(L"\s-1DESCRIPTION\*(R"\s0 in Mail::Box::Manager.
.SH "METHODS"
.IX Header "METHODS"
Extends \*(L"\s-1METHODS\*(R"\s0 in Mail::Box::Manager.
.SS "Constructors"
.IX Subsection "Constructors"
Extends \*(L"Constructors\*(R" in Mail::Box::Manager.
.IP "Mail::Box::Manage::User\->\fBnew\fR($args)" 4
.IX Item "Mail::Box::Manage::User->new($args)"
Use new(default_folder_type) to explicitly state which kind of folders
you use.
.Sp
.Vb 10
\& \-Option             \-\-Defined in        \-\-Default
\&  autodetect           Mail::Box::Manager  undef
\&  collection_type                          Mail::Box::Collection
\&  default_folder_type  Mail::Box::Manager  \*(Aqmbox\*(Aq
\&  delimiter                                "/"
\&  folder_id_type                           Mail::Box::Identity
\&  folder_types         Mail::Box::Manager  <all standard types>
\&  folderdir            Mail::Box::Manager  [ \*(Aq.\*(Aq ]
\&  folderdirs           Mail::Box::Manager  <synonym for C<folderdir>>
\&  identity                                 <required>
\&  inbox                                    undef
\&  log                  Mail::Reporter      \*(AqWARNINGS\*(Aq
\&  topfolder_name                           \*(Aq=\*(Aq
\&  trace                Mail::Reporter      \*(AqWARNINGS\*(Aq
.Ve
.RS 4
.IP "autodetect => TYPE|ARRAY\-OF\-TYPES" 2
.IX Item "autodetect => TYPE|ARRAY-OF-TYPES"
.PD 0
.IP "collection_type => \s-1CLASS\s0" 2
.IX Item "collection_type => CLASS"
.PD
Subfolders grouped together.
.IP "default_folder_type => NAME|CLASS" 2
.IX Item "default_folder_type => NAME|CLASS"
.PD 0
.IP "delimiter => \s-1STRING\s0" 2
.IX Item "delimiter => STRING"
.PD
The separator used in folder names.  This doesn't need to be the
same as your directory system is using.
.IP "folder_id_type => CLASS|OBJECT" 2
.IX Item "folder_id_type => CLASS|OBJECT"
.PD 0
.IP "folder_types => NEW-TYPE | ARRAY-OF-NEW-TYPES" 2
.IX Item "folder_types => NEW-TYPE | ARRAY-OF-NEW-TYPES"
.IP "folderdir => \s-1DIRECTORY\s0" 2
.IX Item "folderdir => DIRECTORY"
.IP "folderdirs => [\s-1DIRECTORIES\s0]" 2
.IX Item "folderdirs => [DIRECTORIES]"
.IP "identity => \s-1OBJECT\s0" 2
.IX Item "identity => OBJECT"
.PD
The main difference between the Mail::Box::Manager and this class, is
the concept of some person (or virtual person) who's files are being
administered by this object.  The \s-1OBJECT\s0 is an User::Identity.
.Sp
The smallest identity that will do:
\&\f(CW\*(C`my $id = User::Identity\->new(\*(Aqmyname\*(Aq)\*(C'\fR
.IP "inbox => \s-1NAME\s0" 2
.IX Item "inbox => NAME"
The name of the user's inbox.
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
.PD 0
.IP "topfolder_name => \s-1STRING\s0" 2
.IX Item "topfolder_name => STRING"
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
.RE
.RS 4
.RE
.PD
.SS "Attributes"
.IX Subsection "Attributes"
Extends \*(L"Attributes\*(R" in Mail::Box::Manager.
.ie n .IP "$obj\->\fBdefaultFolderType\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultFolderType\fR()" 4
.IX Item "$obj->defaultFolderType()"
Inherited, see \*(L"Attributes\*(R" in Mail::Box::Manager
.ie n .IP "$obj\->\fBfolderTypes\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfolderTypes\fR()" 4
.IX Item "$obj->folderTypes()"
Inherited, see \*(L"Attributes\*(R" in Mail::Box::Manager
.ie n .IP "$obj\->\fBfolderdir\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfolderdir\fR()" 4
.IX Item "$obj->folderdir()"
Inherited, see \*(L"Attributes\*(R" in Mail::Box::Manager
.ie n .IP "$obj\->\fBidentity\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBidentity\fR()" 4
.IX Item "$obj->identity()"
Returns a User::Identity object.
.ie n .IP "$obj\->\fBinbox\fR( [$name] )" 4
.el .IP "\f(CW$obj\fR\->\fBinbox\fR( [$name] )" 4
.IX Item "$obj->inbox( [$name] )"
(Set and) get the \f(CW$name\fR of the mailbox which is considered the folder
for incoming mail.  In many protocols, this folder is handled separately.
For instance in \s-1IMAP\s0 this is the only case-insensitive folder name.
.ie n .IP "$obj\->\fBregisterType\fR($type, $class, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBregisterType\fR($type, \f(CW$class\fR, \f(CW%options\fR)" 4
.IX Item "$obj->registerType($type, $class, %options)"
Inherited, see \*(L"Attributes\*(R" in Mail::Box::Manager
.SS "Manage open folders"
.IX Subsection "Manage open folders"
Extends \*(L"Manage open folders\*(R" in Mail::Box::Manager.
.ie n .IP "$obj\->\fBclose\fR($folder, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBclose\fR($folder, \f(CW%options\fR)" 4
.IX Item "$obj->close($folder, %options)"
Inherited, see \*(L"Manage open folders\*(R" in Mail::Box::Manager
.ie n .IP "$obj\->\fBcloseAllFolders\fR(, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBcloseAllFolders\fR(, \f(CW%options\fR)" 4
.IX Item "$obj->closeAllFolders(, %options)"
Inherited, see \*(L"Manage open folders\*(R" in Mail::Box::Manager
.ie n .IP "$obj\->\fBisOpenFolder\fR($folder)" 4
.el .IP "\f(CW$obj\fR\->\fBisOpenFolder\fR($folder)" 4
.IX Item "$obj->isOpenFolder($folder)"
Inherited, see \*(L"Manage open folders\*(R" in Mail::Box::Manager
.ie n .IP "$obj\->\fBopen\fR( [$foldername], %options )" 4
.el .IP "\f(CW$obj\fR\->\fBopen\fR( [$foldername], \f(CW%options\fR )" 4
.IX Item "$obj->open( [$foldername], %options )"
Inherited, see \*(L"Manage open folders\*(R" in Mail::Box::Manager
.ie n .IP "$obj\->\fBopenFolders\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBopenFolders\fR()" 4
.IX Item "$obj->openFolders()"
Inherited, see \*(L"Manage open folders\*(R" in Mail::Box::Manager
.SS "Manage existing folders"
.IX Subsection "Manage existing folders"
Extends \*(L"Manage existing folders\*(R" in Mail::Box::Manager.
.SS "Manage folders"
.IX Subsection "Manage folders"
.ie n .IP "$obj\->\fBcreate\fR($name, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBcreate\fR($name, \f(CW%options\fR)" 4
.IX Item "$obj->create($name, %options)"
Creates a new folder with the specified name.  An folder's administrative
structure (Mail::Box::Identity) is returned, but the folder is not
opened.
.Sp
In the accidental case that the folder already
exists, a warning will be issued, and an empty list/undef returned.
.Sp
The \f(CW%options\fR are passed to \fBMail::Box::create()\fR of your default folder
type, except for the options intended for this method itself.
.Sp
.Vb 5
\& \-Option       \-\-Default
\&  create_real    <true>
\&  create_supers  <false>
\&  deleted        <false>
\&  id_options     []
.Ve
.RS 4
.IP "create_real => \s-1BOOLEAN\s0" 2
.IX Item "create_real => BOOLEAN"
When this option is false, the pysical folder will not be created, but
only the administration is updated.
.IP "create_supers => \s-1BOOLEAN\s0" 2
.IX Item "create_supers => BOOLEAN"
When you create a folder where upper hierarchy level are missing, they
will be created as well.
.IP "deleted => \s-1BOOLEAN\s0" 2
.IX Item "deleted => BOOLEAN"
The folder starts as deleted.
.IP "id_options => \s-1ARRAY\s0" 2
.IX Item "id_options => ARRAY"
Values passed to the instantiated Mail::Box::Identity.  That object
is very picky about the initiation values it accepts.
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBdelete\fR($name)" 4
.el .IP "\f(CW$obj\fR\->\fBdelete\fR($name)" 4
.IX Item "$obj->delete($name)"
Remove all signs from the folder on the file-system.  Messages still in
the folder will be removed.  This method returns a true value when the
folder has been removed or not found, so \*(L"false\*(R" means failure.
.Sp
It is also possible to delete a folder using \f(CW\*(C`$folder\->delete\*(C'\fR,
which will call this method here.  \s-1OPTIONS,\s0 which are used for some
other folder types, will be ignored here: the user's index contains the
required details.
.Sp
.Vb 2
\& \-Option   \-\-Defined in        \-\-Default
\&  recursive  Mail::Box::Manager  <folder\*(Aqs default>
.Ve
.RS 4
.IP "recursive => \s-1BOOLEAN\s0" 2
.IX Item "recursive => BOOLEAN"
.RE
.RS 4
.Sp
example: how to delete a folder
.Sp
.Vb 1
\& print "no xyz (anymore)\en" if $user\->delete(\*(Aqxyz\*(Aq);
.Ve
.RE
.ie n .IP "$obj\->\fBfolder\fR($name)" 4
.el .IP "\f(CW$obj\fR\->\fBfolder\fR($name)" 4
.IX Item "$obj->folder($name)"
Returns the folder description, a Mail::Box::Identity.
.ie n .IP "$obj\->\fBfolderCollection\fR($name)" 4
.el .IP "\f(CW$obj\fR\->\fBfolderCollection\fR($name)" 4
.IX Item "$obj->folderCollection($name)"
Returns a pair: the folder collection (Mail::Box::Collection) and
the base name of \f(CW$name\fR.
.ie n .IP "$obj\->\fBrename\fR($oldname, $newname, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBrename\fR($oldname, \f(CW$newname\fR, \f(CW%options\fR)" 4
.IX Item "$obj->rename($oldname, $newname, %options)"
Rename the folder with name \f(CW$oldname\fR to \f(CW$newname\fR.  Both names are full
pathnames.
.Sp
.Vb 2
\& \-Option       \-\-Default
\&  create_supers  <false>
.Ve
.RS 4
.IP "create_supers => \s-1BOOLEAN\s0" 2
.IX Item "create_supers => BOOLEAN"
When you rename a folder to a place where upper hierarchy levels are
missing, they will get be defined, but with the deleted flag set.
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBtopfolder\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtopfolder\fR()" 4
.IX Item "$obj->topfolder()"
Returns the top folder of the user's mailbox storage.
.SS "Move messages to folders"
.IX Subsection "Move messages to folders"
Extends \*(L"Move messages to folders\*(R" in Mail::Box::Manager.
.ie n .IP "$obj\->\fBappendMessage\fR( [$folder|$foldername], $messages, %options )" 4
.el .IP "\f(CW$obj\fR\->\fBappendMessage\fR( [$folder|$foldername], \f(CW$messages\fR, \f(CW%options\fR )" 4
.IX Item "$obj->appendMessage( [$folder|$foldername], $messages, %options )"
Inherited, see \*(L"Move messages to folders\*(R" in Mail::Box::Manager
.ie n .IP "$obj\->\fBcopyMessage\fR( [$folder|$foldername], $messages, %options )" 4
.el .IP "\f(CW$obj\fR\->\fBcopyMessage\fR( [$folder|$foldername], \f(CW$messages\fR, \f(CW%options\fR )" 4
.IX Item "$obj->copyMessage( [$folder|$foldername], $messages, %options )"
Inherited, see \*(L"Move messages to folders\*(R" in Mail::Box::Manager
.ie n .IP "$obj\->\fBmoveMessage\fR( [$folder|$foldername], $messages, %options )" 4
.el .IP "\f(CW$obj\fR\->\fBmoveMessage\fR( [$folder|$foldername], \f(CW$messages\fR, \f(CW%options\fR )" 4
.IX Item "$obj->moveMessage( [$folder|$foldername], $messages, %options )"
Inherited, see \*(L"Move messages to folders\*(R" in Mail::Box::Manager
.SS "Manage message threads"
.IX Subsection "Manage message threads"
Extends \*(L"Manage message threads\*(R" in Mail::Box::Manager.
.ie n .IP "$obj\->\fBthreads\fR( [$folders], %options )" 4
.el .IP "\f(CW$obj\fR\->\fBthreads\fR( [$folders], \f(CW%options\fR )" 4
.IX Item "$obj->threads( [$folders], %options )"
Inherited, see \*(L"Manage message threads\*(R" in Mail::Box::Manager
.SS "Internals"
.IX Subsection "Internals"
Extends \*(L"Internals\*(R" in Mail::Box::Manager.
.ie n .IP "$obj\->\fBdecodeFolderURL\fR($url)" 4
.el .IP "\f(CW$obj\fR\->\fBdecodeFolderURL\fR($url)" 4
.IX Item "$obj->decodeFolderURL($url)"
Inherited, see \*(L"Internals\*(R" in Mail::Box::Manager
.ie n .IP "$obj\->\fBtoBeThreaded\fR($folder, $messages)" 4
.el .IP "\f(CW$obj\fR\->\fBtoBeThreaded\fR($folder, \f(CW$messages\fR)" 4
.IX Item "$obj->toBeThreaded($folder, $messages)"
Inherited, see \*(L"Internals\*(R" in Mail::Box::Manager
.ie n .IP "$obj\->\fBtoBeUnthreaded\fR($folder, $messages)" 4
.el .IP "\f(CW$obj\fR\->\fBtoBeUnthreaded\fR($folder, \f(CW$messages\fR)" 4
.IX Item "$obj->toBeUnthreaded($folder, $messages)"
Inherited, see \*(L"Internals\*(R" in Mail::Box::Manager
.SS "Error handling"
.IX Subsection "Error handling"
Extends \*(L"Error handling\*(R" in Mail::Box::Manager.
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR($object)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR($object)" 4
.IX Item "$obj->addReport($object)"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "$obj->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD 0
.ie n .IP "Mail::Box::Manage::User\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "Mail::Box::Manage::User\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "Mail::Box::Manage::User->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR( [$level, [$strings]] )" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "$obj->log( [$level, [$strings]] )"
.PD 0
.IP "Mail::Box::Manage::User\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "Mail::Box::Manage::User->log( [$level, [$strings]] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR($level)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR($level)" 4
.IX Item "$obj->logPriority($level)"
.PD 0
.IP "Mail::Box::Manage::User\->\fBlogPriority\fR($level)" 4
.IX Item "Mail::Box::Manage::User->logPriority($level)"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR( [$level] )" 4
.IX Item "$obj->report( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR( [$level] )" 4
.IX Item "$obj->reportAll( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR( [$level] )" 4
.IX Item "$obj->trace( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
Extends \*(L"Cleanup\*(R" in Mail::Box::Manager.
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
Inherited, see \*(L"Cleanup\*(R" in Mail::Reporter
.SH "DETAILS"
.IX Header "DETAILS"
Extends \*(L"\s-1DETAILS\*(R"\s0 in Mail::Box::Manager.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Cannot create $name: higher levels missing" 4
.el .IP "Error: Cannot create \f(CW$name:\fR higher levels missing" 4
.IX Item "Error: Cannot create $name: higher levels missing"
Unless you set create(create_supers), all higher level folders must
exist before this new one can be created.
.ie n .IP "Error: Cannot rename $name to $new: higher levels missing" 4
.el .IP "Error: Cannot rename \f(CW$name\fR to \f(CW$new:\fR higher levels missing" 4
.IX Item "Error: Cannot rename $name to $new: higher levels missing"
Unless you set create(create_supers), all higher level folders must
exist before this new one can be created.
.ie n .IP "Error: Folder $name is already open." 4
.el .IP "Error: Folder \f(CW$name\fR is already open." 4
.IX Item "Error: Folder $name is already open."
You cannot ask the manager for a folder which is already open. In some
older releases (before MailBox 2.049), this was permitted, but then
behaviour changed, because many nasty side-effects are to be expected.
For instance, an \fBMail::Box::update()\fR on one folder handle would
influence the second, probably unexpectedly.
.ie n .IP "Error: Folder $name is not a Mail::Box; cannot add a message." 4
.el .IP "Error: Folder \f(CW$name\fR is not a Mail::Box; cannot add a message." 4
.IX Item "Error: Folder $name is not a Mail::Box; cannot add a message."
The folder where the message should be appended to is an object which is
not a folder type which extends Mail::Box.  Probably, it is not a folder
at all.
.ie n .IP "Warning: Folder does not exist, failed opening $type folder $name." 4
.el .IP "Warning: Folder does not exist, failed opening \f(CW$type\fR folder \f(CW$name\fR." 4
.IX Item "Warning: Folder does not exist, failed opening $type folder $name."
The folder does not exist and creating is not permitted (see
open(create)) or did not succeed.  When you do not have sufficient
access rights to the folder (for instance wrong password for \s-1POP3\s0),
this warning will be produced as well.
.Sp
The manager tried to open a folder of the specified type.  It may help
to explicitly state the type of your folder with the \f(CW\*(C`type\*(C'\fR option.
There will probably be another warning or error message which is related
to this report and provides more details about its cause.  You may also
have a look at new(autodetect) and new(folder_types).
.ie n .IP "Warning: Folder type $type is unknown, using autodetect." 4
.el .IP "Warning: Folder type \f(CW$type\fR is unknown, using autodetect." 4
.IX Item "Warning: Folder type $type is unknown, using autodetect."
The specified folder type (see open(type), possibly derived from
the folder name when specified as url) is not known to the manager.
This may mean that you forgot to require the Mail::Box extension
which implements this folder type, but probably it is a typo.  Usually,
the manager is able to figure-out which type to use by itself.
.IP "Error: Illegal folder \s-1URL\s0 '$url'." 4
.IX Item "Error: Illegal folder URL '$url'."
The folder name was specified as \s-1URL,\s0 but not according to the syntax.
See \fBdecodeFolderURL()\fR for an description of the syntax.
.IP "Error: No foldername specified to open." 4
.IX Item "Error: No foldername specified to open."
\&\f(CW\*(C`open()\*(C'\fR needs a folder name as first argument (before the list of options),
or with the \f(CW\*(C`folder\*(C'\fR option within the list.  If no name was found, the
\&\s-1MAIL\s0 environment variable is checked.  When even that does not result in
a usable folder, then this error is produced.  The error may be caused by
an accidental odd-length option list.
.ie n .IP "Error: Package $package does not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR does not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package does not implement $method."
Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.
.ie n .IP "Error: Unable to remove folder $dir" 4
.el .IP "Error: Unable to remove folder \f(CW$dir\fR" 4
.IX Item "Error: Unable to remove folder $dir"
.PD 0
.IP "Error: Use \fBappendMessage()\fR to add messages which are not in a folder." 4
.IX Item "Error: Use appendMessage() to add messages which are not in a folder."
.PD
You do not need to copy this message into the folder, because you do
not share the message between folders.
.IP "Warning: Use \fBmoveMessage()\fR or \fBcopyMessage()\fR to move between open folders." 4
.IX Item "Warning: Use moveMessage() or copyMessage() to move between open folders."
The message is already part of a folder, and now it should be appended
to a different folder.  You need to decide between copy or move, which
both will clone the message (not the body, because they are immutable).
.ie n .IP "Warning: Will never create a folder $name without having write access." 4
.el .IP "Warning: Will never create a folder \f(CW$name\fR without having write access." 4
.IX Item "Warning: Will never create a folder $name without having write access."
You have set open(create), but only want to read the folder.  Create is
only useful for folders which have write or append access modes
(see Mail::Box::new(access)).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 3.008,
built on October 04, 2019. Website: \fIhttp://perl.overmeer.net/CPAN/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2019 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://dev.perl.org/licenses/\fR
