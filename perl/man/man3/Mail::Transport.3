.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Transport 3"
.TH Mail::Transport 3 "2020-07-22" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Transport \- use Mail Transfer Agents (MTAs)
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 2
\& Mail::Transport
\&   is a Mail::Reporter
\&
\& Mail::Transport is extended by
\&   Mail::Transport::Receive
\&   Mail::Transport::Send
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& my $message = Mail::Message\->new(...);
\&
\& # Some extensions implement sending:
\& $message\->send;
\& $message\->send(via => \*(Aqsendmail\*(Aq);
\&
\& my $sender = Mail::Transport::SMTP\->new(...);
\& $sender\->send($message);
\&
\& # Some extensions implement receiving:
\& my $receiver = Mail::Transport::POP3\->new(...);
\& $message = $receiver\->receive;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Objects which extend \f(CW\*(C`Mail::Transport\*(C'\fR implement sending and/or
receiving of messages, using various protocols.
.PP
Mail::Transport::Send extends this class, and offers general
functionality for send protocols, like \s-1SMTP.\s0  Mail::Transport::Receive
also extends this class, and offers receive method.  Some transport
protocols will implement both sending and receiving.
.PP
Extends \*(L"\s-1DESCRIPTION\*(R"\s0 in Mail::Reporter.
.SH "METHODS"
.IX Header "METHODS"
Extends \*(L"\s-1METHODS\*(R"\s0 in Mail::Reporter.
.SS "Constructors"
.IX Subsection "Constructors"
Extends \*(L"Constructors\*(R" in Mail::Reporter.
.IP "Mail::Transport\->\fBnew\fR(%options)" 4
.IX Item "Mail::Transport->new(%options)"
.Vb 10
\& \-Option    \-\-Defined in     \-\-Default
\&  executable                   undef
\&  hostname                     \*(Aqlocalhost\*(Aq
\&  interval                     30
\&  log         Mail::Reporter   \*(AqWARNINGS\*(Aq
\&  password                     undef
\&  port                         undef
\&  proxy                        undef
\&  retry                        <false>
\&  timeout                      120
\&  trace       Mail::Reporter   \*(AqWARNINGS\*(Aq
\&  username                     undef
\&  via                          \*(Aqsendmail\*(Aq
.Ve
.RS 4
.IP "executable => \s-1FILENAME\s0" 2
.IX Item "executable => FILENAME"
If you specify an executable, the module does not need to search the
system directories to figure-out where the client lives.  Using this
decreases the flexible usage of your program: moving your program
to other systems may involve changing the path to the executable,
which otherwise would work auto-detect and unmodified.
.IP "hostname => HOSTNAME|ARRAY" 2
.IX Item "hostname => HOSTNAME|ARRAY"
The host on which the server runs.  Some protocols accept an \s-1ARRAY\s0
of alternatives for this option.
.IP "interval => \s-1SECONDS\s0" 2
.IX Item "interval => SECONDS"
The time between tries to contact the remote server for sending or
receiving a message in \s-1SECONDS.\s0  This number must be larger than 0.
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
.PD 0
.IP "password => \s-1STRING\s0" 2
.IX Item "password => STRING"
.PD
Some protocols require a password to be given, usually in combination
with a password.
.IP "port => \s-1INTEGER\s0" 2
.IX Item "port => INTEGER"
The port number behind which the service is hiding on the remote server.
.IP "proxy => \s-1PATH\s0" 2
.IX Item "proxy => PATH"
The name of the proxy software (the protocol handler).  This must be
the name (preferable the absolute path) of your mail delivery
software.
.IP "retry => NUMBER|undef" 2
.IX Item "retry => NUMBER|undef"
The number of retries before the sending will fail.  If \f(CW\*(C`undef\*(C'\fR, the
number of retries is unlimited.
.IP "timeout => \s-1SECONDS\s0" 2
.IX Item "timeout => SECONDS"
\&\s-1SECONDS\s0 till time-out while establishing the connection to a remote server.
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
.PD 0
.IP "username => \s-1STRING\s0" 2
.IX Item "username => STRING"
.PD
Some protocols require a user to login.
.IP "via => CLASS|NAME" 2
.IX Item "via => CLASS|NAME"
Which \s-1CLASS\s0 (extending \f(CW\*(C`Mail::Transport\*(C'\fR) will transport the data.
Some predefined NAMEs avoid long class names: \f(CW\*(C`mail\*(C'\fR and \f(CW\*(C`mailx\*(C'\fR
are handled by the Mail::Transport::Mailx module, \f(CW\*(C`sendmail\*(C'\fR
and \f(CW\*(C`postfix\*(C'\fR belong to Mail::Transport::Sendmail, and \f(CW\*(C`smtp\*(C'\fR
is implemented in Mail::Transport::SMTP.
.Sp
The \f(CW\*(C`pop\*(C'\fR or \f(CW\*(C`pop3\*(C'\fR protocol implementation can be found distribution
Mail::Transport::POP3.  For \f(CW\*(C`imap\*(C'\fR or \f(CW\*(C`imap4\*(C'\fR, install
Mail::Transport::IMAP4.
.RE
.RS 4
.RE
.SS "Server connection"
.IX Subsection "Server connection"
.ie n .IP "$obj\->\fBfindBinary\fR( $name, [@directories] )" 4
.el .IP "\f(CW$obj\fR\->\fBfindBinary\fR( \f(CW$name\fR, [@directories] )" 4
.IX Item "$obj->findBinary( $name, [@directories] )"
Look for a binary with the specified \f(CW$name\fR in the directories which
are defined to be safe.  The list of standard directories is followed
by the optional \f(CW@directories\fR.  The full pathname is returned.
.Sp
You may specify new(proxy), which specifies the absolute name
of the binary to be used.
.ie n .IP "$obj\->\fBremoteHost\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBremoteHost\fR()" 4
.IX Item "$obj->remoteHost()"
Returns the hostname, port number, username and password to be used to
establish the connection to the server for sending or receiving mail.
.ie n .IP "$obj\->\fBretry\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBretry\fR()" 4
.IX Item "$obj->retry()"
Returns the retry interval, retry count, and timeout for the connection.
.SS "Error handling"
.IX Subsection "Error handling"
Extends \*(L"Error handling\*(R" in Mail::Reporter.
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR($object)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR($object)" 4
.IX Item "$obj->addReport($object)"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "$obj->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD 0
.ie n .IP "Mail::Transport\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "Mail::Transport\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "Mail::Transport->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR( [$level, [$strings]] )" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "$obj->log( [$level, [$strings]] )"
.PD 0
.IP "Mail::Transport\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "Mail::Transport->log( [$level, [$strings]] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR($level)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR($level)" 4
.IX Item "$obj->logPriority($level)"
.PD 0
.IP "Mail::Transport\->\fBlogPriority\fR($level)" 4
.IX Item "Mail::Transport->logPriority($level)"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR( [$level] )" 4
.IX Item "$obj->report( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR( [$level] )" 4
.IX Item "$obj->reportAll( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR( [$level] )" 4
.IX Item "$obj->trace( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
Extends \*(L"Cleanup\*(R" in Mail::Reporter.
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
Inherited, see \*(L"Cleanup\*(R" in Mail::Reporter
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Warning: Avoid program abuse: specify an absolute path for $exec." 4
.el .IP "Warning: Avoid program abuse: specify an absolute path for \f(CW$exec\fR." 4
.IX Item "Warning: Avoid program abuse: specify an absolute path for $exec."
Specifying explicit locations for executables of email transfer agents
should only be done with absolute file names, to avoid various pontential
security problems.
.ie n .IP "Warning: Executable $exec does not exist." 4
.el .IP "Warning: Executable \f(CW$exec\fR does not exist." 4
.IX Item "Warning: Executable $exec does not exist."
The explicitly indicated mail transfer agent does not exists. The normal
settings are used to find the correct location.
.ie n .IP "Error: Package $package does not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR does not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package does not implement $method."
Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Transport distribution version 3.005,
built on July 22, 2020. Website: \fIhttp://perl.overmeer.net/CPAN/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2020 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://dev.perl.org/licenses/\fR
