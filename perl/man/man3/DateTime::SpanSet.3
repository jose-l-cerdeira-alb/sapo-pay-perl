.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DateTime::SpanSet 3"
.TH DateTime::SpanSet 3 "2020-07-22" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DateTime::SpanSet \- set of DateTime spans
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    $spanset = DateTime::SpanSet\->from_spans( spans => [ $dt_span, $dt_span ] );
\&
\&    $set = $spanset\->union( $set2 );         # like "OR", "insert", "both"
\&    $set = $spanset\->complement( $set2 );    # like "delete", "remove"
\&    $set = $spanset\->intersection( $set2 );  # like "AND", "while"
\&    $set = $spanset\->complement;             # like "NOT", "negate", "invert"
\&
\&    if ( $spanset\->intersects( $set2 ) ) { ...  # like "touches", "interferes"
\&    if ( $spanset\->contains( $set2 ) ) { ...    # like "is\-fully\-inside"
\&
\&    # data extraction 
\&    $date = $spanset\->min;           # first date of the set
\&    $date = $spanset\->max;           # last date of the set
\&
\&    $iter = $spanset\->iterator;
\&    while ( $dt = $iter\->next ) {
\&        # $dt is a DateTime::Span
\&        print $dt\->start\->ymd;   # first date of span
\&        print $dt\->end\->ymd;     # last date of span
\&    };
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`DateTime::SpanSet\*(C'\fR is a class that represents sets of datetime
spans.  An example would be a recurring meeting that occurs from
13:00\-15:00 every Friday.
.PP
This is different from a \f(CW\*(C`DateTime::Set\*(C'\fR, which is made of individual
datetime points as opposed to ranges.
.SH "METHODS"
.IX Header "METHODS"
.IP "\(bu" 4
from_spans
.Sp
Creates a new span set from one or more \f(CW\*(C`DateTime::Span\*(C'\fR objects.
.Sp
.Vb 1
\&   $spanset = DateTime::SpanSet\->from_spans( spans => [ $dt_span ] );
.Ve
.IP "\(bu" 4
from_set_and_duration
.Sp
Creates a new span set from one or more \f(CW\*(C`DateTime::Set\*(C'\fR objects and a
duration.
.Sp
The duration can be a \f(CW\*(C`DateTime::Duration\*(C'\fR object, or the parameters
to create a new \f(CW\*(C`DateTime::Duration\*(C'\fR object, such as \*(L"days\*(R",
\&\*(L"months\*(R", etc.
.Sp
.Vb 3
\&   $spanset =
\&       DateTime::SpanSet\->from_set_and_duration
\&           ( set => $dt_set, days => 1 );
.Ve
.IP "\(bu" 4
from_sets
.Sp
Creates a new span set from two \f(CW\*(C`DateTime::Set\*(C'\fR objects.
.Sp
One set defines the \fIstarting dates\fR, and the other defines the \fIend
dates\fR.
.Sp
.Vb 3
\&   $spanset =
\&       DateTime::SpanSet\->from_sets
\&           ( start_set => $dt_set1, end_set => $dt_set2 );
.Ve
.Sp
The spans have the starting date \f(CW\*(C`closed\*(C'\fR, and the end date \f(CW\*(C`open\*(C'\fR,
like in \f(CW\*(C`[$dt1, $dt2)\*(C'\fR.
.Sp
If an end date comes without a starting date before it, then it
defines a span like \f(CW\*(C`(\-inf, $dt)\*(C'\fR.
.Sp
If a starting date comes without an end date after it, then it defines
a span like \f(CW\*(C`[$dt, inf)\*(C'\fR.
.IP "\(bu" 4
empty_set
.Sp
Creates a new empty set.
.IP "\(bu" 4
is_empty_set
.Sp
Returns true is the set is empty; false otherwise.
.Sp
.Vb 1
\&    print "nothing" if $set\->is_empty_set;
.Ve
.IP "\(bu" 4
clone
.Sp
This object method returns a replica of the given object.
.IP "\(bu" 4
set_time_zone( \f(CW$tz\fR )
.Sp
This method accepts either a time zone object or a string that can be
passed as the \*(L"name\*(R" parameter to \f(CW\*(C`DateTime::TimeZone\->new()\*(C'\fR.
If the new time zone's offset is different from the old time zone,
then the \fIlocal\fR time is adjusted accordingly.
.Sp
If the old time zone was a floating time zone, then no adjustments to
the local time are made, except to account for leap seconds.  If the
new time zone is floating, then the \fI\s-1UTC\s0\fR time is adjusted in order
to leave the local time untouched.
.IP "\(bu" 4
start, min
.IP "\(bu" 4
end, max
.Sp
First or last dates in the set.
.Sp
It is possible that the return value from these methods may be a
\&\f(CW\*(C`DateTime::Infinite::Future\*(C'\fR or a \f(CW\*(C`DateTime::Infinite::Past\*(C'\fR object.
.Sp
If the set ends \f(CW\*(C`before\*(C'\fR a date \f(CW$dt\fR, it returns \f(CW$dt\fR. Note that
in this case \f(CW$dt\fR is not a set element \- but it is a set boundary.
.Sp
These methods may return \f(CW\*(C`undef\*(C'\fR if the set is empty.
.Sp
These methods return just a \fIcopy\fR of the actual boundary value.
If you modify the result, the set will not be modified.
.IP "\(bu" 4
duration
.Sp
The total size of the set, as a \f(CW\*(C`DateTime::Duration\*(C'\fR object.
.Sp
The duration may be infinite.
.Sp
Also available as \f(CW\*(C`size()\*(C'\fR.
.IP "\(bu" 4
span
.Sp
The total span of the set, as a \f(CW\*(C`DateTime::Span\*(C'\fR object.
.IP "\(bu" 4
next
.Sp
.Vb 1
\&  my $span = $set\->next( $dt );
.Ve
.Sp
This method is used to find the next span in the set,
after a given datetime or span.
.Sp
The return value is a \f(CW\*(C`DateTime::Span\*(C'\fR, or \f(CW\*(C`undef\*(C'\fR if there is no matching
span in the set.
.IP "\(bu" 4
previous
.Sp
.Vb 1
\&  my $span = $set\->previous( $dt );
.Ve
.Sp
This method is used to find the previous span in the set,
before a given datetime or span.
.Sp
The return value is a \f(CW\*(C`DateTime::Span\*(C'\fR, or \f(CW\*(C`undef\*(C'\fR if there is no matching
span in the set.
.IP "\(bu" 4
current
.Sp
.Vb 1
\&  my $span = $set\->current( $dt );
.Ve
.Sp
This method is used to find the \*(L"current\*(R" span in the set,
that intersects a given datetime or span. If no current span
is found, then the \*(L"previous\*(R" span is returned.
.Sp
The return value is a \f(CW\*(C`DateTime::SpanSet\*(C'\fR, or \f(CW\*(C`undef\*(C'\fR if there is no
matching span in the set.
.Sp
If a span parameter is given, it may happen that \*(L"current\*(R" returns
more than one span.
.Sp
See also: \f(CW\*(C`intersected_spans()\*(C'\fR method.
.IP "\(bu" 4
closest
.Sp
.Vb 1
\&  my $span = $set\->closest( $dt );
.Ve
.Sp
This method is used to find the \*(L"closest\*(R" span in the set, given a
datetime or span.
.Sp
The return value is a \f(CW\*(C`DateTime::SpanSet\*(C'\fR, or \f(CW\*(C`undef\*(C'\fR if the set is
empty.
.Sp
If a span parameter is given, it may happen that \*(L"closest\*(R" returns
more than one span.
.IP "\(bu" 4
as_list
.Sp
Returns a list of \f(CW\*(C`DateTime::Span\*(C'\fR objects.
.Sp
.Vb 1
\&  my @dt_span = $set\->as_list( span => $span );
.Ve
.Sp
Just as with the \f(CW\*(C`iterator()\*(C'\fR method, the \f(CW\*(C`as_list()\*(C'\fR method can be
limited by a span.
.Sp
Applying \f(CW\*(C`as_list()\*(C'\fR to a large recurring spanset is a very expensive
operation, both in \s-1CPU\s0 time and in the memory used.
.Sp
For this reason, when \f(CW\*(C`as_list()\*(C'\fR operates on large recurrence sets,
it will return at most approximately 200 spans. For larger sets, and
for \fIinfinite\fR sets, \f(CW\*(C`as_list()\*(C'\fR will return \f(CW\*(C`undef\*(C'\fR.
.Sp
Please note that this is explicitly not an empty list, since an empty
list is a valid return value for empty sets!
.Sp
If you \fIreally\fR need to extract spans from a large set, you can:
.Sp
\&\- limit the set with a shorter span:
.Sp
.Vb 1
\&    my @short_list = $large_set\->as_list( span => $short_span );
.Ve
.Sp
\&\- use an iterator:
.Sp
.Vb 3
\&    my @large_list;
\&    my $iter = $large_set\->iterator;
\&    push @large_list, $dt while $dt = $iter\->next;
.Ve
.IP "\(bu" 4
union
.IP "\(bu" 4
intersection
.IP "\(bu" 4
complement
.Sp
Set operations may be performed not only with \f(CW\*(C`DateTime::SpanSet\*(C'\fR
objects, but also with \f(CW\*(C`DateTime\*(C'\fR, \f(CW\*(C`DateTime::Set\*(C'\fR and
\&\f(CW\*(C`DateTime::Span\*(C'\fR objects.  These set operations always return a
\&\f(CW\*(C`DateTime::SpanSet\*(C'\fR object.
.Sp
.Vb 4
\&    $set = $spanset\->union( $set2 );         # like "OR", "insert", "both"
\&    $set = $spanset\->complement( $set2 );    # like "delete", "remove"
\&    $set = $spanset\->intersection( $set2 );  # like "AND", "while"
\&    $set = $spanset\->complement;             # like "NOT", "negate", "invert"
.Ve
.IP "\(bu" 4
intersected_spans
.Sp
This method can accept a \f(CW\*(C`DateTime\*(C'\fR list, a \f(CW\*(C`DateTime::Set\*(C'\fR, a
\&\f(CW\*(C`DateTime::Span\*(C'\fR, or a \f(CW\*(C`DateTime::SpanSet\*(C'\fR object as an argument.
.Sp
.Vb 1
\&    $set = $set1\->intersected_spans( $set2 );
.Ve
.Sp
The method always returns a \f(CW\*(C`DateTime::SpanSet\*(C'\fR object, containing
all spans that are intersected by the given set.
.Sp
Unlike the \f(CW\*(C`intersection\*(C'\fR method, the spans are not modified.  See
diagram below:
.Sp
.Vb 2
\&               set1   [....]   [....]   [....]   [....]
\&               set2      [................]
\&
\&       intersection      [.]   [....]   [.]
\&
\&  intersected_spans   [....]   [....]   [....]
.Ve
.IP "\(bu" 4
intersects
.IP "\(bu" 4
contains
.Sp
These set functions return a boolean value.
.Sp
.Vb 2
\&    if ( $spanset\->intersects( $set2 ) ) { ...  # like "touches", "interferes"
\&    if ( $spanset\->contains( $dt ) ) { ...    # like "is\-fully\-inside"
.Ve
.Sp
These methods can accept a \f(CW\*(C`DateTime\*(C'\fR, \f(CW\*(C`DateTime::Set\*(C'\fR,
\&\f(CW\*(C`DateTime::Span\*(C'\fR, or \f(CW\*(C`DateTime::SpanSet\*(C'\fR object as an argument.
.Sp
\&\fBintersects()\fR returns 1 for true, and 0 for false. In a few cases
the algorithm can't decide if the sets intersect at all, and 
\&\fBintersects()\fR will return \f(CW\*(C`undef\*(C'\fR.
.IP "\(bu" 4
iterator / next / previous
.Sp
This method can be used to iterate over the spans in a set.
.Sp
.Vb 6
\&    $iter = $spanset\->iterator;
\&    while ( $dt = $iter\->next ) {
\&        # $dt is a DateTime::Span
\&        print $dt\->min\->ymd;   # first date of span
\&        print $dt\->max\->ymd;   # last date of span
\&    }
.Ve
.Sp
The boundaries of the iterator can be limited by passing it a \f(CW\*(C`span\*(C'\fR
parameter.  This should be a \f(CW\*(C`DateTime::Span\*(C'\fR object which delimits
the iterator's boundaries.  Optionally, instead of passing an object,
you can pass any parameters that would work for one of the
\&\f(CW\*(C`DateTime::Span\*(C'\fR class's constructors, and an object will be created
for you.
.Sp
Obviously, if the span you specify does is not restricted both at the
start and end, then your iterator may iterate forever, depending on
the nature of your set.  User beware!
.Sp
The \f(CW\*(C`next()\*(C'\fR or \f(CW\*(C`previous()\*(C'\fR methods will return \f(CW\*(C`undef\*(C'\fR when there
are no more spans in the iterator.
.IP "\(bu" 4
start_set
.IP "\(bu" 4
end_set
.Sp
These methods do the inverse of the \f(CW\*(C`from_sets\*(C'\fR method:
.Sp
\&\f(CW\*(C`start_set\*(C'\fR retrieves a DateTime::Set with the start datetime of each
span.
.Sp
\&\f(CW\*(C`end_set\*(C'\fR retrieves a DateTime::Set with the end datetime of each
span.
.IP "\(bu" 4
map ( sub { ... } )
.Sp
.Vb 11
\&    # example: enlarge the spans
\&    $set = $set2\->map( 
\&        sub {
\&            my $start = $_\->start;
\&            my $end = $_\->end;
\&            return DateTime::Span\->from_datetimes(
\&                start => $start,
\&                before => $end,
\&            );
\&        }
\&    );
.Ve
.Sp
This method is the \*(L"set\*(R" version of Perl \*(L"map\*(R".
.Sp
It evaluates a subroutine for each element of the set (locally setting
\&\*(L"$_\*(R" to each DateTime::Span) and returns the set composed of the
results of each such evaluation.
.Sp
Like Perl \*(L"map\*(R", each element of the set may produce zero, one, or
more elements in the returned value.
.Sp
Unlike Perl \*(L"map\*(R", changing \*(L"$_\*(R" does not change the original
set. This means that calling map in void context has no effect.
.Sp
The callback subroutine may not be called immediately.  Don't count on
subroutine side-effects. For example, a \f(CW\*(C`print\*(C'\fR inside the subroutine
may happen later than you expect.
.Sp
The callback return value is expected to be within the span of the
\&\f(CW\*(C`previous\*(C'\fR and the \f(CW\*(C`next\*(C'\fR element in the original set.
.Sp
For example: given the set \f(CW\*(C`[ 2001, 2010, 2015 ]\*(C'\fR, the callback
result for the value \f(CW2010\fR is expected to be within the span \f(CW\*(C`[
2001 .. 2015 ]\*(C'\fR.
.IP "\(bu" 4
grep ( sub { ... } )
.Sp
.Vb 7
\&    # example: filter out all spans happening today
\&    my $today = DateTime\->today;
\&    $set = $set2\->grep( 
\&        sub {
\&            return ( ! $_\->contains( $today ) );
\&        }
\&    );
.Ve
.Sp
This method is the \*(L"set\*(R" version of Perl \*(L"grep\*(R".
.Sp
It evaluates a subroutine for each element of the set (locally setting
\&\*(L"$_\*(R" to each DateTime::Span) and returns the set consisting of those
elements for which the expression evaluated to true.
.Sp
Unlike Perl \*(L"grep\*(R", changing \*(L"$_\*(R" does not change the original
set. This means that calling grep in void context has no effect.
.Sp
Changing \*(L"$_\*(R" does change the resulting set.
.Sp
The callback subroutine may not be called immediately.  Don't count on
subroutine side-effects. For example, a \f(CW\*(C`print\*(C'\fR inside the subroutine
may happen later than you expect.
.IP "\(bu" 4
iterate
.Sp
\&\fIInternal method \- use \*(L"map\*(R" or \*(L"grep\*(R" instead.\fR
.Sp
This function apply a callback subroutine to all elements of a set and
returns the resulting set.
.Sp
The parameter \f(CW$_[0]\fR to the callback subroutine is a
\&\f(CW\*(C`DateTime::Span\*(C'\fR object.
.Sp
If the callback returns \f(CW\*(C`undef\*(C'\fR, the datetime is removed from the
set:
.Sp
.Vb 3
\&    sub remove_sundays {
\&        $_[0] unless $_[0]\->start\->day_of_week == 7;
\&    }
.Ve
.Sp
The callback return value is expected to be within the span of the
\&\f(CW\*(C`previous\*(C'\fR and the \f(CW\*(C`next\*(C'\fR element in the original set.
.Sp
For example: given the set \f(CW\*(C`[ 2001, 2010, 2015 ]\*(C'\fR, the callback
result for the value \f(CW2010\fR is expected to be within the span \f(CW\*(C`[
2001 .. 2015 ]\*(C'\fR.
.Sp
The callback subroutine may not be called immediately.  Don't count on
subroutine side-effects. For example, a \f(CW\*(C`print\*(C'\fR inside the subroutine
may happen later than you expect.
.SH "SUPPORT"
.IX Header "SUPPORT"
Support is offered through the \f(CW\*(C`datetime@perl.org\*(C'\fR mailing list.
.PP
Please report bugs using rt.cpan.org
.SH "AUTHOR"
.IX Header "AUTHOR"
Flavio Soibelmann Glock <fglock@gmail.com>
.PP
The \s-1API\s0 was developed together with Dave Rolsky and the DateTime Community.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2003 Flavio Soibelmann Glock. All rights reserved.
This program is free software; you can distribute it and/or
modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the \s-1LICENSE\s0 file
included with this module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Set::Infinite
.PP
For details on the Perl DateTime Suite project please see
<http://datetime.perl.org>.
