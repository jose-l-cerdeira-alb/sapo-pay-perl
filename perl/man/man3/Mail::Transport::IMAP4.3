.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Transport::IMAP4 3"
.TH Mail::Transport::IMAP4 3 "2014-08-24" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Transport::IMAP4 \- proxy to Mail::IMAPClient
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 4
\& Mail::Transport::IMAP4
\&   is a Mail::Transport::Receive
\&   is a Mail::Transport
\&   is a Mail::Reporter
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& my $imap = Mail::Transport::IMAP4\->new(...);
\& my $message = $imap\->receive($id);
\& $imap\->send($message);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1IMAP4\s0 protocol is quite complicated: it is feature rich and allows
verious asynchronous actions.  The main document describing \s-1IMAP\s0 is
rfc3501 (which obsoleted the original specification of protocol 4r1
in rfc2060 in March 2003).
.PP
This package, as part of MailBox, does not implement the actual
protocol itself but uses Mail::IMAPClient to do the work. The task
for this package is to hide as many differences between that module's
interface and the common MailBox folder types.  Multiple
Mail::Box::IMAP4 folders can share one Mail::Transport::IMAP4
connection.
.PP
The Mail::IMAPClient module is the best \s-1IMAP4\s0 implementation for
Perl5, but is not maintained.  There are many known problems with the
module, and solving those is outside the scope of MailBox.  See
\&\fIhttp://rt.cpan.org/Public/Dist/Display.html?Name=Mail\-IMAPClient\fR
for all the reported bugs.
.PP
Extends \*(L"\s-1DESCRIPTION\s0\*(R" in Mail::Transport::Receive.
.SH "METHODS"
.IX Header "METHODS"
Extends \*(L"\s-1METHODS\s0\*(R" in Mail::Transport::Receive.
.ie n .IP "$obj\->\fBurl\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBurl\fR()" 4
.IX Item "$obj->url()"
Represent this imap4 connection as \s-1URL\s0.
.SS "Constructors"
.IX Subsection "Constructors"
Extends \*(L"Constructors\*(R" in Mail::Transport::Receive.
.IP "Mail::Transport::IMAP4\->\fBnew\fR(%options)" 4
.IX Item "Mail::Transport::IMAP4->new(%options)"
Create the \s-1IMAP\s0 connection to the server.  \s-1IMAP\s0 servers can handle
multiple folders for a single user, which means that connections
may get shared.  This is sharing is hidden for the user.
.Sp
When an \f(CW\*(C`imap_client\*(C'\fR is specified, then the options \f(CW\*(C`hostname\*(C'\fR,
\&\f(CW\*(C`port\*(C'\fR, \f(CW\*(C`username\*(C'\fR, and \f(CW\*(C`password\*(C'\fR are extracted from it.
.Sp
.Vb 10
\& \-Option      \-\-Defined in     \-\-Default
\&  authenticate                   \*(AqAUTO\*(Aq
\&  domain                         <server_name>
\&  executable    Mail::Transport  undef
\&  hostname      Mail::Transport  \*(Aqlocalhost\*(Aq
\&  imap_client                    Mail::IMAPClient
\&  interval      Mail::Transport  30
\&  log           Mail::Reporter   \*(AqWARNINGS\*(Aq
\&  password      Mail::Transport  undef
\&  port          Mail::Transport  143
\&  proxy         Mail::Transport  undef
\&  retry         Mail::Transport  <false>
\&  starttls                       false
\&  timeout       Mail::Transport  120
\&  trace         Mail::Reporter   \*(AqWARNINGS\*(Aq
\&  username      Mail::Transport  undef
\&  via           Mail::Transport  \*(Aqimap\*(Aq
.Ve
.RS 4
.IP "authenticate => TYPE|ARRAY" 2
.IX Item "authenticate => TYPE|ARRAY"
Authenthication method to \fIlogin()\fR, which will be passed to
Mail::IMAPClient subroutine authenticate.  See the latter method for
the available types.  You may provide an \s-1ARRAY\s0 of types.
.IP "domain => \s-1WINDOWS_DOMAIN\s0" 2
.IX Item "domain => WINDOWS_DOMAIN"
Used for \s-1NTLM\s0 authentication.
.IP "executable => \s-1FILENAME\s0" 2
.IX Item "executable => FILENAME"
.PD 0
.IP "hostname => HOSTNAME|ARRAY" 2
.IX Item "hostname => HOSTNAME|ARRAY"
.IP "imap_client => OBJECT|CLASS" 2
.IX Item "imap_client => OBJECT|CLASS"
.PD
When an \s-1OBJECT\s0 is supplied, that client will be used for the implementation
of the \s-1IMAP4\s0 protocol. Information about server and such are extracted from
the \s-1OBJECT\s0 to have the accessors to produce correct results. The \s-1OBJECT\s0
shall be a Mail::IMAPClient.
.Sp
When a \s-1CLASS\s0 is given, an object of that type is created for you.  The created
object can be retrieved via \fIimapClient()\fR, and than configured as
defined by Mail::IMAPClient.
.IP "interval => \s-1SECONDS\s0" 2
.IX Item "interval => SECONDS"
.PD 0
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
.IP "password => \s-1STRING\s0" 2
.IX Item "password => STRING"
.IP "port => \s-1INTEGER\s0" 2
.IX Item "port => INTEGER"
.IP "proxy => \s-1PATH\s0" 2
.IX Item "proxy => PATH"
.IP "retry => NUMBER|undef" 2
.IX Item "retry => NUMBER|undef"
.IP "starttls => \s-1BOOLEAN\s0" 2
.IX Item "starttls => BOOLEAN"
.PD
tart Transport Security Layer (\s-1TLS\s0).
.IP "timeout => \s-1SECONDS\s0" 2
.IX Item "timeout => SECONDS"
.PD 0
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
.IP "username => \s-1STRING\s0" 2
.IX Item "username => STRING"
.IP "via => CLASS|NAME" 2
.IX Item "via => CLASS|NAME"
.RE
.RS 4
.RE
.PD
.SS "Receiving mail"
.IX Subsection "Receiving mail"
Extends \*(L"Receiving mail\*(R" in Mail::Transport::Receive.
.ie n .IP "$obj\->\fBreceive\fR( [$unique_message_id] )" 4
.el .IP "\f(CW$obj\fR\->\fBreceive\fR( [$unique_message_id] )" 4
.IX Item "$obj->receive( [$unique_message_id] )"
Inherited, see \*(L"Receiving mail\*(R" in Mail::Transport::Receive
.SS "Server connection"
.IX Subsection "Server connection"
Extends \*(L"Server connection\*(R" in Mail::Transport::Receive.
.ie n .IP "$obj\->\fBfindBinary\fR( $name, [@directories] )" 4
.el .IP "\f(CW$obj\fR\->\fBfindBinary\fR( \f(CW$name\fR, [@directories] )" 4
.IX Item "$obj->findBinary( $name, [@directories] )"
Inherited, see \*(L"Server connection\*(R" in Mail::Transport
.ie n .IP "$obj\->\fBremoteHost\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBremoteHost\fR()" 4
.IX Item "$obj->remoteHost()"
Inherited, see \*(L"Server connection\*(R" in Mail::Transport
.ie n .IP "$obj\->\fBretry\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBretry\fR()" 4
.IX Item "$obj->retry()"
Inherited, see \*(L"Server connection\*(R" in Mail::Transport
.SS "Attributes"
.IX Subsection "Attributes"
.ie n .IP "$obj\->\fBauthentication\fR( ['\s-1AUTO\s0'|$type|$types] )" 4
.el .IP "\f(CW$obj\fR\->\fBauthentication\fR( ['\s-1AUTO\s0'|$type|$types] )" 4
.IX Item "$obj->authentication( ['AUTO'|$type|$types] )"
Returns a \s-1LIST\s0 of \s-1ARRAYS\s0, each describing one possible way to contact
the server. Each pair contains a mechanism name and a challenge callback
(which may be \f(CW\*(C`undef\*(C'\fR).
.Sp
The settings are used by \fIlogin()\fR to get server access.  The initial
value origins from new(authenticate), but may be changed later.
.Sp
Available basic \f(CW$types\fR are \f(CW\*(C`CRAM\-MD5\*(C'\fR, \f(CW\*(C`NTLM\*(C'\fR, and \f(CW\*(C`PLAIN\*(C'\fR.  With
\&\f(CW\*(C`AUTO\*(C'\fR, all available types will be tried.  When the Authen::NTLM
is not installed, the \f(CW\*(C`NTLM\*(C'\fR option will silently be skipped.  Be warned
that, because of \f(CW\*(C`PLAIN\*(C'\fR, erroneous username/password combinations will
be passed readible as last attempt!
.Sp
The \f(CW\*(C`NTLM\*(C'\fR authentication requires Authen::NTLM to be installed.  Other
methods may be added later.  Besides, you may also specify a \s-1CODE\s0
reference which implements some authentication.
.Sp
An \s-1ARRAY\s0 as \f(CW$type\fR can be used to specify both mechanism as callback.  When
no array is used, callback of the pair is set to \f(CW\*(C`undef\*(C'\fR.  See
\&\*(L"authenticate\*(R" in Mail::IMAPClient for the gory details.
.Sp
example:
.Sp
.Vb 1
\& $transporter\->authentication(\*(AqCRAM\-MD5\*(Aq, [MY_AUTH => \e&c], \*(AqPLAIN\*(Aq);
\&
\& foreach my $pair ($transporter\->authentication)
\& {   my ($mechanism, $challange) = @$pair;
\&     ...
\& }
.Ve
.ie n .IP "$obj\->\fBdomain\fR( [$domain] )" 4
.el .IP "\f(CW$obj\fR\->\fBdomain\fR( [$domain] )" 4
.IX Item "$obj->domain( [$domain] )"
Used in \s-1NTLM\s0 authentication to define the Windows domain which is
accessed.  Initially set by new(domain) and defaults to the
server's name.
.SS "Exchanging Information"
.IX Subsection "Exchanging Information"
.SS "Protocol [internals]"
.IX Subsection "Protocol [internals]"
The follow methods handle protocol internals, and should not be used
by a normal user of this class.
.ie n .IP "$obj\->\fBappendMessage\fR( $message, $foldername, [$date] )" 4
.el .IP "\f(CW$obj\fR\->\fBappendMessage\fR( \f(CW$message\fR, \f(CW$foldername\fR, [$date] )" 4
.IX Item "$obj->appendMessage( $message, $foldername, [$date] )"
Write the message to the server.
The optional \s-1DATA\s0 can be a \s-1RFC\-822\s0 date or a timestamp.
.ie n .IP "$obj\->\fBcreateFolder\fR($name)" 4
.el .IP "\f(CW$obj\fR\->\fBcreateFolder\fR($name)" 4
.IX Item "$obj->createFolder($name)"
Add a folder.
.ie n .IP "$obj\->\fBcreateImapClient\fR($class, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBcreateImapClient\fR($class, \f(CW%options\fR)" 4
.IX Item "$obj->createImapClient($class, %options)"
Create an object of \f(CW$class\fR, which extends Mail::IMAPClient.
.Sp
All \f(CW%options\fR will be passed to the constructor (new) of \f(CW$class\fR.
.ie n .IP "$obj\->\fBcurrentFolder\fR( [$foldername] )" 4
.el .IP "\f(CW$obj\fR\->\fBcurrentFolder\fR( [$foldername] )" 4
.IX Item "$obj->currentFolder( [$foldername] )"
Be sure that the specific \s-1FOLDER\s0 is the current one selected.  If the
folder is already selected, no \s-1IMAP\s0 traffic will be produced.
.Sp
The boolean return value indicates whether the folder is selectable. It
will return undef if it does not exist.
.ie n .IP "$obj\->\fBdeleteFolder\fR($name)" 4
.el .IP "\f(CW$obj\fR\->\fBdeleteFolder\fR($name)" 4
.IX Item "$obj->deleteFolder($name)"
Remove one folder.
.ie n .IP "$obj\->\fBdestroyDeleted\fR($folder)" 4
.el .IP "\f(CW$obj\fR\->\fBdestroyDeleted\fR($folder)" 4
.IX Item "$obj->destroyDeleted($folder)"
Command the server to delete for real all messages which are flagged to
be deleted.
.ie n .IP "$obj\->\fBfetch\fR(ARRAY\-$of\-$messages, $info)" 4
.el .IP "\f(CW$obj\fR\->\fBfetch\fR(ARRAY\-$of\-$messages, \f(CW$info\fR)" 4
.IX Item "$obj->fetch(ARRAY-$of-$messages, $info)"
Get some \f(CW$info\fR about the \f(CW$messages\fR from the server.  The specified messages
shall extend Mail::Box::Net::Message, Returned is a list
of hashes, each info about one result.  The contents of the hash
differs per \f(CW$info\fR, but at least a \f(CW\*(C`message\*(C'\fR field will be present, to
relate to the message in question.
.Sp
The right folder should be selected before this method is called. When
the connection was lost, \f(CW\*(C`undef\*(C'\fR is returned.  Without any
messages, and empty array is returned.  The retrieval is done by
Mail::IMAPClient method \f(CW\*(C`fetch()\*(C'\fR, which is then
parsed.
.ie n .IP "$obj\->\fBflagsToLabels\fR($what|$flags)" 4
.el .IP "\f(CW$obj\fR\->\fBflagsToLabels\fR($what|$flags)" 4
.IX Item "$obj->flagsToLabels($what|$flags)"
.PD 0
.IP "Mail::Transport::IMAP4\->\fBflagsToLabels\fR($what|$flags)" 4
.IX Item "Mail::Transport::IMAP4->flagsToLabels($what|$flags)"
.PD
In \s-1SCALAR\s0 context, a hash with labels is returned.  In \s-1LIST\s0 context, pairs
are returned.
.Sp
The \f(CW$what\fR parameter can be \f(CW\*(AqSET\*(Aq\fR, \f(CW\*(AqCLEAR\*(Aq\fR, or \f(CW\*(AqREPLACE\*(Aq\fR.  With the
latter, all standard imap flags do not appear in the list will be ignored:
their value may either by set or cleared.  See \fIgetFlags()\fR
.Sp
Unknown flags in \s-1LIST\s0 are stripped from their backslash and lower-cased.
For instance, '\eSomeWeirdFlag' will become `someweirdflag => 1'.
.Sp
example: translating \s-1IMAP4\s0 flags into MailBox flags
.Sp
.Vb 2
\& my @flags  = (\*(Aq\eSeen\*(Aq, \*(Aq\eFlagged\*(Aq);
\& my $labels = Mail::Transport::IMAP4\->flags2labels(SET => @flags);
.Ve
.ie n .IP "$obj\->\fBfolders\fR( [$foldername] )" 4
.el .IP "\f(CW$obj\fR\->\fBfolders\fR( [$foldername] )" 4
.IX Item "$obj->folders( [$foldername] )"
Returns a list of folder names which are sub-folders of the specified
\&\f(CW$foldername\fR.  Without \f(CW$foldername\fR, the top-level foldernames are returned.
.ie n .IP "$obj\->\fBgetFields\fR( $uid, $name, [$name, ...] )" 4
.el .IP "\f(CW$obj\fR\->\fBgetFields\fR( \f(CW$uid\fR, \f(CW$name\fR, [$name, ...] )" 4
.IX Item "$obj->getFields( $uid, $name, [$name, ...] )"
Get the records with the specified \s-1NAMES\s0 from the header.  The header
fields are returned as list of Mail::Message::Field::Fast objects.
When the name is \f(CW\*(C`ALL\*(C'\fR, the whole header is returned.
.ie n .IP "$obj\->\fBgetFlags\fR($folder, $id)" 4
.el .IP "\f(CW$obj\fR\->\fBgetFlags\fR($folder, \f(CW$id\fR)" 4
.IX Item "$obj->getFlags($folder, $id)"
Returns the values of all flags which are related to the message with the
specified \f(CW$id\fR.  These flags are translated into the names which are
standard for the MailBox suite.
.Sp
A \s-1HASH\s0 is returned.  Names which do not appear will also provide
a value in the returned: the negative for the value is it was present.
.ie n .IP "$obj\->\fBgetMessageAsString\fR($message|$uid)" 4
.el .IP "\f(CW$obj\fR\->\fBgetMessageAsString\fR($message|$uid)" 4
.IX Item "$obj->getMessageAsString($message|$uid)"
Returns the whole text of the specified message: the head and the body.
.ie n .IP "$obj\->\fBids\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBids\fR()" 4
.IX Item "$obj->ids()"
Returns a list of UIDs which are defined by the \s-1IMAP\s0 server.
.ie n .IP "$obj\->\fBimapClient\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBimapClient\fR()" 4
.IX Item "$obj->imapClient()"
Returns the object which implements the \s-1IMAP4\s0 protocol, an instance
of a Mail::IMAPClient, which is logged-in and ready to use.
.Sp
If the contact to the server was still present or could be established,
an Mail::IMAPClient object is returned.  Else, \f(CW\*(C`undef\*(C'\fR is returned and
no further actions should be tried on the object.
.ie n .IP "$obj\->\fBlabelsToFlags\fR(HASH|PAIRS)" 4
.el .IP "\f(CW$obj\fR\->\fBlabelsToFlags\fR(HASH|PAIRS)" 4
.IX Item "$obj->labelsToFlags(HASH|PAIRS)"
.PD 0
.IP "Mail::Transport::IMAP4\->\fBlabelsToFlags\fR(HASH|PAIRS)" 4
.IX Item "Mail::Transport::IMAP4->labelsToFlags(HASH|PAIRS)"
.PD
Convert MailBox labels into \s-1IMAP\s0 flags.  Returned is a string.  Unsupported
labels are ignored.
.ie n .IP "$obj\->\fBlistFlags\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlistFlags\fR()" 4
.IX Item "$obj->listFlags()"
Returns all predefined flags as list.
.ie n .IP "$obj\->\fBlogin\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogin\fR()" 4
.IX Item "$obj->login()"
Establish a new connection to the \s-1IMAP4\s0 server, using username and password.
.ie n .IP "$obj\->\fBsetFlags\fR($id, $label, $value, [$label, $value], ...)" 4
.el .IP "\f(CW$obj\fR\->\fBsetFlags\fR($id, \f(CW$label\fR, \f(CW$value\fR, [$label, \f(CW$value\fR], ...)" 4
.IX Item "$obj->setFlags($id, $label, $value, [$label, $value], ...)"
Change the flags on the message which are represented by the label.  The
value which can be related to the label will be lost, because \s-1IMAP\s0 only
defines a boolean value, where MailBox labels can contain strings.
.Sp
Returned is a list of \f(CW$label\fR=>$value pairs which could not be send to
the \s-1IMAP\s0 server.  These values may be cached in a different way.
.SS "Error handling"
.IX Subsection "Error handling"
Extends \*(L"Error handling\*(R" in Mail::Transport::Receive.
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR($object)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR($object)" 4
.IX Item "$obj->addReport($object)"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "$obj->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD 0
.ie n .IP "Mail::Transport::IMAP4\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "Mail::Transport::IMAP4\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "Mail::Transport::IMAP4->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR( [$level, [$strings]] )" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "$obj->log( [$level, [$strings]] )"
.PD 0
.IP "Mail::Transport::IMAP4\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "Mail::Transport::IMAP4->log( [$level, [$strings]] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR($level)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR($level)" 4
.IX Item "$obj->logPriority($level)"
.PD 0
.IP "Mail::Transport::IMAP4\->\fBlogPriority\fR($level)" 4
.IX Item "Mail::Transport::IMAP4->logPriority($level)"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR( [$level] )" 4
.IX Item "$obj->report( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR( [$level] )" 4
.IX Item "$obj->reportAll( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR( [$level] )" 4
.IX Item "$obj->trace( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
Extends \*(L"Cleanup\*(R" in Mail::Transport::Receive.
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
The connection is cleanly terminated when the program is
terminated.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Cannot connect to $host:$port for \s-1IMAP4:\s0 $!" 4
.el .IP "Error: Cannot connect to \f(CW$host:\fR$port for \s-1IMAP4:\s0 $!" 4
.IX Item "Error: Cannot connect to $host:$port for IMAP4: $!"
.PD 0
.ie n .IP "Error: \s-1IMAP\s0 cannot connect to $host: $@" 4
.el .IP "Error: \s-1IMAP\s0 cannot connect to \f(CW$host:\fR $@" 4
.IX Item "Error: IMAP cannot connect to $host: $@"
.ie n .IP "Notice: \s-1IMAP4\s0 authenication $mechanism to $host:$port successful" 4
.el .IP "Notice: \s-1IMAP4\s0 authenication \f(CW$mechanism\fR to \f(CW$host:\fR$port successful" 4
.IX Item "Notice: IMAP4 authenication $mechanism to $host:$port successful"
.IP "Error: \s-1IMAP4\s0 requires a username and password" 4
.IX Item "Error: IMAP4 requires a username and password"
.ie n .IP "Error: \s-1IMAP4\s0 username $username requires a password" 4
.el .IP "Error: \s-1IMAP4\s0 username \f(CW$username\fR requires a password" 4
.IX Item "Error: IMAP4 username $username requires a password"
.ie n .IP "Error: Package $package does not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR does not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package does not implement $method."
.PD
Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.117,
built on August 24, 2014. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2014 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
