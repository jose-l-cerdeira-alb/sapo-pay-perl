.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Crypt::Random 3"
.TH Crypt::Random 3 "2018-12-22" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Crypt::Random \- Cryptographically Secure, True Random Number Generator.
.SH "VERSION"
.IX Header "VERSION"
.Vb 2
\& $Revision: 1.11 $
\& $Date: 2001/07/12 15:59:47 $
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Crypt::Random qw( makerandom ); 
\& my $r = makerandom ( Size => 512, Strength => 1 );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Crypt::Random is an interface module to the /dev/random device found on
most modern unix systems. It also interfaces with egd, a user space
entropy gathering daemon, available for systems where /dev/random (or
similar) devices are not available. When Math::Pari is installed,
Crypt::Random can generate random integers of arbitrary size of a given
bitsize or in a specified interval.
.SH "BLOCKING BEHAVIOUR"
.IX Header "BLOCKING BEHAVIOUR"
The /dev/random driver maintains an estimate of true randomness in the
pool and decreases it every time random strings are requested for use.
When the estimate goes down to zero, the routine blocks and waits for the
occurrence of non-deterministic events to refresh the pool.
.PP
When the routine is blocked, Crypt::Random's \fBread()\fR will be blocked till
desired amount of random bytes have been read off of the device. The
/dev/random kernel module also provides another interface, /dev/urandom,
that does not wait for the entropy-pool to recharge and returns as many
bytes as requested. For applications that must not block (for a
potentially long time) should use /dev/urandom. /dev/random should be
reserved for instances where very high quality randomness is desired.
.SH "HARDWARE RNG"
.IX Header "HARDWARE RNG"
If there's a hardware random number generator available, for instance the
Intel i8x0 random number generator, please use it instead of /dev/random!.
It'll be high quality, a lot faster and it won't block! Usually your \s-1OS\s0
will provide access to the \s-1RNG\s0 as a device, eg (/dev/intel_rng).
.SH "METHODS"
.IX Header "METHODS"
.IP "\fB\fBmakerandom()\fB\fR" 4
.IX Item "makerandom()"
Generates a random number of requested bitsize in base 10. Following
arguments can be specified.
.RS 4
.IP "\fBSize\fR" 4
.IX Item "Size"
Bitsize of the random number.
.IP "\fBStrength\fR 0 || 1" 4
.IX Item "Strength 0 || 1"
Value of 1 implies that /dev/random should be used
for requesting random bits while 0 implies /dev/urandom.
.IP "\fBDevice\fR" 4
.IX Item "Device"
Alternate device to request random bits from.
.IP "\fBUniform\fR 0 || 1" 4
.IX Item "Uniform 0 || 1"
Value of 0 (default) implies that the high bit of the generated random
number is always set, ensuring the bitsize of the generated random will be
exactly Size bits. For uniformly distributed random numbers, Uniform
should be set to 1.
.RE
.RS 4
.RE
.IP "\fB\fBmakerandom_itv()\fB\fR" 4
.IX Item "makerandom_itv()"
Generates a random number in the specified interval.  In addition 
to the arguments to \fBmakerandom()\fR following attributes can be 
specified.
.RS 4
.IP "\fBLower\fR" 4
.IX Item "Lower"
Inclusive Lower limit.
.IP "\fBUpper\fR" 4
.IX Item "Upper"
Exclusive Upper limit.
.RE
.RS 4
.RE
.IP "\fB\fBmakerandom_octet()\fB\fR" 4
.IX Item "makerandom_octet()"
Generates a random octet string of specified length. In addition to
\&\fBStrength\fR, \fBDevice\fR and \fBVerbosity\fR, following arguments can be
specified.
.RS 4
.IP "\fBLength\fR" 4
.IX Item "Length"
Length of the desired octet string.
.IP "\fBSkip\fR" 4
.IX Item "Skip"
An octet string consisting of characters to be skipped while reading from
the random device.
.RE
.RS 4
.RE
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
Crypt::Random needs Math::Pari 2.001802 or higher.
.SH "BIBLIOGRAPHY"
.IX Header "BIBLIOGRAPHY"
.IP "1 random.c by Theodore Ts'o.  Found in drivers/char directory of the Linux kernel sources." 4
.IX Item "1 random.c by Theodore Ts'o. Found in drivers/char directory of the Linux kernel sources."
.PD 0
.IP "2 Handbook of Applied Cryptography by Menezes, Paul C. van Oorschot and Scott Vanstone." 4
.IX Item "2 Handbook of Applied Cryptography by Menezes, Paul C. van Oorschot and Scott Vanstone."
.PD
.SH "AUTHOR"
.IX Header "AUTHOR"
Vipul Ved Prakash, <mail@vipul.net>
