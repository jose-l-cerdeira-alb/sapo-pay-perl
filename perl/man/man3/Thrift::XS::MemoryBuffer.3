.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Thrift::XS::MemoryBuffer 3"
.TH Thrift::XS::MemoryBuffer 3 "2011-07-11" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Thrift::XS::MemoryBuffer \- Fast memory buffer
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    use Thrift;
\&    use Thrift::XS::MemoryBuffer;
\&    use Thrift::XS::CompactProtocol;
\&    use MyThriftInterface;
\&    
\&    my $transport = Thrift::XS::MemoryBuffer\->new(8192);
\&    my $protocol  = Thrift::XS::BinaryProtocol\->new($transport);
\&    my $client    = MyThriftInterface\->new($protocol);
\&    
\&    $transport\->open;
\&    
\&    $client\->api_call( @args );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is useful when writing your own socket-layer implementation, for example,
it is used with AnyEvent::Cassandra.
.SH "METHODS"
.IX Header "METHODS"
.SS "new( [ \s-1BUFFER_SIZE\s0 ] )"
.IX Subsection "new( [ BUFFER_SIZE ] )"
Create a new buffer instance. Default buffer size is 8192 bytes.
.SS "\fBavailable()\fP"
.IX Subsection "available()"
Return the amount of bytes waiting to be read from the buffer.
.SS "read( \s-1LENGTH\s0 )"
.IX Subsection "read( LENGTH )"
Try to read \s-1LENGTH\s0 bytes from the buffer. If less bytes are available, as many as
possible will be returned.
.SS "readAll( \s-1LENGTH\s0 )"
.IX Subsection "readAll( LENGTH )"
Similar to read, but dies if \s-1LENGTH\s0 bytes are not available.
.SS "write( \s-1DATA,\s0 [ \s-1LENGTH\s0 ] )"
.IX Subsection "write( DATA, [ LENGTH ] )"
Append \s-1DATA\s0 to the buffer. \s-1LENGTH\s0 is optional but if provided it will avoid making
a length function call.
.SH "AUTHOR"
.IX Header "AUTHOR"
Andy Grundman, <andy@slimdevices.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2011 Logitech, Inc.
.PP
Licensed under the Apache License, Version 2.0 (the \*(L"License\*(R");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
.PP
.Vb 1
\&    http://www.apache.org/licenses/LICENSE\-2.0
.Ve
.PP
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \*(L"\s-1AS IS\*(R" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\s0 either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
