.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "User::Identity::Collection 3"
.TH User::Identity::Collection 3 "2014-01-24" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
User::Identity::Collection \- base class for collecting roles of a user
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 2
\& User::Identity::Collection
\&   is a User::Identity::Item
\&
\& User::Identity::Collection is extended by
\&   User::Identity::Collection::Emails
\&   User::Identity::Collection::Locations
\&   User::Identity::Collection::Systems
\&   User::Identity::Collection::Users
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\& use User::Identity;
\& use User::Identity::Collection;
\& my $me    = User::Identity\->new(...);
\& my $set   = User::Identity::Collection::Emails\->new(...);
\& $me\->addCollection($set);
\&
\& # Simpler
\& use User::Identity;
\& my $me    = User::Identity\->new(...);
\& my $set   = $me\->addCollection(type => \*(Aqemail\*(Aq, ...)
\& my $set   = $me\->addCollection(\*(Aqemail\*(Aq, ...)
\&
\& my @roles = $me\->collection(\*(Aqemail\*(Aq);  # list of collected items
\&
\& my $coll  = $me\->collection(\*(Aqemail\*(Aq);  # a User::Identity::Collection
\& my @roles = $coll\->roles;
\& my @roles = @$coll;                    # same, by overloading
\&
\& my $role  = $me\->collection(\*(Aqemail\*(Aq)\->find($coderef);
\& my $role  = $me\->collection(\*(Aqlocation\*(Aq)\->find(\*(Aqwork\*(Aq);
\& my $role  = $me\->find(location => \*(Aqwork\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`User::Identity::Collection\*(C'\fR object maintains a set user related
objects.  It helps selecting these objects, which is partially common to
all collections (for instance, each object has a name so you can search
on names), and sometimes specific to the extension of this collection.
.PP
Currently imlemented extensions are
.IP "\(bu" 4
\&\fIpeople\fR is a collection of users
.IP "\(bu" 4
\&\fIwhereabouts\fR are locations
.IP "\(bu" 4
a \fImailinglist\fR is a
.Sp
collection of email addresses
.IP "\(bu" 4
a \fInetwork\fR contains
.Sp
groups of systems
.PP
Extends \*(L"\s-1DESCRIPTION\s0\*(R" in User::Identity::Item.
.SH "OVERLOADED"
.IX Header "OVERLOADED"
.IP "overload: \fB@{}\fR" 4
.IX Item "overload: @{}"
When the reference to a collection object is used as array-reference, it
will be shown as list of roles.
.Sp
example:
.Sp
.Vb 3
\& my $locations = $ui\->collection(\*(Aqlocation\*(Aq);
\& foreach my $loc (@$location) ...
\& print $location\->[0];
.Ve
.IP "overload: \fBstringification\fR" 4
.IX Item "overload: stringification"
Returns the name of the collection and a sorted list of defined items.
.Sp
example:
.Sp
.Vb 1
\& print "$collection\en";  #   location: home, work
.Ve
.SH "METHODS"
.IX Header "METHODS"
Extends \*(L"\s-1METHODS\s0\*(R" in User::Identity::Item.
.SS "Constructors"
.IX Subsection "Constructors"
Extends \*(L"Constructors\*(R" in User::Identity::Item.
.IP "User::Identity::Collection\->\fBnew\fR( [\s-1NAME\s0], \s-1OPTIONS\s0 )" 4
.IX Item "User::Identity::Collection->new( [NAME], OPTIONS )"
.Vb 6
\& \-Option     \-\-Defined in          \-\-Default
\&  description  User::Identity::Item  undef
\&  item_type                          <required>
\&  name         User::Identity::Item  <required>
\&  parent       User::Identity::Item  undef
\&  roles                              undef
.Ve
.RS 4
.IP "description => \s-1STRING\s0" 2
.IX Item "description => STRING"
.PD 0
.IP "item_type => \s-1CLASS\s0" 2
.IX Item "item_type => CLASS"
.PD
The \s-1CLASS\s0 which is used to store the information for each of the maintained
objects within this collection.
.IP "name => \s-1STRING\s0" 2
.IX Item "name => STRING"
.PD 0
.IP "parent => \s-1OBJECT\s0" 2
.IX Item "parent => OBJECT"
.IP "roles => ROLE|ARRAY" 2
.IX Item "roles => ROLE|ARRAY"
.PD
Immediately add some roles to this collection.  In case of an \s-1ARRAY\s0,
each element of the array is passed separately to \fIaddRole()\fR. So,
you may end-up with an \s-1ARRAY\s0 of arrays each grouping a set of options
to create a role.
.RE
.RS 4
.RE
.SS "Attributes"
.IX Subsection "Attributes"
Extends \*(L"Attributes\*(R" in User::Identity::Item.
.ie n .IP "$obj\->\fBdescription\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdescription\fR()" 4
.IX Item "$obj->description()"
Inherited, see \*(L"Attributes\*(R" in User::Identity::Item
.ie n .IP "$obj\->\fBitemType\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBitemType\fR()" 4
.IX Item "$obj->itemType()"
Returns the type of the items collected.
.ie n .IP "$obj\->\fBname\fR( [\s-1NEWNAME\s0] )" 4
.el .IP "\f(CW$obj\fR\->\fBname\fR( [\s-1NEWNAME\s0] )" 4
.IX Item "$obj->name( [NEWNAME] )"
Inherited, see \*(L"Attributes\*(R" in User::Identity::Item
.ie n .IP "$obj\->\fBroles\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBroles\fR()" 4
.IX Item "$obj->roles()"
Returns all defined roles within this collection.  Be warned: the rules
are returned in random (hash) order.
.SS "Collections"
.IX Subsection "Collections"
Extends \*(L"Collections\*(R" in User::Identity::Item.
.ie n .IP "$obj\->\fBadd\fR(\s-1COLLECTION\s0, \s-1ROLE\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBadd\fR(\s-1COLLECTION\s0, \s-1ROLE\s0)" 4
.IX Item "$obj->add(COLLECTION, ROLE)"
Inherited, see \*(L"Collections\*(R" in User::Identity::Item
.ie n .IP "$obj\->\fBaddCollection\fR(\s-1OBJECT\s0 | ([\s-1TYPE\s0], \s-1OPTIONS\s0))" 4
.el .IP "\f(CW$obj\fR\->\fBaddCollection\fR(\s-1OBJECT\s0 | ([\s-1TYPE\s0], \s-1OPTIONS\s0))" 4
.IX Item "$obj->addCollection(OBJECT | ([TYPE], OPTIONS))"
Inherited, see \*(L"Collections\*(R" in User::Identity::Item
.ie n .IP "$obj\->\fBcollection\fR(\s-1NAME\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBcollection\fR(\s-1NAME\s0)" 4
.IX Item "$obj->collection(NAME)"
Inherited, see \*(L"Collections\*(R" in User::Identity::Item
.ie n .IP "$obj\->\fBparent\fR( [\s-1PARENT\s0] )" 4
.el .IP "\f(CW$obj\fR\->\fBparent\fR( [\s-1PARENT\s0] )" 4
.IX Item "$obj->parent( [PARENT] )"
Inherited, see \*(L"Collections\*(R" in User::Identity::Item
.ie n .IP "$obj\->\fBremoveCollection\fR(OBJECT|NAME)" 4
.el .IP "\f(CW$obj\fR\->\fBremoveCollection\fR(OBJECT|NAME)" 4
.IX Item "$obj->removeCollection(OBJECT|NAME)"
Inherited, see \*(L"Collections\*(R" in User::Identity::Item
.ie n .IP "$obj\->\fBtype\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtype\fR()" 4
.IX Item "$obj->type()"
.PD 0
.IP "User::Identity::Collection\->\fBtype\fR()" 4
.IX Item "User::Identity::Collection->type()"
.PD
Inherited, see \*(L"Collections\*(R" in User::Identity::Item
.ie n .IP "$obj\->\fBuser\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBuser\fR()" 4
.IX Item "$obj->user()"
Inherited, see \*(L"Collections\*(R" in User::Identity::Item
.SS "Maintaining roles"
.IX Subsection "Maintaining roles"
.ie n .IP "$obj\->\fBaddRole\fR(ROLE| ([\s-1NAME\s0],OPTIONS) | \s-1ARRAY\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBaddRole\fR(ROLE| ([\s-1NAME\s0],OPTIONS) | \s-1ARRAY\s0)" 4
.IX Item "$obj->addRole(ROLE| ([NAME],OPTIONS) | ARRAY)"
Adds a new role to this collection.  \s-1ROLE\s0 is an object of the right type
(depends on the extension of this module which type that is) or a list
of \s-1OPTIONS\s0 which are used to create such role.  The options can also be
passed as reference to an \s-1ARRAY\s0.  The added role is returned.
.Sp
example:
.Sp
.Vb 1
\& my $uicl = User::Identity::Collection::Locations\->new;
\&
\& my $uil  = User::Identity::Location\->new(home => ...);
\& $uicl\->addRole($uil);
\&
\& $uicl\->addRole( home => address => \*(Aqstreet 32\*(Aq );
\& $uicl\->addRole( [home => address => \*(Aqstreet 32\*(Aq] );
.Ve
.Sp
Easier
.Sp
.Vb 3
\& $ui      = User::Identity;
\& $ui\->add(location => \*(Aqhome\*(Aq, address => \*(Aqstreet 32\*(Aq );
\& $ui\->add(location => [ \*(Aqhome\*(Aq, address => \*(Aqstreet 32\*(Aq ] );
.Ve
.ie n .IP "$obj\->\fBremoveRole\fR(ROLE|NAME)" 4
.el .IP "\f(CW$obj\fR\->\fBremoveRole\fR(ROLE|NAME)" 4
.IX Item "$obj->removeRole(ROLE|NAME)"
The deleted role is returned (if it existed).
.ie n .IP "$obj\->\fBrenameRole\fR( <ROLE|OLDNAME>, \s-1NEWNAME\s0 )" 4
.el .IP "\f(CW$obj\fR\->\fBrenameRole\fR( <ROLE|OLDNAME>, \s-1NEWNAME\s0 )" 4
.IX Item "$obj->renameRole( <ROLE|OLDNAME>, NEWNAME )"
Give the role a different name, and move it in the collection.
.ie n .IP "$obj\->\fBsorted\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBsorted\fR()" 4
.IX Item "$obj->sorted()"
Returns the roles sorted by name, alphabetically and case-sensitive.
.SS "Searching"
.IX Subsection "Searching"
.ie n .IP "$obj\->\fBfind\fR(NAME|CODE|undef)" 4
.el .IP "\f(CW$obj\fR\->\fBfind\fR(NAME|CODE|undef)" 4
.IX Item "$obj->find(NAME|CODE|undef)"
Find the object with the specified \s-1NAME\s0 in this collection.  With \f(CW\*(C`undef\*(C'\fR,
a randomly selected role is returned.
.Sp
When a code reference is specified, all collected roles are scanned one
after the other (in unknown order).  For each role,
.Sp
.Vb 1
\& CODE\->($object, $collection)
.Ve
.Sp
is called.  When the \s-1CODE\s0 returns true, the role is selected.  In list context,
all selected roles are returned.  In scalar context, the first match is
returned and the scan is aborted immediately.
.Sp
example:
.Sp
.Vb 2
\& my $emails = $ui\->collection(\*(Aqemails\*(Aq);
\& $emails\->find(\*(Aqwork\*(Aq);
\&
\& sub find_work($$) {
\&    my ($mail, $emails) = @_;
\&    $mail\->location\->name eq \*(Aqwork\*(Aq;
\& }
\& my @at_work = $emails\->find(\e&find_work);
\& my @at_work = $ui\->find(location => \e&find_work);
\& my $any     = $ui\->find(location => undef );
.Ve
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: $object is not a collection." 4
.el .IP "Error: \f(CW$object\fR is not a collection." 4
.IX Item "Error: $object is not a collection."
The first argument is an object, but not of a class which extends
User::Identity::Collection.
.ie n .IP "Error: Cannot create a $type to add this to my collection." 4
.el .IP "Error: Cannot create a \f(CW$type\fR to add this to my collection." 4
.IX Item "Error: Cannot create a $type to add this to my collection."
Some options are specified to create a \f(CW$type\fR object, which is native to
this collection.  However, for some reason this failed.
.ie n .IP "Error: Cannot load collection module for $type ($class)." 4
.el .IP "Error: Cannot load collection module for \f(CW$type\fR ($class)." 4
.IX Item "Error: Cannot load collection module for $type ($class)."
Either the specified \f(CW$type\fR does not exist, or that module named \f(CW$class\fR returns
compilation errors.  If the type as specified in the warning is not
the name of a package, you specified a nickname which was not defined.
Maybe you forgot the 'require' the package which defines the nickname.
.ie n .IP "Error: Cannot rename $name into $newname: already exists" 4
.el .IP "Error: Cannot rename \f(CW$name\fR into \f(CW$newname:\fR already exists" 4
.IX Item "Error: Cannot rename $name into $newname: already exists"
.PD 0
.ie n .IP "Error: Cannot rename $name into $newname: doesn't exist" 4
.el .IP "Error: Cannot rename \f(CW$name\fR into \f(CW$newname:\fR doesn't exist" 4
.IX Item "Error: Cannot rename $name into $newname: doesn't exist"
.ie n .IP "Error: Creation of a collection via $class failed." 4
.el .IP "Error: Creation of a collection via \f(CW$class\fR failed." 4
.IX Item "Error: Creation of a collection via $class failed."
.PD
The \f(CW$class\fR did compile, but it was not possible to create an object
of that class using the options you specified.
.IP "Error: Don't know what type of collection you want to add." 4
.IX Item "Error: Don't know what type of collection you want to add."
If you add a collection, it must either by a collection object or a
list of options which can be used to create a collection object.  In
the latter case, the type of collection must be specified.
.ie n .IP "Warning: No collection $name" 4
.el .IP "Warning: No collection \f(CW$name\fR" 4
.IX Item "Warning: No collection $name"
The collection with \f(CW$name\fR does not exist and can not be created.
.ie n .IP "Error: Wrong type of role for $collection: requires a $expect but got a $type" 4
.el .IP "Error: Wrong type of role for \f(CW$collection:\fR requires a \f(CW$expect\fR but got a \f(CW$type\fR" 4
.IX Item "Error: Wrong type of role for $collection: requires a $expect but got a $type"
Each \f(CW$collection\fR groups sets of roles of one specific type ($expect).  You
cannot add objects of a different \f(CW$type\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of User-Identity distribution version 0.94,
built on January 24, 2014. Website: \fIhttp://perl.overmeer.net/userid/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2003\-2014 by [Mark Overmeer <perl@overmeer.net>]. For other contributors see Changes.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
