.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "libmemcached 3"
.TH libmemcached 3 "2014-03-14" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Memcached::libmemcached \- Thin fast full interface to the libmemcached client API
.SH "VERSION"
.IX Header "VERSION"
Version 1.001702 (with libmemcached\-1.0.17 embedded)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Memcached::libmemcached;
\&
\&  $memc = memcached_create();
\&
\&  memcached_server_add($memc, "localhost");
\&
\&  memcached_set($memc, $key, $value);
\&
\&  $value = memcached_get($memc, $key);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Memcached::libmemcached is a very thin, highly efficient, wrapper around the
libmemcached library. It's implemented almost entirely in C.
.PP
It gives full access to the rich functionality offered by libmemcached.
libmemcached is fast, light on memory usage, thread safe, and provide full
access to server side methods.
.PP
.Vb 6
\& \- Synchronous and Asynchronous support.
\& \- TCP and Unix Socket protocols.
\& \- A half dozen or so different hash algorithms.
\& \- Implementations of the new cas, replace, and append operators.
\& \- Man pages written up on entire API.
\& \- Implements both modulo and consistent hashing solutions.
.Ve
.PP
(Memcached::libmemcached is fairly new and not all the functions in
libmemcached have perl interfaces yet.  It's usually trivial to add functions \-
just a few lines in libmemcached.xs, a few lines of documentation, and a few
lines of testing.  Volunteers welcome!)
.PP
The libmemcached library documentation (which is bundled with this module)
serves as the primary reference for the functionality.
.PP
This documentation provides summary of the functions, along with any issues
specific to this perl interface, and references to the documentation for the
corresponding functions in the underlying library.
.PP
For more information on libmemcached, see <http://docs.libmemcached.org>
.SH "CONVENTIONS"
.IX Header "CONVENTIONS"
.SS "Terminology"
.IX Subsection "Terminology"
The term \*(L"memcache\*(R" is used to refer to the \f(CW\*(C`memcached_st\*(C'\fR structure at the
heart of the libmemcached library. We'll use \f(CW$memc\fR to represent this
structure in perl code. (The libmemcached library documentation uses \f(CW\*(C`ptr\*(C'\fR.)
.SS "Traditional and Object-Oriented"
.IX Subsection "Traditional and Object-Oriented"
There are two ways to use the functionality offered by this module:
.PP
\&\fB*\fR You can import the functions you want to use and call them explicitly.
.PP
\&\fB*\fR Or, you can use \f(CW$memc\fR as an object and call most of the functions as methods.
You can do that for any function that takes a \f(CW$memc\fR (ptr) as its first
argument, which is almost all of them.
.PP
Since the primary focus of this module is to be a thin wrapper around
libmemcached, the bulk of this documentation describes the traditional
functional interface.
.PP
The object-oriented interface is mainly targeted at modules wishing to subclass
Memcached::libmemcached, such as Cache::Memcached::libmemcached.  For more information
see \*(L"OBJECT-ORIENTED \s-1INTERFACE\s0\*(R".
.SS "Function Names and Arguments"
.IX Subsection "Function Names and Arguments"
The function names in the libmemcached library have exactly the same names in
Memcached::libmemcached.
.PP
The function arguments are also the same as the libmemcached library and
documentation, with two exceptions:
.PP
\&\fB*\fR There are no \fIlength\fR arguments. Wherever the libmemcached documentation
shows a length argument (input or output) the corresponding argument doesn't
exist in the Perl \s-1API\s0 because it's not needed.
.PP
\&\fB*\fR Some arguments are optional.
.PP
Many libmemcached function arguments are \fIoutput values\fR: the argument is the
address of the value that the function will modify. For these the perl function
will modify the argument directly if it can. For example, in this call:
.PP
.Vb 1
\&    $value = memcached_get($memc, $key, $flags, $rc);
.Ve
.PP
The \f(CW$flags\fR and \f(CW$rc\fR arguments are output values that are modified by the
\&\fImemcached_get()\fR function.
.PP
See the \*(L"Type Mapping\*(R" section for the fine detail of how each argument type
is handled.
.SS "Return Status"
.IX Subsection "Return Status"
Most of the functions return an integer status value. This is shown as
\&\f(CW\*(C`memcached_return\*(C'\fR in the libmemcached documentation.
.PP
In the perl interface this value is \fInot\fR returned directly. Instead a simple
boolean is returned: true for 'success', defined but false for some
\&'unsuccessful' conditions like 'not found', and undef for all other cases (i.e., errors).
.PP
All the functions documented below return this simple boolean value unless
otherwise indicated.
.PP
The actual \f(CW\*(C`memcached_return\*(C'\fR integer value, and corresponding error message,
for the last libmemcached function call can be accessed via the
\&\*(L"errstr\*(R" method.
.SS "Unimplemented Functions"
.IX Subsection "Unimplemented Functions"
Functions relating to managing lists of servers (memcached_server_push, and
memcached_server_list) have not been implemented because they're not needed and
likely to be deprecated by libmemcached.
.PP
Functions relating to iterating through results (memcached_result_*) have not
been implemented yet. They're not a priority because similar functionality is
available via the callbacks. See \*(L"set_callback_coderefs\*(R".
.SH "EXPORTS"
.IX Header "EXPORTS"
All the public functions in libmemcached are available for import.
.PP
All the public constants and enums in libmemcached are also available for import.
.PP
Exporter tags are defined for each enum. This allows you to import groups of
constants easily. For example, to enable consistent hashing you could use:
.PP
.Vb 1
\&  use Memcached::libmemcached qw(:memcached_behavior :memcached_server_distribution);
\&
\&  memcached_behavior_set($memc, MEMCACHED_BEHAVIOR_DISTRIBUTION(), MEMCACHED_DISTRIBUTION_CONSISTENT());
.Ve
.PP
The Exporter module allows patterns in the import list, so to import all the
functions, for example, you can use:
.PP
.Vb 1
\&  use Memcached::libmemcached qw(/^memcached/);
.Ve
.PP
Refer to Memcached::libmemcached::constants for a full list of the available
constants and the tags they are grouped by. To see a list of all available
functions and constants you can execute:
.PP
.Vb 1
\&  perl \-MMemcached::libmemcached \-le \*(Aqprint $_ for @Memcached::libmemcached::EXPORT_OK\*(Aq
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "Functions For Managing Memcaches"
.IX Subsection "Functions For Managing Memcaches"
\fImemcached_create\fR
.IX Subsection "memcached_create"
.PP
.Vb 1
\&  my $memc = memcached_create();
.Ve
.PP
Creates and returns a 'memcache' that represents the state of
communication with a set of memcached servers.
See Memcached::libmemcached::memcached_create.
.PP
\fImemcached_clone\fR
.IX Subsection "memcached_clone"
.PP
.Vb 1
\&  my $memc = memcached_clone(undef, undef);
.Ve
.PP
\&\s-1XXX\s0 Not currently recommended for use.
See Memcached::libmemcached::memcached_create.
.PP
\fImemcached_free\fR
.IX Subsection "memcached_free"
.PP
.Vb 1
\&  memcached_free($memc);
.Ve
.PP
Frees the memory associated with \f(CW$memc\fR.
After calling it \f(CW$memc\fR can't be used.
See Memcached::libmemcached::memcached_create.
.PP
\fImemcached_server_count\fR
.IX Subsection "memcached_server_count"
.PP
.Vb 1
\&  $server_count= memcached_server_count($memc);
.Ve
.PP
Returns a count of the number of servers
associated with \f(CW$memc\fR.
See Memcached::libmemcached::memcached_servers.
.PP
\fImemcached_server_add\fR
.IX Subsection "memcached_server_add"
.PP
\fImemcached_server_add_with_weight\fR
.IX Subsection "memcached_server_add_with_weight"
.PP
.Vb 2
\&  memcached_server_add($memc, $hostname, $port);
\&  memcached_server_add_with_weight($memc, $hostname, $port, $weight);
.Ve
.PP
Adds details of a single memcached server (accessed via \s-1TCP/IP\s0) to \f(CW$memc\fR.
See Memcached::libmemcached::memcached_servers. The default weight is 0.
.PP
\fImemcached_server_add_unix_socket\fR
.IX Subsection "memcached_server_add_unix_socket"
.PP
\fImemcached_server_add_unix_socket_with_weight\fR
.IX Subsection "memcached_server_add_unix_socket_with_weight"
.PP
.Vb 2
\&  memcached_server_add_unix_socket($memc, $socket_path);
\&  memcached_server_add_unix_socket_with_weight($memc, $socket_path);
.Ve
.PP
Adds details of a single memcached server (accessed via a \s-1UNIX\s0 domain socket) to \f(CW$memc\fR.
See Memcached::libmemcached::memcached_servers. The default weight is 0.
.PP
\fImemcached_behavior_set\fR
.IX Subsection "memcached_behavior_set"
.PP
.Vb 1
\&  memcached_behavior_set($memc, $option_key, $option_value);
.Ve
.PP
Changes the value of a particular option.
See Memcached::libmemcached::memcached_behavior.
.PP
\fImemcached_behavior_get\fR
.IX Subsection "memcached_behavior_get"
.PP
.Vb 1
\&  memcached_behavior_get($memc, $option_key);
.Ve
.PP
Get the value of a particular option.
See Memcached::libmemcached::memcached_behavior.
.PP
\fImemcached_callback_set\fR
.IX Subsection "memcached_callback_set"
.PP
.Vb 1
\&  memcached_callback_set($memc, $flag, $value);
.Ve
.PP
Set callback flag value.
.PP
The only flag currently supported is \f(CW\*(C`MEMCACHED_CALLBACK_PREFIX_KEY\*(C'\fR.
The \f(CW$value\fR must be less than \s-1MEMCACHED_PREFIX_KEY_MAX_SIZE\s0  (eg 128) bytes.
It also can't be empty <https://bugs.launchpad.net/libmemcached/+bug/667878>
.PP
\fImemcached_callback_get\fR
.IX Subsection "memcached_callback_get"
.PP
.Vb 1
\&  $value = memcached_callback_set($memc, $flag, $return_status);
.Ve
.PP
Get callback flag value. Sets return status in \f(CW$return_status\fR.
The only flag currently supported is \f(CW\*(C`MEMCACHED_CALLBACK_PREFIX_KEY\*(C'\fR.
Returns undef on error.
.SS "Functions for Setting Values"
.IX Subsection "Functions for Setting Values"
See Memcached::libmemcached::memcached_set.
.PP
\fImemcached_set\fR
.IX Subsection "memcached_set"
.PP
.Vb 2
\&  memcached_set($memc, $key, $value);
\&  memcached_set($memc, $key, $value, $expiration, $flags);
.Ve
.PP
Set \f(CW$value\fR as the value of \f(CW$key\fR.
\&\f(CW$expiration\fR and \f(CW$flags\fR are both optional and default to 0.
.PP
\fImemcached_add\fR
.IX Subsection "memcached_add"
.PP
.Vb 2
\&  memcached_add($memc, $key, $value);
\&  memcached_add($memc, $key, $value, $expiration, $flags);
.Ve
.PP
Like \*(L"memcached_set\*(R" except that an error is returned if \f(CW$key\fR \fIis\fR already
stored in the server.
.PP
\fImemcached_replace\fR
.IX Subsection "memcached_replace"
.PP
.Vb 2
\&  memcached_replace($memc, $key, $value);
\&  memcached_replace($memc, $key, $value, $expiration, $flags);
.Ve
.PP
Like \*(L"memcached_set\*(R" except that an error is returned if \f(CW$key\fR \fIis not\fR already
error is returned.
.PP
\fImemcached_prepend\fR
.IX Subsection "memcached_prepend"
.PP
.Vb 2
\&  memcached_prepend($memc, $key, $value);
\&  memcached_prepend($memc, $key, $value, $expiration, $flags);
.Ve
.PP
Prepend \f(CW$value\fR to the value of \f(CW$key\fR. \f(CW$key\fR must already exist.
\&\f(CW$expiration\fR and \f(CW$flags\fR are both optional and default to 0.
.PP
\fImemcached_append\fR
.IX Subsection "memcached_append"
.PP
.Vb 2
\&  memcached_append($memc, $key, $value);
\&  memcached_append($memc, $key, $value, $expiration, $flags);
.Ve
.PP
Append \f(CW$value\fR to the value of \f(CW$key\fR. \f(CW$key\fR must already exist.
\&\f(CW$expiration\fR and \f(CW$flags\fR are both optional and default to 0.
.PP
\fImemcached_cas\fR
.IX Subsection "memcached_cas"
.PP
.Vb 1
\&  memcached_cas($memc, $key, $value, $expiration, $flags, $cas)
.Ve
.PP
Overwrites data in the server stored as \f(CW$key\fR as long as \f(CW$cas\fR
still has the same value in the server.
.PP
Cas is still buggy in memached.  Turning on support for it in libmemcached is
optional.  Please see \fImemcached_behavior_set()\fR for information on how to do this.
.PP
\&\s-1XXX\s0 and the \fImemcached_result_cas()\fR function isn't implemented yet
so you can't get the \f(CW$cas\fR to use.
.SS "Functions for Fetching Values"
.IX Subsection "Functions for Fetching Values"
See Memcached::libmemcached::memcached_get.
.PP
The \fImemcached_fetch_result()\fR and
.PP
\fImemcached_get\fR
.IX Subsection "memcached_get"
.PP
.Vb 2
\&  $value = memcached_get($memc, $key);
\&  $value = memcached_get($memc, $key, $flags, $rc);
.Ve
.PP
Get and return the value of \f(CW$key\fR.  Returns undef on error.
.PP
Also updates \f(CW$flags\fR to the value of the flags stored with \f(CW$value\fR,
and updates \f(CW$rc\fR with the return code.
.PP
\fImemcached_mget\fR
.IX Subsection "memcached_mget"
.PP
.Vb 2
\&  memcached_mget($memc, \e@keys);
\&  memcached_mget($memc, \e%keys);
.Ve
.PP
Triggers the asynchronous fetching of multiple keys at once. For multiple key
operations it is always faster to use this function. You \fImust\fR then use
\&\fImemcached_fetch()\fR or \fImemcached_fetch_result()\fR to retrieve any keys found.
No error is given on keys that are not found.
.PP
Instead of this function, you'd normally use the \*(L"mget_into_hashref\*(R" method.
.PP
\fImemcached_fetch\fR
.IX Subsection "memcached_fetch"
.PP
.Vb 2
\&  $value = memcached_fetch($memc, $key);
\&  $value = memcached_fetch($memc, $key, $flag, $rc);
.Ve
.PP
Fetch the next \f(CW$key\fR and \f(CW$value\fR pair returned in response to a \fImemcached_mget()\fR call.
Returns undef if there are no more values.
.PP
If \f(CW$flag\fR is given then it will be updated to whatever flags were stored with the value.
If \f(CW$rc\fR is given then it will be updated to the return code.
.PP
This is similar to \*(L"memcached_get\*(R" except its fetching the results from the previous
call to \*(L"memcached_mget\*(R" and \f(CW$key\fR is an output parameter instead of an input.
Usually you'd just use the \*(L"mget_into_hashref\*(R" method instead.
.SS "Functions for Incrementing and Decrementing Values"
.IX Subsection "Functions for Incrementing and Decrementing Values"
memcached servers have the ability to increment and decrement unsigned integer keys
(overflow and underflow are not detected). This gives you the ability to use
memcached to generate shared sequences of values.
.PP
See Memcached::libmemcached::memcached_auto.
.PP
\fImemcached_increment\fR
.IX Subsection "memcached_increment"
.PP
.Vb 1
\&  memcached_increment( $key, $offset, $new_value_out );
.Ve
.PP
Increments the integer value associated with \f(CW$key\fR by \f(CW$offset\fR and returns the
new value in \f(CW$new_value_out\fR.
.PP
\fImemcached_decrement\fR
.IX Subsection "memcached_decrement"
.PP
.Vb 1
\&  memcached_decrement( $key, $offset, $new_value_out );
.Ve
.PP
Decrements the integer value associated with \f(CW$key\fR by \f(CW$offset\fR and returns the
new value in \f(CW$new_value_out\fR.
.PP
\fImemcached_increment_with_initial\fR
.IX Subsection "memcached_increment_with_initial"
.PP
.Vb 1
\&  memcached_increment_with_initial( $key, $offset, $initial, $expiration, $new_value_out );
.Ve
.PP
Increments the integer value associated with \f(CW$key\fR by \f(CW$offset\fR and returns the
new value in \f(CW$new_value_out\fR.
.PP
If the object specified by key does not exist, one of two things may happen:
If the expiration value is \s-1MEMCACHED_EXPIRATION_NOT_ADD\s0, the operation will fail.
For all other expiration values, the operation will succeed by seeding the
value for that key with a initial value to expire with the provided expiration time.
The flags will be set to zero.
.PP
\fImemcached_decrement_with_initial\fR
.IX Subsection "memcached_decrement_with_initial"
.PP
.Vb 1
\&  memcached_decrement_with_initial( $key, $offset, $initial, $expiration, $new_value_out );
.Ve
.PP
Decrements the integer value associated with \f(CW$key\fR by \f(CW$offset\fR and returns the
new value in \f(CW$new_value_out\fR.
.PP
If the object specified by key does not exist, one of two things may happen:
If the expiration value is \s-1MEMCACHED_EXPIRATION_NOT_ADD\s0, the operation will fail.
For all other expiration values, the operation will succeed by seeding the
value for that key with a initial value to expire with the provided expiration time.
The flags will be set to zero.
.PP
\fImemcached_increment_by_key\fR
.IX Subsection "memcached_increment_by_key"
.PP
\fImemcached_decrement_by_key\fR
.IX Subsection "memcached_decrement_by_key"
.PP
\fImemcached_increment_with_initial_by_key\fR
.IX Subsection "memcached_increment_with_initial_by_key"
.PP
\fImemcached_decrement_with_initial_by_key\fR
.IX Subsection "memcached_decrement_with_initial_by_key"
.PP
These are the master key equivalents of the above. They all take an extra
initial \f(CW$master_key\fR parameter.
.SS "Functions for Deleting Values from memcached"
.IX Subsection "Functions for Deleting Values from memcached"
See Memcached::libmemcached::memcached_delete.
.PP
\fImemcached_delete\fR
.IX Subsection "memcached_delete"
.PP
.Vb 2
\&  memcached_delete($memc, $key);
\&  memcached_delete($memc, $key, $expiration);
.Ve
.PP
Delete \f(CW$key\fR. If \f(CW$expiration\fR is greater than zero then the key is deleted by
memcached after that many seconds.
.SS "Functions for Accessing Statistics from memcached"
.IX Subsection "Functions for Accessing Statistics from memcached"
Not yet implemented. See Memcached::libmemcached::memcached_stats.
.PP
See walk_stats.
.SS "Miscellaneous Functions"
.IX Subsection "Miscellaneous Functions"
.SS "memcached_lib_version"
.IX Subsection "memcached_lib_version"
.Vb 1
\&  $version = memcached_lib_version()
.Ve
.PP
Returns a simple version string, like \*(L"1.0.17\*(R", representing the libmemcached
version (version of the client library, not server).
.SS "memcached_version"
.IX Subsection "memcached_version"
.Vb 2
\&  $version = memcached_version($memc)
\&  ($version1, $version2, $version3) = memcached_version($memc)
.Ve
.PP
Returns the \fIlowest\fR version of all the memcached servers.
.PP
In scalar context returns a simple version string, like \*(L"1.2.3\*(R".
In list context returns the individual version component numbers.
Returns an empty list if there was an error.
.PP
Note that the return value differs from that of the underlying libmemcached
library \fImemcached_version()\fR function.
.SS "memcached_verbosity"
.IX Subsection "memcached_verbosity"
.Vb 1
\&  memcached_verbosity($memc, $verbosity)
.Ve
.PP
Modifies the \*(L"verbosity\*(R" of the memcached servers associated with \f(CW$memc\fR.
See Memcached::libmemcached::memcached_verbosity.
.PP
\fImemcached_flush\fR
.IX Subsection "memcached_flush"
.PP
.Vb 1
\&  memcached_flush($memc, $expiration);
.Ve
.PP
Wipe clean the contents of associated memcached servers.
See Memcached::libmemcached::memcached_flush.
.SS "memcached_quit"
.IX Subsection "memcached_quit"
.Vb 1
\&  memcached_quit($memc)
.Ve
.PP
Disconnect from all currently connected servers and reset libmemcached state associated with \f(CW$memc\fR.
Not normally called explicitly.
See Memcached::libmemcached::memcached_quit.
.PP
\fImemcached_strerror\fR
.IX Subsection "memcached_strerror"
.PP
.Vb 1
\&  $string = memcached_strerror($memc, $return_code)
.Ve
.PP
\&\fImemcached_strerror()\fR takes a \f(CW\*(C`memcached_return\*(C'\fR value and returns a string describing the error.
The string should be treated as read-only (it may be so in future versions).
See also Memcached::libmemcached::memcached_strerror.
.PP
This function is rarely needed in the Perl interface because the return code is
a \fIdualvar\fR that already contains the error string.
.SS "Grouping Keys On Servers"
.IX Subsection "Grouping Keys On Servers"
Normally libmemcached hashes the \f(CW$key\fR value to select which memcached server to
communicate with. If you have several keys relating to a single object then
it's very likely that the corresponding values will be stored in different
memcached servers.
.PP
It would be more efficient, in general, when setting and getting multiple
related values, if it was possible to specify a different value to be hashed to
select which memcached server to communicate with. With libmemcached, you can.
.PP
Most of the functions for setting and getting values have \f(CW*_by_key\fR variants
for exactly this reason.  These all have an extra \f(CW$master_key\fR parameter
immediately after the \f(CW$memc\fR parameter. For example:
.PP
.Vb 1
\&    memcached_mget($memc, \e%keys, \e%dest);
\&
\&    memcached_mget_by_key($memc, $maskey_key, \e%keys, \e%dest);
.Ve
.PP
The \f(CW*_by_key\fR variants all work in exactly the same way as the corresponding
plain function, except that libmemcached hashes \f(CW$master_key\fR instead of \f(CW$key\fR to
which memcached server to communicate with.
.PP
If \f(CW$master_key\fR is undef then the functions behave the same as their non-by-key
variants, i.e., \f(CW$key\fR is used for hashing.
.PP
By-key variants of \*(L"Functions for Fetching Values\*(R":
.PP
\fImemcached_get_by_key\fR
.IX Subsection "memcached_get_by_key"
.PP
\fImemcached_mget_by_key\fR
.IX Subsection "memcached_mget_by_key"
.PP
By-key variants of \*(L"Functions for Setting Values\*(R":
.PP
\fImemcached_set_by_key\fR
.IX Subsection "memcached_set_by_key"
.PP
\fImemcached_replace_by_key\fR
.IX Subsection "memcached_replace_by_key"
.PP
\fImemcached_add_by_key\fR
.IX Subsection "memcached_add_by_key"
.PP
\fImemcached_append_by_key\fR
.IX Subsection "memcached_append_by_key"
.PP
\fImemcached_cas_by_key\fR
.IX Subsection "memcached_cas_by_key"
.PP
\fImemcached_prepend_by_key\fR
.IX Subsection "memcached_prepend_by_key"
.PP
\fImemcached_delete_by_key\fR
.IX Subsection "memcached_delete_by_key"
.SH "OBJECT-ORIENTED INTERFACE"
.IX Header "OBJECT-ORIENTED INTERFACE"
.SS "Methods"
.IX Subsection "Methods"
\fInew\fR
.IX Subsection "new"
.PP
.Vb 1
\&  $memc = $class\->new; # same as memcached_create()
.Ve
.PP
\fIerrstr\fR
.IX Subsection "errstr"
.PP
.Vb 1
\&  $errstr = $memc\->errstr;
.Ve
.PP
Returns the error message and code from the most recent call to any
libmemcached function that returns a \f(CW\*(C`memcached_return\*(C'\fR, which most do.
.PP
The return value is a \fIdualvar\fR, like $!, which means it has separate numeric
and string values. The numeric value is the memcached_return integer value,
and the string value is the corresponding error message what \fImemcached_strerror()\fR
would return.
.PP
As a special case, if the memcached_return is \s-1MEMCACHED_ERRNO\s0, indicating a
system call error, then the string returned by \fIstrerror()\fR is appended.
.PP
This method is also currently callable as \fImemcached_errstr()\fR for compatibility
with an earlier version, but that deprecated alias will start warning and then
cease to exist in future versions.
.PP
\fImget_into_hashref\fR
.IX Subsection "mget_into_hashref"
.PP
.Vb 2
\&  $memc\->mget_into_hashref( \e@keys, \e%dest_hash); # keys from array
\&  $memc\->mget_into_hashref( \e%keys, \e%dest_hash); # keys from hash
.Ve
.PP
Combines \fImemcached_mget()\fR and a \fImemcached_fetch()\fR loop into a single highly
efficient call.
.PP
Fetched values are stored in \e%dest_hash, updating existing values or adding
new ones as appropriate.
.PP
This method is also currently callable as \fImemcached_mget_into_hashref()\fR for
compatibility with an earlier version, but that deprecated alias will start
warning and then cease to exist in future versions.
.PP
\fIget_multi\fR
.IX Subsection "get_multi"
.PP
.Vb 1
\&  $hash_ref = $memc\->get_multi( @keys );
.Ve
.PP
Effectively the same as:
.PP
.Vb 1
\&  $memc\->mget_into_hashref( \e@keys, $hash_ref = { } )
.Ve
.PP
So it's very similar to \*(L"mget_into_hashref\*(R" but less efficient for large
numbers of keys (because the keys have to be pushed onto the argument stack)
and less flexible (because you can't add/update elements into an existing hash).
.PP
This method is provided to optimize subclasses that want to provide a
Cache::Memcached compatible \s-1API\s0 with maximum efficiency.
Note, however, that \f(CW\*(C`get_multi\*(C'\fR does \fInot\fR support the Cache::Memcached
feature where a key can be a reference to an array [ \f(CW$master_key\fR, \f(CW$key\fR ].
Use \*(L"memcached_mget_by_key\*(R" directly if you need that feature.
.PP
\fIget\fR
.IX Subsection "get"
.PP
.Vb 1
\&  $value = $memc\->get( $key );
.Ve
.PP
Effectively the same as:
.PP
.Vb 1
\&  $value = memcached_get( $memc, $key );
.Ve
.PP
The \f(CW\*(C`get\*(C'\fR method also supports the Cache::Memcached feature where \f(CW$key\fR can
be a reference to an array [ \f(CW$master_key\fR, \f(CW$key\fR ]. In which case the call is
effectively the same as:
.PP
.Vb 1
\&  $value = memcached_get_by_key( $memc, $key\->[0], $key\->[1] )
.Ve
.PP
\fIset_callback_coderefs\fR
.IX Subsection "set_callback_coderefs"
.PP
.Vb 1
\&  $memc\->set_callback_coderefs(\e&set_callback, \e&get_callback);
.Ve
.PP
This interface is \fIexperimental\fR and \fIlikely to change\fR. (It's also currently
used by Cache::Memcached::libmemcached, so don't use it if you're using that module.)
.PP
Specify functions which will be executed when values are set and/or get using \f(CW$memc\fR.
.PP
When the callbacks are executed \f(CW$_\fR is the value and the arguments are the key
and flags value. Both \f(CW$_\fR and the flags may be modified.
.PP
Currently the functions must return an empty list.
.PP
This method is also currently callable as \fImemcached_set_callback_coderefs()\fR for
compatibility with an earlier version, but that deprecated alias will start
warning and then cease to exist in future versions.
.PP
\fIwalk_stats\fR
.IX Subsection "walk_stats"
.PP
.Vb 1
\&  $memc\->walk_stats( $stats_args, \e&my_stats_callback );
.Ve
.PP
This interface is \fIexperimental\fR and \fIlikely to change\fR.
.PP
Calls the \fImemcached_stat_execute()\fR function to issue a \*(L"\s-1STAT\s0 \f(CW$stats_args\fR\*(R" command to
the connected memcached servers. The \f(CW$stats_args\fR argument is usually an empty string.
.PP
The callback function is called for each return value from each server.
The callback will be passed at least these parameters:
.PP
.Vb 5
\&  sub my_stats_callback {
\&    my ($key, $value, $hostport) = @_;
\&    # Do what you like with the above!
\&    return;
\&  }
.Ve
.PP
Currently the callback \fImust\fR return an empty list.
.PP
Prior to version 0.4402 the callback was passed a fourth argument which was a
copy of the \f(CW$stats_args\fR value. That is no longer the case. As a \fItemporary\fR aid
to migration, the \f(CW\*(C`walk_stats\*(C'\fR method does \f(CW\*(C`local $_ = $stats_args\*(C'\fR and
passes \f(CW$_\fR as the forth argument. That will work so long as the code in the
callback doesn't alter \f(CW$_\fR. If your callback code requires \f(CW$stats_args\fR you
should change it to be a closure instead.
.SS "trace_level"
.IX Subsection "trace_level"
.Vb 2
\&    $memc\->trace_level($trace_level);
\&    $trace_level = $memc\->trace_level;
.Ve
.PP
Sets the trace level (see \*(L"Tracing Execution\*(R"). Returns the previous trace level.
.PP
\fIget_server_for_key\fR
.IX Subsection "get_server_for_key"
.PP
.Vb 1
\&  $memc\->get_server_for_key( $key )
.Ve
.PP
This method uses \fImemcached_server_by_key\fR to get information about which server should contain
the specified \f(CW$key\fR.
.PP
It returns a string containing the hostname:port of the appropriate server, or undef on failure.
.SH "EXTRA INFORMATION"
.IX Header "EXTRA INFORMATION"
.SS "Tracing Execution"
.IX Subsection "Tracing Execution"
.Vb 1
\&    $memc\->trace_level($trace_level);
.Ve
.PP
If set >= 1 then any non-success memcached_return value will be logged via \fIwarn()\fR.
.PP
If set >= 2 or more then some data types will list conversions of input and output values for function calls.
.PP
The \f(CW\*(C`PERL_LIBMEMCACHED_TRACE\*(C'\fR environment variable provides a default.
The value is read when memcached_create is called.
.SS "Type Mapping"
.IX Subsection "Type Mapping"
For pointer arguments, undef is mapped to null on input and null is mapped to
undef on output.
.PP
\&\s-1XXX\s0 expand with details from typemap file
.SS "Deprecated Functions"
.IX Subsection "Deprecated Functions"
The following functions are available but deprecated in this release.
In the next release they'll generate warnings.
In a future release they'll be removed.
.PP
\fImemcached_errstr\fR
.IX Subsection "memcached_errstr"
.PP
Use \*(L"errstr\*(R" instead.
.PP
\fImemcached_mget_into_hashref\fR
.IX Subsection "memcached_mget_into_hashref"
.PP
Use \*(L"mget_into_hashref\*(R" instead.
.PP
\fImemcached_set_callback_coderefs\fR
.IX Subsection "memcached_set_callback_coderefs"
.PP
Use \*(L"set_callback_coderefs\*(R" instead.
.SH "AUTHOR EMERITUS"
.IX Header "AUTHOR EMERITUS"
Tim Bunce, \f(CW\*(C`<Tim.Bunce@pobox.com>\*(C'\fR with help from Patrick Galbraith and Daisuke Maki.
.PP
<http://www.tim.bunce.name>
.SH "CURRENT MAINTAINER"
.IX Header "CURRENT MAINTAINER"
Matthew Horsfall (alh) \f(CW\*(C`<wolfsage@gmail.com>\*(C'\fR
.PP
Daisuke Maki \f(CW\*(C`<daisuke@endeworks.jp>\*(C'\fR with occasional bursts of input from Tim Bunce.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Larry Wall for Perl, Brad Fitzpatrick for memcached, Brian Aker for libmemcached,
and Patrick Galbraith and Daisuke Maki for helping with the implementation.
.SH "PORTABILITY"
.IX Header "PORTABILITY"
See Slaven Rezic's excellent \s-1CPAN\s0 Testers Matrix at <http://matrix.cpantesters.org/?dist=Memcached\-libmemcached>
.PP
Along with Dave Cantrell's excellent \s-1CPAN\s0 Dependency tracker at
<http://deps.cpantesters.org/?module=Memcached%3A%3Alibmemcached&perl=any+version&os=any+OS>
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to the GitHub issue tracker at
<https://github.com/timbunce/Memcached\-libmemcached/issues>.
We will be notified, and then you'll automatically be notified of progress on
your bug as we make changes.
.SH "CONTRIBUTING"
.IX Header "CONTRIBUTING"
The source is hosted at github: <https://github.com/timbunce/Memcached\-libmemcached>
Patches and volunteers always welcome.
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2008 Tim Bunce, All Rights Reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
