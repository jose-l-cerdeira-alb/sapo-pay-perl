.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Transport::POP3 3"
.TH Mail::Transport::POP3 3 "2014-08-24" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Transport::POP3 \- receive messages via POP3
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 4
\& Mail::Transport::POP3
\&   is a Mail::Transport::Receive
\&   is a Mail::Transport
\&   is a Mail::Reporter
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& my $receiver = Mail::Transport::POP3\->new(...);
\& my $message = $receiver\->receive($id);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Receive messages via the \s-1POP3\s0 protocol from one remote server, as specified
in rfc1939.  This object hides much of the complications in the protocol and
recovers broken connections automatically.  Although it is part of the
MailBox distribution, this object can be used separately.
.PP
You probably should \fBnot use this\fR module, but Mail::Box::POP3.  This
module is the interface to \s-1POP3\s0, whereas Mail::Box::POP3 hides the
protocol weirdness and works as any other mail folder.
.PP
Extends \*(L"\s-1DESCRIPTION\s0\*(R" in Mail::Transport::Receive.
.SH "METHODS"
.IX Header "METHODS"
Extends \*(L"\s-1METHODS\s0\*(R" in Mail::Transport::Receive.
.SS "Constructors"
.IX Subsection "Constructors"
Extends \*(L"Constructors\*(R" in Mail::Transport::Receive.
.IP "Mail::Transport::POP3\->\fBnew\fR(%options)" 4
.IX Item "Mail::Transport::POP3->new(%options)"
Create a new pop3 server connection.  One object can only handle one
connection: for a single user to one single server.  If the server
could not be reached, or when the login fails, this instantiating \f(CW\*(C`new\*(C'\fR
will return \f(CW\*(C`undef\*(C'\fR.
.Sp
.Vb 10
\& \-Option      \-\-Defined in     \-\-Default
\&  authenticate                   \*(AqAUTO\*(Aq
\&  executable    Mail::Transport  undef
\&  hostname      Mail::Transport  \*(Aqlocalhost\*(Aq
\&  interval      Mail::Transport  30
\&  log           Mail::Reporter   \*(AqWARNINGS\*(Aq
\&  password      Mail::Transport  undef
\&  port          Mail::Transport  110
\&  proxy         Mail::Transport  undef
\&  retry         Mail::Transport  <false>
\&  timeout       Mail::Transport  120
\&  trace         Mail::Reporter   \*(AqWARNINGS\*(Aq
\&  use_ssl                        <false>
\&  username      Mail::Transport  undef
\&  via           Mail::Transport  \*(Aqsendmail\*(Aq
.Ve
.RS 4
.IP "authenticate => '\s-1LOGIN\s0'|'\s-1APOP\s0'|'\s-1AUTO\s0'" 2
.IX Item "authenticate => 'LOGIN'|'APOP'|'AUTO'"
Authenthication method.  The standard defines two methods, named \s-1LOGIN\s0 and
\&\s-1APOP\s0.  The first sends the username and password in plain text to the server
to get permission, the latter encrypts this data using \s-1MD5\s0.  When \s-1AUTO\s0 is
used, first \s-1APOP\s0 is tried, and then \s-1LOGIN\s0.
.IP "executable => \s-1FILENAME\s0" 2
.IX Item "executable => FILENAME"
.PD 0
.IP "hostname => HOSTNAME|ARRAY" 2
.IX Item "hostname => HOSTNAME|ARRAY"
.IP "interval => \s-1SECONDS\s0" 2
.IX Item "interval => SECONDS"
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
.IP "password => \s-1STRING\s0" 2
.IX Item "password => STRING"
.IP "port => \s-1INTEGER\s0" 2
.IX Item "port => INTEGER"
.IP "proxy => \s-1PATH\s0" 2
.IX Item "proxy => PATH"
.IP "retry => NUMBER|undef" 2
.IX Item "retry => NUMBER|undef"
.IP "timeout => \s-1SECONDS\s0" 2
.IX Item "timeout => SECONDS"
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
.IP "use_ssl => \s-1BOOLEAN\s0" 2
.IX Item "use_ssl => BOOLEAN"
.IP "username => \s-1STRING\s0" 2
.IX Item "username => STRING"
.IP "via => CLASS|NAME" 2
.IX Item "via => CLASS|NAME"
.RE
.RS 4
.RE
.PD
.SS "Receiving mail"
.IX Subsection "Receiving mail"
Extends \*(L"Receiving mail\*(R" in Mail::Transport::Receive.
.ie n .IP "$obj\->\fBreceive\fR( [$unique_message_id] )" 4
.el .IP "\f(CW$obj\fR\->\fBreceive\fR( [$unique_message_id] )" 4
.IX Item "$obj->receive( [$unique_message_id] )"
Inherited, see \*(L"Receiving mail\*(R" in Mail::Transport::Receive
.SS "Exchanging information"
.IX Subsection "Exchanging information"
.ie n .IP "$obj\->\fBdeleteFetched\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdeleteFetched\fR()" 4
.IX Item "$obj->deleteFetched()"
Mark all messages that have been fetched with \fImessage()\fR for deletion.
See \fIfetched()\fR.
.ie n .IP "$obj\->\fBdeleted\fR(\s-1BOOLEAN\s0, @ids)" 4
.el .IP "\f(CW$obj\fR\->\fBdeleted\fR(\s-1BOOLEAN\s0, \f(CW@ids\fR)" 4
.IX Item "$obj->deleted(BOOLEAN, @ids)"
Either mark the specified message(s) to be deleted on the remote server or
unmark them for deletion (if the first parameter is false).  Deletion of
messages will take place \fBonly\fR when the connection is specifically
disconnected or the last reference to the object goes out of scope.
.ie n .IP "$obj\->\fBdisconnect\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdisconnect\fR()" 4
.IX Item "$obj->disconnect()"
Break contact with the server, if that (still) exists.  Returns true if
successful.  Please note that even if the disconnect was not successful,
all knowledge of messages etc. will be removed from the object: the object
basically has reverted to the state in which it was before anything was done
with the mail box.
.ie n .IP "$obj\->\fBfetched\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfetched\fR()" 4
.IX Item "$obj->fetched()"
Returns a reference to a list of \s-1ID\s0's that have been fetched using
\&\fImessage()\fR.  This can be used to update a database of messages that
were fetched (but maybe not yet deleted) from the mailbox.
.Sp
Please note that if the \s-1POP3\s0 server did not support the \s-1UIDL\s0 command, this
method will always return undef because it is not possibly to reliably
identify messages between sessions (other than looking at the contents of
the messages themselves).
.Sp
See also \fIdeleteFetched()\fR.
.ie n .IP "$obj\->\fBfolderSize\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfolderSize\fR()" 4
.IX Item "$obj->folderSize()"
Returns the total number of octets used by the mailbox on the remote server.
.ie n .IP "$obj\->\fBheader\fR( $id, [$bodylines] )" 4
.el .IP "\f(CW$obj\fR\->\fBheader\fR( \f(CW$id\fR, [$bodylines] )" 4
.IX Item "$obj->header( $id, [$bodylines] )"
Returns a reference to an array which contains the header of the message
with the specified \f(CW$id\fR.  \f(CW\*(C`undef\*(C'\fR is returned if something has gone wrong.
.Sp
The optional integer \f(CW$bodylines\fR specifies the number of lines from the body
which should be added, by default none.
.Sp
example:
.Sp
.Vb 2
\& my $ref_lines = $pop3\->header($uidl);
\& print @$ref_lines;
.Ve
.ie n .IP "$obj\->\fBid2n\fR($id)" 4
.el .IP "\f(CW$obj\fR\->\fBid2n\fR($id)" 4
.IX Item "$obj->id2n($id)"
Translates the unique \f(CW$id\fR of a message into a sequence number which
represents the message as long a this connection to the \s-1POP3\s0 server
exists.  When the message has been deleted for some reason, \f(CW\*(C`undef\*(C'\fR
is returned.
.ie n .IP "$obj\->\fBids\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBids\fR()" 4
.IX Item "$obj->ids()"
Returns a list (in list context) or a reference to a list (in scalar context)
of all IDs which are known by the server on this moment.
.ie n .IP "$obj\->\fBmessage\fR($id)" 4
.el .IP "\f(CW$obj\fR\->\fBmessage\fR($id)" 4
.IX Item "$obj->message($id)"
Returns a reference to an array which contains the lines of the
message with the specified \f(CW$id\fR.  Returns \f(CW\*(C`undef\*(C'\fR if something has gone
wrong.
.Sp
example:
.Sp
.Vb 2
\& my $ref_lines = $pop3\->message($uidl);
\& print @$ref_lines;
.Ve
.ie n .IP "$obj\->\fBmessageSize\fR($id)" 4
.el .IP "\f(CW$obj\fR\->\fBmessageSize\fR($id)" 4
.IX Item "$obj->messageSize($id)"
Returns the size of the message which is indicated by the \f(CW$id\fR, in octets.
If the message has been deleted on the remote server, this will return
\&\f(CW\*(C`undef\*(C'\fR.
.ie n .IP "$obj\->\fBmessages\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBmessages\fR()" 4
.IX Item "$obj->messages()"
Returns (in scalar context only) the number of messages that are known
to exist in the mailbox.
.SS "Protocol internals"
.IX Subsection "Protocol internals"
The follow methods handle protocol internals, and should not be used
by a normal user of this class.
.ie n .IP "$obj\->\fBlogin\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogin\fR()" 4
.IX Item "$obj->login()"
Establish a new connection to the \s-1POP3\s0 server, using username and password.
.ie n .IP "$obj\->\fBsend\fR($socket, $data)" 4
.el .IP "\f(CW$obj\fR\->\fBsend\fR($socket, \f(CW$data\fR)" 4
.IX Item "$obj->send($socket, $data)"
Send \f(CW$data\fR to the indicated socket and return the first line read from
that socket.  Logs an error if either writing to or reading from socket failed.
.Sp
This method does \fBnot\fR attempt to reconnect or anything: if reading or
writing the socket fails, something is very definitely wrong.
.ie n .IP "$obj\->\fBsendList\fR($socket, $command)" 4
.el .IP "\f(CW$obj\fR\->\fBsendList\fR($socket, \f(CW$command\fR)" 4
.IX Item "$obj->sendList($socket, $command)"
Sends the indicated \f(CW$command\fR to the specified socket, and retrieves the
response.  It returns a reference to an array with all the lines that
were reveived after the first \f(CW\*(C`+OK\*(C'\fR line and before the end-of-message
delimiter (a single dot on a line).  Returns \f(CW\*(C`undef\*(C'\fR
whenever something has gone wrong.
.ie n .IP "$obj\->\fBsocket\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBsocket\fR()" 4
.IX Item "$obj->socket()"
Returns a connection to the \s-1POP3\s0 server.  If there was no connection yet,
it will be created transparently.  If the connection with the \s-1POP3\s0 server
was lost, it will be reconnected and the assures that internal
state information (\s-1STAT\s0 and \s-1UIDL\s0) is up-to-date in the object.
.Sp
If the contact to the server was still present, or could be established,
an IO::Socket::INET object is returned.  Else, \f(CW\*(C`undef\*(C'\fR is returned and
no further actions should be tried on the object.
.ie n .IP "$obj\->\fBstatus\fR($socket)" 4
.el .IP "\f(CW$obj\fR\->\fBstatus\fR($socket)" 4
.IX Item "$obj->status($socket)"
Update the current status of folder on the remote \s-1POP3\s0 server.
.SS "Server connection"
.IX Subsection "Server connection"
Extends \*(L"Server connection\*(R" in Mail::Transport::Receive.
.ie n .IP "$obj\->\fBfindBinary\fR( $name, [@directories] )" 4
.el .IP "\f(CW$obj\fR\->\fBfindBinary\fR( \f(CW$name\fR, [@directories] )" 4
.IX Item "$obj->findBinary( $name, [@directories] )"
Inherited, see \*(L"Server connection\*(R" in Mail::Transport
.ie n .IP "$obj\->\fBremoteHost\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBremoteHost\fR()" 4
.IX Item "$obj->remoteHost()"
Inherited, see \*(L"Server connection\*(R" in Mail::Transport
.ie n .IP "$obj\->\fBretry\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBretry\fR()" 4
.IX Item "$obj->retry()"
Inherited, see \*(L"Server connection\*(R" in Mail::Transport
.ie n .IP "$obj\->\fBurl\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBurl\fR()" 4
.IX Item "$obj->url()"
Represent this pop3 connection as \s-1URL\s0.
.SS "Error handling"
.IX Subsection "Error handling"
Extends \*(L"Error handling\*(R" in Mail::Transport::Receive.
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR($object)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR($object)" 4
.IX Item "$obj->addReport($object)"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "$obj->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD 0
.ie n .IP "Mail::Transport::POP3\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "Mail::Transport::POP3\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "Mail::Transport::POP3->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR( [$level, [$strings]] )" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "$obj->log( [$level, [$strings]] )"
.PD 0
.IP "Mail::Transport::POP3\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "Mail::Transport::POP3->log( [$level, [$strings]] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR($level)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR($level)" 4
.IX Item "$obj->logPriority($level)"
.PD 0
.IP "Mail::Transport::POP3\->\fBlogPriority\fR($level)" 4
.IX Item "Mail::Transport::POP3->logPriority($level)"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR( [$level] )" 4
.IX Item "$obj->report( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR( [$level] )" 4
.IX Item "$obj->reportAll( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR( [$level] )" 4
.IX Item "$obj->trace( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
Extends \*(L"Cleanup\*(R" in Mail::Transport::Receive.
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
Inherited, see \*(L"Cleanup\*(R" in Mail::Reporter
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Cannot connect to $host:$port for \s-1POP3:\s0 $!" 4
.el .IP "Error: Cannot connect to \f(CW$host:\fR$port for \s-1POP3:\s0 $!" 4
.IX Item "Error: Cannot connect to $host:$port for POP3: $!"
Unsuccesful in connecting to the remote \s-1POP3\s0 server.
.IP "Error: Cannot get the messages of pop3 via \fImessages()\fR" 4
.IX Item "Error: Cannot get the messages of pop3 via messages()"
It is not possible to retrieve all messages on a remote \s-1POP3\s0 folder
at once: each shall be taken separately.  The \s-1POP3\s0 folder will hide this
for you.
.IP "Error: Cannot re-connect reliably to server which doesn't support \s-1UIDL\s0." 4
.IX Item "Error: Cannot re-connect reliably to server which doesn't support UIDL."
The connection to the remote \s-1POP3\s0 was lost, and cannot be re-established
because the server's protocol implementation lacks the necessary information.
.IP "Error: Cannot read \s-1POP3\s0 from socket: $!" 4
.IX Item "Error: Cannot read POP3 from socket: $!"
It is not possible to read the success status of the previously given \s-1POP3\s0
command.  Connection lost?
.IP "Error: Cannot write \s-1POP3\s0 to socket: $@" 4
.IX Item "Error: Cannot write POP3 to socket: $@"
It is not possible to send a protocol command to the \s-1POP3\s0 server.  Connection
lost?
.IP "Error: Could not authenticate using '$some' method." 4
.IX Item "Error: Could not authenticate using '$some' method."
The authenication method to get access to the \s-1POP3\s0 server did not result in
a connection.  Maybe you need a different authentication protocol, or your
username with password are invalid.
.IP "Error: Could not authenticate using any login method." 4
.IX Item "Error: Could not authenticate using any login method."
No authentication method was explicitly prescribed, so both \s-1AUTH\s0 and \s-1APOP\s0 were
tried.  However, both failed.  There are other authentication methods, which
are not defined by the main \s-1POP3\s0 \s-1RFC\s0 rfc1939.  These protocols are not
implemented yet.  Please contribute your implementation.
.IP "Error: \s-1POP3\s0 Could not do a \s-1STAT\s0" 4
.IX Item "Error: POP3 Could not do a STAT"
For some weird reason, the server does not respond to the \s-1STAT\s0 call.
.IP "Error: \s-1POP3\s0 requires a username and password." 4
.IX Item "Error: POP3 requires a username and password."
No username and/or no password specified for this \s-1POP3\s0 folder, although
these are obligatory parts in the protocol.
.ie n .IP "Error: Package $package does not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR does not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package does not implement $method."
Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.
.ie n .IP "Error: Server at $host:$port does not seem to be talking \s-1POP3\s0." 4
.el .IP "Error: Server at \f(CW$host:\fR$port does not seem to be talking \s-1POP3\s0." 4
.IX Item "Error: Server at $host:$port does not seem to be talking POP3."
The remote server did not respond to an initial exchange of messages as is
expected by the \s-1POP3\s0 protocol.  The server has probably a different
service on the specified port.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.117,
built on August 24, 2014. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2014 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
