.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Message::Construct::Build 3"
.TH Mail::Message::Construct::Build 3 "2014-08-24" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Message::Construct::Build \- building a Mail::Message from components
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& my $msg1 = Mail::Message\->build
\&   ( From => \*(Aqme\*(Aq, data => "only two\enlines\en");
\&
\& my $msg2 = Mail::Message\->buildFromBody($body);
\&
\& Mail::Message\->build
\&   ( From     => \*(Aqme@myhost.com\*(Aq
\&   , To       => \*(Aqyou@yourhost.com\*(Aq
\&   , Subject  => "Read our folder!"
\&
\&   , data     => \e@lines
\&   , file     => \*(Aqfolder.pdf\*(Aq
\&   )\->send(via => \*(Aqpostfix\*(Aq;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Complex functionality on Mail::Message objects is implemented in
different files which are autoloaded.  This file implements the
building of messages from various simpler components.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructing a message"
.IX Subsection "Constructing a message"
.ie n .IP "Mail::Message\->\fBbuild\fR( [$message|$part|$body], $content )" 4
.el .IP "Mail::Message\->\fBbuild\fR( [$message|$part|$body], \f(CW$content\fR )" 4
.IX Item "Mail::Message->build( [$message|$part|$body], $content )"
Simplified message object builder.  In case a \f(CW$message\fR or message \f(CW$part\fR is
specified, a new message is created with the same body to start with, but
new headers.  A \f(CW$body\fR may be specified as well.  However, there are more
ways to add data simply.
.Sp
The \f(CW$content\fR is a list of key-value pairs and header field objects.
The keys which start with a capital are used as header-lines.  Lower-cased
fields are used for other purposes as listed below.  Each field may be used
more than once.  Pairs where the value is \f(CW\*(C`undef\*(C'\fR are ignored.
.Sp
If more than one \f(CW\*(C`data\*(C'\fR, \f(CW\*(C`file\*(C'\fR, and \f(CW\*(C`attach\*(C'\fR is specified,
a multi-parted message is created.  Some \f(CW\*(C`Content\-*\*(C'\fR fields are
treated separately: to enforce the content lines of the produced
message body \fBafter\fR it has been created.  For instance, to explicitly
state that you wish a \f(CW\*(C`multipart/alternative\*(C'\fR in stead of the default
\&\f(CW\*(C`multipart/mixed\*(C'\fR.  If you wish to specify the type per datum, you need
to start playing with Mail::Message::Body objects yourself.
.Sp
This \f(CW\*(C`build\*(C'\fR method will use \fIbuildFromBody()\fR when the body object has
been constructed.  Together, they produce your message.
.Sp
.Vb 6
\& \-Option\-\-Default
\&  attach  undef
\&  data    undef
\&  file    undef
\&  files   [ ]
\&  head    undef
.Ve
.RS 4
.IP "attach => BODY|PART|MESSAGE|ARRAY" 2
.IX Item "attach => BODY|PART|MESSAGE|ARRAY"
One attachment to the message.  Each attachment can be full \f(CW$message\fR, a
\&\f(CW$part\fR, or a \f(CW$body\fR.
Any \f(CW$message\fR will get encapsulated into a \f(CW\*(C`message/rfc822\*(C'\fR body.
You can specify many items (may be of different types) at once.
.Sp
.Vb 3
\& attach => $folder\->message(3)\->decoded  # body
\& attach => $folder\->message(3)           # message
\& attach => [ $msg1, $msg2\->part(6), $msg3\->body ];
.Ve
.IP "data => STRING|ARRAY\-OF\-LINES" 2
.IX Item "data => STRING|ARRAY-OF-LINES"
The text for one part, specified as one \s-1STRING\s0, or an \s-1ARRAY\s0 of lines.  Each
line, including the last, must be terminated by a newline.  This argument
is passed to Mail::Message::Body::new(data) to
construct one.
.Sp
.Vb 5
\&  data => [ "line 1\en", "line 2\en" ]     # array of lines
\&  data => <<\*(AqTEXT\*(Aq                       # string
\& line 1
\& line 2
\& TEXT
.Ve
.IP "file => FILENAME|FILEHANDLE|IOHANDLE" 2
.IX Item "file => FILENAME|FILEHANDLE|IOHANDLE"
Create a body where the data is read from the specified \s-1FILENAME\s0,
\&\s-1FILEHANDLE\s0, or object of type IO::Handle.  Also this body is used
to create a Mail::Message::Body.
.Sp
.Vb 1
\& my $in = IO::File\->new(\*(Aq/etc/passwd\*(Aq, \*(Aqr\*(Aq);
\&
\& file => \*(Aqpicture.jpg\*(Aq                   # filename
\& file => \e*MYINPUTFILE                   # file handle
\& file => $in                             # any IO::Handle
\&
\& open my $in, \*(Aq<:raw\*(Aq, \*(Aq/etc/passwd\*(Aq;    # alternative for IO::File
.Ve
.IP "files => ARRAY-OF-FILE" 2
.IX Item "files => ARRAY-OF-FILE"
See option file, but then an array reference collection more of them.
.IP "head => \s-1HEAD\s0" 2
.IX Item "head => HEAD"
Start with a prepared header, otherwise one is created.
.RE
.RS 4
.Sp
example:
.Sp
.Vb 5
\& my $msg = Mail::Message\->build
\&  ( From   => \*(Aqme@home.nl\*(Aq
\&  , To     => Mail::Address\->new(\*(Aqyour name\*(Aq, \*(Aqyou@yourplace.aq\*(Aq)
\&  , Cc     => \*(Aqeveryone@example.com\*(Aq
\&  , $other_message\->get(\*(AqBcc\*(Aq)
\&
\&  , data   => [ "This is\en", "the first part of\en", "the message\en" ]
\&  , file   => \*(Aqmyself.gif\*(Aq
\&  , file   => \*(Aqyou.jpg\*(Aq
\&  , attach => $signature
\&  );
\&
\& my $msg = Mail::Message\->build
\&  ( To     => \*(Aqyou\*(Aq
\&  , \*(AqContent\-Type\*(Aq => \*(Aqtext/html\*(Aq
\&  , data   => "<html></html>"
\&  );
.Ve
.RE
.ie n .IP "Mail::Message\->\fBbuildFromBody\fR($body, [$head], $headers)" 4
.el .IP "Mail::Message\->\fBbuildFromBody\fR($body, [$head], \f(CW$headers\fR)" 4
.IX Item "Mail::Message->buildFromBody($body, [$head], $headers)"
Shape a message around a \f(CW$body\fR.  Bodies have information about their
content in them, which is used to construct a header for the message.
You may specify a \f(CW$head\fR object which is pre-initialized, or one is
created for you (also when \f(CW$head\fR is \f(CW\*(C`undef\*(C'\fR).
Next to that, more \f(CW$headers\fR can be specified which are stored in that
header.
.Sp
Header fields are added in order, and before the header lines as
defined by the body are taken.  They may be supplied as key-value
pairs or Mail::Message::Field objects.  In case of a key-value
pair, the field's name is to be used as key and the value is a
string, address (Mail::Address object), or array of addresses.
.Sp
A \f(CW\*(C`Date\*(C'\fR, \f(CW\*(C`Message\-Id\*(C'\fR, and \f(CW\*(C`MIME\-Version\*(C'\fR field are added unless
supplied.
.Sp
example:
.Sp
.Vb 2
\& my $type = Mail::Message::Field\->new(\*(AqContent\-Type\*(Aq, \*(Aqtext/html\*(Aq
\&   , \*(Aqcharset="us\-ascii"\*(Aq);
\&
\& my @to   = ( Mail::Address\->new(\*(AqYour name\*(Aq, \*(Aqyou@example.com\*(Aq)
\&            , \*(Aqworld@example.info\*(Aq
\&            );
\&
\& my $msg  = Mail::Message\->buildFromBody
\&   ( $body
\&   , From => \*(Aqme@example.nl\*(Aq
\&   , To   => \e@to
\&   , $type
\&   );
.Ve
.SH "DETAILS"
.IX Header "DETAILS"
.SS "Building a message"
.IX Subsection "Building a message"
\fIRapid building\fR
.IX Subsection "Rapid building"
.PP
Most messages you need to construct are relatively simple.  Therefore,
this module provides a method to prepare a message with only one method
call: \fIbuild()\fR.
.PP
\fICompared to \fIMIME::Entity::build()\fI\fR
.IX Subsection "Compared to MIME::Entity::build()"
.PP
The \f(CW\*(C`build\*(C'\fR method in MailBox is modelled after the \f(CW\*(C`build\*(C'\fR method
as provided by MIMETools, but with a few simplifications:
.IP "When a keys starts with a capital, than it is always a header field" 4
.IX Item "When a keys starts with a capital, than it is always a header field"
.PD 0
.IP "When a keys is lower-cased, it is always something else" 4
.IX Item "When a keys is lower-cased, it is always something else"
.IP "You use the real field-names, not abbreviations" 4
.IX Item "You use the real field-names, not abbreviations"
.IP "All field names are accepted" 4
.IX Item "All field names are accepted"
.IP "You may specify field objects between key-value pairs" 4
.IX Item "You may specify field objects between key-value pairs"
.IP "A lot of facts are auto-detected, like content-type and encoding" 4
.IX Item "A lot of facts are auto-detected, like content-type and encoding"
.IP "You can create a multipart at once" 4
.IX Item "You can create a multipart at once"
.PD
.PP
Hum, reading the list above... what is equivalent?  MIME::Entity is
not that simple after all!  Let's look at an example from MIME::Entity's
manual page:
.PP
.Vb 5
\& ### Create the top\-level, and set up the mail headers:
\& $top = MIME::Entity\->build(Type     => "multipart/mixed",
\&                            From     => \*(Aqme@myhost.com\*(Aq,
\&                            To       => \*(Aqyou@yourhost.com\*(Aq,
\&                            Subject  => "Hello, nurse!");
\&                                                                                
\& ### Attachment #1: a simple text document:
\& $top\->attach(Path=>"./testin/short.txt");
\&                                                                                
\& ### Attachment #2: a GIF file:
\& $top\->attach(Path        => "./docs/mime\-sm.gif",
\&              Type        => "image/gif",
\&              Encoding    => "base64");
\&                                                                                
\& ### Attachment #3: text we\*(Aqll create with text we have on\-hand:
\& $top\->attach(Data => $contents);
.Ve
.PP
The MailBox equivalent could be
.PP
.Vb 4
\& my $msg = Mail::Message\->build
\&   ( From     => \*(Aqme@myhost.com\*(Aq
\&   , To       => \*(Aqyou@yourhost.com\*(Aq
\&   , Subject  => "Hello, nurse!"
\&
\&   , file     => "./testin/short.txt"
\&   , file     => "./docs/mime\-sm.gif"
\&   , data     => $contents
\&   );
.Ve
.PP
One of the simplifications is that MIME::Types is used to lookup
the right content type and optimal transfer encoding.  Good values
for content-disposition and such are added as well.
.PP
\fIbuild, starting with nothing\fR
.IX Subsection "build, starting with nothing"
.PP
See \fIbuild()\fR.
.PP
\fIbuildFromBody, body becomes message\fR
.IX Subsection "buildFromBody, body becomes message"
.PP
See \fIbuildFromBody()\fR.
.PP
\fIThe Content\-* fields\fR
.IX Subsection "The Content-* fields"
.PP
The various \f(CW\*(C`Content\-*\*(C'\fR fields are not as harmless as they look.  For
instance, the \*(L"Content-Type\*(R" field will have an effect on the default
transfer encoding.
.PP
When a message is built this way:
.PP
.Vb 6
\& my $msg = Mail::Message\->build
\&  ( \*(AqContent\-Type\*(Aq => \*(Aqvideo/mpeg3\*(Aq
\&  , \*(AqContent\-Transfer\-Encoding\*(Aq => \*(Aqbase64\*(Aq
\&  , \*(AqContent\-Disposition\*(Aq => \*(Aqattachment\*(Aq
\&  , file => \*(Aq/etc/passwd\*(Aq
\&  );
.Ve
.PP
then first a \f(CW\*(C`text/plain\*(C'\fR body is constructed (MIME::Types does not
find an extension on the filename so defaults to \f(CW\*(C`text/plain\*(C'\fR), with
no encoding.  Only when that body is ready, the new type and requested
encodings are set.  The content of the body will get base64 encoded,
because it is requested that way.
.PP
What basically happens is this:
.PP
.Vb 6
\& my $head = ...other header lines...;
\& my $body = Mail::Message::Body::Lines\->new(file => \*(Aq/etc/passwd\*(Aq);
\& $body\->type(\*(Aqvideo/mpeg3\*(Aq);
\& $body\->transferEncoding(\*(Aqbase64\*(Aq);
\& $body\->diposition(\*(Aqattachment\*(Aq);
\& my $msg  = Mail::Message\->buildFromBody($body, $head);
.Ve
.PP
A safer way to construct the message is:
.PP
.Vb 6
\& my $body = Mail::Message::Body::Lines\->new
\&  ( file              => \*(Aq/etc/passwd\*(Aq
\&  , mime_type         => \*(Aqvideo/mpeg3\*(Aq
\&  , transfer_encoding => \*(Aqbase64\*(Aq
\&  , disposition       => \*(Aqattachment\*(Aq
\&  );
\&
\& my $msg  = Mail::Message\->buildFromBody
\&  ( $body
\&  , ...other header lines...
\&  );
.Ve
.PP
In the latter program, you will immediately start with a body of
the right type.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.IP "Error: Only \fIbuild()\fR Mail::Message's; they are not in a folder yet" 4
.IX Item "Error: Only build() Mail::Message's; they are not in a folder yet"
You may wish to construct a message to be stored in a some kind
of folder, but you need to do that in two steps.  First, create a
normal Mail::Message, and then add it to the folder.  During this
\&\fIMail::Box::addMessage()\fR process, the message will get \fIcoerce()\fR\-d
into the right message type, adding storage information and the like.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.117,
built on August 24, 2014. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2014 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
