.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Memcached::libmemcached::memcached_result_st 3"
.TH Memcached::libmemcached::memcached_result_st 3 "2014-03-14" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
memcached_result_create, memcached_result_free,
memcached_result_key_value, memcached_result_key_length,
memcached_result_value, memcached_result_length,
memcached_result_flags, memcached_result_cas \- Work with memcached_result_st
.SH "LIBRARY"
.IX Header "LIBRARY"
C Client Library for memcached (libmemcached, \-lmemcached)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  #include <memcached.h>
\&
\&  memcached_result_st *
\&    memcached_result_create (memcached_st *ptr,
\&                             memcached_result_st *result);
\&
\&  void memcached_result_free (memcached_result_st *result);
\&
\&  const char * memcached_result_key_value (memcached_result_st *result);
\&
\&  size_t memcached_result_key_length (const memcached_result_st *result);
\&
\&  const char *memcached_result_value (memcached_result_st *ptr);
\&
\&  size_t memcached_result_length (const memcached_result_st *ptr);
\&
\&  uint32_t memcached_result_flags (const memcached_result_st *result)
\&
\&  uint64_t memcached_result_cas (const memcached_result_st *result);
\&
\&  memcached_return_t
\&    memcached_result_set_value (memcached_result_st *ptr,
\&                                const char *value, size_t length)
\&
\&  void memcached_result_set_flags (memcached_result_st *ptr, uint32_t flags)
\&
\&  void memcached_result_set_expiration (memcached_result_st *ptr, time_t)
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIlibmemcached\fR\|(3) can optionally return a memcached_result_st which acts as a
result object. The result objects have added benefits over the character
pointer returns in that they are forward compatible with new return items
that future memcached servers may implement (the best current example of
this is the \s-1CAS\s0 return item). The structures can also be reused which will
save on calls to \fImalloc\fR\|(3). It is suggested that you use result objects over
char * return functions.
.PP
The structure of memcached_result_st has been encapsulated, you should not
write code to directly access members of the structure.
.PP
\&\fImemcached_result_create()\fR will either allocate memory for a
memcached_result_st or will initialize a structure passed to it.
.PP
\&\fImemcached_result_free()\fR will deallocate any memory attached to the
structure. If the structure was also alloacted, it will deallocate it.
.PP
\&\fImemcached_result_key_value()\fR returns the key value associated with the
current result object.
.PP
\&\fImemcached_result_key_length()\fR returns the key length associated with the
current result object.
.PP
\&\fImemcached_result_value()\fR returns the result value associated with the
current result object.
.PP
\&\fImemcached_result_length()\fR returns the result length associated with the
current result object.
.PP
\&\fImemcached_result_flags()\fR returns the flags associated with the
current result object.
.PP
\&\fImemcached_result_cas()\fR returns the cas associated with the
current result object. This value will only be available if the server
supports it.
.PP
\&\fImemcached_result_set_value()\fR takes a byte array and a size and sets
the result to this value. This function is used for trigger responses.
.PP
void \fImemcached_result_set_flags()\fR takes a result structure and stores
a new value for the flags field.
.PP
void memcached_result_set_expiration(A) takes a result structure and stores
a new value for the expiration field (this is only used by read through
triggers).
.PP
You may wish to avoid using \fImemcached_result_create\fR\|(3) with a
stack based allocation. The most common issues related to \s-1ABI\s0 safety involve
heap allocated structures.
.SH "RETURN"
.IX Header "RETURN"
Varies, see particular functions. All structures must have
\&\fImemcached_result_free()\fR called on them for cleanup purposes. Failure to
do this will result in leaked memory.
.SH "HOME"
.IX Header "HOME"
To find out more information please check:
<https://launchpad.net/libmemcached>
.SH "AUTHOR"
.IX Header "AUTHOR"
Brian Aker, <brian@tangent.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fImemcached\fR\|(1) \fIlibmemcached\fR\|(3) \fImemcached_strerror\fR\|(3)
