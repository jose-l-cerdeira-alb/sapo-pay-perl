.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Box::Thread::Manager 3"
.TH Mail::Box::Thread::Manager 3 "2014-08-24" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Box::Thread::Manager \- maintain threads within a set of folders
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 2
\& Mail::Box::Thread::Manager
\&   is a Mail::Reporter
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& my $mgr     = Mail::Box::Manager\->new;
\& my $folder  = $mgr\->open(folder => \*(Aq/tmp/inbox\*(Aq);
\&
\& my $threads = $mgr\->threads();
\& $threads\->includeFolder($folder);
\&
\& my $threads = $msg\->threads(folder => $folder);
\&
\& foreach my $thread ($threads\->all) {
\&     $thread\->print;
\& }
\&
\& $threads\->removeFolder($folder);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A (message\-)\fIthread\fR is a message with links to messages which followed in
reply of that message.  And then the messages with replied to the messages,
which replied the original message.  And so on.  Some threads are only
one message long (never replied to), some threads are very long.
.PP
The \f(CW\*(C`Mail::Box::Thread::Manager\*(C'\fR is very powerful.  Not only is it able to
do a descent job on MH-like folders (makes a trade-off between perfection
and speed), it also can maintain threads from messages residing in different
opened folders.  Both facilities are rare for mail-agents.  The manager
creates flexible trees with Mail::Box::Thread::Node objects.
.PP
Extends \*(L"\s-1DESCRIPTION\s0\*(R" in Mail::Reporter.
.SH "METHODS"
.IX Header "METHODS"
Extends \*(L"\s-1METHODS\s0\*(R" in Mail::Reporter.
.SS "Constructors"
.IX Subsection "Constructors"
Extends \*(L"Constructors\*(R" in Mail::Reporter.
.IP "Mail::Box::Thread::Manager\->\fBnew\fR(%options)" 4
.IX Item "Mail::Box::Thread::Manager->new(%options)"
A \f(CW\*(C`Mail::Box::Thread::Manager\*(C'\fR object is usually created by a
Mail::Box::Manager.  One manager can produce more than one of these
objects.  One thread manager can combine messages from a set of folders,
which may be partially overlapping with other objects of the same type.
.Sp
.Vb 10
\& \-Option     \-\-Defined in     \-\-Default
\&  dummy_type                    Mail::Message::Dummy
\&  folder                        [ ]
\&  folders                       [ ]
\&  log          Mail::Reporter   \*(AqWARNINGS\*(Aq
\&  thread_body                   <false>
\&  thread_type                   Mail::Box::Thread::Node
\&  timespan                      \*(Aq3 days\*(Aq
\&  trace        Mail::Reporter   \*(AqWARNINGS\*(Aq
\&  window                        10
.Ve
.RS 4
.IP "dummy_type => \s-1CLASS\s0" 2
.IX Item "dummy_type => CLASS"
The type of dummy messages.  Dummy messages are used to fill holes in
detected threads: referred to by messages found in the folder, but itself
not in the folder.
.IP "folder => \s-1FOLDER\s0 | REF-ARRAY-FOLDERS" 2
.IX Item "folder => FOLDER | REF-ARRAY-FOLDERS"
Specifies which folders are to be covered by the threads.  You can
specify one or more open folders.  When you close a folder, the
manager will automatically remove the messages of that folder from
your threads.
.IP "folders => \s-1FOLDER\s0 | REF-ARRAY-FOLDERS" 2
.IX Item "folders => FOLDER | REF-ARRAY-FOLDERS"
Equivalent to the \f(CW\*(C`folder\*(C'\fR option.
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
.PD 0
.IP "thread_body => \s-1BOOLEAN\s0" 2
.IX Item "thread_body => BOOLEAN"
.PD
May thread-detection be based on the content of a message?  This has
a serious performance implication when there are many messages without
\&\f(CW\*(C`In\-Reply\-To\*(C'\fR and \f(CW\*(C`References\*(C'\fR headers in the folder, because it
will cause many messages to be parsed. \s-1NOT\s0 \s-1IMPLEMENTED\s0 \s-1YET\s0.
.IP "thread_type => \s-1CLASS\s0" 2
.IX Item "thread_type => CLASS"
Type of the thread nodes.
.IP "timespan => \s-1TIME\s0 | '\s-1EVER\s0'" 2
.IX Item "timespan => TIME | 'EVER'"
Specify how fast threads usually work: the amount of time between an
answer and a reply.  This is used in combination with the \f(CW\*(C`window\*(C'\fR
option to determine when to give-up filling the holes in threads.
.Sp
See \fIMail::Box::timespan2seconds()\fR for the possibilities for \s-1TIME\s0.
With '\s-1EVER\s0', the search for messages in a thread
will only be limited by the window-size.
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
.PD 0
.IP "window => INTEGER|'\s-1ALL\s0'" 2
.IX Item "window => INTEGER|'ALL'"
.PD
The thread-window describes how many messages should be checked at
maximum to fill `holes' in threads for folder which use delay-loading
of message headers.
.Sp
The constant '\s-1ALL\s0' will cause thread-detection not to stop trying
to fill holes, but continue looking until the first message of the folder
is reached.  Gives the best quality results, but may perform bad.
.RE
.RS 4
.Sp
example:
.Sp
.Vb 5
\& use Mail::Box::Manager;
\& my $mgr     = Mail::Box::Manager\->new;
\& my $inbox   = $mgr\->open(folder => $ENV{MAIL});
\& my $read    = $mgr\->open(folder => \*(AqMail/read\*(Aq);
\& my $threads = $mgr\->threads(folders => [$inbox, $read]);
\&
\& # longer alternative for last line:
\& my $threads = $mgr\->threads;
\& $threads\->includeFolder($inbox);
\& $threads\->includeFolder($read);
.Ve
.RE
.SS "Grouping Folders"
.IX Subsection "Grouping Folders"
.ie n .IP "$obj\->\fBfolders\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfolders\fR()" 4
.IX Item "$obj->folders()"
Returns the folders as managed by this threader.
.ie n .IP "$obj\->\fBincludeFolder\fR($folders)" 4
.el .IP "\f(CW$obj\fR\->\fBincludeFolder\fR($folders)" 4
.IX Item "$obj->includeFolder($folders)"
Add one or more folders to the list of folders whose messages are
organized in the threads maintained by this object.  Duplicated
inclusions will not cause any problems.
.Sp
From the folders, the messages which have their header lines parsed
(see Mail::Box about lazy extracting) will be immediately scanned.
Messages of which the header is known only later will have to report this
(see \fItoBeThreaded()\fR).
.Sp
example:
.Sp
.Vb 1
\& $threads\->includeFolder($inbox, $draft);
.Ve
.ie n .IP "$obj\->\fBremoveFolder\fR($folders)" 4
.el .IP "\f(CW$obj\fR\->\fBremoveFolder\fR($folders)" 4
.IX Item "$obj->removeFolder($folders)"
Remove one or more folders from the list of folders whose messages are
organized in the threads maintained by this object.
.Sp
example:
.Sp
.Vb 1
\& $threads\->removeFolder($draft);
.Ve
.SS "The Threads"
.IX Subsection "The Threads"
.ie n .IP "$obj\->\fBall\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBall\fR()" 4
.IX Item "$obj->all()"
Returns all messages which start a thread.  The list may contain dummy
messages and messages which are scheduled for deletion.
.Sp
To be able to return all threads, thread construction on each
message is performed first, which may be slow for some folder-types
because is will enforce parsing of message-bodies.
.ie n .IP "$obj\->\fBknown\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBknown\fR()" 4
.IX Item "$obj->known()"
Returns the list of all messages which are known to be the start of
a thread.  Threads containing messages which where not read from their
folder (like often happens MH-folder messages) are not yet known, and
hence will not be returned.
.Sp
The list may contain dummy messages, and messages which are scheduled
for deletion.  Threads are detected based on explicitly calling
\&\fIinThread()\fR and \fIthread()\fR with a messages from the folder.
.Sp
Be warned that, each time a message's header is read from the folder,
the return of the method can change.
.ie n .IP "$obj\->\fBsortedAll\fR( [$prepare, [$compare]] )" 4
.el .IP "\f(CW$obj\fR\->\fBsortedAll\fR( [$prepare, [$compare]] )" 4
.IX Item "$obj->sortedAll( [$prepare, [$compare]] )"
Returns \fIall()\fR the threads by default, but sorted on timestamp.
.ie n .IP "$obj\->\fBsortedKnown\fR( [$prepare, [$compare]] )" 4
.el .IP "\f(CW$obj\fR\->\fBsortedKnown\fR( [$prepare, [$compare]] )" 4
.IX Item "$obj->sortedKnown( [$prepare, [$compare]] )"
Returns all \fIknown()\fR threads, in sorted order.  By default, the threads
will be sorted on timestamp, But a different \f(CW$compare\fR method can be
specified.
.ie n .IP "$obj\->\fBthread\fR($message)" 4
.el .IP "\f(CW$obj\fR\->\fBthread\fR($message)" 4
.IX Item "$obj->thread($message)"
Returns the thread where this \f(CW$message\fR is the start of.  However, there
is a possibility that this message is a reply itself.
.Sp
Usually, all messages which are in reply of this message are dated later
than the specified one.  All headers of messages later than this one are
getting parsed first, for each folder in this threads-object.
.Sp
example:
.Sp
.Vb 3
\& my $threads = $mgr\->threads(folder => $inbox);
\& my $thread  = $threads\->thread($inbox\->message(3));
\& print $thread\->string;
.Ve
.ie n .IP "$obj\->\fBthreadStart\fR($message)" 4
.el .IP "\f(CW$obj\fR\->\fBthreadStart\fR($message)" 4
.IX Item "$obj->threadStart($message)"
Based on a message, and facts from previously detected threads, try
to build solid knowledge about the thread where this message is in.
.SS "Internals"
.IX Subsection "Internals"
.ie n .IP "$obj\->\fBcreateDummy\fR($message_id)" 4
.el .IP "\f(CW$obj\fR\->\fBcreateDummy\fR($message_id)" 4
.IX Item "$obj->createDummy($message_id)"
Get a replacement message to be used in threads.  Be warned that a
dummy is not a member of any folder, so the program working with
threads must test with \fIMail::Message::isDummy()\fR before trying things only
available to real messages.
.ie n .IP "$obj\->\fBinThread\fR($message)" 4
.el .IP "\f(CW$obj\fR\->\fBinThread\fR($message)" 4
.IX Item "$obj->inThread($message)"
Collect the thread-information of one message.  The `In\-Reply\-To' and
`Reference' header-fields are processed.  If this method is called on
a message whose header was not read yet (as usual for MH-folders,
for instance) the reading of that header will be triggered here.
.ie n .IP "$obj\->\fBoutThread\fR($message)" 4
.el .IP "\f(CW$obj\fR\->\fBoutThread\fR($message)" 4
.IX Item "$obj->outThread($message)"
Remove the message from the thread-infrastructure.  A message is
replaced by a dummy.
.ie n .IP "$obj\->\fBtoBeThreaded\fR($folder, @messages)" 4
.el .IP "\f(CW$obj\fR\->\fBtoBeThreaded\fR($folder, \f(CW@messages\fR)" 4
.IX Item "$obj->toBeThreaded($folder, @messages)"
Include the specified messages in/from the threads managed by
this object, if this folder is maintained by this thread-manager.
.ie n .IP "$obj\->\fBtoBeUnthreaded\fR($folder, @messages)" 4
.el .IP "\f(CW$obj\fR\->\fBtoBeUnthreaded\fR($folder, \f(CW@messages\fR)" 4
.IX Item "$obj->toBeUnthreaded($folder, @messages)"
Remove the specified \f(CW@messages\fR in/from the threads managed by
this object, if this folder is maintained by this thread-manager.
.SS "Error handling"
.IX Subsection "Error handling"
Extends \*(L"Error handling\*(R" in Mail::Reporter.
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR($object)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR($object)" 4
.IX Item "$obj->addReport($object)"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "$obj->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD 0
.ie n .IP "Mail::Box::Thread::Manager\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "Mail::Box::Thread::Manager\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "Mail::Box::Thread::Manager->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR( [$level, [$strings]] )" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "$obj->log( [$level, [$strings]] )"
.PD 0
.IP "Mail::Box::Thread::Manager\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "Mail::Box::Thread::Manager->log( [$level, [$strings]] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR($level)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR($level)" 4
.IX Item "$obj->logPriority($level)"
.PD 0
.IP "Mail::Box::Thread::Manager\->\fBlogPriority\fR($level)" 4
.IX Item "Mail::Box::Thread::Manager->logPriority($level)"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR( [$level] )" 4
.IX Item "$obj->report( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR( [$level] )" 4
.IX Item "$obj->reportAll( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR( [$level] )" 4
.IX Item "$obj->trace( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
Extends \*(L"Cleanup\*(R" in Mail::Reporter.
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
Inherited, see \*(L"Cleanup\*(R" in Mail::Reporter
.SH "DETAILS"
.IX Header "DETAILS"
This module implements thread-detection on a folder.  Messages created
by the better mailers will include \f(CW\*(C`In\-Reply\-To\*(C'\fR and \f(CW\*(C`References\*(C'\fR
lines, which are used to figure out how messages are related.  If you
prefer a better thread detection, they are implementable, but there
may be a serious performance hit (depends on the type of folder used).
.SS "Maintaining threads"
.IX Subsection "Maintaining threads"
A \f(CW\*(C`Mail::Box::Thread::Manager\*(C'\fR object is created by the
Mail::Box::Manager, using \fIMail::Box::Manager::threads()\fR.
Each object can monitor the thread-relations between messages in one
or more folders.  When more than one folder is specified, the messages
are merged while reading the threads, although nothing changes in the
folder-structure.  Adding and removing folders which have to be maintained
is permitted at any moment, although may be quite costly in performance.
.PP
An example of the maintained structure is shown below.  The
Mail::Box::Manager has two open folders, and a thread-builder which
monitors them both.  The combined folders have two threads, the second
is two long (msg3 is a reply on msg2).  Msg2 is in two folders at once.
.PP
.Vb 10
\&       manager
\&        |    \e
\&        |     \`\-\-\-\-\-\-\-\-\-\-\- threads
\&        |                  |     |
\&        |                thread thread\-\-\-thread
\&        |                  |    /|        /
\&        |                  |   //        /
\&        +\-\-\-\- folder1      |  //        /
\&        |       |         /  //        /
\&        |       \`\-\-\-\-\-msg1  //        /
\&        |       \`\-\-\-\-\-msg2\-\*(Aq/        /
\&        |                  /        /
\&        \`\-\-\-\-\-folder2     /        /
\&                |        /        /
\&                \`\-\-\-\-\-msg2       /
\&                \`\-\-\-\-\-msg3\-\-\-\-\-\-\*(Aq
.Ve
.SS "Delayed thread detection"
.IX Subsection "Delayed thread detection"
With \fIall()\fR you get the start-messages of each thread of this folder.
When that message was not found in the folder (not saved or already
removed), you get a message of the dummy-type.  These thread descriptions
are in perfect state: all messages of the folder are included somewhere,
and each missing message of the threads (\fIholes\fR) are filled by dummies.
.PP
However, to be able to detect all threads it is required to have the
headers of all messages, which is very slow for some types of folders,
especially \s-1MH\s0 and \s-1IMAP\s0 folders.
.PP
For interactive mail-readers, it is preferred to detect threads only
on messages which are in the viewport of the user.  This may be sloppy
in some situations, but everything is preferable over reading an \s-1MH\s0
mailbox with 10k e\-mails to read only the see most recent messages.
.PP
In this object, we take special care not to cause unnecessary parsing
(loading) of messages.  Threads will only be detected on command, and
by default only the message headers are used.
.PP
The following reports the Mail::Box::Thread::Node which is
related to a message:
.PP
.Vb 1
\& my $thread = $message\->thread;
.Ve
.PP
When the message was not put in a thread yet, it is done now.  But, more
work is done to return the best thread.  Based on various parameters,
which where specified when the folder was created, the method walks
through the folder to fill the holes which are in this thread.
.PP
Walking from back to front (recently arrived messages are usually in the back
of the folder), message after message are triggered to be included in their
thread.  At a certain moment, the whole thread of the requested method
is found, a certain maximum number of messages was tried, but that
didn't help (search window bound reached), or the messages within the
folder are getting too old.  Then the search to complete the thread will
end, although more messages of them might have been in the folder: we
don't scan the whole folder for performance reasons.
.PP
Finally, for each message where the head is known, for instance for
all messages in mbox-folders, the correct thread is determined
immediately.  Also, all messages where the head get loaded later, are
automatically included.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Package $package does not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR does not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package does not implement $method."
Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.117,
built on August 24, 2014. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2014 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
