.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Message::TransferEnc::Base64 3"
.TH Mail::Message::TransferEnc::Base64 3 "2020-02-07" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Message::TransferEnc::Base64 \- encode/decode base64 message bodies
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 3
\& Mail::Message::TransferEnc::Base64
\&   is a Mail::Message::TransferEnc
\&   is a Mail::Reporter
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& my Mail::Message $msg = ...;
\& my $decoded = $msg\->decoded;
\& my $encoded = $msg\->encode(transfer => \*(Aqbase64\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Encode or decode message bodies with base64.  The e\-mail protocol and
user agents can not handle binary data.  Therefore, binary data \-but
even sometimes non-binary data\- is encoded into \s-1ASCII,\s0 this is
transportable.
.PP
Base64 re-groups the bits of bytes, and maps them on characters. The
data contains bytes of 8 bits (an \fIoctet\fR).  These are repacked into
groups of 6 bits, pointing in an array of characters containing
\&\f(CW\*(C`[A\-Za\-z0\-9+/]\*(C'\fR.  This way, three data bytes become 4 base64 bytes.
The encoded data will be trailed by \f(CW\*(Aq=\*(Aq\fR characters to align on
four bytes.
.PP
Extends \*(L"\s-1DESCRIPTION\*(R"\s0 in Mail::Message::TransferEnc.
.SH "METHODS"
.IX Header "METHODS"
Extends \*(L"\s-1METHODS\*(R"\s0 in Mail::Message::TransferEnc.
.SS "Constructors"
.IX Subsection "Constructors"
Extends \*(L"Constructors\*(R" in Mail::Message::TransferEnc.
.IP "Mail::Message::TransferEnc::Base64\->\fBnew\fR(%options)" 4
.IX Item "Mail::Message::TransferEnc::Base64->new(%options)"
Inherited, see \*(L"Constructors\*(R" in Mail::Reporter
.SS "The Encoder"
.IX Subsection "The Encoder"
Extends \*(L"The Encoder\*(R" in Mail::Message::TransferEnc.
.ie n .IP "Mail::Message::TransferEnc::Base64\->\fBaddTransferEncoder\fR($type, $class)" 4
.el .IP "Mail::Message::TransferEnc::Base64\->\fBaddTransferEncoder\fR($type, \f(CW$class\fR)" 4
.IX Item "Mail::Message::TransferEnc::Base64->addTransferEncoder($type, $class)"
Inherited, see \*(L"The Encoder\*(R" in Mail::Message::TransferEnc
.ie n .IP "$obj\->\fBcreate\fR($type, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBcreate\fR($type, \f(CW%options\fR)" 4
.IX Item "$obj->create($type, %options)"
Inherited, see \*(L"The Encoder\*(R" in Mail::Message::TransferEnc
.ie n .IP "$obj\->\fBname\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBname\fR()" 4
.IX Item "$obj->name()"
Inherited, see \*(L"The Encoder\*(R" in Mail::Message::TransferEnc
.SS "Encoding"
.IX Subsection "Encoding"
Extends \*(L"Encoding\*(R" in Mail::Message::TransferEnc.
.ie n .IP "$obj\->\fBcheck\fR($body, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBcheck\fR($body, \f(CW%options\fR)" 4
.IX Item "$obj->check($body, %options)"
Inherited, see \*(L"Encoding\*(R" in Mail::Message::TransferEnc
.ie n .IP "$obj\->\fBdecode\fR($body, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBdecode\fR($body, \f(CW%options\fR)" 4
.IX Item "$obj->decode($body, %options)"
.Vb 2
\& \-Option     \-\-Defined in                \-\-Default
\&  result_type  Mail::Message::TransferEnc  <type of source body>
.Ve
.RS 4
.IP "result_type => \s-1CLASS\s0" 2
.IX Item "result_type => CLASS"
.RE
.RS 4
.RE
.PD 0
.ie n .IP "$obj\->\fBencode\fR($body, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBencode\fR($body, \f(CW%options\fR)" 4
.IX Item "$obj->encode($body, %options)"
.PD
Inherited, see \*(L"Encoding\*(R" in Mail::Message::TransferEnc
.SS "Error handling"
.IX Subsection "Error handling"
Extends \*(L"Error handling\*(R" in Mail::Message::TransferEnc.
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR($object)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR($object)" 4
.IX Item "$obj->addReport($object)"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "$obj->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD 0
.ie n .IP "Mail::Message::TransferEnc::Base64\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "Mail::Message::TransferEnc::Base64\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "Mail::Message::TransferEnc::Base64->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR( [$level, [$strings]] )" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "$obj->log( [$level, [$strings]] )"
.PD 0
.IP "Mail::Message::TransferEnc::Base64\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "Mail::Message::TransferEnc::Base64->log( [$level, [$strings]] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR($level)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR($level)" 4
.IX Item "$obj->logPriority($level)"
.PD 0
.IP "Mail::Message::TransferEnc::Base64\->\fBlogPriority\fR($level)" 4
.IX Item "Mail::Message::TransferEnc::Base64->logPriority($level)"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR( [$level] )" 4
.IX Item "$obj->report( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR( [$level] )" 4
.IX Item "$obj->reportAll( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR( [$level] )" 4
.IX Item "$obj->trace( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
Extends \*(L"Cleanup\*(R" in Mail::Message::TransferEnc.
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
Inherited, see \*(L"Cleanup\*(R" in Mail::Reporter
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.IP "Warning: Base64 line length not padded on 4." 4
.IX Item "Warning: Base64 line length not padded on 4."
While decoding base64 the data in a message body, a string was found which
was not padded into a multiple of four bytes.  This is illegal, and therefore
this data is ignored.
.ie n .IP "Error: Decoder for transfer encoding $type does not work: $@" 4
.el .IP "Error: Decoder for transfer encoding \f(CW$type\fR does not work: $@" 4
.IX Item "Error: Decoder for transfer encoding $type does not work: $@"
Compiling the required transfer encoding resulted in errors, which means
that the decoder can not be used.
.ie n .IP "Warning: No decoder for transfer encoding $type." 4
.el .IP "Warning: No decoder for transfer encoding \f(CW$type\fR." 4
.IX Item "Warning: No decoder for transfer encoding $type."
A decoder for the specified type of transfer encoding is not implemented.
.ie n .IP "Error: Package $package does not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR does not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package does not implement $method."
Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Message distribution version 3.009,
built on February 07, 2020. Website: \fIhttp://perl.overmeer.net/CPAN/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2020 by [Mark Overmeer <markov@cpan.org>]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://dev.perl.org/licenses/\fR
