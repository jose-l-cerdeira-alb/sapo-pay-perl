.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Box::POP3 3"
.TH Mail::Box::POP3 3 "2014-08-24" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Box::POP3 \- handle POP3 folders as client
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 4
\& Mail::Box::POP3
\&   is a Mail::Box::Net
\&   is a Mail::Box
\&   is a Mail::Reporter
\&
\& Mail::Box::POP3 is extended by
\&   Mail::Box::POP3s
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Mail::Box::POP3;
\& my $folder = Mail::Box::POP3\->new(folder => $ENV{MAIL}, ...);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Maintain a folder which has its messages stored on a remote server.  The
communication between the client application and the server is implemented
using the \s-1POP3\s0 protocol.  This class uses Mail::Transport::POP3 to
hide the transport of information, and focusses solely on the correct
handling of messages within a \s-1POP3\s0 folder.
.PP
Extends \*(L"\s-1DESCRIPTION\s0\*(R" in Mail::Box::Net.
.SH "OVERLOADED"
.IX Header "OVERLOADED"
Extends \*(L"\s-1OVERLOADED\s0\*(R" in Mail::Box::Net.
.ie n .IP "overload: \fB""""\fR" 4
.el .IP "overload: \fB``''\fR" 4
.IX Item "overload: """""
Inherited, see \*(L"\s-1OVERLOADED\s0\*(R" in Mail::Box
.IP "overload: \fB@{}\fR" 4
.IX Item "overload: @{}"
Inherited, see \*(L"\s-1OVERLOADED\s0\*(R" in Mail::Box
.IP "overload: \fBcmp\fR" 4
.IX Item "overload: cmp"
Inherited, see \*(L"\s-1OVERLOADED\s0\*(R" in Mail::Box
.SH "METHODS"
.IX Header "METHODS"
Extends \*(L"\s-1METHODS\s0\*(R" in Mail::Box::Net.
.SS "Constructors"
.IX Subsection "Constructors"
Extends \*(L"Constructors\*(R" in Mail::Box::Net.
.IP "Mail::Box::POP3\->\fBnew\fR(%options)" 4
.IX Item "Mail::Box::POP3->new(%options)"
For authentications, you have three choices: specify a foldername which
resembles an \s-1URL\s0, or specify a pop-client object, or separate options
for user, password, pop-server and server-port.
.Sp
.Vb 10
\& \-Option           \-\-Defined in     \-\-Default
\&  access             Mail::Box        \*(Aqr\*(Aq
\&  authenticate                        \*(AqAUTO\*(Aq
\&  body_delayed_type  Mail::Box        Mail::Message::Body::Delayed
\&  body_type          Mail::Box        Mail::Message::Body::Lines
\&  coerce_options     Mail::Box        []
\&  create             Mail::Box        <not applicable>
\&  extract            Mail::Box        10240
\&  field_type         Mail::Box        undef
\&  fix_headers        Mail::Box        <false>
\&  folder             Mail::Box        <not applicable>
\&  folderdir          Mail::Box        <not used>
\&  head_delayed_type  Mail::Box        Mail::Message::Head::Delayed
\&  head_type          Mail::Box        Mail::Message::Head::Complete
\&  keep_dups          Mail::Box        <false>
\&  lock_file          Mail::Box        undef
\&  lock_timeout       Mail::Box        1 hour
\&  lock_type          Mail::Box        \*(AqNONE\*(Aq
\&  lock_wait          Mail::Box        10 seconds
\&  locker             Mail::Box        undef
\&  log                Mail::Reporter   \*(AqWARNINGS\*(Aq
\&  manager            Mail::Box        undef
\&  message_type       Mail::Box        Mail::Box::POP3::Message
\&  multipart_type     Mail::Box        Mail::Message::Body::Multipart
\&  password           Mail::Box::Net   undef
\&  pop_client                          undef
\&  remove_when_empty  Mail::Box        <false>
\&  save_on_exit       Mail::Box        <true>
\&  server_name        Mail::Box::Net   undef
\&  server_port        Mail::Box::Net   110
\&  trace              Mail::Reporter   \*(AqWARNINGS\*(Aq
\&  trusted            Mail::Box        <false>
\&  username           Mail::Box::Net   undef
.Ve
.RS 4
.IP "access => \s-1MODE\s0" 2
.IX Item "access => MODE"
.PD 0
.IP "authenticate => '\s-1LOGIN\s0'|'\s-1APOP\s0'|'\s-1AUTO\s0'" 2
.IX Item "authenticate => 'LOGIN'|'APOP'|'AUTO'"
.PD
\&\s-1POP3\s0 can use two methods of authentication: the old \s-1LOGIN\s0 protocol, which
transmits a username and password in plain text, and the newer \s-1APOP\s0
protocol which uses \s-1MD5\s0 encryption.  \s-1APOP\s0 is therefore much better, however
not always supported by the server.  With \s-1AUTO\s0, first \s-1APOP\s0 is tried and
if that fails \s-1LOGIN\s0.
.IP "body_delayed_type => \s-1CLASS\s0" 2
.IX Item "body_delayed_type => CLASS"
.PD 0
.IP "body_type => CLASS|CODE" 2
.IX Item "body_type => CLASS|CODE"
.IP "coerce_options => \s-1ARRAY\s0" 2
.IX Item "coerce_options => ARRAY"
.IP "create => \s-1BOOLEAN\s0" 2
.IX Item "create => BOOLEAN"
.IP "extract => \s-1INTEGER\s0 | \s-1CODE\s0 | \s-1METHOD\s0 | '\s-1LAZY\s0'|'\s-1ALWAYS\s0'" 2
.IX Item "extract => INTEGER | CODE | METHOD | 'LAZY'|'ALWAYS'"
.IP "field_type => \s-1CLASS\s0" 2
.IX Item "field_type => CLASS"
.IP "fix_headers => \s-1BOOLEAN\s0" 2
.IX Item "fix_headers => BOOLEAN"
.IP "folder => \s-1FOLDERNAME\s0" 2
.IX Item "folder => FOLDERNAME"
.IP "folderdir => \s-1DIRECTORY\s0" 2
.IX Item "folderdir => DIRECTORY"
.IP "head_delayed_type => \s-1CLASS\s0" 2
.IX Item "head_delayed_type => CLASS"
.IP "head_type => \s-1CLASS\s0" 2
.IX Item "head_type => CLASS"
.IP "keep_dups => \s-1BOOLEAN\s0" 2
.IX Item "keep_dups => BOOLEAN"
.IP "lock_file => \s-1FILENAME\s0" 2
.IX Item "lock_file => FILENAME"
.IP "lock_timeout => \s-1SECONDS\s0" 2
.IX Item "lock_timeout => SECONDS"
.IP "lock_type => CLASS|STRING|ARRAY" 2
.IX Item "lock_type => CLASS|STRING|ARRAY"
.IP "lock_wait => \s-1SECONDS\s0" 2
.IX Item "lock_wait => SECONDS"
.IP "locker => \s-1OBJECT\s0" 2
.IX Item "locker => OBJECT"
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
.IP "manager => \s-1MANAGER\s0" 2
.IX Item "manager => MANAGER"
.IP "message_type => \s-1CLASS\s0" 2
.IX Item "message_type => CLASS"
.IP "multipart_type => \s-1CLASS\s0" 2
.IX Item "multipart_type => CLASS"
.IP "password => \s-1STRING\s0" 2
.IX Item "password => STRING"
.IP "pop_client => \s-1OBJECT\s0" 2
.IX Item "pop_client => OBJECT"
.PD
You may want to specify your own pop-client object.  The object
which is passed must extend Mail::Transport::POP3.
.IP "remove_when_empty => \s-1BOOLEAN\s0" 2
.IX Item "remove_when_empty => BOOLEAN"
.PD 0
.IP "save_on_exit => \s-1BOOLEAN\s0" 2
.IX Item "save_on_exit => BOOLEAN"
.IP "server_name => \s-1HOSTNAME\s0" 2
.IX Item "server_name => HOSTNAME"
.IP "server_port => \s-1INTEGER\s0" 2
.IX Item "server_port => INTEGER"
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
.IP "trusted => \s-1BOOLEAN\s0" 2
.IX Item "trusted => BOOLEAN"
.IP "username => \s-1STRING\s0" 2
.IX Item "username => STRING"
.RE
.RS 4
.PD
.Sp
example:
.Sp
.Vb 2
\& my $url = \*(Aqpop3://user:password@pop.xs4all.nl\*(Aq
\& my $pop = Mail::Box::POP3\->new($url);
\&
\& my $pop = $mgr\->open(type => \*(Aqpop3\*(Aq,
\&    username => \*(Aqmyname\*(Aq, password => \*(Aqmypassword\*(Aq,
\&    server_name => \*(Aqpop.xs4all.nl\*(Aq);
.Ve
.RE
.SS "The folder"
.IX Subsection "The folder"
Extends \*(L"The folder\*(R" in Mail::Box::Net.
.ie n .IP "$obj\->\fBaddMessage\fR($message)" 4
.el .IP "\f(CW$obj\fR\->\fBaddMessage\fR($message)" 4
.IX Item "$obj->addMessage($message)"
It is impossible to write messages to the average \s-1POP3\s0 server.  There are
extensions to the protocol which do permit it, however these are not
implemented (yet, patches welcome).
.Sp
\&\f(CW\*(C`undef\*(C'\fR is returned, and an error displayed.  However, no complaint is
given when the \f(CW$message\fR is \f(CW\*(C`undef\*(C'\fR itself.
.Sp
.Vb 2
\& \-Option\-\-Defined in\-\-Default
\&  share   Mail::Box   <not used>
.Ve
.RS 4
.IP "share => \s-1BOOLEAN\s0" 2
.IX Item "share => BOOLEAN"
.RE
.RS 4
.RE
.PD 0
.ie n .IP "$obj\->\fBaddMessages\fR($messages)" 4
.el .IP "\f(CW$obj\fR\->\fBaddMessages\fR($messages)" 4
.IX Item "$obj->addMessages($messages)"
.PD
As useless as \fIaddMessage()\fR.  The only acceptable call to this method
is without any message.
.IP "Mail::Box::POP3\->\fBappendMessages\fR(%options)" 4
.IX Item "Mail::Box::POP3->appendMessages(%options)"
Inherited, see \*(L"The folder\*(R" in Mail::Box
.ie n .IP "$obj\->\fBclose\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBclose\fR(%options)" 4
.IX Item "$obj->close(%options)"
Inherited, see \*(L"The folder\*(R" in Mail::Box
.ie n .IP "$obj\->\fBcopyTo\fR($folder, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBcopyTo\fR($folder, \f(CW%options\fR)" 4
.IX Item "$obj->copyTo($folder, %options)"
Inherited, see \*(L"The folder\*(R" in Mail::Box
.ie n .IP "$obj\->\fBdelete\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBdelete\fR(%options)" 4
.IX Item "$obj->delete(%options)"
It is not possible to delete a \s-1POP3\s0 folder remotely: the best we can do
is remove all the messages in it... which is the action implemented here.
A notice is logged about this.
.Sp
.Vb 2
\& \-Option   \-\-Defined in\-\-Default
\&  recursive  Mail::Box   <not used>
.Ve
.RS 4
.IP "recursive => \s-1BOOLEAN\s0" 2
.IX Item "recursive => BOOLEAN"
.RE
.RS 4
.RE
.PD 0
.ie n .IP "$obj\->\fBfolderdir\fR( [$directory] )" 4
.el .IP "\f(CW$obj\fR\->\fBfolderdir\fR( [$directory] )" 4
.IX Item "$obj->folderdir( [$directory] )"
.PD
Inherited, see \*(L"\s-1METHODS\s0\*(R" in Mail::Box::Net
.ie n .IP "$obj\->\fBname\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBname\fR()" 4
.IX Item "$obj->name()"
Inherited, see \*(L"The folder\*(R" in Mail::Box
.ie n .IP "$obj\->\fBorganization\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBorganization\fR()" 4
.IX Item "$obj->organization()"
Inherited, see \*(L"The folder\*(R" in Mail::Box
.ie n .IP "$obj\->\fBsize\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBsize\fR()" 4
.IX Item "$obj->size()"
Inherited, see \*(L"The folder\*(R" in Mail::Box
.ie n .IP "$obj\->\fBtype\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtype\fR()" 4
.IX Item "$obj->type()"
Inherited, see \*(L"The folder\*(R" in Mail::Box
.ie n .IP "$obj\->\fBupdate\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBupdate\fR()" 4
.IX Item "$obj->update()"
\&\s-1NOT\s0 \s-1IMPLEMENTED\s0 \s-1YET\s0
.ie n .IP "$obj\->\fBurl\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBurl\fR()" 4
.IX Item "$obj->url()"
Inherited, see \*(L"The folder\*(R" in Mail::Box
.SS "Folder flags"
.IX Subsection "Folder flags"
Extends \*(L"Folder flags\*(R" in Mail::Box::Net.
.ie n .IP "$obj\->\fBaccess\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBaccess\fR()" 4
.IX Item "$obj->access()"
Inherited, see \*(L"Folder flags\*(R" in Mail::Box
.ie n .IP "$obj\->\fBisModified\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisModified\fR()" 4
.IX Item "$obj->isModified()"
Inherited, see \*(L"Folder flags\*(R" in Mail::Box
.ie n .IP "$obj\->\fBmodified\fR( [\s-1BOOLEAN\s0] )" 4
.el .IP "\f(CW$obj\fR\->\fBmodified\fR( [\s-1BOOLEAN\s0] )" 4
.IX Item "$obj->modified( [BOOLEAN] )"
Inherited, see \*(L"Folder flags\*(R" in Mail::Box
.ie n .IP "$obj\->\fBwritable\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwritable\fR()" 4
.IX Item "$obj->writable()"
Inherited, see \*(L"Folder flags\*(R" in Mail::Box
.SS "The messages"
.IX Subsection "The messages"
Extends \*(L"The messages\*(R" in Mail::Box::Net.
.ie n .IP "$obj\->\fBcurrent\fR( [$number|$message|$message_id] )" 4
.el .IP "\f(CW$obj\fR\->\fBcurrent\fR( [$number|$message|$message_id] )" 4
.IX Item "$obj->current( [$number|$message|$message_id] )"
Inherited, see \*(L"The messages\*(R" in Mail::Box
.ie n .IP "$obj\->\fBfind\fR($message_id)" 4
.el .IP "\f(CW$obj\fR\->\fBfind\fR($message_id)" 4
.IX Item "$obj->find($message_id)"
Inherited, see \*(L"The messages\*(R" in Mail::Box
.ie n .IP "$obj\->\fBfindFirstLabeled\fR( $label, [\s-1BOOLEAN\s0, [$msgs]] )" 4
.el .IP "\f(CW$obj\fR\->\fBfindFirstLabeled\fR( \f(CW$label\fR, [\s-1BOOLEAN\s0, [$msgs]] )" 4
.IX Item "$obj->findFirstLabeled( $label, [BOOLEAN, [$msgs]] )"
Inherited, see \*(L"The messages\*(R" in Mail::Box
.ie n .IP "$obj\->\fBmessage\fR( $index, [$message] )" 4
.el .IP "\f(CW$obj\fR\->\fBmessage\fR( \f(CW$index\fR, [$message] )" 4
.IX Item "$obj->message( $index, [$message] )"
Inherited, see \*(L"The messages\*(R" in Mail::Box
.ie n .IP "$obj\->\fBmessageId\fR( $message_id, [$message] )" 4
.el .IP "\f(CW$obj\fR\->\fBmessageId\fR( \f(CW$message_id\fR, [$message] )" 4
.IX Item "$obj->messageId( $message_id, [$message] )"
Inherited, see \*(L"The messages\*(R" in Mail::Box
.ie n .IP "$obj\->\fBmessageIds\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBmessageIds\fR()" 4
.IX Item "$obj->messageIds()"
Inherited, see \*(L"The messages\*(R" in Mail::Box
.ie n .IP "$obj\->\fBmessages\fR( <'\s-1ALL\s0'|$range|'\s-1ACTIVE\s0'|'\s-1DELETED\s0'|$label| !$label|$filter> )" 4
.el .IP "\f(CW$obj\fR\->\fBmessages\fR( <'\s-1ALL\s0'|$range|'\s-1ACTIVE\s0'|'\s-1DELETED\s0'|$label| !$label|$filter> )" 4
.IX Item "$obj->messages( <'ALL'|$range|'ACTIVE'|'DELETED'|$label| !$label|$filter> )"
Inherited, see \*(L"The messages\*(R" in Mail::Box
.ie n .IP "$obj\->\fBnrMessages\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBnrMessages\fR(%options)" 4
.IX Item "$obj->nrMessages(%options)"
Inherited, see \*(L"The messages\*(R" in Mail::Box
.ie n .IP "$obj\->\fBscanForMessages\fR($message, $message_ids, $timespan, $window)" 4
.el .IP "\f(CW$obj\fR\->\fBscanForMessages\fR($message, \f(CW$message_ids\fR, \f(CW$timespan\fR, \f(CW$window\fR)" 4
.IX Item "$obj->scanForMessages($message, $message_ids, $timespan, $window)"
Inherited, see \*(L"The messages\*(R" in Mail::Box
.SS "Sub-folders"
.IX Subsection "Sub-folders"
Extends \*(L"Sub-folders\*(R" in Mail::Box::Net.
.ie n .IP "$obj\->\fBlistSubFolders\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBlistSubFolders\fR(%options)" 4
.IX Item "$obj->listSubFolders(%options)"
.PD 0
.IP "Mail::Box::POP3\->\fBlistSubFolders\fR(%options)" 4
.IX Item "Mail::Box::POP3->listSubFolders(%options)"
.PD
The standard \s-1POP3\s0 protocol does not support sub-folders, so an
empty list will be returned in any case.
.Sp
.Vb 5
\& \-Option    \-\-Defined in     \-\-Default
\&  check       Mail::Box        <false>
\&  folder      Mail::Box        <from calling object>
\&  folderdir   Mail::Box        <from folder>
\&  skip_empty  Mail::Box        <false>
.Ve
.RS 4
.IP "check => \s-1BOOLEAN\s0" 2
.IX Item "check => BOOLEAN"
.PD 0
.IP "folder => \s-1FOLDERNAME\s0" 2
.IX Item "folder => FOLDERNAME"
.IP "folderdir => \s-1DIRECTORY\s0" 2
.IX Item "folderdir => DIRECTORY"
.IP "skip_empty => \s-1BOOL\s0" 2
.IX Item "skip_empty => BOOL"
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBnameOfSubFolder\fR( $subname, [$parentname] )" 4
.el .IP "\f(CW$obj\fR\->\fBnameOfSubFolder\fR( \f(CW$subname\fR, [$parentname] )" 4
.IX Item "$obj->nameOfSubFolder( $subname, [$parentname] )"
.ie n .IP "Mail::Box::POP3\->\fBnameOfSubFolder\fR( $subname, [$parentname] )" 4
.el .IP "Mail::Box::POP3\->\fBnameOfSubFolder\fR( \f(CW$subname\fR, [$parentname] )" 4
.IX Item "Mail::Box::POP3->nameOfSubFolder( $subname, [$parentname] )"
.PD
Inherited, see \*(L"Sub-folders\*(R" in Mail::Box
.ie n .IP "$obj\->\fBopenRelatedFolder\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBopenRelatedFolder\fR(%options)" 4
.IX Item "$obj->openRelatedFolder(%options)"
Inherited, see \*(L"Sub-folders\*(R" in Mail::Box
.ie n .IP "$obj\->\fBopenSubFolder\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBopenSubFolder\fR(%options)" 4
.IX Item "$obj->openSubFolder(%options)"
It is not possible to open a sub-folder for a \s-1POP3\s0 folder, because that
is not supported by the official \s-1POP3\s0 protocol. In any case, \f(CW\*(C`undef\*(C'\fR
is returned to indicate a failure.
.ie n .IP "$obj\->\fBtopFolderWithMessages\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtopFolderWithMessages\fR()" 4
.IX Item "$obj->topFolderWithMessages()"
.PD 0
.IP "Mail::Box::POP3\->\fBtopFolderWithMessages\fR()" 4
.IX Item "Mail::Box::POP3->topFolderWithMessages()"
.PD
Inherited, see \*(L"Sub-folders\*(R" in Mail::Box
.SS "Internals"
.IX Subsection "Internals"
Extends \*(L"Internals\*(R" in Mail::Box::Net.
.ie n .IP "$obj\->\fBcoerce\fR($message, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBcoerce\fR($message, \f(CW%options\fR)" 4
.IX Item "$obj->coerce($message, %options)"
Inherited, see \*(L"Internals\*(R" in Mail::Box
.ie n .IP "$obj\->\fBcreate\fR($folder, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBcreate\fR($folder, \f(CW%options\fR)" 4
.IX Item "$obj->create($folder, %options)"
.PD 0
.ie n .IP "Mail::Box::POP3\->\fBcreate\fR($folder, %options)" 4
.el .IP "Mail::Box::POP3\->\fBcreate\fR($folder, \f(CW%options\fR)" 4
.IX Item "Mail::Box::POP3->create($folder, %options)"
.PD
It is not possible to create a new folder on a \s-1POP3\s0 server.  This method
will always return \f(CW\*(C`false\*(C'\fR.
.Sp
.Vb 2
\& \-Option   \-\-Defined in\-\-Default
\&  folderdir  Mail::Box   <not used>
.Ve
.RS 4
.IP "folderdir => \s-1DIRECTORY\s0" 2
.IX Item "folderdir => DIRECTORY"
.RE
.RS 4
.RE
.PD 0
.ie n .IP "$obj\->\fBdetermineBodyType\fR($message, $head)" 4
.el .IP "\f(CW$obj\fR\->\fBdetermineBodyType\fR($message, \f(CW$head\fR)" 4
.IX Item "$obj->determineBodyType($message, $head)"
.PD
Inherited, see \*(L"Internals\*(R" in Mail::Box
.ie n .IP "Mail::Box::POP3\->\fBfoundIn\fR( [$foldername], %options )" 4
.el .IP "Mail::Box::POP3\->\fBfoundIn\fR( [$foldername], \f(CW%options\fR )" 4
.IX Item "Mail::Box::POP3->foundIn( [$foldername], %options )"
Inherited, see \*(L"Internals\*(R" in Mail::Box
.ie n .IP "$obj\->\fBgetHead\fR($message)" 4
.el .IP "\f(CW$obj\fR\->\fBgetHead\fR($message)" 4
.IX Item "$obj->getHead($message)"
Read the header for the specified message from the remote server.
.ie n .IP "$obj\->\fBgetHeadAndBody\fR($message)" 4
.el .IP "\f(CW$obj\fR\->\fBgetHeadAndBody\fR($message)" 4
.IX Item "$obj->getHeadAndBody($message)"
Read all data for the specified message from the remote server.
.ie n .IP "$obj\->\fBlineSeparator\fR( [<STRING|'\s-1CR\s0'|'\s-1LF\s0'|'\s-1CRLF\s0'>] )" 4
.el .IP "\f(CW$obj\fR\->\fBlineSeparator\fR( [<STRING|'\s-1CR\s0'|'\s-1LF\s0'|'\s-1CRLF\s0'>] )" 4
.IX Item "$obj->lineSeparator( [<STRING|'CR'|'LF'|'CRLF'>] )"
Inherited, see \*(L"Internals\*(R" in Mail::Box
.ie n .IP "$obj\->\fBlocker\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlocker\fR()" 4
.IX Item "$obj->locker()"
Inherited, see \*(L"Internals\*(R" in Mail::Box
.ie n .IP "$obj\->\fBpopClient\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBpopClient\fR(%options)" 4
.IX Item "$obj->popClient(%options)"
Returns the pop client object.  This does not establish the connection.
.Sp
.Vb 2
\& \-Option \-\-Default
\&  use_ssl  <false>
.Ve
.RS 4
.IP "use_ssl => \s-1BOOLEAN\s0" 2
.IX Item "use_ssl => BOOLEAN"
.RE
.RS 4
.RE
.PD 0
.ie n .IP "$obj\->\fBread\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBread\fR(%options)" 4
.IX Item "$obj->read(%options)"
.PD
Inherited, see \*(L"Internals\*(R" in Mail::Box
.ie n .IP "$obj\->\fBreadMessages\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBreadMessages\fR(%options)" 4
.IX Item "$obj->readMessages(%options)"
Inherited, see \*(L"Internals\*(R" in Mail::Box
.ie n .IP "$obj\->\fBstoreMessage\fR($message)" 4
.el .IP "\f(CW$obj\fR\->\fBstoreMessage\fR($message)" 4
.IX Item "$obj->storeMessage($message)"
Inherited, see \*(L"Internals\*(R" in Mail::Box
.ie n .IP "$obj\->\fBtoBeThreaded\fR($messages)" 4
.el .IP "\f(CW$obj\fR\->\fBtoBeThreaded\fR($messages)" 4
.IX Item "$obj->toBeThreaded($messages)"
Inherited, see \*(L"Internals\*(R" in Mail::Box
.ie n .IP "$obj\->\fBtoBeUnthreaded\fR($messages)" 4
.el .IP "\f(CW$obj\fR\->\fBtoBeUnthreaded\fR($messages)" 4
.IX Item "$obj->toBeUnthreaded($messages)"
Inherited, see \*(L"Internals\*(R" in Mail::Box
.ie n .IP "$obj\->\fBupdateMessages\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBupdateMessages\fR(%options)" 4
.IX Item "$obj->updateMessages(%options)"
Inherited, see \*(L"Internals\*(R" in Mail::Box
.ie n .IP "$obj\->\fBwrite\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBwrite\fR(%options)" 4
.IX Item "$obj->write(%options)"
Inherited, see \*(L"Internals\*(R" in Mail::Box
.ie n .IP "$obj\->\fBwriteMessages\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBwriteMessages\fR(%options)" 4
.IX Item "$obj->writeMessages(%options)"
.Vb 2
\& \-Option  \-\-Defined in\-\-Default
\&  messages  Mail::Box   <required>
.Ve
.RS 4
.IP "messages => \s-1ARRAY\s0" 2
.IX Item "messages => ARRAY"
.RE
.RS 4
.RE
.SS "Other methods"
.IX Subsection "Other methods"
Extends \*(L"Other methods\*(R" in Mail::Box::Net.
.ie n .IP "$obj\->\fBtimespan2seconds\fR($time)" 4
.el .IP "\f(CW$obj\fR\->\fBtimespan2seconds\fR($time)" 4
.IX Item "$obj->timespan2seconds($time)"
.PD 0
.IP "Mail::Box::POP3\->\fBtimespan2seconds\fR($time)" 4
.IX Item "Mail::Box::POP3->timespan2seconds($time)"
.PD
Inherited, see \*(L"Other methods\*(R" in Mail::Box
.SS "Error handling"
.IX Subsection "Error handling"
Extends \*(L"Error handling\*(R" in Mail::Box::Net.
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR($object)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR($object)" 4
.IX Item "$obj->addReport($object)"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "$obj->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD 0
.ie n .IP "Mail::Box::POP3\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "Mail::Box::POP3\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "Mail::Box::POP3->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR( [$level, [$strings]] )" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "$obj->log( [$level, [$strings]] )"
.PD 0
.IP "Mail::Box::POP3\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "Mail::Box::POP3->log( [$level, [$strings]] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR($level)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR($level)" 4
.IX Item "$obj->logPriority($level)"
.PD 0
.IP "Mail::Box::POP3\->\fBlogPriority\fR($level)" 4
.IX Item "Mail::Box::POP3->logPriority($level)"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR( [$level] )" 4
.IX Item "$obj->report( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR( [$level] )" 4
.IX Item "$obj->reportAll( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR( [$level] )" 4
.IX Item "$obj->trace( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
Extends \*(L"Cleanup\*(R" in Mail::Box::Net.
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
Inherited, see \*(L"Cleanup\*(R" in Mail::Box
.SH "DETAILS"
.IX Header "DETAILS"
Extends \*(L"\s-1DETAILS\s0\*(R" in Mail::Box::Net.
.SS "Different kinds of folders"
.IX Subsection "Different kinds of folders"
Extends \*(L"Different kinds of folders\*(R" in Mail::Box::Net.
.SS "Available folder types"
.IX Subsection "Available folder types"
Extends \*(L"Available folder types\*(R" in Mail::Box::Net.
.SS "Folder class implementation"
.IX Subsection "Folder class implementation"
Extends \*(L"Folder class implementation\*(R" in Mail::Box::Net.
.SS "How \s-1POP3\s0 folders work"
.IX Subsection "How POP3 folders work"
Rfc1939 defines how \s-1POP3\s0 works.  \s-1POP3\s0 is a really simple protocol to
receive messages from a server to a user's client.  \s-1POP3\s0 is also
really limited: it can only be used to fetch messages, but has not
many ways to limit the amount of network traffic, like the \s-1IMAP4\s0
protocol has.
.PP
One \s-1POP3\s0 account represents only one folder: there is no way of
sub-folders in \s-1POP3\s0.  \s-1POP3\s0 doesn't support writing (except for
some message status flags).
.SS "This implementation"
.IX Subsection "This implementation"
The protocol specifics are implemented in Mail::Transport::POP3,
written by Liz Mattijsen.  That module does not use any of the
other \s-1POP3\s0 modules available on \s-1CPAN\s0 for the reason that MailBox
tries to be smarter: it is capable of re-establishing broken \s-1POP3\s0
connection when the server supports UIDs.
.PP
The implementation has shown to work with many different \s-1POP\s0 servers.
In the test directory of the distribution, you will find a small
server implementation, which is used to test the client.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Cannot create \s-1POP3\s0 client for $name." 4
.el .IP "Error: Cannot create \s-1POP3\s0 client for \f(CW$name\fR." 4
.IX Item "Error: Cannot create POP3 client for $name."
The connection to the \s-1POP3\s0 server cannot be established.  You may see
more, related, error messages about the failure.
.ie n .IP "Error: Cannot find head back for $uidl on \s-1POP3\s0 server $name." 4
.el .IP "Error: Cannot find head back for \f(CW$uidl\fR on \s-1POP3\s0 server \f(CW$name\fR." 4
.IX Item "Error: Cannot find head back for $uidl on POP3 server $name."
The server told to have this message, but when asked for its headers, no
single line was returned.  Did the message get destroyed?
.ie n .IP "Error: Cannot read body for $uidl on \s-1POP3\s0 server $name." 4
.el .IP "Error: Cannot read body for \f(CW$uidl\fR on \s-1POP3\s0 server \f(CW$name\fR." 4
.IX Item "Error: Cannot read body for $uidl on POP3 server $name."
The message's headers are retrieved from the server, but the body seems
to be lost.  Did the message get destroyed between reading the header
and reading the body?
.ie n .IP "Warning: Changes not written to read-only folder $self." 4
.el .IP "Warning: Changes not written to read-only folder \f(CW$self\fR." 4
.IX Item "Warning: Changes not written to read-only folder $self."
You have opened the folder read-only \-\-which is the default set
by new(access)\-\-, made modifications, and now want to close it.
Set close(force) if you want to overrule the access mode, or close
the folder with close(write) set to \f(CW\*(C`NEVER\*(C'\fR.
.IP "Error: Copying failed for one message." 4
.IX Item "Error: Copying failed for one message."
For some reason, for instance disc full, removed by external process, or
read-protection, it is impossible to copy one of the messages.  Copying will
proceed for the other messages.
.ie n .IP "Error: Destination folder $name is not writable." 4
.el .IP "Error: Destination folder \f(CW$name\fR is not writable." 4
.IX Item "Error: Destination folder $name is not writable."
The folder where the messages are copied to is not opened with write
access (see new(access)).  This has no relation with write permission
to the folder which is controled by your operating system.
.ie n .IP "Warning: Different messages with id $msgid" 4
.el .IP "Warning: Different messages with id \f(CW$msgid\fR" 4
.IX Item "Warning: Different messages with id $msgid"
The message id is discovered more than once within the same folder, but the
content of the message seems to be different.  This should not be possible:
each message must be unique.
.ie n .IP "Error: Folder $name is opened read-only" 4
.el .IP "Error: Folder \f(CW$name\fR is opened read-only" 4
.IX Item "Error: Folder $name is opened read-only"
You can not write to this folder unless you have opened the folder to
write or append with new(access), or the \f(CW\*(C`force\*(C'\fR option is set true.
.IP "Error: Invalid timespan '$timespan' specified." 4
.IX Item "Error: Invalid timespan '$timespan' specified."
The string does not follow the strict rules of the time span syntax which
is permitted as parameter.
.ie n .IP "Warning: Message $uidl on \s-1POP3\s0 server $name disappeared." 4
.el .IP "Warning: Message \f(CW$uidl\fR on \s-1POP3\s0 server \f(CW$name\fR disappeared." 4
.IX Item "Warning: Message $uidl on POP3 server $name disappeared."
The server indicated the existence of this message before, however it
has no information about the message anymore.
.IP "Warning: Message-id '$msgid' does not contain a domain." 4
.IX Item "Warning: Message-id '$msgid' does not contain a domain."
According to the RFCs, message-ids need to contain a unique random part,
then an \f(CW\*(C`@\*(C'\fR, and then a domain name.  This is made to avoid the creation
of two messages with the same id.  The warning emerges when the \f(CW\*(C`@\*(C'\fR is
missing from the string.
.IP "Warning: \s-1POP3\s0 folders cannot be deleted." 4
.IX Item "Warning: POP3 folders cannot be deleted."
Each user has only one \s-1POP3\s0 folder on a server.  This folder is created and
deleted by the server's administrator only.
.ie n .IP "Error: Package $package does not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR does not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package does not implement $method."
Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.
.ie n .IP "Error: Unable to create subfolder $name of $folder." 4
.el .IP "Error: Unable to create subfolder \f(CW$name\fR of \f(CW$folder\fR." 4
.IX Item "Error: Unable to create subfolder $name of $folder."
The copy includes the subfolders, but for some reason it was not possible
to copy one of these.  Copying will proceed for all other sub-folders.
.ie n .IP "Error: Update of $nr messages ignored for \s-1POP3\s0 folder $name." 4
.el .IP "Error: Update of \f(CW$nr\fR messages ignored for \s-1POP3\s0 folder \f(CW$name\fR." 4
.IX Item "Error: Update of $nr messages ignored for POP3 folder $name."
The standard \s-1POP3\s0 implementation does not support writing from client back
to the server.  Therefore, modifications may be lost.
.ie n .IP "Error: Writing folder $name failed" 4
.el .IP "Error: Writing folder \f(CW$name\fR failed" 4
.IX Item "Error: Writing folder $name failed"
For some reason (you probably got more error messages about this problem)
it is impossible to write the folder, although you should because there
were changes made.
.IP "Error: You cannot write a message to a pop server (yet)" 4
.IX Item "Error: You cannot write a message to a pop server (yet)"
Some extensions to the \s-1POP3\s0 protocol do permit writing messages to the server,
but the standard protocol only implements retreival.  Feel invited to extend our
implementation with writing.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.117,
built on August 24, 2014. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2014 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
