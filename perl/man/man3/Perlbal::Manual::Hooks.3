.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Perlbal::Manual::Hooks 3"
.TH Perlbal::Manual::Hooks 3 "2012-02-01" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Perlbal::Manual::Hooks \- How Perlbal's hooks work
.SS "\s-1VERSION\s0"
.IX Subsection "VERSION"
Perlbal 1.78.
.SS "\s-1DESCRIPTION\s0"
.IX Subsection "DESCRIPTION"
Basically, a hook is a bit of code that is run at certain stages in the requests that Perlbal handles.There are all kinds of hooks available and they all do different things. Some are only applicable to some of the roles and others are applicable only to certain classes. Each hook is described in detail below, but first a description of the basics of a hook.
.PP
In general, you define a hook by calling the \f(CW\*(C`register_hook\*(C'\fR method on a Perlbal::Service object. You specify what hook you are interested in and provide a reference to a subroutine that will be called with the parameters particular to that hook.
.PP
There are three types of hooks:
.SS "Global hooks"
.IX Subsection "Global hooks"
These are hooks that are defined on a global scale. They are set like so:
.PP
.Vb 1
\&    Perlbal::register_global_hook(\*(Aqfoo\*(Aq, sub { return 0; });
.Ve
.PP
That would define a global hook named foo that would return 0 when it's called. (Return codes from hooks will be explained below)
.PP
Global hooks are useful to define management commands. See \f(CW\*(C`manage_command\*(C'\fR under Perlbal::Manual::Plugins for more information.
.SS "Service handler hooks"
.IX Subsection "Service handler hooks"
A handler hook is attached to a particular service. These hooks are called one at a time until one hook returns 1. At that point, no further hooks are called. For example:
.PP
.Vb 4
\&    $service\->register_hook(\*(Aqbar\*(Aq, sub {
\&        # do something
\&        return 1;
\&    });
.Ve
.PP
When this hook runs, it would return 1, signalling to Perlbal that it had done what it needed to do and that Perlbal shouldn't call any further hooks. You can use this type of hook to create sets of plugins that all handle different types of requests, and when one hook had handled a request it wouldn't continue telling other hooks about the request.
.PP
\fIbackend_client_assigned\fR
.IX Subsection "backend_client_assigned"
.PP
Happens right after a backend is assigned to a client, but before we've talked to the backend and asked it to do something. If you return a true value, the process is stopped and you will manually have to send the client's request to the backend, etc.
.PP
Called in Perlbal::BackendHTTP.
.PP
Available in role \f(CW\*(C`reverse_proxy\*(C'\fR.
.PP
\fIbackend_readable_verify\fR
.IX Subsection "backend_readable_verify"
.PP
When the backend is about to start sending the response.
.PP
Called in Perlbal::BackendHTTP.
.PP
Available in all roles.
.PP
\fIbackend_response_received\fR
.IX Subsection "backend_response_received"
.PP
Called as soon as response headers are read from the backend. If you return a true value, will stop all handling at that point.
.PP
Called in Perlbal::BackendHTTP.
.PP
Available in all roles.
.PP
\fIbackend_write_verify\fR
.IX Subsection "backend_write_verify"
.PP
When the backend is ready to receive the request.
.PP
Called in Perlbal::BackendHTTP.
.PP
Available in all roles.
.PP
\fIconcat_get_poststat_file_missing\fR
.IX Subsection "concat_get_poststat_file_missing"
.PP
Called when a missing file was requested in a request for multiple files concatenated, right before sending the 404 response. Return a true value to overtake the connection.
.PP
Called in Perlbal::ClientHTTPBase.
.PP
Available in role \f(CW\*(C`web_server\*(C'\fR.
.PP
See also \f(CW\*(C`concat_get_poststat_pre_send\*(C'\fR, \f(CW\*(C`static_get_poststat_file_missing\*(C'\fR and \f(CW\*(C`static_get_poststat_pre_send\*(C'\fR.
.PP
\fIconcat_get_poststat_pre_send\fR
.IX Subsection "concat_get_poststat_pre_send"
.PP
Called when the resulting file of a request for multiple files concatenated is about to be sent, right before the 200 response code is added as a header. Return a true value to overtake the connection.
.PP
Called in Perlbal::ClientHTTPBase.
.PP
Available in role \f(CW\*(C`web_server\*(C'\fR.
.PP
See also \f(CW\*(C`concat_get_poststat_file_missing\*(C'\fR, \f(CW\*(C`static_get_poststat_file_missing\*(C'\fR and \f(CW\*(C`static_get_poststat_pre_send\*(C'\fR.
.PP
\fIhandle_put\fR
.IX Subsection "handle_put"
.PP
Called when handling a \s-1PUT\s0 request.
.PP
Called in Perlbal::ClientHTTP.
.PP
Available in role \f(CW\*(C`web_server\*(C'\fR.
.PP
\fImake_high_priority\fR
.IX Subsection "make_high_priority"
.PP
Called when a request is received and right before we're about to determine if this request is high priority or not. Return a true value to make the request high priority; false to leave it alone. Note that this is only called when the request isn't already high priority due to cookie priority scheduling, which is done inside Perlbal::Service.
.PP
Called in Perlbal::ClientProxy.
.PP
Available in all roles.
.PP
\fImake_low_priority\fR
.IX Subsection "make_low_priority"
.PP
Called when a request is received and right before we're about to determine if this request is high priority or not. Return a true value to make the request low priority; false to leave it alone.
.PP
Called in Perlbal::ClientProxy.
.PP
Available in all roles.
.PP
\fImodify_response_headers\fR
.IX Subsection "modify_response_headers"
.PP
Called when we've set all the headers, and are about to serve a file. You can change or add response headers at this point, or cancel the process by returning a true value. You will have to send the response to the client yourself if you do this.
.PP
Called in Perlbal::ClientHTTPBase.
.PP
Available in role \f(CW\*(C`web_server\*(C'\fR.
.PP
\fIproxy_read_request\fR
.IX Subsection "proxy_read_request"
.PP
Called on the request before we send the request to a backend.
.PP
Called in Perlbal::ClientProxy.
.PP
Available in all roles.
.PP
\fIput_writeout\fR
.IX Subsection "put_writeout"
.PP
Called when there is some put data to write out.
.PP
Called in Perlbal::ClientHTTP.
.PP
Available in role \f(CW\*(C`web_server\*(C'\fR.
.PP
\fIreproxy_fh_finished\fR
.IX Subsection "reproxy_fh_finished"
.PP
Called when a reproxy file has completed and is about to close the file handle. You can cancel the process by returning a true value (in which case you will have to close the reproxy_fh yourself).
.PP
Called in Perlbal::ClientHTTPBase.
.PP
Available in role \f(CW\*(C`web_server\*(C'\fR.
.PP
\fIreproxy_response_received\fR
.IX Subsection "reproxy_response_received"
.PP
Called as soon as response headers are read from a reproxied backend. If you return a true value, will stop all handling at that point.
.PP
Called in Perlbal::ClientProxy.
.PP
Available in role \f(CW\*(C`reverse_proxy\*(C'\fR.
.PP
\fIreturn_to_base\fR
.IX Subsection "return_to_base"
.PP
Called when a request has been finished, and control of the Client* object is about to be transferred back to ownership by a service selector. Return a true value if the perlbal core action in this situation should be bypassed.
.PP
Called in Perlbal::ClientHTTPBase.
.PP
Available in all roles.
.PP
\fIstart_file_reproxy\fR
.IX Subsection "start_file_reproxy"
.PP
Called when we've been told to reproxy a file. If you return a true value, Perlbal will not perform any operations on the file and will simply return. You can also change the file in the scalar ref passed as the second parameter.
.PP
Called in Perlbal::ClientProxy; receives \f(CW$filename_ref\fR, a reference to the filename.
.PP
Available in role \f(CW\*(C`reverse_proxy\*(C'\fR.
.PP
\fIstart_http_request\fR
.IX Subsection "start_http_request"
.PP
A generic hook that works for both webserver and proxy modes, run after either the specific \f(CW\*(C`start_proxy_request\*(C'\fR or \f(CW\*(C`start_web_request\*(C'\fR hooks below. Like those, you return true from this hook to takeover the connection.
.PP
Called in Perlbal::ClientProxy and Perlbal::ClientHTTP.
.PP
Available in roles \f(CW\*(C`reverse_proxy\*(C'\fR and \f(CW\*(C`web_server\*(C'\fR.
.PP
\fIstart_proxy_request\fR
.IX Subsection "start_proxy_request"
.PP
Called as soon as we've read in headers from a user but right before we've requested a backend connection. If a true value is returned, Perlbal will not request a backend.
.PP
Called in Perlbal::ClientProxy.
.PP
Available in role \f(CW\*(C`reverse_proxy\*(C'\fR.
.PP
\fIstart_send_file\fR
.IX Subsection "start_send_file"
.PP
Called when we've opened a file and are about to start sending it to the user using sendfile. Return a true value to cancel the default sending.
.PP
Called in Perlbal::ClientHTTPBase.
.PP
Available in role \f(CW\*(C`web_server\*(C'\fR.
.PP
\fIstart_serve_request\fR
.IX Subsection "start_serve_request"
.PP
Called when we're about to serve a local file, before we've done any work. You can change the file served by modifying \f(CW$uri_ref\fR, or cancel the process by returning a true value.
.PP
Called in Perlbal::ClientHTTPBase; receives \f(CW$uri_ref\fR, a reference to the \s-1URI\s0.
.PP
Available in role \f(CW\*(C`web_server\*(C'\fR.
.PP
\fIstart_web_request\fR
.IX Subsection "start_web_request"
.PP
When a service has gotten headers and is about to serve it. Return a true value to cancel the default handling of web requests.
.PP
Called in Perlbal::ClientHTTP.
.PP
Available in role \f(CW\*(C`web_server\*(C'\fR.
.PP
\fIstatic_get_poststat_file_missing\fR
.IX Subsection "static_get_poststat_file_missing"
.PP
Called when a missing static single file was requested, right before sending the 404 response. Return a true value to overtake the connection.
.PP
Called in Perlbal::ClientHTTPBase.
.PP
Available in role \f(CW\*(C`web_server\*(C'\fR.
.PP
See also \f(CW\*(C`concat_get_poststat_file_missing\*(C'\fR, \f(CW\*(C`concat_get_poststat_pre_send\*(C'\fR and \f(CW\*(C`static_get_poststat_pre_send\*(C'\fR.
.PP
\fIstatic_get_poststat_pre_send\fR
.IX Subsection "static_get_poststat_pre_send"
.PP
Called when a static single file is about to be sent, right before the 200 response code is added as a header. Return a true value to overtake the connection.
.PP
Called in Perlbal::ClientHTTPBase.
.PP
Available in role \f(CW\*(C`web_server\*(C'\fR.
.PP
See also \f(CW\*(C`concat_get_poststat_file_missing\*(C'\fR, \f(CW\*(C`concat_get_poststat_pre_send\*(C'\fR and \f(CW\*(C`static_get_poststat_file_missing\*(C'\fR.
.SS "Service general hooks"
.IX Subsection "Service general hooks"
These hooks are defined the same way as above, but general hooks are all run. The return code is ignored. This can be useful for putting in code that records statistics about an action or something to that effect.
.PP
\fIend_proxy_request\fR
.IX Subsection "end_proxy_request"
.PP
This hook is called when the Perlbal::ClientProxy object is being closed.
.PP
Available in role \f(CW\*(C`reverse_proxy\*(C'\fR.
.SS "\s-1SEE\s0 \s-1ALSO\s0"
.IX Subsection "SEE ALSO"
Perlbal::Manual::Internals, Perlbal::Manual::Plugins.
