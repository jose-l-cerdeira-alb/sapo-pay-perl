.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Box::Maildir::Message 3"
.TH Mail::Box::Maildir::Message 3 "2014-08-24" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Box::Maildir::Message \- one message in a Maildir folder
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 5
\& Mail::Box::Maildir::Message
\&   is a Mail::Box::Dir::Message
\&   is a Mail::Box::Message
\&   is a Mail::Message
\&   is a Mail::Reporter
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& my $folder = new Mail::Box::Maildir ...
\& my $message = $folder\->message(10);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A \f(CW\*(C`Mail::Box::Maildir::Message\*(C'\fR represents one message in an
Mail::Box::Maildir folder. Each message is stored in a separate file.
.PP
Extends \*(L"\s-1DESCRIPTION\s0\*(R" in Mail::Box::Dir::Message.
.SH "METHODS"
.IX Header "METHODS"
Extends \*(L"\s-1METHODS\s0\*(R" in Mail::Box::Dir::Message.
.SS "Constructors"
.IX Subsection "Constructors"
Extends \*(L"Constructors\*(R" in Mail::Box::Dir::Message.
.ie n .IP "$obj\->\fBclone\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBclone\fR(%options)" 4
.IX Item "$obj->clone(%options)"
Inherited, see \*(L"Constructors\*(R" in Mail::Message
.IP "Mail::Box::Maildir::Message\->\fBnew\fR(%options)" 4
.IX Item "Mail::Box::Maildir::Message->new(%options)"
Inherited, see \*(L"\s-1METHODS\s0\*(R" in Mail::Box::Dir::Message
.SS "Constructing a message"
.IX Subsection "Constructing a message"
Extends \*(L"Constructing a message\*(R" in Mail::Box::Dir::Message.
.ie n .IP "$obj\->\fBbounce\fR( [<$rg_object|%options>] )" 4
.el .IP "\f(CW$obj\fR\->\fBbounce\fR( [<$rg_object|%options>] )" 4
.IX Item "$obj->bounce( [<$rg_object|%options>] )"
Inherited, see \*(L"Constructing a message\*(R" in Mail::Message::Construct::Bounce
.ie n .IP "Mail::Box::Maildir::Message\->\fBbuild\fR( [$message|$part|$body], $content )" 4
.el .IP "Mail::Box::Maildir::Message\->\fBbuild\fR( [$message|$part|$body], \f(CW$content\fR )" 4
.IX Item "Mail::Box::Maildir::Message->build( [$message|$part|$body], $content )"
Inherited, see \*(L"Constructing a message\*(R" in Mail::Message::Construct::Build
.ie n .IP "Mail::Box::Maildir::Message\->\fBbuildFromBody\fR($body, [$head], $headers)" 4
.el .IP "Mail::Box::Maildir::Message\->\fBbuildFromBody\fR($body, [$head], \f(CW$headers\fR)" 4
.IX Item "Mail::Box::Maildir::Message->buildFromBody($body, [$head], $headers)"
Inherited, see \*(L"Constructing a message\*(R" in Mail::Message::Construct::Build
.ie n .IP "$obj\->\fBforward\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBforward\fR(%options)" 4
.IX Item "$obj->forward(%options)"
Inherited, see \*(L"Constructing a message\*(R" in Mail::Message::Construct::Forward
.ie n .IP "$obj\->\fBforwardAttach\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBforwardAttach\fR(%options)" 4
.IX Item "$obj->forwardAttach(%options)"
Inherited, see \*(L"Constructing a message\*(R" in Mail::Message::Construct::Forward
.ie n .IP "$obj\->\fBforwardEncapsulate\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBforwardEncapsulate\fR(%options)" 4
.IX Item "$obj->forwardEncapsulate(%options)"
Inherited, see \*(L"Constructing a message\*(R" in Mail::Message::Construct::Forward
.ie n .IP "$obj\->\fBforwardInline\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBforwardInline\fR(%options)" 4
.IX Item "$obj->forwardInline(%options)"
Inherited, see \*(L"Constructing a message\*(R" in Mail::Message::Construct::Forward
.ie n .IP "$obj\->\fBforwardNo\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBforwardNo\fR(%options)" 4
.IX Item "$obj->forwardNo(%options)"
Inherited, see \*(L"Constructing a message\*(R" in Mail::Message::Construct::Forward
.ie n .IP "$obj\->\fBforwardPostlude\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBforwardPostlude\fR()" 4
.IX Item "$obj->forwardPostlude()"
Inherited, see \*(L"Constructing a message\*(R" in Mail::Message::Construct::Forward
.ie n .IP "$obj\->\fBforwardPrelude\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBforwardPrelude\fR()" 4
.IX Item "$obj->forwardPrelude()"
Inherited, see \*(L"Constructing a message\*(R" in Mail::Message::Construct::Forward
.ie n .IP "$obj\->\fBforwardSubject\fR(\s-1STRING\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBforwardSubject\fR(\s-1STRING\s0)" 4
.IX Item "$obj->forwardSubject(STRING)"
Inherited, see \*(L"Constructing a message\*(R" in Mail::Message::Construct::Forward
.ie n .IP "Mail::Box::Maildir::Message\->\fBread\fR($fh|STRING|SCALAR|ARRAY, %options)" 4
.el .IP "Mail::Box::Maildir::Message\->\fBread\fR($fh|STRING|SCALAR|ARRAY, \f(CW%options\fR)" 4
.IX Item "Mail::Box::Maildir::Message->read($fh|STRING|SCALAR|ARRAY, %options)"
Inherited, see \*(L"Constructing a message\*(R" in Mail::Message::Construct::Read
.ie n .IP "$obj\->\fBrebuild\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBrebuild\fR(%options)" 4
.IX Item "$obj->rebuild(%options)"
Inherited, see \*(L"Constructing a message\*(R" in Mail::Message::Construct::Rebuild
.ie n .IP "$obj\->\fBreply\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBreply\fR(%options)" 4
.IX Item "$obj->reply(%options)"
Inherited, see \*(L"Constructing a message\*(R" in Mail::Message::Construct::Reply
.ie n .IP "$obj\->\fBreplyPrelude\fR( [STRING|$field|$address|ARRAY\-$of\-$things] )" 4
.el .IP "\f(CW$obj\fR\->\fBreplyPrelude\fR( [STRING|$field|$address|ARRAY\-$of\-$things] )" 4
.IX Item "$obj->replyPrelude( [STRING|$field|$address|ARRAY-$of-$things] )"
Inherited, see \*(L"Constructing a message\*(R" in Mail::Message::Construct::Reply
.ie n .IP "$obj\->\fBreplySubject\fR(\s-1STRING\s0)" 4
.el .IP "\f(CW$obj\fR\->\fBreplySubject\fR(\s-1STRING\s0)" 4
.IX Item "$obj->replySubject(STRING)"
.PD 0
.IP "Mail::Box::Maildir::Message\->\fBreplySubject\fR(\s-1STRING\s0)" 4
.IX Item "Mail::Box::Maildir::Message->replySubject(STRING)"
.PD
Inherited, see \*(L"Constructing a message\*(R" in Mail::Message::Construct::Reply
.SS "The message"
.IX Subsection "The message"
Extends \*(L"The message\*(R" in Mail::Box::Dir::Message.
.ie n .IP "$obj\->\fBcontainer\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBcontainer\fR()" 4
.IX Item "$obj->container()"
Inherited, see \*(L"The message\*(R" in Mail::Message
.ie n .IP "$obj\->\fBcopyTo\fR($folder, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBcopyTo\fR($folder, \f(CW%options\fR)" 4
.IX Item "$obj->copyTo($folder, %options)"
Inherited, see \*(L"The message\*(R" in Mail::Box::Message
.ie n .IP "$obj\->\fBfilename\fR( [$filename] )" 4
.el .IP "\f(CW$obj\fR\->\fBfilename\fR( [$filename] )" 4
.IX Item "$obj->filename( [$filename] )"
Returns the current filename for this message.  If the \f(CW$filename\fR argument
is specified, a new filename will be set.  For maildir messages this
means that modifications are immediately performed: there will be
a rename (move) from the old name to the new name.  Labels may change
within in the message object as well.
.ie n .IP "$obj\->\fBfolder\fR( [$folder] )" 4
.el .IP "\f(CW$obj\fR\->\fBfolder\fR( [$folder] )" 4
.IX Item "$obj->folder( [$folder] )"
Inherited, see \*(L"The message\*(R" in Mail::Box::Message
.ie n .IP "$obj\->\fBisDummy\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisDummy\fR()" 4
.IX Item "$obj->isDummy()"
Inherited, see \*(L"The message\*(R" in Mail::Message
.ie n .IP "$obj\->\fBisPart\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisPart\fR()" 4
.IX Item "$obj->isPart()"
Inherited, see \*(L"The message\*(R" in Mail::Message
.ie n .IP "$obj\->\fBmessageId\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBmessageId\fR()" 4
.IX Item "$obj->messageId()"
Inherited, see \*(L"The message\*(R" in Mail::Message
.ie n .IP "$obj\->\fBmoveTo\fR($folder, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBmoveTo\fR($folder, \f(CW%options\fR)" 4
.IX Item "$obj->moveTo($folder, %options)"
Inherited, see \*(L"The message\*(R" in Mail::Box::Message
.ie n .IP "$obj\->\fBpartNumber\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBpartNumber\fR()" 4
.IX Item "$obj->partNumber()"
Inherited, see \*(L"The message\*(R" in Mail::Message
.ie n .IP "$obj\->\fBprint\fR( [$fh] )" 4
.el .IP "\f(CW$obj\fR\->\fBprint\fR( [$fh] )" 4
.IX Item "$obj->print( [$fh] )"
Inherited, see \*(L"The message\*(R" in Mail::Message
.ie n .IP "$obj\->\fBsend\fR( [$mailer], %options )" 4
.el .IP "\f(CW$obj\fR\->\fBsend\fR( [$mailer], \f(CW%options\fR )" 4
.IX Item "$obj->send( [$mailer], %options )"
Inherited, see \*(L"The message\*(R" in Mail::Message
.ie n .IP "$obj\->\fBseqnr\fR( [$integer] )" 4
.el .IP "\f(CW$obj\fR\->\fBseqnr\fR( [$integer] )" 4
.IX Item "$obj->seqnr( [$integer] )"
Inherited, see \*(L"The message\*(R" in Mail::Box::Message
.ie n .IP "$obj\->\fBsize\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBsize\fR()" 4
.IX Item "$obj->size()"
Inherited, see \*(L"The message\*(R" in Mail::Message
.ie n .IP "$obj\->\fBtoplevel\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtoplevel\fR()" 4
.IX Item "$obj->toplevel()"
Inherited, see \*(L"The message\*(R" in Mail::Message
.ie n .IP "$obj\->\fBwrite\fR( [$fh] )" 4
.el .IP "\f(CW$obj\fR\->\fBwrite\fR( [$fh] )" 4
.IX Item "$obj->write( [$fh] )"
Inherited, see \*(L"The message\*(R" in Mail::Message
.SS "The header"
.IX Subsection "The header"
Extends \*(L"The header\*(R" in Mail::Box::Dir::Message.
.ie n .IP "$obj\->\fBbcc\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBbcc\fR()" 4
.IX Item "$obj->bcc()"
Inherited, see \*(L"The header\*(R" in Mail::Message
.ie n .IP "$obj\->\fBcc\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBcc\fR()" 4
.IX Item "$obj->cc()"
Inherited, see \*(L"The header\*(R" in Mail::Message
.ie n .IP "$obj\->\fBdate\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdate\fR()" 4
.IX Item "$obj->date()"
Inherited, see \*(L"The header\*(R" in Mail::Message
.ie n .IP "$obj\->\fBdestinations\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdestinations\fR()" 4
.IX Item "$obj->destinations()"
Inherited, see \*(L"The header\*(R" in Mail::Message
.ie n .IP "$obj\->\fBfrom\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfrom\fR()" 4
.IX Item "$obj->from()"
Inherited, see \*(L"The header\*(R" in Mail::Message
.ie n .IP "$obj\->\fBget\fR($fieldname)" 4
.el .IP "\f(CW$obj\fR\->\fBget\fR($fieldname)" 4
.IX Item "$obj->get($fieldname)"
Inherited, see \*(L"The header\*(R" in Mail::Message
.ie n .IP "$obj\->\fBguessTimestamp\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBguessTimestamp\fR()" 4
.IX Item "$obj->guessTimestamp()"
The filename of a \f(CW\*(C`Mail::Box::Maildir::Message\*(C'\fR contains a timestamp.  This
is a wild guess about the actual time of sending of the message: it is the
time of receipt which may be seconds to hours off.  But is still a good
guess...  When the message header is not parsed, then this date is used.
.ie n .IP "$obj\->\fBhead\fR( [$head] )" 4
.el .IP "\f(CW$obj\fR\->\fBhead\fR( [$head] )" 4
.IX Item "$obj->head( [$head] )"
Inherited, see \*(L"The header\*(R" in Mail::Message
.ie n .IP "$obj\->\fBnrLines\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnrLines\fR()" 4
.IX Item "$obj->nrLines()"
Inherited, see \*(L"The header\*(R" in Mail::Message
.ie n .IP "$obj\->\fBsender\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBsender\fR()" 4
.IX Item "$obj->sender()"
Inherited, see \*(L"The header\*(R" in Mail::Message
.ie n .IP "$obj\->\fBstudy\fR($fieldname)" 4
.el .IP "\f(CW$obj\fR\->\fBstudy\fR($fieldname)" 4
.IX Item "$obj->study($fieldname)"
Inherited, see \*(L"The header\*(R" in Mail::Message
.ie n .IP "$obj\->\fBsubject\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBsubject\fR()" 4
.IX Item "$obj->subject()"
Inherited, see \*(L"The header\*(R" in Mail::Message
.ie n .IP "$obj\->\fBtimestamp\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtimestamp\fR()" 4
.IX Item "$obj->timestamp()"
Inherited, see \*(L"The header\*(R" in Mail::Message
.ie n .IP "$obj\->\fBto\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBto\fR()" 4
.IX Item "$obj->to()"
Inherited, see \*(L"The header\*(R" in Mail::Message
.SS "The body"
.IX Subsection "The body"
Extends \*(L"The body\*(R" in Mail::Box::Dir::Message.
.ie n .IP "$obj\->\fBbody\fR( [$body] )" 4
.el .IP "\f(CW$obj\fR\->\fBbody\fR( [$body] )" 4
.IX Item "$obj->body( [$body] )"
Inherited, see \*(L"The body\*(R" in Mail::Message
.ie n .IP "$obj\->\fBcontentType\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBcontentType\fR()" 4
.IX Item "$obj->contentType()"
Inherited, see \*(L"The body\*(R" in Mail::Message
.ie n .IP "$obj\->\fBdecoded\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBdecoded\fR(%options)" 4
.IX Item "$obj->decoded(%options)"
Inherited, see \*(L"The body\*(R" in Mail::Message
.ie n .IP "$obj\->\fBencode\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBencode\fR(%options)" 4
.IX Item "$obj->encode(%options)"
Inherited, see \*(L"The body\*(R" in Mail::Message
.ie n .IP "$obj\->\fBisMultipart\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisMultipart\fR()" 4
.IX Item "$obj->isMultipart()"
Inherited, see \*(L"The body\*(R" in Mail::Message
.ie n .IP "$obj\->\fBisNested\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisNested\fR()" 4
.IX Item "$obj->isNested()"
Inherited, see \*(L"The body\*(R" in Mail::Message
.ie n .IP "$obj\->\fBparts\fR( [<'\s-1ALL\s0'|'\s-1ACTIVE\s0'|'\s-1DELETED\s0'|'\s-1RECURSE\s0'|$filter>] )" 4
.el .IP "\f(CW$obj\fR\->\fBparts\fR( [<'\s-1ALL\s0'|'\s-1ACTIVE\s0'|'\s-1DELETED\s0'|'\s-1RECURSE\s0'|$filter>] )" 4
.IX Item "$obj->parts( [<'ALL'|'ACTIVE'|'DELETED'|'RECURSE'|$filter>] )"
Inherited, see \*(L"The body\*(R" in Mail::Message
.SS "Flags"
.IX Subsection "Flags"
Extends \*(L"Flags\*(R" in Mail::Box::Dir::Message.
.ie n .IP "$obj\->\fBdelete\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdelete\fR()" 4
.IX Item "$obj->delete()"
Inherited, see \*(L"Flags\*(R" in Mail::Message
.ie n .IP "$obj\->\fBdeleted\fR( [\s-1BOOLEAN\s0] )" 4
.el .IP "\f(CW$obj\fR\->\fBdeleted\fR( [\s-1BOOLEAN\s0] )" 4
.IX Item "$obj->deleted( [BOOLEAN] )"
Inherited, see \*(L"Flags\*(R" in Mail::Message
.ie n .IP "$obj\->\fBisDeleted\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisDeleted\fR()" 4
.IX Item "$obj->isDeleted()"
Inherited, see \*(L"Flags\*(R" in Mail::Message
.ie n .IP "$obj\->\fBisModified\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisModified\fR()" 4
.IX Item "$obj->isModified()"
Inherited, see \*(L"Flags\*(R" in Mail::Message
.ie n .IP "$obj\->\fBlabel\fR($label|PAIRS)" 4
.el .IP "\f(CW$obj\fR\->\fBlabel\fR($label|PAIRS)" 4
.IX Item "$obj->label($label|PAIRS)"
Inherited, see \*(L"Flags\*(R" in Mail::Message
.ie n .IP "$obj\->\fBlabels\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlabels\fR()" 4
.IX Item "$obj->labels()"
Inherited, see \*(L"Flags\*(R" in Mail::Message
.ie n .IP "$obj\->\fBlabelsToStatus\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlabelsToStatus\fR()" 4
.IX Item "$obj->labelsToStatus()"
Inherited, see \*(L"Flags\*(R" in Mail::Message
.ie n .IP "$obj\->\fBmodified\fR( [\s-1BOOLEAN\s0] )" 4
.el .IP "\f(CW$obj\fR\->\fBmodified\fR( [\s-1BOOLEAN\s0] )" 4
.IX Item "$obj->modified( [BOOLEAN] )"
Inherited, see \*(L"Flags\*(R" in Mail::Message
.ie n .IP "$obj\->\fBstatusToLabels\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBstatusToLabels\fR()" 4
.IX Item "$obj->statusToLabels()"
Inherited, see \*(L"Flags\*(R" in Mail::Message
.SS "The whole message as text"
.IX Subsection "The whole message as text"
Extends \*(L"The whole message as text\*(R" in Mail::Box::Dir::Message.
.ie n .IP "$obj\->\fBfile\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfile\fR()" 4
.IX Item "$obj->file()"
Inherited, see \*(L"The whole message as text\*(R" in Mail::Message::Construct::Text
.ie n .IP "$obj\->\fBlines\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlines\fR()" 4
.IX Item "$obj->lines()"
Inherited, see \*(L"The whole message as text\*(R" in Mail::Message::Construct::Text
.ie n .IP "$obj\->\fBprintStructure\fR( [$fh|undef],[$indent] )" 4
.el .IP "\f(CW$obj\fR\->\fBprintStructure\fR( [$fh|undef],[$indent] )" 4
.IX Item "$obj->printStructure( [$fh|undef],[$indent] )"
Inherited, see \*(L"The whole message as text\*(R" in Mail::Message::Construct::Text
.ie n .IP "$obj\->\fBstring\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBstring\fR()" 4
.IX Item "$obj->string()"
Inherited, see \*(L"The whole message as text\*(R" in Mail::Message::Construct::Text
.SS "Labels"
.IX Subsection "Labels"
.ie n .IP "$obj\->\fBlabelsToFilename\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlabelsToFilename\fR()" 4
.IX Item "$obj->labelsToFilename()"
When the labels on a message change, this may implicate a change in
the message's filename.  The change will take place immediately.  The
new filename (which may be the same as the old filename) is returned.
\&\f(CW\*(C`undef\*(C'\fR is returned when the rename is required but fails.
.SS "Internals"
.IX Subsection "Internals"
Extends \*(L"Internals\*(R" in Mail::Box::Dir::Message.
.ie n .IP "$obj\->\fBaccept\fR( [\s-1BOOLEAN\s0] )" 4
.el .IP "\f(CW$obj\fR\->\fBaccept\fR( [\s-1BOOLEAN\s0] )" 4
.IX Item "$obj->accept( [BOOLEAN] )"
Accept a message for the folder.  This will move it from the \f(CW\*(C`new\*(C'\fR
or \f(CW\*(C`tmp\*(C'\fR sub-directories into the \f(CW\*(C`cur\*(C'\fR sub-directory (or back when
the \s-1BOOLEAN\s0 is \f(CW\*(C`false\*(C'\fR).  When you accept an already accepted message,
nothing will happen.
.ie n .IP "$obj\->\fBclonedFrom\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBclonedFrom\fR()" 4
.IX Item "$obj->clonedFrom()"
Inherited, see \*(L"Internals\*(R" in Mail::Message
.ie n .IP "Mail::Box::Maildir::Message\->\fBcoerce\fR($message, %options)" 4
.el .IP "Mail::Box::Maildir::Message\->\fBcoerce\fR($message, \f(CW%options\fR)" 4
.IX Item "Mail::Box::Maildir::Message->coerce($message, %options)"
Inherited, see \*(L"Internals\*(R" in Mail::Message
.ie n .IP "$obj\->\fBcreate\fR($filename)" 4
.el .IP "\f(CW$obj\fR\->\fBcreate\fR($filename)" 4
.IX Item "$obj->create($filename)"
Inherited, see \*(L"Internals\*(R" in Mail::Box::Dir::Message
.ie n .IP "$obj\->\fBdiskDelete\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdiskDelete\fR()" 4
.IX Item "$obj->diskDelete()"
Inherited, see \*(L"Internals\*(R" in Mail::Box::Message
.ie n .IP "$obj\->\fBisDelayed\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisDelayed\fR()" 4
.IX Item "$obj->isDelayed()"
Inherited, see \*(L"Internals\*(R" in Mail::Message
.ie n .IP "$obj\->\fBloadBody\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBloadBody\fR()" 4
.IX Item "$obj->loadBody()"
Inherited, see \*(L"Internals\*(R" in Mail::Box::Dir::Message
.ie n .IP "$obj\->\fBloadHead\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBloadHead\fR()" 4
.IX Item "$obj->loadHead()"
Inherited, see \*(L"Internals\*(R" in Mail::Box::Dir::Message
.ie n .IP "$obj\->\fBparser\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBparser\fR()" 4
.IX Item "$obj->parser()"
Inherited, see \*(L"Internals\*(R" in Mail::Box::Dir::Message
.ie n .IP "$obj\->\fBreadBody\fR( $parser, $head, [$bodytype] )" 4
.el .IP "\f(CW$obj\fR\->\fBreadBody\fR( \f(CW$parser\fR, \f(CW$head\fR, [$bodytype] )" 4
.IX Item "$obj->readBody( $parser, $head, [$bodytype] )"
Inherited, see \*(L"Internals\*(R" in Mail::Box::Message
.ie n .IP "$obj\->\fBreadFromParser\fR( $parser, [$bodytype] )" 4
.el .IP "\f(CW$obj\fR\->\fBreadFromParser\fR( \f(CW$parser\fR, [$bodytype] )" 4
.IX Item "$obj->readFromParser( $parser, [$bodytype] )"
Inherited, see \*(L"Internals\*(R" in Mail::Message
.ie n .IP "$obj\->\fBreadHead\fR( $parser, [$class] )" 4
.el .IP "\f(CW$obj\fR\->\fBreadHead\fR( \f(CW$parser\fR, [$class] )" 4
.IX Item "$obj->readHead( $parser, [$class] )"
Inherited, see \*(L"Internals\*(R" in Mail::Message
.ie n .IP "$obj\->\fBrecursiveRebuildPart\fR($part, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBrecursiveRebuildPart\fR($part, \f(CW%options\fR)" 4
.IX Item "$obj->recursiveRebuildPart($part, %options)"
Inherited, see \*(L"Internals\*(R" in Mail::Message::Construct::Rebuild
.ie n .IP "$obj\->\fBstoreBody\fR($body)" 4
.el .IP "\f(CW$obj\fR\->\fBstoreBody\fR($body)" 4
.IX Item "$obj->storeBody($body)"
Inherited, see \*(L"Internals\*(R" in Mail::Message
.ie n .IP "$obj\->\fBtakeMessageId\fR( [\s-1STRING\s0] )" 4
.el .IP "\f(CW$obj\fR\->\fBtakeMessageId\fR( [\s-1STRING\s0] )" 4
.IX Item "$obj->takeMessageId( [STRING] )"
Inherited, see \*(L"Internals\*(R" in Mail::Message
.SS "Error handling"
.IX Subsection "Error handling"
Extends \*(L"Error handling\*(R" in Mail::Box::Dir::Message.
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
Inherited, see \*(L"\s-1METHODS\s0\*(R" in Mail::Message::Construct
.ie n .IP "$obj\->\fBaddReport\fR($object)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR($object)" 4
.IX Item "$obj->addReport($object)"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "$obj->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD 0
.ie n .IP "Mail::Box::Maildir::Message\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "Mail::Box::Maildir::Message\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "Mail::Box::Maildir::Message->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR( [$level, [$strings]] )" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "$obj->log( [$level, [$strings]] )"
.PD 0
.IP "Mail::Box::Maildir::Message\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "Mail::Box::Maildir::Message->log( [$level, [$strings]] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR($level)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR($level)" 4
.IX Item "$obj->logPriority($level)"
.PD 0
.IP "Mail::Box::Maildir::Message\->\fBlogPriority\fR($level)" 4
.IX Item "Mail::Box::Maildir::Message->logPriority($level)"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR( [$level] )" 4
.IX Item "$obj->report( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR( [$level] )" 4
.IX Item "$obj->reportAll( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBshortSize\fR( [$value] )" 4
.el .IP "\f(CW$obj\fR\->\fBshortSize\fR( [$value] )" 4
.IX Item "$obj->shortSize( [$value] )"
.PD 0
.IP "Mail::Box::Maildir::Message\->\fBshortSize\fR( [$value] )" 4
.IX Item "Mail::Box::Maildir::Message->shortSize( [$value] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Message
.ie n .IP "$obj\->\fBshortString\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBshortString\fR()" 4
.IX Item "$obj->shortString()"
Inherited, see \*(L"Error handling\*(R" in Mail::Message
.ie n .IP "$obj\->\fBtrace\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR( [$level] )" 4
.IX Item "$obj->trace( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
Extends \*(L"Cleanup\*(R" in Mail::Box::Dir::Message.
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
Inherited, see \*(L"Cleanup\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBdestruct\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdestruct\fR()" 4
.IX Item "$obj->destruct()"
Inherited, see \*(L"Cleanup\*(R" in Mail::Box::Message
.SH "DETAILS"
.IX Header "DETAILS"
Extends \*(L"\s-1DETAILS\s0\*(R" in Mail::Box::Dir::Message.
.SS "Structure of a Message"
.IX Subsection "Structure of a Message"
Extends \*(L"Structure of a Message\*(R" in Mail::Box::Dir::Message.
.SS "Message object implementation"
.IX Subsection "Message object implementation"
Extends \*(L"Message object implementation\*(R" in Mail::Box::Dir::Message.
.SS "Message class implementation"
.IX Subsection "Message class implementation"
Extends \*(L"Message class implementation\*(R" in Mail::Box::Dir::Message.
.SS "Labels"
.IX Subsection "Labels"
Extends \*(L"Labels\*(R" in Mail::Box::Dir::Message.
.PP
\fIPredefined labels\fR
.IX Subsection "Predefined labels"
.PP
Extends \*(L"Predefined labels\*(R" in Mail::Box::Dir::Message.
.PP
\fIStatus and X\-Status fields\fR
.IX Subsection "Status and X-Status fields"
.PP
Extends \*(L"Status and X\-Status fields\*(R" in Mail::Box::Dir::Message.
.PP
\fIFlags in filename\fR
.IX Subsection "Flags in filename"
.PP
When new messages arrive on system and have to be stored in a maildir folder,
they are put in the \f(CW\*(C`new\*(C'\fR sub-directory of the folder (first created in
the \f(CW\*(C`tmp\*(C'\fR sub-directory and then immediately moved to \f(CW\*(C`new\*(C'\fR).
The following information was found at <http://cr.yp.to/proto/maildir.html>.
.PP
Each message is written in a separate file.  The filename is
constructed from the time-of-arrival, a hostname, an unique component,
a syntax marker, and flags. For example \f(CW\*(C`1014220791.meteor.42:2,DF\*(C'\fR.
The filename must match:
.PP
.Vb 5
\& my ($time, $unique, $hostname, $info)
\&    = $filename =~ m!^(\ed+)\e.(.*)\e.(\ew+)(\e:.*)?$!;
\& my ($semantics, $flags)
\&    = $info =~ m!([12])\e,([DFPRST]*)$!;
\& my @flags = split //, $flags;
.Ve
.PP
When an application opens the folder, there may be messages in \f(CW\*(C`new\*(C'\fR
which are new arival, and messages in \f(CW\*(C`cur\*(C'\fR.  The latter are labeled
\&\f(CW\*(C`accepted\*(C'\fR.  To move a message from \f(CW\*(C`new\*(C'\fR to \f(CW\*(C`cur\*(C'\fR, you have two
options with the same effect:
.PP
.Vb 2
\&  $msg\->accept;
\&  $msg\->label(accept => 1);
.Ve
.PP
See \fIaccept()\fR, \fIlabel()\fR, Mail::Box::Maildir::new(accept_new),
and \fIMail::Box::Maildir::acceptMessages()\fR
.PP
The messages are moved, and their name is immediately
extended with flags.  An example:
.PP
.Vb 2
\& new/897979431.meteor.42      may become
\& cur/897979431.meteor.42:2,FS
.Ve
.PP
The added characters \f(CW\*(Aq:2,\*(Aq\fR refer to the \*(L"second state of processing\*(R",
where the message has been inspected.  And the characters (which should
be in alphabetic order) mean
.PP
.Vb 5
\& D      => draft
\& F      => flagged
\& R      => replied  (answered)
\& S      => seen
\& T      => deleted  (tagged for deletion)
.Ve
.PP
Some maildir clients support
 P      => passed   (resent/forwarded/bounced to someone else)
.PP
The flags will immediately change when \fIlabel()\fR or \fIdelete()\fR is used,
which differs from other message implementations: maildir is stateless,
and should not break when applications crash.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Cannot coerce a $class object into a $class object" 4
.el .IP "Error: Cannot coerce a \f(CW$class\fR object into a \f(CW$class\fR object" 4
.IX Item "Error: Cannot coerce a $class object into a $class object"
.PD 0
.ie n .IP "Error: Cannot create parser for $filename." 4
.el .IP "Error: Cannot create parser for \f(CW$filename\fR." 4
.IX Item "Error: Cannot create parser for $filename."
.PD
For some reason (the previous message have told you already) it was not possible
to create a message parser for the specified filename.
.ie n .IP "Error: Cannot include forward source as $include." 4
.el .IP "Error: Cannot include forward source as \f(CW$include\fR." 4
.IX Item "Error: Cannot include forward source as $include."
Unknown alternative for the forward(include).  Valid choices are
\&\f(CW\*(C`NO\*(C'\fR, \f(CW\*(C`INLINE\*(C'\fR, \f(CW\*(C`ATTACH\*(C'\fR, and \f(CW\*(C`ENCAPSULATE\*(C'\fR.
.ie n .IP "Error: Cannot include reply source as $include." 4
.el .IP "Error: Cannot include reply source as \f(CW$include\fR." 4
.IX Item "Error: Cannot include reply source as $include."
Unknown alternative for the \f(CW\*(C`include\*(C'\fR option of \fIreply()\fR.  Valid
choices are \f(CW\*(C`NO\*(C'\fR, \f(CW\*(C`INLINE\*(C'\fR, and \f(CW\*(C`ATTACH\*(C'\fR.
.ie n .IP "Error: Cannot write message to $filename: $!" 4
.el .IP "Error: Cannot write message to \f(CW$filename:\fR $!" 4
.IX Item "Error: Cannot write message to $filename: $!"
When a modified or new message is written to disk, it is first written
to a temporary file in the folder directory.  For some reason, it is
impossible to create this file.
.ie n .IP "Error: Failed to move $new to $filename: $!" 4
.el .IP "Error: Failed to move \f(CW$new\fR to \f(CW$filename:\fR $!" 4
.IX Item "Error: Failed to move $new to $filename: $!"
When a modified or new message is written to disk, it is first written
to a temporary file in the folder directory.  Then, the new file is
moved to replace the existing file.  Apparently, the latter fails.
.IP "Error: Method bounce requires To, Cc, or Bcc" 4
.IX Item "Error: Method bounce requires To, Cc, or Bcc"
The message \fIbounce()\fR method forwards a received message off to someone
else without modification; you must specified it's new destination.
If you have the urge not to specify any destination, you probably
are looking for \fIreply()\fR. When you wish to modify the content, use
\&\fIforward()\fR.
.IP "Error: Method forwardAttach requires a preamble" 4
.IX Item "Error: Method forwardAttach requires a preamble"
.PD 0
.IP "Error: Method forwardEncapsulate requires a preamble" 4
.IX Item "Error: Method forwardEncapsulate requires a preamble"
.IP "Error: No address to create forwarded to." 4
.IX Item "Error: No address to create forwarded to."
.PD
If a forward message is created, a destination address must be specified.
.IP "Error: No default mailer found to send message." 4
.IX Item "Error: No default mailer found to send message."
The message \fIsend()\fR mechanism had not enough information to automatically
find a mail transfer agent to sent this message.  Specify a mailer
explicitly using the \f(CW\*(C`via\*(C'\fR options.
.ie n .IP "Error: No rebuild rule $name defined." 4
.el .IP "Error: No rebuild rule \f(CW$name\fR defined." 4
.IX Item "Error: No rebuild rule $name defined."
.PD 0
.IP "Error: Only \fIbuild()\fR Mail::Message's; they are not in a folder yet" 4
.IX Item "Error: Only build() Mail::Message's; they are not in a folder yet"
.PD
You may wish to construct a message to be stored in a some kind
of folder, but you need to do that in two steps.  First, create a
normal Mail::Message, and then add it to the folder.  During this
\&\fIMail::Box::addMessage()\fR process, the message will get \fIcoerce()\fR\-d
into the right message type, adding storage information and the like.
.ie n .IP "Error: Package $package does not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR does not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package does not implement $method."
Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.
.IP "Error: Unable to read delayed body." 4
.IX Item "Error: Unable to read delayed body."
For some reason, the header of the message could be read, but the body
cannot.  Probably the file has disappeared or the permissions were
changed during the progress of the program.
.IP "Error: Unable to read delayed head." 4
.IX Item "Error: Unable to read delayed head."
Mail::Box tries to be \fIlazy\fR with respect to parsing messages.  When a
directory organized folder is opened, only the filenames of messages are
collected.  At first use, the messages are read from their file.  Apperently,
a message is used for the first time here, but has disappeared or is
unreadible for some other reason.
.IP "Error: coercion starts with some object" 4
.IX Item "Error: coercion starts with some object"
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.117,
built on August 24, 2014. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2014 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
