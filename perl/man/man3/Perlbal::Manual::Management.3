.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Perlbal::Manual::Management 3"
.TH Perlbal::Manual::Management 3 "2011-01-23" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Perlbal::Manual::Management \- Managing Perlbal on\-the\-fly
.SS "\s-1VERSION\s0"
.IX Subsection "VERSION"
Perlbal 1.78.
.SS "\s-1DESCRIPTION\s0"
.IX Subsection "DESCRIPTION"
How to configure a Perlbal \f(CW\*(C`management\*(C'\fR service for on-the-fly configuration and debugging.
.SS "\s-1READ\s0 \s-1ME\s0 \s-1FIRST\s0"
.IX Subsection "READ ME FIRST"
Please read Perlbal::Manual::Configuration first for a better explanation on how to configure Perlbal. This document will make much more sense after reading that.
.SS "Setting up a management service"
.IX Subsection "Setting up a management service"
You can create a management service in the following way:
.PP
.Vb 4
\&    CREATE SERVICE mgmt
\&        SET role   = management
\&        SET listen = 127.0.0.1:16000
\&    ENABLE mgmt
.Ve
.PP
\fIConsulting information with a browser\fR
.IX Subsection "Consulting information with a browser"
.PP
If you access the management service (in this case, 127.0.0.1 on port 16000) with a browser you'll reach a page with information on the services that are enabled. You're also able to click those services and reach further information on each of them.
.PP
\fIManaging Perlbal via telnet\fR
.IX Subsection "Managing Perlbal via telnet"
.PP
If you telnet to the management service you get a connection that allows you manage your Perlbal's instance.
.PP
.Vb 4
\&    $ telnet 127.0.0.1 16000
\&    Trying 127.0.0.1...
\&    Connected to 127.0.0.1.
\&    Escape character is \*(Aq^]\*(Aq.
.Ve
.PP
You now have access to several commands (which are case insensitive):
.PP
Admin Commands
.IX Subsection "Admin Commands"
.IP "create pool <name>" 4
.IX Item "create pool <name>"
.PD 0
.IP "create service <name>" 4
.IX Item "create service <name>"
.PD
Creates a pool or a service.
.Sp
.Vb 1
\&    create pool my_new_pool
\&
\&    create service my_new_service
.Ve
.IP "disable <service>" 4
.IX Item "disable <service>"
Disables a service (stops listening).
.Sp
.Vb 1
\&    disable my_service
.Ve
.Sp
Note that you can not disable \f(CW\*(C`management\*(C'\fR services.
.IP "enable <service>" 4
.IX Item "enable <service>"
Enables a service (starts listening).
.Sp
.Vb 1
\&    enable my_service
.Ve
.IP "header <service> insert <header>:<value>" 4
.IX Item "header <service> insert <header>:<value>"
.PD 0
.IP "header <service> remove <header>" 4
.IX Item "header <service> remove <header>"
.PD
Inserts or removes headers from the request before they're passed on to the backend.
.Sp
When adding headers you must state the value:
.Sp
.Vb 1
\&    header my_service insert x\-myamazingheader:myamazingvalue
.Ve
.Sp
When removing headers you don't need the state any value, the header will be removed regardless of the value it holds:
.Sp
.Vb 1
\&    header my_service remove Connection
.Ve
.Sp
Note: the usage of \f(CW\*(C`x\-\*(C'\fR in the beginning of your header is not required, but the convention is that non-standard headers be prefixed with \f(CW\*(C`x\-\*(C'\fR.
.IP "load <plugin>" 4
.IX Item "load <plugin>"
Loads a Perlbal plugin.
.Sp
.Vb 1
\&    load AccessControl
.Ve
.IP "plugins" 4
.IX Item "plugins"
Lists plugins
.IP "pool <name> add <ip[:port]>" 4
.IX Item "pool <name> add <ip[:port]>"
.PD 0
.IP "pool <name> remove <ip[:port]>" 4
.IX Item "pool <name> remove <ip[:port]>"
.PD
Allows you to add or remove nodes from a service.
.Sp
.Vb 1
\&    pool add my_service 127.0.0.1:1337
\&
\&    pool remove my_service 127.0.0.1:1337
.Ve
.Sp
Note that adding a node that already exists or removing a non-existing node do not result in an error message.
.Sp
Also note that the port number defaults to :80 if omitted.
.IP "reproxy_state" 4
.IX Item "reproxy_state"
Dumps the state of reproxy status.
.Sp
.Vb 2
\&    reproxy_state
\&    SERVER max_reproxy_connections = 0
.Ve
.IP "server <param> = <value>" 4
.IX Item "server <param> = <value>"
Sets a server parameter, where param is one of:
.RS 4
.IP "\(bu" 8
max_reproxy_connections = <value>
.Sp
Maximum number of concurrent connections to the backends.
.IP "\(bu" 8
max_reproxy_connections(\f(CW\*(C`ip\*(C'\fR) = <value>
.Sp
Maximum number of concurrent connections to one specific backend.
.IP "\(bu" 8
max_connections = <value>
.Sp
Sets the value of \f(CW\*(C`RLIMIT_NOFILE\*(C'\fR (maximum number of open files for this process).
.Sp
Requires BSD::Resource. Also, Perlbal must be run under a superuser.
.IP "\(bu" 8
nice_level = <value>
.Sp
Sets the \f(CW\*(C`nice\*(C'\fR level for the process.
.IP "\(bu" 8
aio_mode = <value>
.Sp
One of \f(CW\*(C`none\*(C'\fR, \f(CW\*(C`linux\*(C'\fR for Linux::AIO, or \f(CW\*(C`ioaio\*(C'\fR for \s-1IO::AIO\s0.
.Sp
This controls how disk \s-1IO\s0 is done asynchronously. Highly recommended to use Linux::AIO or \s-1IO::AIO\s0 for webserving or reproxying files. For purely reverse proxy or only reproxying URLs, none is fine.
.IP "\(bu" 8
aio_threads = <value>
.Sp
Number of child threads doing disk \s-1IO\s0. Use between 2 and 50.
.IP "\(bu" 8
track_obj = <value>
.Sp
Developer option to track objects.
.IP "\(bu" 8
pidfile = <value>
.Sp
Filename to write pidfile to (no pidfile if not specified).
.IP "\(bu" 8
crash_backtrace = <value>
.Sp
1 or 0 indicating whether to perform a backtrace while the server is crashing.
.RE
.RS 4
.RE
.IP "set [<pool_name>] <param> = <value>" 4
.IX Item "set [<pool_name>] <param> = <value>"
Sets a property on a pool. If the pool was just created, specifying the pool name is optional.
.Sp
Setting the file to autoload nodes from (Perlbal will periodically check the file for updates):
.Sp
.Vb 1
\&    SET my_pool nodefile = /path/to/file
.Ve
.Sp
Unsetting the file to autoload nodes from (note that this does not remove current members):
.Sp
.Vb 1
\&    SET my_pool nodefile = none
.Ve
.Sp
\&\f(CW\*(C`undef\*(C'\fR, \f(CW\*(C`null\*(C'\fR, "" and '' are interpreted just like \f(CW\*(C`none\*(C'\fR.
.Sp
Note that manually modifying the pool (via \s-1POOL\s0 \s-1ADD\s0 or \s-1POOL\s0 \s-1REMOVE\s0) will disable the periodic checking of the nodefile.
.Sp
Setting the load balancing method:
.Sp
.Vb 1
\&    SET pool balance_method = \*(Aqrandom\*(Aq
.Ve
.Sp
Yes, we do realize that \f(CW\*(C`random\*(C'\fR is the only method currently available, but hey.
.IP "set [<service_name>] <param> = <value>" 4
.IX Item "set [<service_name>] <param> = <value>"
Sets a property on a service. If the service was just created, specifying the service name is optional.
.Sp
See Perlbal::Manual::LoadBalancer, Perlbal::Manual::ReverseProxy and Perlbal::Manual::WebServer for the list of available parameters.
.IP "show service [<service_name>]" 4
.IX Item "show service [<service_name>]"
.PD 0
.IP "show pool [<pool_name>]" 4
.IX Item "show pool [<pool_name>]"
.PD
List all services:
.Sp
.Vb 1
\&    show service
.Ve
.Sp
Show details of a service:
.Sp
.Vb 1
\&    show service my_service
.Ve
.Sp
Lists all pools, nodes and services using them:
.Sp
.Vb 1
\&    show pool
.Ve
.Sp
Show the members of a pool:
.Sp
.Vb 1
\&    show pool my_pool
.Ve
.IP "shutdown [graceful]" 4
.IX Item "shutdown [graceful]"
Shuts down the server (you'll also lose your telnet session).
.Sp
Can be used instantly, killing all active connections:
.Sp
.Vb 1
\&    shutdown
.Ve
.Sp
Using the parameter \f(CW\*(C`graceful\*(C'\fR listening sockets are closed and perlbal stays alive until clients bleed off.
.Sp
.Vb 1
\&    shutdown graceful
.Ve
.IP "unload <plugin>" 4
.IX Item "unload <plugin>"
Unloads a plugin.
.Sp
.Vb 1
\&    unload AccessControl
.Ve
.IP "use <service>" 4
.IX Item "use <service>"
.PD 0
.IP "use <pool>" 4
.IX Item "use <pool>"
.PD
Sets the implied service or pool for future operations.
.Sp
For instance, after:
.Sp
.Vb 1
\&    use my_pool
.Ve
.Sp
You can just type:
.Sp
.Vb 1
\&    pool add 127.0.0.1:6000
.Ve
.Sp
Note that creating a service or pool also sets it as the implied service.
.IP "xs" 4
.IX Item "xs"
.PD 0
.IP "xs [enable <module>]" 4
.IX Item "xs [enable <module>]"
.IP "xs [disable <module>]" 4
.IX Item "xs [disable <module>]"
.PD
Show status of \s-1XS\s0 modules loaded:
.Sp
.Vb 1
\&    xs
.Ve
.Sp
Turn on an already-loaded \s-1XS\s0 module:
.Sp
.Vb 1
\&    xs enable module_name
.Ve
.Sp
Turn off an already-loaded \s-1XS\s0 module:
.Sp
.Vb 1
\&    xs disable module_name
.Ve
.PP
Diagnostic Commands
.IX Subsection "Diagnostic Commands"
.IP "aio" 4
.IX Item "aio"
Shows Perlbal::AIO stats.
.IP "backends" 4
.IX Item "backends"
Lists the open connections to the backends.
.Sp
.Vb 3
\&    backends
\&    127.0.0.1:3080 1
\&    127.0.0.1:3081 2
.Ve
.Sp
In the above example, there are 3 open connections (they may be being used or they may simply be open according to the value of \f(CW\*(C`connect_ahead\*(C'\fR).
.IP "dumpconfig" 4
.IX Item "dumpconfig"
Shows the current configuration for each service.
.Sp
If a service uses a plugin that supports \f(CW\*(C`dumpconfig\*(C'\fR, that plugin's configuration is also dumped (see \f(CW\*(C`dumpconfig\*(C'\fR under Perlbal::Manual::Plugins for more information).
.IP "fd" 4
.IX Item "fd"
Shows the maximum number of file descriptors and how many are currently in use.
.Sp
.Vb 3
\&    fd
\&    max 1024
\&    cur 8
.Ve
.IP "gladiator" 4
.IX Item "gladiator"
Requires Devel::Gladiator.
.Sp
Iterate's Perl's internal memory structures and can be used to enumerate all the currently live SVs.
.Sp
This can be used to hunt leaks and to profile memory usage.
.IP "help" 4
.IX Item "help"
Displays the list of available commands.
.IP "leaks" 4
.IX Item "leaks"
.PD 0
.IP "leaks <code>" 4
.IX Item "leaks <code>"
.PD
Iterates over active objects.
.Sp
If an argument is specified, it is treated as code with \f(CW$_\fR being the reference to the object.
.Sp
Shows objects that might have been leaked.
.IP "mime" 4
.IX Item "mime"
Lists known mime types.
.Sp
.Vb 4
\&    mime
\&    css text/css
\&    doc application/msword
\&    ...
.Ve
.IP "node <ip[:port]>" 4
.IX Item "node <ip[:port]>"
Dumps information on a specific node.
.Sp
.Vb 3
\&    node 127.0.0.1:8181
\&    127.0.0.1:8181 attempts 10
\&    127.0.0.1:8181 lastattempt 1290461126
.Ve
.Sp
Calling \f(CW\*(C`node\*(C'\fR with a parameter is the same as calling \f(CW\*(C`nodes\*(C'\fR.
.IP "nodes" 4
.IX Item "nodes"
Dumps information on all nodes.
.Sp
.Vb 8
\&    nodes
\&    127.0.0.1:8181 attempts 10
\&    127.0.0.1:8181 lastattempt 1290461126
\&    127.0.0.1:8081 connects 19
\&    127.0.0.1:8081 lastconnect 1290461127
\&    127.0.0.1:8081 attempts 19
\&    127.0.0.1:8081 responsecodes 200 11
\&    127.0.0.1:8081 lastattempt 1290461127
.Ve
.IP "noverify" 4
.IX Item "noverify"
Shows the amount of time left for each node marked as noverify.
.Sp
If the \f(CW\*(C`verify_backend\*(C'\fR parameter is set to a true value, perlbal tries to send an \f(CW\*(C`OPTIONS\*(C'\fR command to a node before sending it the actual client request. If the node doesn't support the \f(CW\*(C`OPTIONS\*(C'\fR command, the node is added to an internal hash so that an \f(CW\*(C`OPTIONS\*(C'\fR command is not issued for new requests during the next 60 seconds.
.Sp
.Vb 2
\&    noverify
\&    127.0.0.1:8081 42
.Ve
.Sp
In the above example, node 127.0.0.1:8081 is on that list and still has 42 seconds until an \f(CW\*(C`OPTIONS\*(C'\fR command is tried again.
.Sp
If the time is a negative value it means that the \f(CW\*(C`OPTIONS\*(C'\fR command will be issued before the next request.
.IP "obj" 4
.IX Item "obj"
Shows objects count in scope.
.Sp
The environment variable \f(CW\*(C`DEBUG_OBJ\*(C'\fR must be set to a true value (see \f(CW\*(C`Environment Variables\*(C'\fR under Perlbal::Manual::Configuration for more information).
.IP "pending" 4
.IX Item "pending"
Shows pending backend connections by service, node, and age.
.IP "proc" 4
.IX Item "proc"
Shows \s-1CPU\s0 usage, current time, pid, and total requests processed.
.IP "prof on" 4
.IX Item "prof on"
.PD 0
.IP "prof off" 4
.IX Item "prof off"
.IP "prof data" 4
.IX Item "prof data"
.PD
Enables/disables profiling or dumps profile data.
.IP "queues" 4
.IX Item "queues"
Shows status of all queues (normal, high priority and low priority) for all enabled services.
.Sp
.Vb 7
\&    queues
\&    service_mywebsite\-normal.age 1
\&    service_mywebsite\-normal.count 8
\&    service_mywebsite\-highpri.age 0
\&    service_mywebsite\-highpri.count 0
\&    service_mywebsite\-lowpri.age 0
\&    service_mywebsite\-lowpri.count 0
.Ve
.IP "reload <plugin_name>" 4
.IX Item "reload <plugin_name>"
Reloads a plugin that supports reloading.
.IP "socks [all]" 4
.IX Item "socks [all]"
.PD 0
.IP "socks summary" 4
.IX Item "socks summary"
.PD
Lists all sockets or shows a summary of the sockets (by default lists all sockets).
.Sp
.Vb 5
\&    socks
\&       fd    age
\&        3   748s Perlbal::ClientManage(R): open to 85.245.86.253:52248
\&        4  1003s Perlbal::TCPListener(R): open: listening on 82.102.30.112:80 for service \*(Aqws\*(Aq
\&        6  1003s Perlbal::TCPListener(R): open: listening on 0.0.0.0:60000 for service \*(Aqmgmt\*(Aq
\&
\&    socks summary
\&        1 Perlbal::ClientManage
\&        2 Perlbal::TCPListener
\&    Aggregate write buffer: 0.0k
\&                Open files: 0
.Ve
.IP "state changes" 4
.IX Item "state changes"
Lists recent state changes of requests.
.Sp
For instance, while a request is being processed this command may issue something like:
.Sp
.Vb 4
\&    state changes
\&    Perlbal::ClientProxy=HASH(0x12d7ec28): reading_headers, wait_backend, backend_req_sent, wait_res
\&    Perlbal::BackendHTTP=HASH(0x12d75f30): connecting, bored, sending_req, wait_res
\&    wait_res 2
.Ve
.Sp
And as soon as the request is processed:
.Sp
.Vb 3
\&    state changes
\&    Perlbal::BackendHTTP=HASH(0x12d75f30): connecting, bored, sending_req, wait_res, xfer_res, closed
\&    closed 1
.Ve
.Sp
Note: This functionality depends on the environment variable \f(CW\*(C`PERLBAL_TRACK_STATES\*(C'\fR being set to a true value.
.IP "states" 4
.IX Item "states"
.PD 0
.IP "states <service>" 4
.IX Item "states <service>"
.PD
Shows how many sockets of which type and in which state currently exist for all services.
.Sp
.Vb 2
\&    states
\&    Perlbal::ClientProxy draining_res 1
.Ve
.Sp
If a service is specified, shows the information for that service only.
.Sp
.Vb 3
\&    states ws
\&    Perlbal::BackendHTTP wait_res 1
\&    Perlbal::ClientProxy wait_res 1
.Ve
.IP "track" 4
.IX Item "track"
Dumps objects tracked, sorted by age.
.Sp
.Vb 7
\&    track
\&    15s Perlbal::HTTPHeaders=HASH(0x1a043a50): Perlbal::HTTPHeaders::clone, Perlbal::BackendHTTP::assign_client, Perlbal::Service::register_boredom, Perlbal::BackendHTTP::event_write, Danga::Socket::EpollEventLoop, (eval), Perlbal::run
\&    15s Perlbal::HTTPHeaders=HASH(0x19594fe0): Perlbal::HTTPHeaders::new, Perlbal::Socket::read_headers, Perlbal::Socket::read_response_headers, Perlbal::BackendHTTP::event_read_waiting_options, Perlbal::BackendHTTP::event_read, Danga::Socket::EpollEventLoop, (eval), Perlbal::run
\&    15s Perlbal::HTTPHeaders=HASH(0x1a043d80): Perlbal::HTTPHeaders::new, Perlbal::Socket::read_headers, Perlbal::Socket::read_response_headers, Perlbal::BackendHTTP::event_read, Danga::Socket::EpollEventLoop, (eval), Perlbal::run
\&    15s Perlbal::BackendHTTP=HASH(0x1a044608): Perlbal::BackendHTTP::new, Perlbal::Service::spawn_backends, Perlbal::Service::note_bad_backend_connect, Perlbal::BackendHTTP::event_err, Danga::Socket::EpollEventLoop, (eval), Perlbal::run
\&    15s Perlbal::BackendHTTP=HASH(0x1a042588): Perlbal::BackendHTTP::new, Perlbal::Service::spawn_backends, Perlbal::Service::note_bad_backend_connect, Perlbal::BackendHTTP::verify_failure, Perlbal::BackendHTTP::event_read_waiting_options, Perlbal::BackendHTTP::event_read, Danga::Socket::EpollEventLoop, (eval), Perlbal::run
\&    15s Perlbal::BackendHTTP=HASH(0x1a044488): Perlbal::BackendHTTP::new, Perlbal::Service::spawn_backends, Perlbal::Service::request_backend_connection, Perlbal::ClientProxy::request_backend, Perlbal::ClientProxy::handle_request, Perlbal::ClientProxy::event_read, Danga::Socket::EpollEventLoop, (eval), Perlbal::run
.Ve
.Sp
For this to work you must have the environment variable \f(CW\*(C`DEBUG_OBJ\*(C'\fR set to a true value and the server option \f(CW\*(C`track_obj\*(C'\fR on:
.Sp
.Vb 2
\&    server track_obj = 1
\&    OK
.Ve
.IP "uptime" 4
.IX Item "uptime"
.PD 0
.IP "version" 4
.IX Item "version"
.PD
Shows the time the server was started, the current uptime and Perlbal's version.
.IP "varsize" 4
.IX Item "varsize"
Debug management command to track size of internal data structures.
.Sp
.Vb 5
\&    varsize
\&    svc\-ws\-bored_backends [] 2
\&    svc\-ws\-pending_connects {} 2
\&      {127.0.0.1:3080}  =
\&      {127.0.0.1:3081}  = Perlbal::BackendHTTP=HASH(0x1cfd2490)
.Ve
.IP "verbose on" 4
.IX Item "verbose on"
.PD 0
.IP "verbose off" 4
.IX Item "verbose off"
.PD
Turns verbose mode on or off.
.Sp
.Vb 9
\&    verbose on
\&    load AccessControl
\&    OK
\&    verbose off
\&    load AccessControl
\&    verbose on
\&    OK
\&    load AccessControl
\&    OK
.Ve
.Sp
Yes, verbose mode only activates the printing of an \s-1OK\s0 message upon completion of some commands such as \f(CW\*(C`load\*(C'\fR. Errors are displayed regardless of verbose status.
.SS "\s-1CAVEAT\s0"
.IX Subsection "CAVEAT"
Note that this functionality doesn't implement any sort of authentication. If you can telnet to the address you specify, you can access the information and change things on the fly.
.PP
Some alternatives to authentication are commonly employed:
.IP "\(bu" 4
specifying the address as being 127.0.0.1 means that no one outside the machine can telnet to the management service;
.IP "\(bu" 4
setting the management address as a private \s-1IP\s0 available only through a \s-1VPN\s0, for instance, will allow you to manage these accesses on the \s-1VPN\s0 instead.
.SS "\s-1SEE\s0 \s-1ALSO\s0"
.IX Subsection "SEE ALSO"
Perlbal::Manual::Configuration,
Perlbal::Manual::Debugging.
