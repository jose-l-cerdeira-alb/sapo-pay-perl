.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Box::Maildir 3"
.TH Mail::Box::Maildir 3 "2014-08-24" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Box::Maildir \- handle Maildir folders
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 4
\& Mail::Box::Maildir
\&   is a Mail::Box::Dir
\&   is a Mail::Box
\&   is a Mail::Reporter
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Mail::Box::Maildir;
\& my $folder = new Mail::Box::Maildir folder => $ENV{MAIL}, ...;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This documentation describes how Maildir mailboxes work, and what you
can do with the Maildir folder object \f(CW\*(C`Mail::Box::Maildir\*(C'\fR.
.PP
Maildir is \fBnot supported for Windows\fR, because it create filenames
which are not accepted by the Windows system.
.PP
Extends \*(L"\s-1DESCRIPTION\s0\*(R" in Mail::Box::Dir.
.SH "OVERLOADED"
.IX Header "OVERLOADED"
Extends \*(L"\s-1OVERLOADED\s0\*(R" in Mail::Box::Dir.
.ie n .IP "overload: \fB""""\fR" 4
.el .IP "overload: \fB``''\fR" 4
.IX Item "overload: """""
Inherited, see \*(L"\s-1OVERLOADED\s0\*(R" in Mail::Box
.IP "overload: \fB@{}\fR" 4
.IX Item "overload: @{}"
Inherited, see \*(L"\s-1OVERLOADED\s0\*(R" in Mail::Box
.IP "overload: \fBcmp\fR" 4
.IX Item "overload: cmp"
Inherited, see \*(L"\s-1OVERLOADED\s0\*(R" in Mail::Box
.SH "METHODS"
.IX Header "METHODS"
Extends \*(L"\s-1METHODS\s0\*(R" in Mail::Box::Dir.
.SS "Constructors"
.IX Subsection "Constructors"
Extends \*(L"Constructors\*(R" in Mail::Box::Dir.
.IP "Mail::Box::Maildir\->\fBnew\fR(%options)" 4
.IX Item "Mail::Box::Maildir->new(%options)"
.Vb 10
\& \-Option           \-\-Defined in     \-\-Default
\&  accept_new                          <false>
\&  access             Mail::Box        \*(Aqr\*(Aq
\&  body_delayed_type  Mail::Box        Mail::Message::Body::Delayed
\&  body_type          Mail::Box        Mail::Message::Body::Lines
\&  coerce_options     Mail::Box        []
\&  create             Mail::Box        <false>
\&  directory          Mail::Box::Dir   <derived from folder name>
\&  extract            Mail::Box        10240
\&  field_type         Mail::Box        undef
\&  fix_headers        Mail::Box        <false>
\&  folder             Mail::Box        $ENV{MAIL}
\&  folderdir          Mail::Box        $ENV{HOME}/.maildir
\&  head_delayed_type  Mail::Box        Mail::Message::Head::Delayed
\&  head_type          Mail::Box        Mail::Message::Head::Complete
\&  keep_dups          Mail::Box        <false>
\&  lock_file          Mail::Box        <not used>
\&  lock_timeout       Mail::Box        <not used>
\&  lock_type          Mail::Box        \*(AqNONE\*(Aq (constant)
\&  lock_wait          Mail::Box        <not used>
\&  locker             Mail::Box        undef
\&  log                Mail::Reporter   \*(AqWARNINGS\*(Aq
\&  manager            Mail::Box        undef
\&  message_type       Mail::Box        <folder\-class>::Message
\&  multipart_type     Mail::Box        Mail::Message::Body::Multipart
\&  remove_when_empty  Mail::Box        <true>
\&  save_on_exit       Mail::Box        <true>
\&  trace              Mail::Reporter   \*(AqWARNINGS\*(Aq
\&  trusted            Mail::Box        <depends on folder location>
.Ve
.RS 4
.IP "accept_new => \s-1BOOLEAN\s0" 2
.IX Item "accept_new => BOOLEAN"
When the folder is open, some messages may be stored in the \f(CW\*(C`new\*(C'\fR
sub-directory.  By default, these messages are immediately moved to
the \f(CW\*(C`cur\*(C'\fR directory when the folder is opened.  Otherwise, you have
to call \fIacceptMessages()\fR or \fIMail::Box::Maildir::Message::accept()\fR.
.IP "access => \s-1MODE\s0" 2
.IX Item "access => MODE"
.PD 0
.IP "body_delayed_type => \s-1CLASS\s0" 2
.IX Item "body_delayed_type => CLASS"
.IP "body_type => CLASS|CODE" 2
.IX Item "body_type => CLASS|CODE"
.IP "coerce_options => \s-1ARRAY\s0" 2
.IX Item "coerce_options => ARRAY"
.IP "create => \s-1BOOLEAN\s0" 2
.IX Item "create => BOOLEAN"
.IP "directory => \s-1DIRECTORY\s0" 2
.IX Item "directory => DIRECTORY"
.IP "extract => \s-1INTEGER\s0 | \s-1CODE\s0 | \s-1METHOD\s0 | '\s-1LAZY\s0'|'\s-1ALWAYS\s0'" 2
.IX Item "extract => INTEGER | CODE | METHOD | 'LAZY'|'ALWAYS'"
.IP "field_type => \s-1CLASS\s0" 2
.IX Item "field_type => CLASS"
.IP "fix_headers => \s-1BOOLEAN\s0" 2
.IX Item "fix_headers => BOOLEAN"
.IP "folder => \s-1FOLDERNAME\s0" 2
.IX Item "folder => FOLDERNAME"
.IP "folderdir => \s-1DIRECTORY\s0" 2
.IX Item "folderdir => DIRECTORY"
.IP "head_delayed_type => \s-1CLASS\s0" 2
.IX Item "head_delayed_type => CLASS"
.IP "head_type => \s-1CLASS\s0" 2
.IX Item "head_type => CLASS"
.IP "keep_dups => \s-1BOOLEAN\s0" 2
.IX Item "keep_dups => BOOLEAN"
.IP "lock_file => \s-1FILENAME\s0" 2
.IX Item "lock_file => FILENAME"
.IP "lock_timeout => \s-1SECONDS\s0" 2
.IX Item "lock_timeout => SECONDS"
.IP "lock_type => CLASS|STRING|ARRAY" 2
.IX Item "lock_type => CLASS|STRING|ARRAY"
.IP "lock_wait => \s-1SECONDS\s0" 2
.IX Item "lock_wait => SECONDS"
.IP "locker => \s-1OBJECT\s0" 2
.IX Item "locker => OBJECT"
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
.IP "manager => \s-1MANAGER\s0" 2
.IX Item "manager => MANAGER"
.IP "message_type => \s-1CLASS\s0" 2
.IX Item "message_type => CLASS"
.IP "multipart_type => \s-1CLASS\s0" 2
.IX Item "multipart_type => CLASS"
.IP "remove_when_empty => \s-1BOOLEAN\s0" 2
.IX Item "remove_when_empty => BOOLEAN"
.IP "save_on_exit => \s-1BOOLEAN\s0" 2
.IX Item "save_on_exit => BOOLEAN"
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
.IP "trusted => \s-1BOOLEAN\s0" 2
.IX Item "trusted => BOOLEAN"
.RE
.RS 4
.RE
.PD
.SS "The folder"
.IX Subsection "The folder"
Extends \*(L"The folder\*(R" in Mail::Box::Dir.
.ie n .IP "$obj\->\fBaddMessage\fR($message, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBaddMessage\fR($message, \f(CW%options\fR)" 4
.IX Item "$obj->addMessage($message, %options)"
Inherited, see \*(L"The folder\*(R" in Mail::Box
.ie n .IP "$obj\->\fBaddMessages\fR(@messages)" 4
.el .IP "\f(CW$obj\fR\->\fBaddMessages\fR(@messages)" 4
.IX Item "$obj->addMessages(@messages)"
Inherited, see \*(L"The folder\*(R" in Mail::Box
.IP "Mail::Box::Maildir\->\fBappendMessages\fR(%options)" 4
.IX Item "Mail::Box::Maildir->appendMessages(%options)"
Inherited, see \*(L"The folder\*(R" in Mail::Box
.ie n .IP "$obj\->\fBclose\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBclose\fR(%options)" 4
.IX Item "$obj->close(%options)"
Inherited, see \*(L"The folder\*(R" in Mail::Box
.ie n .IP "$obj\->\fBcopyTo\fR($folder, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBcopyTo\fR($folder, \f(CW%options\fR)" 4
.IX Item "$obj->copyTo($folder, %options)"
Inherited, see \*(L"The folder\*(R" in Mail::Box
.ie n .IP "$obj\->\fBdelete\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBdelete\fR(%options)" 4
.IX Item "$obj->delete(%options)"
Inherited, see \*(L"The folder\*(R" in Mail::Box
.ie n .IP "$obj\->\fBdirectory\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdirectory\fR()" 4
.IX Item "$obj->directory()"
Inherited, see \*(L"The folder\*(R" in Mail::Box::Dir
.ie n .IP "$obj\->\fBfolderdir\fR( [$directory] )" 4
.el .IP "\f(CW$obj\fR\->\fBfolderdir\fR( [$directory] )" 4
.IX Item "$obj->folderdir( [$directory] )"
Inherited, see \*(L"The folder\*(R" in Mail::Box
.ie n .IP "$obj\->\fBname\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBname\fR()" 4
.IX Item "$obj->name()"
Inherited, see \*(L"The folder\*(R" in Mail::Box
.ie n .IP "$obj\->\fBorganization\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBorganization\fR()" 4
.IX Item "$obj->organization()"
Inherited, see \*(L"The folder\*(R" in Mail::Box
.ie n .IP "$obj\->\fBsize\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBsize\fR()" 4
.IX Item "$obj->size()"
Inherited, see \*(L"The folder\*(R" in Mail::Box
.ie n .IP "$obj\->\fBtype\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtype\fR()" 4
.IX Item "$obj->type()"
Inherited, see \*(L"The folder\*(R" in Mail::Box
.ie n .IP "$obj\->\fBupdate\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBupdate\fR(%options)" 4
.IX Item "$obj->update(%options)"
Inherited, see \*(L"The folder\*(R" in Mail::Box
.ie n .IP "$obj\->\fBurl\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBurl\fR()" 4
.IX Item "$obj->url()"
Inherited, see \*(L"The folder\*(R" in Mail::Box
.SS "Folder flags"
.IX Subsection "Folder flags"
Extends \*(L"Folder flags\*(R" in Mail::Box::Dir.
.ie n .IP "$obj\->\fBaccess\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBaccess\fR()" 4
.IX Item "$obj->access()"
Inherited, see \*(L"Folder flags\*(R" in Mail::Box
.ie n .IP "$obj\->\fBisModified\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisModified\fR()" 4
.IX Item "$obj->isModified()"
Inherited, see \*(L"Folder flags\*(R" in Mail::Box
.ie n .IP "$obj\->\fBmodified\fR( [\s-1BOOLEAN\s0] )" 4
.el .IP "\f(CW$obj\fR\->\fBmodified\fR( [\s-1BOOLEAN\s0] )" 4
.IX Item "$obj->modified( [BOOLEAN] )"
Inherited, see \*(L"Folder flags\*(R" in Mail::Box
.ie n .IP "$obj\->\fBwritable\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwritable\fR()" 4
.IX Item "$obj->writable()"
Inherited, see \*(L"Folder flags\*(R" in Mail::Box
.SS "The messages"
.IX Subsection "The messages"
Extends \*(L"The messages\*(R" in Mail::Box::Dir.
.ie n .IP "$obj\->\fBcurrent\fR( [$number|$message|$message_id] )" 4
.el .IP "\f(CW$obj\fR\->\fBcurrent\fR( [$number|$message|$message_id] )" 4
.IX Item "$obj->current( [$number|$message|$message_id] )"
Inherited, see \*(L"The messages\*(R" in Mail::Box
.ie n .IP "$obj\->\fBfind\fR($message_id)" 4
.el .IP "\f(CW$obj\fR\->\fBfind\fR($message_id)" 4
.IX Item "$obj->find($message_id)"
Inherited, see \*(L"The messages\*(R" in Mail::Box
.ie n .IP "$obj\->\fBfindFirstLabeled\fR( $label, [\s-1BOOLEAN\s0, [$msgs]] )" 4
.el .IP "\f(CW$obj\fR\->\fBfindFirstLabeled\fR( \f(CW$label\fR, [\s-1BOOLEAN\s0, [$msgs]] )" 4
.IX Item "$obj->findFirstLabeled( $label, [BOOLEAN, [$msgs]] )"
Inherited, see \*(L"The messages\*(R" in Mail::Box
.ie n .IP "$obj\->\fBmessage\fR( $index, [$message] )" 4
.el .IP "\f(CW$obj\fR\->\fBmessage\fR( \f(CW$index\fR, [$message] )" 4
.IX Item "$obj->message( $index, [$message] )"
Inherited, see \*(L"The messages\*(R" in Mail::Box
.ie n .IP "$obj\->\fBmessageId\fR( $message_id, [$message] )" 4
.el .IP "\f(CW$obj\fR\->\fBmessageId\fR( \f(CW$message_id\fR, [$message] )" 4
.IX Item "$obj->messageId( $message_id, [$message] )"
Inherited, see \*(L"The messages\*(R" in Mail::Box
.ie n .IP "$obj\->\fBmessageIds\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBmessageIds\fR()" 4
.IX Item "$obj->messageIds()"
Inherited, see \*(L"The messages\*(R" in Mail::Box
.ie n .IP "$obj\->\fBmessages\fR( <'\s-1ALL\s0'|$range|'\s-1ACTIVE\s0'|'\s-1DELETED\s0'|$label| !$label|$filter> )" 4
.el .IP "\f(CW$obj\fR\->\fBmessages\fR( <'\s-1ALL\s0'|$range|'\s-1ACTIVE\s0'|'\s-1DELETED\s0'|$label| !$label|$filter> )" 4
.IX Item "$obj->messages( <'ALL'|$range|'ACTIVE'|'DELETED'|$label| !$label|$filter> )"
Inherited, see \*(L"The messages\*(R" in Mail::Box
.ie n .IP "$obj\->\fBnrMessages\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBnrMessages\fR(%options)" 4
.IX Item "$obj->nrMessages(%options)"
Inherited, see \*(L"The messages\*(R" in Mail::Box
.ie n .IP "$obj\->\fBscanForMessages\fR($message, $message_ids, $timespan, $window)" 4
.el .IP "\f(CW$obj\fR\->\fBscanForMessages\fR($message, \f(CW$message_ids\fR, \f(CW$timespan\fR, \f(CW$window\fR)" 4
.IX Item "$obj->scanForMessages($message, $message_ids, $timespan, $window)"
Inherited, see \*(L"The messages\*(R" in Mail::Box
.SS "Sub-folders"
.IX Subsection "Sub-folders"
Extends \*(L"Sub-folders\*(R" in Mail::Box::Dir.
.ie n .IP "$obj\->\fBlistSubFolders\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBlistSubFolders\fR(%options)" 4
.IX Item "$obj->listSubFolders(%options)"
.PD 0
.IP "Mail::Box::Maildir\->\fBlistSubFolders\fR(%options)" 4
.IX Item "Mail::Box::Maildir->listSubFolders(%options)"
.PD
Inherited, see \*(L"Sub-folders\*(R" in Mail::Box
.ie n .IP "$obj\->\fBnameOfSubFolder\fR( $subname, [$parentname] )" 4
.el .IP "\f(CW$obj\fR\->\fBnameOfSubFolder\fR( \f(CW$subname\fR, [$parentname] )" 4
.IX Item "$obj->nameOfSubFolder( $subname, [$parentname] )"
.PD 0
.ie n .IP "Mail::Box::Maildir\->\fBnameOfSubFolder\fR( $subname, [$parentname] )" 4
.el .IP "Mail::Box::Maildir\->\fBnameOfSubFolder\fR( \f(CW$subname\fR, [$parentname] )" 4
.IX Item "Mail::Box::Maildir->nameOfSubFolder( $subname, [$parentname] )"
.PD
Inherited, see \*(L"Sub-folders\*(R" in Mail::Box
.ie n .IP "$obj\->\fBopenRelatedFolder\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBopenRelatedFolder\fR(%options)" 4
.IX Item "$obj->openRelatedFolder(%options)"
Inherited, see \*(L"Sub-folders\*(R" in Mail::Box
.ie n .IP "$obj\->\fBopenSubFolder\fR($subname, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBopenSubFolder\fR($subname, \f(CW%options\fR)" 4
.IX Item "$obj->openSubFolder($subname, %options)"
Inherited, see \*(L"Sub-folders\*(R" in Mail::Box
.ie n .IP "$obj\->\fBtopFolderWithMessages\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtopFolderWithMessages\fR()" 4
.IX Item "$obj->topFolderWithMessages()"
.PD 0
.IP "Mail::Box::Maildir\->\fBtopFolderWithMessages\fR()" 4
.IX Item "Mail::Box::Maildir->topFolderWithMessages()"
.PD
Inherited, see \*(L"Sub-folders\*(R" in Mail::Box
.SS "Internals"
.IX Subsection "Internals"
Extends \*(L"Internals\*(R" in Mail::Box::Dir.
.ie n .IP "$obj\->\fBacceptMessages\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBacceptMessages\fR()" 4
.IX Item "$obj->acceptMessages()"
Accept all messages which are waiting in the \f(CW\*(C`new\*(C'\fR directory to be
moved to the \f(CW\*(C`cur\*(C'\fR directory.  This will not rescan the directory
for newly arrived messages, because that's a task for \fIupdate()\fR.
.IP "Mail::Box::Maildir\->\fBappendMessage\fR(%options)" 4
.IX Item "Mail::Box::Maildir->appendMessage(%options)"
.PD 0
.ie n .IP "$obj\->\fBcoerce\fR($message, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBcoerce\fR($message, \f(CW%options\fR)" 4
.IX Item "$obj->coerce($message, %options)"
.ie n .IP "$obj\->\fBcreate\fR($foldername, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBcreate\fR($foldername, \f(CW%options\fR)" 4
.IX Item "$obj->create($foldername, %options)"
.ie n .IP "Mail::Box::Maildir\->\fBcreate\fR($foldername, %options)" 4
.el .IP "Mail::Box::Maildir\->\fBcreate\fR($foldername, \f(CW%options\fR)" 4
.IX Item "Mail::Box::Maildir->create($foldername, %options)"
.PD
.Vb 2
\& \-Option   \-\-Defined in\-\-Default
\&  folderdir  Mail::Box   undef
.Ve
.RS 4
.IP "folderdir => \s-1DIRECTORY\s0" 2
.IX Item "folderdir => DIRECTORY"
.RE
.RS 4
.RE
.PD 0
.ie n .IP "$obj\->\fBcreateDirs\fR($folderdir)" 4
.el .IP "\f(CW$obj\fR\->\fBcreateDirs\fR($folderdir)" 4
.IX Item "$obj->createDirs($folderdir)"
.IP "Mail::Box::Maildir\->\fBcreateDirs\fR($folderdir)" 4
.IX Item "Mail::Box::Maildir->createDirs($folderdir)"
.PD
The \f(CW$folderdir\fR contains the absolute path of the location where the
messages are kept.  Maildir folders contain a \f(CW\*(C`tmp\*(C'\fR, \f(CW\*(C`new\*(C'\fR, and
\&\f(CW\*(C`cur\*(C'\fR sub-directory within that folder directory as well.  This
method will ensure that all directories exist.
Returns false on failure.
.ie n .IP "$obj\->\fBdetermineBodyType\fR($message, $head)" 4
.el .IP "\f(CW$obj\fR\->\fBdetermineBodyType\fR($message, \f(CW$head\fR)" 4
.IX Item "$obj->determineBodyType($message, $head)"
Inherited, see \*(L"Internals\*(R" in Mail::Box
.ie n .IP "$obj\->\fBfolderIsEmpty\fR($folderdir)" 4
.el .IP "\f(CW$obj\fR\->\fBfolderIsEmpty\fR($folderdir)" 4
.IX Item "$obj->folderIsEmpty($folderdir)"
.PD 0
.IP "Mail::Box::Maildir\->\fBfolderIsEmpty\fR($folderdir)" 4
.IX Item "Mail::Box::Maildir->folderIsEmpty($folderdir)"
.PD
Checks whether the folder whose directory is specified as absolute \f(CW$folderdir\fR
is empty or not.  A folder is empty when the \f(CW\*(C`tmp\*(C'\fR, \f(CW\*(C`new\*(C'\fR, and \f(CW\*(C`cur\*(C'\fR
subdirectories are empty and some files which are left there by application
programs.  The maildir spec explicitly states: \f(CW\*(C`.qmail\*(C'\fR, \f(CW\*(C`bulletintime\*(C'\fR,
\&\f(CW\*(C`bulletinlock\*(C'\fR and \f(CW\*(C`seriallock\*(C'\fR.  If any other files are found, the
directory is considered not-empty.
.ie n .IP "$obj\->\fBfolderToDirectory\fR($foldername, $folderdir)" 4
.el .IP "\f(CW$obj\fR\->\fBfolderToDirectory\fR($foldername, \f(CW$folderdir\fR)" 4
.IX Item "$obj->folderToDirectory($foldername, $folderdir)"
Inherited, see \*(L"Internals\*(R" in Mail::Box::Dir
.ie n .IP "Mail::Box::Maildir\->\fBfoundIn\fR( [$foldername], %options )" 4
.el .IP "Mail::Box::Maildir\->\fBfoundIn\fR( [$foldername], \f(CW%options\fR )" 4
.IX Item "Mail::Box::Maildir->foundIn( [$foldername], %options )"
Inherited, see \*(L"Internals\*(R" in Mail::Box
.ie n .IP "$obj\->\fBlineSeparator\fR( [<STRING|'\s-1CR\s0'|'\s-1LF\s0'|'\s-1CRLF\s0'>] )" 4
.el .IP "\f(CW$obj\fR\->\fBlineSeparator\fR( [<STRING|'\s-1CR\s0'|'\s-1LF\s0'|'\s-1CRLF\s0'>] )" 4
.IX Item "$obj->lineSeparator( [<STRING|'CR'|'LF'|'CRLF'>] )"
Inherited, see \*(L"Internals\*(R" in Mail::Box
.ie n .IP "$obj\->\fBlocker\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlocker\fR()" 4
.IX Item "$obj->locker()"
Inherited, see \*(L"Internals\*(R" in Mail::Box
.ie n .IP "$obj\->\fBread\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBread\fR(%options)" 4
.IX Item "$obj->read(%options)"
Inherited, see \*(L"Internals\*(R" in Mail::Box
.ie n .IP "$obj\->\fBreadMessageFilenames\fR($directory)" 4
.el .IP "\f(CW$obj\fR\->\fBreadMessageFilenames\fR($directory)" 4
.IX Item "$obj->readMessageFilenames($directory)"
Inherited, see \*(L"Internals\*(R" in Mail::Box::Dir
.ie n .IP "$obj\->\fBreadMessages\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBreadMessages\fR(%options)" 4
.IX Item "$obj->readMessages(%options)"
Inherited, see \*(L"Internals\*(R" in Mail::Box
.ie n .IP "$obj\->\fBstoreMessage\fR($message)" 4
.el .IP "\f(CW$obj\fR\->\fBstoreMessage\fR($message)" 4
.IX Item "$obj->storeMessage($message)"
Inherited, see \*(L"Internals\*(R" in Mail::Box
.ie n .IP "$obj\->\fBtoBeThreaded\fR($messages)" 4
.el .IP "\f(CW$obj\fR\->\fBtoBeThreaded\fR($messages)" 4
.IX Item "$obj->toBeThreaded($messages)"
Inherited, see \*(L"Internals\*(R" in Mail::Box
.ie n .IP "$obj\->\fBtoBeUnthreaded\fR($messages)" 4
.el .IP "\f(CW$obj\fR\->\fBtoBeUnthreaded\fR($messages)" 4
.IX Item "$obj->toBeUnthreaded($messages)"
Inherited, see \*(L"Internals\*(R" in Mail::Box
.ie n .IP "$obj\->\fBupdateMessages\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBupdateMessages\fR(%options)" 4
.IX Item "$obj->updateMessages(%options)"
Inherited, see \*(L"Internals\*(R" in Mail::Box
.ie n .IP "$obj\->\fBwrite\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBwrite\fR(%options)" 4
.IX Item "$obj->write(%options)"
Inherited, see \*(L"Internals\*(R" in Mail::Box
.ie n .IP "$obj\->\fBwriteMessages\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBwriteMessages\fR(%options)" 4
.IX Item "$obj->writeMessages(%options)"
Inherited, see \*(L"Internals\*(R" in Mail::Box
.SS "Other methods"
.IX Subsection "Other methods"
Extends \*(L"Other methods\*(R" in Mail::Box::Dir.
.ie n .IP "$obj\->\fBtimespan2seconds\fR($time)" 4
.el .IP "\f(CW$obj\fR\->\fBtimespan2seconds\fR($time)" 4
.IX Item "$obj->timespan2seconds($time)"
.PD 0
.IP "Mail::Box::Maildir\->\fBtimespan2seconds\fR($time)" 4
.IX Item "Mail::Box::Maildir->timespan2seconds($time)"
.PD
Inherited, see \*(L"Other methods\*(R" in Mail::Box
.SS "Error handling"
.IX Subsection "Error handling"
Extends \*(L"Error handling\*(R" in Mail::Box::Dir.
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR($object)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR($object)" 4
.IX Item "$obj->addReport($object)"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "$obj->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD 0
.ie n .IP "Mail::Box::Maildir\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "Mail::Box::Maildir\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "Mail::Box::Maildir->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR( [$level, [$strings]] )" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "$obj->log( [$level, [$strings]] )"
.PD 0
.IP "Mail::Box::Maildir\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "Mail::Box::Maildir->log( [$level, [$strings]] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR($level)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR($level)" 4
.IX Item "$obj->logPriority($level)"
.PD 0
.IP "Mail::Box::Maildir\->\fBlogPriority\fR($level)" 4
.IX Item "Mail::Box::Maildir->logPriority($level)"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR( [$level] )" 4
.IX Item "$obj->report( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR( [$level] )" 4
.IX Item "$obj->reportAll( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR( [$level] )" 4
.IX Item "$obj->trace( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
Extends \*(L"Cleanup\*(R" in Mail::Box::Dir.
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
Inherited, see \*(L"Cleanup\*(R" in Mail::Box
.SH "DETAILS"
.IX Header "DETAILS"
The explanation is complicated, but for normal use you should bother
yourself with all details.
.PP
Extends \*(L"\s-1DETAILS\s0\*(R" in Mail::Box::Dir.
.SS "Different kinds of folders"
.IX Subsection "Different kinds of folders"
Extends \*(L"Different kinds of folders\*(R" in Mail::Box::Dir.
.SS "Available folder types"
.IX Subsection "Available folder types"
Extends \*(L"Available folder types\*(R" in Mail::Box::Dir.
.SS "Folder class implementation"
.IX Subsection "Folder class implementation"
Extends \*(L"Folder class implementation\*(R" in Mail::Box::Dir.
.SS "How \s-1MAILDIR\s0 folders work"
.IX Subsection "How MAILDIR folders work"
Maildir-type folders use a directory to store the messages of one folder.
Each message is stored in a separate file.  This seems useful, because
changes in a folder change only a few of these small files, in contrast with
file-based folders where changes in a folder cause rewrites of huge
folder-files.
.PP
However, Maildir based folders perform very bad if you need header information
of all messages.  For instance, if you want to have full knowledge about
all message-threads (see Mail::Box::Thread::Manager) in the folder, it
requires to read all header lines in all message files.  And usually, reading
your messages as threads is desired.  Maildir maintains a tiny amount
of info visible in the filename, which may make it perform just a little
bit faster than \s-1MH\s0.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Cannot append Maildir message in $new to folder $self." 4
.el .IP "Error: Cannot append Maildir message in \f(CW$new\fR to folder \f(CW$self\fR." 4
.IX Item "Error: Cannot append Maildir message in $new to folder $self."
The message (or messages) could not be stored in the right directories
for the Maildir folder.
.ie n .IP "Error: Cannot create Maildir directory $dir: $!" 4
.el .IP "Error: Cannot create Maildir directory \f(CW$dir:\fR $!" 4
.IX Item "Error: Cannot create Maildir directory $dir: $!"
A Maildir folder is represented by a directory, with some sub-directories.  The
top folder directory could not be created for the reason indicated.
.ie n .IP "Error: Cannot create Maildir folder $name." 4
.el .IP "Error: Cannot create Maildir folder \f(CW$name\fR." 4
.IX Item "Error: Cannot create Maildir folder $name."
One or more of the directories required to administer a Maildir folder
could not be created.
.ie n .IP "Error: Cannot create Maildir message file $new." 4
.el .IP "Error: Cannot create Maildir message file \f(CW$new\fR." 4
.IX Item "Error: Cannot create Maildir message file $new."
A message is converted from some other message format into a Maildir format
by writing it to a file with a name which contains the status flags of the
message.  Apparently, creating this file failed.
.ie n .IP "Error: Cannot create Maildir subdir $dir: $!" 4
.el .IP "Error: Cannot create Maildir subdir \f(CW$dir:\fR $!" 4
.IX Item "Error: Cannot create Maildir subdir $dir: $!"
Each Maildir folder has three sub-directories for administration: \f(CW\*(C`new\*(C'\fR,
\&\f(CW\*(C`tmp\*(C'\fR, and \f(CW\*(C`cur\*(C'\fR.  The mentioned directory could not be created for
the indicated reason.
.ie n .IP "Warning: Changes not written to read-only folder $self." 4
.el .IP "Warning: Changes not written to read-only folder \f(CW$self\fR." 4
.IX Item "Warning: Changes not written to read-only folder $self."
You have opened the folder read-only \-\-which is the default set
by new(access)\-\-, made modifications, and now want to close it.
Set close(force) if you want to overrule the access mode, or close
the folder with close(write) set to \f(CW\*(C`NEVER\*(C'\fR.
.IP "Error: Copying failed for one message." 4
.IX Item "Error: Copying failed for one message."
For some reason, for instance disc full, removed by external process, or
read-protection, it is impossible to copy one of the messages.  Copying will
proceed for the other messages.
.ie n .IP "Error: Destination folder $name is not writable." 4
.el .IP "Error: Destination folder \f(CW$name\fR is not writable." 4
.IX Item "Error: Destination folder $name is not writable."
The folder where the messages are copied to is not opened with write
access (see new(access)).  This has no relation with write permission
to the folder which is controled by your operating system.
.ie n .IP "Warning: Different messages with id $msgid" 4
.el .IP "Warning: Different messages with id \f(CW$msgid\fR" 4
.IX Item "Warning: Different messages with id $msgid"
The message id is discovered more than once within the same folder, but the
content of the message seems to be different.  This should not be possible:
each message must be unique.
.ie n .IP "Error: Folder $name is opened read-only" 4
.el .IP "Error: Folder \f(CW$name\fR is opened read-only" 4
.IX Item "Error: Folder $name is opened read-only"
You can not write to this folder unless you have opened the folder to
write or append with new(access), or the \f(CW\*(C`force\*(C'\fR option is set true.
.ie n .IP "Error: Folder $name not deleted: not writable." 4
.el .IP "Error: Folder \f(CW$name\fR not deleted: not writable." 4
.IX Item "Error: Folder $name not deleted: not writable."
The folder must be opened with write access via new(access), otherwise
removing it will be refused.  So, you may have write-access according to
the operating system, but that will not automatically mean that this
\&\f(CW\*(C`delete\*(C'\fR method permits you to.  The reverse remark is valid as well.
.IP "Error: Invalid timespan '$timespan' specified." 4
.IX Item "Error: Invalid timespan '$timespan' specified."
The string does not follow the strict rules of the time span syntax which
is permitted as parameter.
.IP "Warning: Message-id '$msgid' does not contain a domain." 4
.IX Item "Warning: Message-id '$msgid' does not contain a domain."
According to the RFCs, message-ids need to contain a unique random part,
then an \f(CW\*(C`@\*(C'\fR, and then a domain name.  This is made to avoid the creation
of two messages with the same id.  The warning emerges when the \f(CW\*(C`@\*(C'\fR is
missing from the string.
.ie n .IP "Error: Package $package does not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR does not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package does not implement $method."
Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.
.ie n .IP "Error: Unable to create subfolder $name of $folder." 4
.el .IP "Error: Unable to create subfolder \f(CW$name\fR of \f(CW$folder\fR." 4
.IX Item "Error: Unable to create subfolder $name of $folder."
The copy includes the subfolders, but for some reason it was not possible
to copy one of these.  Copying will proceed for all other sub-folders.
.ie n .IP "Error: Writing folder $name failed" 4
.el .IP "Error: Writing folder \f(CW$name\fR failed" 4
.IX Item "Error: Writing folder $name failed"
For some reason (you probably got more error messages about this problem)
it is impossible to write the folder, although you should because there
were changes made.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.117,
built on August 24, 2014. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2014 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
