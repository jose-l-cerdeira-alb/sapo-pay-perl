.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "AnyEvent::HTTP::Request 3"
.TH AnyEvent::HTTP::Request 3 "2013-06-13" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
AnyEvent::HTTP::Request \- HTTP Request object for AnyEvent::HTTP
.SH "VERSION"
.IX Header "VERSION"
version 0.302
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&  # parses the same argument list as AnyEvent::HTTP::http_request
\&  my $req = AnyEvent::HTTP::Request\->new(
\&    POST => $uri,
\&    body => $body,
\&    headers => \e%headers,
\&    %params,
\&    sub { ... }
\&  );
\&
\&  # provides introspection
\&  print $req\->header(\*(Aquser\-agent\*(Aq);
\&  print $req\->uri;
\&
\&  # can be upgraded to an HTTP::Request object
\&  my $http_req = $req\->to_http_message;
\&
\&  # or submitted via AnyEvent::HTTP::http_request
\&  $req\->send();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class creates a lightweight object
to represent an \s-1HTTP\s0 request as used by AnyEvent::HTTP.
.PP
It was created to provide simple, clear test code
for parsing the parameters passed to \*(L"http_request\*(R" in AnyEvent::HTTP.
.PP
Instead of code that looks something like this:
.PP
.Vb 5
\&  is $args[0],       \*(AqPOST\*(Aq,              \*(Aqrequest method\*(Aq;
\&  is $args[1],       \*(Aqhttp://some/where\*(Aq, \*(Aqrequest uri\*(Aq;
\&  is ref($args[\-1]), \*(AqCODE\*(Aq,              \*(Aqhttp_request callback\*(Aq;
\&  is_deeply { @args[ 2 .. $#args \- 1 ] }\->{headers},
\&    \e%expected_headers, \*(Aqrequest headers\*(Aq;
.Ve
.PP
You can write clearer, simpler code like this:
.PP
.Vb 1
\&  my $req = AnyEvent::HTTP::Request\->new(@args);
\&
\&  is $req\->method,  \*(AqPOST\*(Aq,              \*(Aqrequest method\*(Aq;
\&  is $req\->uri,     \*(Aqhttp://some/where\*(Aq, \*(Aqrequest uri\*(Aq;
\&  is ref($req\->cb), \*(AqCODE\*(Aq,              \*(Aqhttp_request callback\*(Aq;
\&  is_deeply $req\->headers, \e%expected_headers, \*(Aqrequest headers\*(Aq;
.Ve
.PP
It's a little less weird, and easier to maintain (and do again).
.PP
This class also allows you to build an object by passing a hashref
of named parameters in case you'd prefer that.
You can then call \*(L"send\*(R" to actually make the request
(via \*(L"http_request\*(R" in AnyEvent::HTTP),
or \*(L"args\*(R" to get the list of arguments the object would pass.
.PP
It can also be converted from or to
the more featureful
HTTP::Request.
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.SS "new"
.IX Subsection "new"
Accepts the same argument list as
\&\*(L"http_request\*(R" in AnyEvent::HTTP
(see \*(L"parse_args\*(R"):
.PP
.Vb 7
\&  AnyEvent::HTTP::Request\->new(
\&    $method => $uri,
\&    body    => $body,
\&    headers => \e%headers,
\&    %params,
\&    sub { ... }
\&  );
.Ve
.PP
Alternatively accepts an instance of
HTTP::Request
with an optional hashref of extra attributes
(see \*(L"from_http_message\*(R"):
.PP
.Vb 7
\&  AnyEvent::HTTP::Request\->new(
\&    HTTP::Request\->new( $method, $uri, $headers, $body ),
\&    {
\&      cb => sub { ... },
\&      params => \e%params,
\&    }
\&  );
.Ve
.PP
Also accepts a single hashref of named attributes
(see \*(L"\s-1ATTRIBUTES\s0\*(R"):
.PP
.Vb 8
\&  AnyEvent::HTTP::Request\->new({
\&    method  => \*(AqPOST\*(Aq,
\&    uri     => \*(Aqhttp://example.com\*(Aq,
\&    cb      => sub { ... },
\&    params  => \e%params,
\&    headers => \e%headers,
\&    body    => $body,
\&  });
.Ve
.SS "parse_args"
.IX Subsection "parse_args"
Called by the constructor
to parse the argument list
for
\&\*(L"http_request\*(R" in AnyEvent::HTTP
and return a hashref which will be the basis for the object.
.PP
The list should look like
\&\f(CW\*(C`($method, $uri, %optional, \e&callback)\*(C'\fR
where the \f(CW%optional\fR hash may include \f(CW\*(C`body\*(C'\fR, \f(CW\*(C`headers\*(C'\fR,
and any of the other options accepted by
\&\*(L"http_request\*(R" in AnyEvent::HTTP
(which will become \*(L"params\*(R").
.SS "from_http_message"
.IX Subsection "from_http_message"
Called by the constructor
when \*(L"new\*(R" is passed an instance of HTTP::Request.
.PP
Since only \f(CW\*(C`method\*(C'\fR, \f(CW\*(C`uri\*(C'\fR, \f(CW\*(C`headers\*(C'\fR, and \f(CW\*(C`body\*(C'\fR
can be determined from HTTP::Request,
a hashref can be passed as a second parameter
containing \f(CW\*(C`cb\*(C'\fR and \f(CW\*(C`params\*(C'\fR.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "method"
.IX Subsection "method"
Request method (\s-1GET\s0, \s-1POST\s0, etc)
(first argument to \*(L"http_request\*(R" in AnyEvent::HTTP)
.SS "uri"
.IX Subsection "uri"
Request uri (string)
(second argument to \*(L"http_request\*(R" in AnyEvent::HTTP)
.SS "body"
.IX Subsection "body"
Request content body
.SS "content"
.IX Subsection "content"
Alias for \*(L"body\*(R"
.SS "headers"
.IX Subsection "headers"
A hashref of the \s-1HTTP\s0 request headers
.SS "params"
.IX Subsection "params"
A hashref of the function parameters
(optional middle (key => value) arguments to \*(L"http_request\*(R" in AnyEvent::HTTP)
.PP
\&\fBNote\fR that these are connection params like
\&\f(CW\*(C`persistent\*(C'\fR and \f(CW\*(C`timeout\*(C'\fR,
not query params like in \f(CW\*(C`CGI\*(C'\fR.
.PP
\&\fBNote\fR that \f(CW\*(C`body\*(C'\fR and \f(CW\*(C`headers\*(C'\fR will not be included.
This hashref is essentially \fIuser-agent\fR parameters.
.SS "cb"
.IX Subsection "cb"
Callback subroutine reference
(last argument to \*(L"http_request\*(R" in AnyEvent::HTTP)
.PP
\&\fBNote\fR: For consistency with the other attributes
(and to avoid confusion with other modules)
this is a read-only accessor and will \f(CW\*(C`croak\*(C'\fR if passed any arguments.
.PP
If you intend to execute the callback (to simulate a response)
you can dereference the return value:
.PP
.Vb 1
\&  $req\->cb\->($body, $headers);
.Ve
.PP
or use \*(L"respond_with\*(R".
.SH "METHODS"
.IX Header "METHODS"
.SS "args"
.IX Subsection "args"
Returns a list of arguments that can be passed to
\&\*(L"http_request\*(R" in AnyEvent::HTTP
(beware the sub's prototype, though).
.SS "respond_with"
.IX Subsection "respond_with"
.Vb 3
\&  $req\->respond_with($body, \e%headers);
\&  $req\->respond_with(AnyEvent::HTTP::Response\->new(@args));
\&  $req\->respond_with(HTTP::Response\->new($code, $message, \e@headers, $body));
.Ve
.PP
Simulate a response by calling \*(L"cb\*(R".
This method is mostly useful for testing,
but then again so is the whole module.
.PP
For convenience this method can accept an instance of
AnyEvent::HTTP::Response
or any list of arguments that can be passed to
\&\*(L"new\*(R" in AnyEvent::HTTP::Response.
.SS "send"
.IX Subsection "send"
Actually submit the request by passing \*(L"args\*(R"
to \*(L"http_request\*(R" in AnyEvent::HTTP
.SS "to_http_message"
.IX Subsection "to_http_message"
Returns an instance of HTTP::Request
to provide additional functionality.
.PP
\&\fBNote\fR that \*(L"cb\*(R" and \*(L"params\*(R"
will not be represented in the HTTP::Request object
(since they are for the user-agent and not the request).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
AnyEvent::HTTP
.IP "\(bu" 4
AnyEvent::HTTP::Message (base class)
.IP "\(bu" 4
HTTP::Request \- More featureful object
.SH "AUTHOR"
.IX Header "AUTHOR"
Randy Stauner <rwstauner@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2012 by Randy Stauner.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
