.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Server::IMAP4::Fetch 3"
.TH Mail::Server::IMAP4::Fetch 3 "2014-08-24" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Server::IMAP4::Fetch \- message info for IMAP protocol speed\-up
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\& my $imap = Mail::Server::IMAP4::Fetch\->new($msg);
\& print $imap\->fetchBody(1);   # for FETCH BODYSTRUCTURE
\& print $imap\->fetchBody;      # for FETCH BODY
\& print $imap\->fetchEnvelope;  # for FETCH ENVELOPE
\& print $imap\->fetchSize;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Create a new object hierarchy, which contains information to capture
the most important details about the message.  The object can be used
to speed-up IMAP-server implementations, as Mail::Box::Netzwert.
.PP
The object used here is a simplified representation of a
Mail::Box::Message object.  It does not maintain headers and does
not refer to the folder.  It only works with messages stored in a file.
Therefore, this object can be frozen by Storable if you want to.
.SH "METHODS"
.IX Header "METHODS"
.SS "Constructors"
.IX Subsection "Constructors"
.ie n .IP "Mail::Server::IMAP4::Fetch\->\fBnew\fR( <$message|$part>, %options )" 4
.el .IP "Mail::Server::IMAP4::Fetch\->\fBnew\fR( <$message|$part>, \f(CW%options\fR )" 4
.IX Item "Mail::Server::IMAP4::Fetch->new( <$message|$part>, %options )"
.Vb 2
\& \-Option      \-\-Default
\&  md5checksums  0
.Ve
.RS 4
.IP "md5checksums => \s-1BOOLEAN\s0" 2
.IX Item "md5checksums => BOOLEAN"
.RE
.RS 4
.RE
.SS "Attributes"
.IX Subsection "Attributes"
.PD 0
.ie n .IP "$obj\->\fBbodyLocation\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBbodyLocation\fR()" 4
.IX Item "$obj->bodyLocation()"
.ie n .IP "$obj\->\fBheadLocation\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBheadLocation\fR()" 4
.IX Item "$obj->headLocation()"
.ie n .IP "$obj\->\fBpartLocation\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBpartLocation\fR()" 4
.IX Item "$obj->partLocation()"
.PD
.SS "\s-1IMAP\s0 Commands"
.IX Subsection "IMAP Commands"
.ie n .IP "$obj\->\fBfetchBody\fR($extended)" 4
.el .IP "\f(CW$obj\fR\->\fBfetchBody\fR($extended)" 4
.IX Item "$obj->fetchBody($extended)"
Returns one string, representing the message's structure as defined by
the \s-1IMAP\s0 protocol.  The boolean argument indicates whether you like to
have the \f(CW$extended\fR information, as the imap command '\s-1FETCH\s0 \s-1BODYSTRUCTURE\s0'
defines or the limited information of '\s-1FETCH\s0 \s-1BODY\s0'.
.ie n .IP "$obj\->\fBfetchEnvelope\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfetchEnvelope\fR()" 4
.IX Item "$obj->fetchEnvelope()"
Returns a string representation of some header information.
.ie n .IP "$obj\->\fBfetchSize\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfetchSize\fR()" 4
.IX Item "$obj->fetchSize()"
Returns the size of the message body.
.ie n .IP "$obj\->\fBpart\fR( [$partnr] )" 4
.el .IP "\f(CW$obj\fR\->\fBpart\fR( [$partnr] )" 4
.IX Item "$obj->part( [$partnr] )"
The partnummer is a list of dot-separated positive integers, numbering
(nested) parts in multi-part message bodies.  By default, the info of
the main message is returned.
.Sp
example:
.Sp
.Vb 2
\& my $partinfo = $msg\->info\->part(\*(Aq1.2.1\*(Aq);
\& print $msg\->info\->part(\*(Aq3.3\*(Aq)\->fetchBody;
.Ve
.ie n .IP "$obj\->\fBprintStructure\fR( [<$fh|undef>, [$number]] )" 4
.el .IP "\f(CW$obj\fR\->\fBprintStructure\fR( [<$fh|undef>, [$number]] )" 4
.IX Item "$obj->printStructure( [<$fh|undef>, [$number]] )"
Print the structure of the fetch data to the specified \f(CW$fh\fR or the
selected filehandle.  When explicitly \f(CW\*(C`undef\*(C'\fR is specified as handle,
then the output will be returned as string.  
Only a limited set of the information is displayed.
.Sp
example:
.Sp
.Vb 4
\& my $imap = ...;
\& $imap\->printStructure(\e*OUTPUT);
\& $imap\->printStructure;
\& my $struct = $imap\->printStructure(undef);
.Ve
.SS "Internals"
.IX Subsection "Internals"
.SH "DETAILS"
.IX Header "DETAILS"
See
.ie n .IP "\s-1RFC2060:\s0 ""Internet Message Access Protocol IMAP4v1"" section 7.4.2" 4
.el .IP "\s-1RFC2060:\s0 ``Internet Message Access Protocol IMAP4v1'' section 7.4.2" 4
.IX Item "RFC2060: Internet Message Access Protocol IMAP4v1 section 7.4.2"
.PD 0
.ie n .IP "\s-1RFC2045:\s0 ""\s-1MIME\s0 Part One: Format of Internet Message Bodies""." 4
.el .IP "\s-1RFC2045:\s0 ``\s-1MIME\s0 Part One: Format of Internet Message Bodies''." 4
.IX Item "RFC2045: MIME Part One: Format of Internet Message Bodies."
.PD
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.117,
built on August 24, 2014. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2014 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
