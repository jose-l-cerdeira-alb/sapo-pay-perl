.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Net::SFTP::Foreign::Compat 3"
.TH Net::SFTP::Foreign::Compat 3 "2019-10-04" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::SFTP::Foreign::Compat \- Adapter for Net::SFTP compatibility
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    use Net::SFTP::Foreign::Compat;
\&    my $sftp = Net::SFTP::Foreign::Compat\->new($host);
\&    $sftp\->get("foo", "bar");
\&    $sftp\->put("bar", "baz");
\&
\&    use Net::SFTP::Foreign::Compat \*(Aq:supplant\*(Aq;
\&    my $sftp = Net::SFTP\->new($host);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package is a wrapper around Net::SFTP::Foreign that provides
an \s-1API\s0 (mostly) compatible with that of Net::SFTP.
.PP
Methods on this package are identical to those in Net::SFTP except
that Net::SFTP::Foreign::Attributes::Compat objects have to be used
instead of Net::SFTP::Attributes.
.PP
If the \f(CW\*(C`:supplant\*(C'\fR tag is used, this module installs also wrappers on
the \f(CW\*(C`Net::SFTP\*(C'\fR and Net::SFTP::Attributes packages so no other
parts of the program have to modified in order to move from Net::SFTP
to Net::SFTP::Foreign.
.SS "Setting defaults"
.IX Subsection "Setting defaults"
The hash \f(CW%Net::SFTP::Foreign::DEFAULTS\fR can be used to set default
values for Net::SFTP::Foreign methods called under the hood and
otherwise not accessible through the Net::SFTP \s-1API.\s0
.PP
The entries currently supported are:
.IP "new => \e@opts" 4
.IX Item "new => @opts"
extra options passed to Net::SFTP::Foreign constructor.
.IP "get => \e@opts" 4
.IX Item "get => @opts"
extra options passed to Net::SFTP::Foreign::get method.
.IP "put => \e@opts" 4
.IX Item "put => @opts"
extra options passed to Net::SFTP::Foreign::put method.
.IP "ls  => \e@opts" 4
.IX Item "ls => @opts"
extra options passed to Net::SFTP::Foreign::ls method.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2006\-2008, 2011 Salvador Fandi√±o
.PP
All rights reserved.  This program is free software; you can
redistribute it and/or modify it under the same terms as Perl itself.
