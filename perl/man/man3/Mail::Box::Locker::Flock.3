.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Box::Locker::Flock 3"
.TH Mail::Box::Locker::Flock 3 "2019-10-04" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Box::Locker::Flock \- lock a folder using kernel file\-locking
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 3
\& Mail::Box::Locker::Flock
\&   is a Mail::Box::Locker
\&   is a Mail::Reporter
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& See Mail::Box::Locker
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`::Flock\*(C'\fR object locks the folder by creating an exclusive lock on
the file using the kernel's \f(CW\*(C`flock\*(C'\fR facilities.  This lock is created
on a separate file-handle to the folder file, so not the handle which
is reading.
.PP
File locking does not work in some situations, for instance for
operating systems do not support \f(CW\*(C`flock\*(C'\fR.
.PP
Extends \*(L"\s-1DESCRIPTION\*(R"\s0 in Mail::Box::Locker.
.SH "METHODS"
.IX Header "METHODS"
Extends \*(L"\s-1METHODS\*(R"\s0 in Mail::Box::Locker.
.SS "Constructors"
.IX Subsection "Constructors"
Extends \*(L"Constructors\*(R" in Mail::Box::Locker.
.IP "Mail::Box::Locker::Flock\->\fBnew\fR(%options)" 4
.IX Item "Mail::Box::Locker::Flock->new(%options)"
.Vb 8
\& \-Option \-\-Defined in       \-\-Default
\&  expires  Mail::Box::Locker  1 hour
\&  file     Mail::Box::Locker  undef
\&  folder   Mail::Box::Locker  <undef>
\&  log      Mail::Reporter     \*(AqWARNINGS\*(Aq
\&  method   Mail::Box::Locker  \*(AqFLOCK\*(Aq
\&  timeout  Mail::Box::Locker  10
\&  trace    Mail::Reporter     \*(AqWARNINGS\*(Aq
.Ve
.RS 4
.IP "expires => \s-1SECONDS\s0" 2
.IX Item "expires => SECONDS"
.PD 0
.IP "file => \s-1FILENAME\s0" 2
.IX Item "file => FILENAME"
.IP "folder => \s-1FOLDER\s0" 2
.IX Item "folder => FOLDER"
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
.IP "method => STRING|CLASS|ARRAY" 2
.IX Item "method => STRING|CLASS|ARRAY"
.IP "timeout => SECONDS|'\s-1NOTIMEOUT\s0'" 2
.IX Item "timeout => SECONDS|'NOTIMEOUT'"
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
.RE
.RS 4
.RE
.PD
.SS "Attributes"
.IX Subsection "Attributes"
Extends \*(L"Attributes\*(R" in Mail::Box::Locker.
.ie n .IP "$obj\->\fBexpires\fR( [\s-1SECONDS\s0] )" 4
.el .IP "\f(CW$obj\fR\->\fBexpires\fR( [\s-1SECONDS\s0] )" 4
.IX Item "$obj->expires( [SECONDS] )"
Inherited, see \*(L"Attributes\*(R" in Mail::Box::Locker
.ie n .IP "$obj\->\fBtimeout\fR( [\s-1SECONDS\s0] )" 4
.el .IP "\f(CW$obj\fR\->\fBtimeout\fR( [\s-1SECONDS\s0] )" 4
.IX Item "$obj->timeout( [SECONDS] )"
Inherited, see \*(L"Attributes\*(R" in Mail::Box::Locker
.SS "The Locker"
.IX Subsection "The Locker"
Extends \*(L"The Locker\*(R" in Mail::Box::Locker.
.ie n .IP "$obj\->\fBfilename\fR( [$filename] )" 4
.el .IP "\f(CW$obj\fR\->\fBfilename\fR( [$filename] )" 4
.IX Item "$obj->filename( [$filename] )"
Inherited, see \*(L"The Locker\*(R" in Mail::Box::Locker
.ie n .IP "$obj\->\fBfolder\fR( [$folder] )" 4
.el .IP "\f(CW$obj\fR\->\fBfolder\fR( [$folder] )" 4
.IX Item "$obj->folder( [$folder] )"
Inherited, see \*(L"The Locker\*(R" in Mail::Box::Locker
.ie n .IP "$obj\->\fBname\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBname\fR()" 4
.IX Item "$obj->name()"
Inherited, see \*(L"The Locker\*(R" in Mail::Box::Locker
.SS "Locking"
.IX Subsection "Locking"
Extends \*(L"Locking\*(R" in Mail::Box::Locker.
.ie n .IP "$obj\->\fBhasLock\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBhasLock\fR()" 4
.IX Item "$obj->hasLock()"
Inherited, see \*(L"Locking\*(R" in Mail::Box::Locker
.ie n .IP "$obj\->\fBisLocked\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisLocked\fR()" 4
.IX Item "$obj->isLocked()"
.PD 0
.ie n .IP "$obj\->\fBlock\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlock\fR()" 4
.IX Item "$obj->lock()"
.ie n .IP "$obj\->\fBunlock\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBunlock\fR()" 4
.IX Item "$obj->unlock()"
.PD
Inherited, see \*(L"Locking\*(R" in Mail::Box::Locker
.SS "Error handling"
.IX Subsection "Error handling"
Extends \*(L"Error handling\*(R" in Mail::Box::Locker.
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR($object)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR($object)" 4
.IX Item "$obj->addReport($object)"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "$obj->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD 0
.ie n .IP "Mail::Box::Locker::Flock\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "Mail::Box::Locker::Flock\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "Mail::Box::Locker::Flock->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR( [$level, [$strings]] )" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "$obj->log( [$level, [$strings]] )"
.PD 0
.IP "Mail::Box::Locker::Flock\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "Mail::Box::Locker::Flock->log( [$level, [$strings]] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR($level)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR($level)" 4
.IX Item "$obj->logPriority($level)"
.PD 0
.IP "Mail::Box::Locker::Flock\->\fBlogPriority\fR($level)" 4
.IX Item "Mail::Box::Locker::Flock->logPriority($level)"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR( [$level] )" 4
.IX Item "$obj->report( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR( [$level] )" 4
.IX Item "$obj->reportAll( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR( [$level] )" 4
.IX Item "$obj->trace( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
Extends \*(L"Cleanup\*(R" in Mail::Box::Locker.
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
Inherited, see \*(L"Cleanup\*(R" in Mail::Box::Locker
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Warning: Folder $folder already flocked" 4
.el .IP "Warning: Folder \f(CW$folder\fR already flocked" 4
.IX Item "Warning: Folder $folder already flocked"
The folder is already locked, but you attempt to lock it again.  The
behavior of double flock's is platform dependent, and therefore should
not be attempted.  The second lock is ignored (but the unlock isn't)
.ie n .IP "Error: Package $package does not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR does not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package does not implement $method."
Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.
.ie n .IP "Error: Unable to check lock file $filename for $folder: $!" 4
.el .IP "Error: Unable to check lock file \f(CW$filename\fR for \f(CW$folder:\fR $!" 4
.IX Item "Error: Unable to check lock file $filename for $folder: $!"
To check whether the filename is used to flock a folder, the file must be
opened.  Apparently this fails, which does not mean that the folder is
locked neither that it is unlocked.
.ie n .IP "Error: Unable to open flock file $filename for $folder: $!" 4
.el .IP "Error: Unable to open flock file \f(CW$filename\fR for \f(CW$folder:\fR $!" 4
.IX Item "Error: Unable to open flock file $filename for $folder: $!"
For flock-ing a folder it must be opened, which does not succeed for the
specified reason.
.ie n .IP "Error: Will never get a flock at $filename for $folder: $!" 4
.el .IP "Error: Will never get a flock at \f(CW$filename\fR for \f(CW$folder:\fR $!" 4
.IX Item "Error: Will never get a flock at $filename for $folder: $!"
Tried to flock the folder, but it did not succeed.  The error code received
from the \s-1OS\s0 indicates that it will not succeed ever, so we do not need to
try again.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 3.008,
built on October 04, 2019. Website: \fIhttp://perl.overmeer.net/CPAN/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2019 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://dev.perl.org/licenses/\fR
