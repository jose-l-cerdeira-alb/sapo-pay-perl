.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Box::IMAP4 3"
.TH Mail::Box::IMAP4 3 "2014-08-24" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Box::IMAP4 \- handle IMAP4 folders as client
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 4
\& Mail::Box::IMAP4
\&   is a Mail::Box::Net
\&   is a Mail::Box
\&   is a Mail::Reporter
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Mail::Box::IMAP4;
\& my $folder = Mail::Box::IMAP4\->new(folder => $ENV{MAIL}, ...);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Maintain a folder which has its messages stored on a remote server.  The
communication between the client application and the server is implemented
using the \s-1IMAP4\s0 protocol.  See also Mail::Server::IMAP4.
.PP
This class uses Mail::Transport::IMAP4 to hide the transport of
information, and focusses solely on the correct handling of messages
within a \s-1IMAP4\s0 folder.  More than one \s-1IMAP4\s0 folder can be handled by
one single \s-1IMAP4\s0 connection.
.PP
Extends \*(L"\s-1DESCRIPTION\s0\*(R" in Mail::Box::Net.
.SH "OVERLOADED"
.IX Header "OVERLOADED"
Extends \*(L"\s-1OVERLOADED\s0\*(R" in Mail::Box::Net.
.ie n .IP "overload: \fB""""\fR" 4
.el .IP "overload: \fB``''\fR" 4
.IX Item "overload: """""
Inherited, see \*(L"\s-1OVERLOADED\s0\*(R" in Mail::Box
.IP "overload: \fB@{}\fR" 4
.IX Item "overload: @{}"
Inherited, see \*(L"\s-1OVERLOADED\s0\*(R" in Mail::Box
.IP "overload: \fBcmp\fR" 4
.IX Item "overload: cmp"
Inherited, see \*(L"\s-1OVERLOADED\s0\*(R" in Mail::Box
.SH "METHODS"
.IX Header "METHODS"
Extends \*(L"\s-1METHODS\s0\*(R" in Mail::Box::Net.
.SS "Constructors"
.IX Subsection "Constructors"
Extends \*(L"Constructors\*(R" in Mail::Box::Net.
.IP "Mail::Box::IMAP4\->\fBnew\fR(%options)" 4
.IX Item "Mail::Box::IMAP4->new(%options)"
The \f(CW\*(C`new\*(C'\fR can have many \f(CW%options\fR.  Not only the ones listed here below,
but also all the \f(CW%options\fR for \fIMail::Transport::IMAP4::new()\fR can be
passed.
.Sp
The default depends on the value of new(cache_head).
.Sp
Without folder name, no folder is selected.  Only few methods are
available now, for instance \fIlistSubFolders()\fR to get the top-level
folder names.  Usually, the folder named \f(CW\*(C`INBOX\*(C'\fR will be present.
.Sp
.Vb 10
\& \-Option           \-\-Defined in     \-\-Default
\&  access             Mail::Box        \*(Aqr\*(Aq
\&  body_delayed_type  Mail::Box        Mail::Message::Body::Delayed
\&  body_type          Mail::Box        Mail::Message::Body::Lines
\&  cache_body                          NO
\&  cache_head                          NO or DELAY
\&  cache_labels                        NO or DELAY
\&  coerce_options     Mail::Box        []
\&  create             Mail::Box        <false>
\&  extract            Mail::Box        10240
\&  field_type         Mail::Box        undef
\&  fix_headers        Mail::Box        <false>
\&  folder             Mail::Box        /
\&  folderdir          Mail::Box        <not used>
\&  head_delayed_type  Mail::Box        Mail::Message::Head::Delayed
\&  head_type          Mail::Box        Mail::Box::IMAP4::Head or Mail::Message::Head::Complete
\&  join_connection                     true
\&  keep_dups          Mail::Box        <false>
\&  lock_file          Mail::Box        undef
\&  lock_timeout       Mail::Box        1 hour
\&  lock_type          Mail::Box        \*(AqNONE\*(Aq
\&  lock_wait          Mail::Box        10 seconds
\&  locker             Mail::Box        undef
\&  log                Mail::Reporter   \*(AqWARNINGS\*(Aq
\&  manager            Mail::Box        undef
\&  message_type       Mail::Box        Mail::Box::IMAP4::Message
\&  multipart_type     Mail::Box        Mail::Message::Body::Multipart
\&  password           Mail::Box::Net   undef
\&  remove_when_empty  Mail::Box        <false>
\&  save_on_exit       Mail::Box        <true>
\&  server_name        Mail::Box::Net   undef
\&  server_port        Mail::Box::Net   143
\&  trace              Mail::Reporter   \*(AqWARNINGS\*(Aq
\&  transporter                         Mail::Transport::IMAP4
\&  trusted            Mail::Box        <false>
\&  username           Mail::Box::Net   undef
.Ve
.RS 4
.IP "access => \s-1MODE\s0" 2
.IX Item "access => MODE"
.PD 0
.IP "body_delayed_type => \s-1CLASS\s0" 2
.IX Item "body_delayed_type => CLASS"
.IP "body_type => CLASS|CODE" 2
.IX Item "body_type => CLASS|CODE"
.IP "cache_body => '\s-1NO\s0'|'\s-1YES\s0'|'\s-1DELAY\s0'" 2
.IX Item "cache_body => 'NO'|'YES'|'DELAY'"
.PD
Body objects are immutable, but may still cached or not.  In common
case, the body of a message is requested via \fIMail::Message::body()\fR
or \fIMail::Message::decoded()\fR.  This returns a handle to a body object.
You may decide wether that body object can be reused or not.  \f(CW\*(C`NO\*(C'\fR
means: retrieve the data each time again, \f(CW\*(C`YES\*(C'\fR will cache the body data,
\&\f(CW\*(C`DELAY\*(C'\fR will send the whole message when the folder is closed.
.Sp
.Vb 4
\&        [local cache]  [write]
\& NO         no           no
\& YES        yes          no
\& DELAY      yes          yes
.Ve
.IP "cache_head => '\s-1NO\s0'|'\s-1PARTIAL\s0'|'\s-1DELAY\s0'" 2
.IX Item "cache_head => 'NO'|'PARTIAL'|'DELAY'"
For a read-only folder, \f(CW\*(C`DELAY\*(C'\fR is the default, otherwise \f(CW\*(C`NO\*(C'\fR is
chosen.  The four configuration parameter have subtile consequences.
To start with a table:
.Sp
.Vb 4
\&        [local cache]  [write]  [default head_type]
\& NO         no           no     Mail::Box::IMAP4::Head
\& PARTIAL    yes          no     Mail::Box::IMAP4::Head
\& DELAY      yes          yes    Mail::Message::Head::Complete
.Ve
.Sp
The default \f(CW\*(C`head_type\*(C'\fR is Mail::Box::IMAP4::Head, the
default \f(CW\*(C`cached_head_type\*(C'\fR is Mail::Message::Head::Complete.
.Sp
Having a local cache means that a lookup for a field is first done
in a local data-structure (which extends Mail::Message::Head::Partial),
and only on the remote server if it was not found.  This is dangerous,
because your locally cached data can be out-of-sync with the server.
However, it may give you a nice performance benefit.
.Sp
\&\f(CW\*(C`DELAY\*(C'\fR will always collect the whole
header for you.  This is required when you want to look for Resent Groups
(See Mail::Message::Head::ResentGroup) or other field order dependent
header access.  A Mail::Message::Head::Delayed will be created first.
.IP "cache_labels => '\s-1NO\s0'|'\s-1WRITE\s0'|'\s-1DELAY\s0'" 2
.IX Item "cache_labels => 'NO'|'WRITE'|'DELAY'"
When labels from a message are received, these values can be kept. However,
this imposes dangers where the server's internal label storage may get out
of sync with your data.
.Sp
With \f(CW\*(C`NO\*(C'\fR, no caching will take place (but the performance will be
worse). With \f(CW\*(C`WRITE\*(C'\fR, all label access will be cached, but written to
the server as well.  Both \f(CW\*(C`NO\*(C'\fR and \f(CW\*(C`WRITE\*(C'\fR will update the labels on
the served, even when the folder was opened read-only.  \f(CW\*(C`DELAY\*(C'\fR will
not write the changed information to the server, but delay that till
the moment that the folder is closed.  It only works when the folder is
opened read/write or write is enforced.
.Sp
The default is \f(CW\*(C`DELAY\*(C'\fR for folders which where opened read-only.  This
means that you still can force an update with close(write).  For folders
which are opened read-write, the default is the safeset setting, which is
\&\f(CW\*(C`NO\*(C'\fR.
.IP "coerce_options => \s-1ARRAY\s0" 2
.IX Item "coerce_options => ARRAY"
.PD 0
.IP "create => \s-1BOOLEAN\s0" 2
.IX Item "create => BOOLEAN"
.IP "extract => \s-1INTEGER\s0 | \s-1CODE\s0 | \s-1METHOD\s0 | '\s-1LAZY\s0'|'\s-1ALWAYS\s0'" 2
.IX Item "extract => INTEGER | CODE | METHOD | 'LAZY'|'ALWAYS'"
.IP "field_type => \s-1CLASS\s0" 2
.IX Item "field_type => CLASS"
.IP "fix_headers => \s-1BOOLEAN\s0" 2
.IX Item "fix_headers => BOOLEAN"
.IP "folder => \s-1FOLDERNAME\s0" 2
.IX Item "folder => FOLDERNAME"
.IP "folderdir => \s-1DIRECTORY\s0" 2
.IX Item "folderdir => DIRECTORY"
.IP "head_delayed_type => \s-1CLASS\s0" 2
.IX Item "head_delayed_type => CLASS"
.IP "head_type => \s-1CLASS\s0" 2
.IX Item "head_type => CLASS"
.IP "join_connection => \s-1BOOLEAN\s0" 2
.IX Item "join_connection => BOOLEAN"
.PD
Within this Mail::Box::IMAP4 class is registered which transporters are
already in use, i.e. which connections to the \s-1IMAP\s0 server are already
in established.  When this option is set, multiple folder openings on the
same server will try to reuse one connection.
.IP "keep_dups => \s-1BOOLEAN\s0" 2
.IX Item "keep_dups => BOOLEAN"
.PD 0
.IP "lock_file => \s-1FILENAME\s0" 2
.IX Item "lock_file => FILENAME"
.IP "lock_timeout => \s-1SECONDS\s0" 2
.IX Item "lock_timeout => SECONDS"
.IP "lock_type => CLASS|STRING|ARRAY" 2
.IX Item "lock_type => CLASS|STRING|ARRAY"
.IP "lock_wait => \s-1SECONDS\s0" 2
.IX Item "lock_wait => SECONDS"
.IP "locker => \s-1OBJECT\s0" 2
.IX Item "locker => OBJECT"
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
.IP "manager => \s-1MANAGER\s0" 2
.IX Item "manager => MANAGER"
.IP "message_type => \s-1CLASS\s0" 2
.IX Item "message_type => CLASS"
.IP "multipart_type => \s-1CLASS\s0" 2
.IX Item "multipart_type => CLASS"
.IP "password => \s-1STRING\s0" 2
.IX Item "password => STRING"
.IP "remove_when_empty => \s-1BOOLEAN\s0" 2
.IX Item "remove_when_empty => BOOLEAN"
.IP "save_on_exit => \s-1BOOLEAN\s0" 2
.IX Item "save_on_exit => BOOLEAN"
.IP "server_name => \s-1HOSTNAME\s0" 2
.IX Item "server_name => HOSTNAME"
.IP "server_port => \s-1INTEGER\s0" 2
.IX Item "server_port => INTEGER"
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
.IP "transporter => OBJECT|CLASS" 2
.IX Item "transporter => OBJECT|CLASS"
.PD
The name of the \s-1CLASS\s0 which will interface with the connection.  When you
implement your own extension to Mail::Transport::IMAP4, you can either
specify a fully instantiated transporter \s-1OBJECT\s0, or the name of your own
\&\s-1CLASS\s0.  When an \s-1OBJECT\s0 is given, most other options will be ignored.
.IP "trusted => \s-1BOOLEAN\s0" 2
.IX Item "trusted => BOOLEAN"
.PD 0
.IP "username => \s-1STRING\s0" 2
.IX Item "username => STRING"
.RE
.RS 4
.PD
.Sp
example:
.Sp
.Vb 2
\& my $imap   = Mail::Box::IMAP4\->new(username => \*(Aqmyname\*(Aq,
\&    password => \*(Aqmypassword\*(Aq, server_name => \*(Aqimap.xs4all.nl\*(Aq);
\&
\& my $url    = \*(Aqimap4://user:password@imap.xs4all.nl\*(Aq);
\& my $imap   = $mgr\->open($url);
\&
\& my $client = Mail::IMAPClient\->new(...);
\& my $imap   = Mail::Box::IMAP4\->new(imap_client => $client);
.Ve
.RE
.SS "The folder"
.IX Subsection "The folder"
Extends \*(L"The folder\*(R" in Mail::Box::Net.
.ie n .IP "$obj\->\fBaddMessage\fR($message, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBaddMessage\fR($message, \f(CW%options\fR)" 4
.IX Item "$obj->addMessage($message, %options)"
Inherited, see \*(L"The folder\*(R" in Mail::Box
.ie n .IP "$obj\->\fBaddMessages\fR(@messages)" 4
.el .IP "\f(CW$obj\fR\->\fBaddMessages\fR(@messages)" 4
.IX Item "$obj->addMessages(@messages)"
Inherited, see \*(L"The folder\*(R" in Mail::Box
.IP "Mail::Box::IMAP4\->\fBappendMessages\fR(%options)" 4
.IX Item "Mail::Box::IMAP4->appendMessages(%options)"
Inherited, see \*(L"The folder\*(R" in Mail::Box
.ie n .IP "$obj\->\fBclose\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBclose\fR(%options)" 4
.IX Item "$obj->close(%options)"
Close the folder.  In the case of \s-1IMAP\s0, more than one folder can use
the same connection, therefore, closing a folder does not always close
the connection to the server.  Only when no folder is using the
connection anymore, a logout will be invoked by
\&\fIMail::Transport::IMAP4::DESTROY()\fR
.Sp
.Vb 4
\& \-Option      \-\-Defined in     \-\-Default
\&  force         Mail::Box        <false>
\&  save_deleted  Mail::Box        false
\&  write         Mail::Box        MODIFIED
.Ve
.RS 4
.IP "force => \s-1BOOLEAN\s0" 2
.IX Item "force => BOOLEAN"
.PD 0
.IP "save_deleted => \s-1BOOLEAN\s0" 2
.IX Item "save_deleted => BOOLEAN"
.IP "write => '\s-1ALWAYS\s0'|'\s-1NEVER\s0'|'\s-1MODIFIED\s0'" 2
.IX Item "write => 'ALWAYS'|'NEVER'|'MODIFIED'"
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBcopyTo\fR($folder, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBcopyTo\fR($folder, \f(CW%options\fR)" 4
.IX Item "$obj->copyTo($folder, %options)"
.PD
Inherited, see \*(L"The folder\*(R" in Mail::Box
.ie n .IP "$obj\->\fBdelete\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBdelete\fR(%options)" 4
.IX Item "$obj->delete(%options)"
Inherited, see \*(L"The folder\*(R" in Mail::Box
.ie n .IP "$obj\->\fBfolderdir\fR( [$directory] )" 4
.el .IP "\f(CW$obj\fR\->\fBfolderdir\fR( [$directory] )" 4
.IX Item "$obj->folderdir( [$directory] )"
Inherited, see \*(L"\s-1METHODS\s0\*(R" in Mail::Box::Net
.ie n .IP "$obj\->\fBname\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBname\fR()" 4
.IX Item "$obj->name()"
Inherited, see \*(L"The folder\*(R" in Mail::Box
.ie n .IP "$obj\->\fBorganization\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBorganization\fR()" 4
.IX Item "$obj->organization()"
Inherited, see \*(L"The folder\*(R" in Mail::Box
.ie n .IP "$obj\->\fBsize\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBsize\fR()" 4
.IX Item "$obj->size()"
Inherited, see \*(L"The folder\*(R" in Mail::Box
.ie n .IP "$obj\->\fBtype\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtype\fR()" 4
.IX Item "$obj->type()"
Inherited, see \*(L"The folder\*(R" in Mail::Box
.ie n .IP "$obj\->\fBupdate\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBupdate\fR(%options)" 4
.IX Item "$obj->update(%options)"
Inherited, see \*(L"The folder\*(R" in Mail::Box
.ie n .IP "$obj\->\fBurl\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBurl\fR()" 4
.IX Item "$obj->url()"
Inherited, see \*(L"The folder\*(R" in Mail::Box
.SS "Folder flags"
.IX Subsection "Folder flags"
Extends \*(L"Folder flags\*(R" in Mail::Box::Net.
.ie n .IP "$obj\->\fBaccess\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBaccess\fR()" 4
.IX Item "$obj->access()"
Inherited, see \*(L"Folder flags\*(R" in Mail::Box
.ie n .IP "$obj\->\fBisModified\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBisModified\fR()" 4
.IX Item "$obj->isModified()"
Inherited, see \*(L"Folder flags\*(R" in Mail::Box
.ie n .IP "$obj\->\fBmodified\fR( [\s-1BOOLEAN\s0] )" 4
.el .IP "\f(CW$obj\fR\->\fBmodified\fR( [\s-1BOOLEAN\s0] )" 4
.IX Item "$obj->modified( [BOOLEAN] )"
Inherited, see \*(L"Folder flags\*(R" in Mail::Box
.ie n .IP "$obj\->\fBwritable\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwritable\fR()" 4
.IX Item "$obj->writable()"
Inherited, see \*(L"Folder flags\*(R" in Mail::Box
.SS "The messages"
.IX Subsection "The messages"
Extends \*(L"The messages\*(R" in Mail::Box::Net.
.ie n .IP "$obj\->\fBcurrent\fR( [$number|$message|$message_id] )" 4
.el .IP "\f(CW$obj\fR\->\fBcurrent\fR( [$number|$message|$message_id] )" 4
.IX Item "$obj->current( [$number|$message|$message_id] )"
Inherited, see \*(L"The messages\*(R" in Mail::Box
.ie n .IP "$obj\->\fBfind\fR($message_id)" 4
.el .IP "\f(CW$obj\fR\->\fBfind\fR($message_id)" 4
.IX Item "$obj->find($message_id)"
Inherited, see \*(L"The messages\*(R" in Mail::Box
.ie n .IP "$obj\->\fBfindFirstLabeled\fR( $label, [\s-1BOOLEAN\s0, [$msgs]] )" 4
.el .IP "\f(CW$obj\fR\->\fBfindFirstLabeled\fR( \f(CW$label\fR, [\s-1BOOLEAN\s0, [$msgs]] )" 4
.IX Item "$obj->findFirstLabeled( $label, [BOOLEAN, [$msgs]] )"
Inherited, see \*(L"The messages\*(R" in Mail::Box
.ie n .IP "$obj\->\fBmessage\fR( $index, [$message] )" 4
.el .IP "\f(CW$obj\fR\->\fBmessage\fR( \f(CW$index\fR, [$message] )" 4
.IX Item "$obj->message( $index, [$message] )"
Inherited, see \*(L"The messages\*(R" in Mail::Box
.ie n .IP "$obj\->\fBmessageId\fR( $message_id, [$message] )" 4
.el .IP "\f(CW$obj\fR\->\fBmessageId\fR( \f(CW$message_id\fR, [$message] )" 4
.IX Item "$obj->messageId( $message_id, [$message] )"
Inherited, see \*(L"The messages\*(R" in Mail::Box
.ie n .IP "$obj\->\fBmessageIds\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBmessageIds\fR()" 4
.IX Item "$obj->messageIds()"
Inherited, see \*(L"The messages\*(R" in Mail::Box
.ie n .IP "$obj\->\fBmessages\fR( <'\s-1ALL\s0'|$range|'\s-1ACTIVE\s0'|'\s-1DELETED\s0'|$label| !$label|$filter> )" 4
.el .IP "\f(CW$obj\fR\->\fBmessages\fR( <'\s-1ALL\s0'|$range|'\s-1ACTIVE\s0'|'\s-1DELETED\s0'|$label| !$label|$filter> )" 4
.IX Item "$obj->messages( <'ALL'|$range|'ACTIVE'|'DELETED'|$label| !$label|$filter> )"
Inherited, see \*(L"The messages\*(R" in Mail::Box
.ie n .IP "$obj\->\fBnrMessages\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBnrMessages\fR(%options)" 4
.IX Item "$obj->nrMessages(%options)"
Inherited, see \*(L"The messages\*(R" in Mail::Box
.ie n .IP "$obj\->\fBscanForMessages\fR($message, $message_ids, $timespan, $window)" 4
.el .IP "\f(CW$obj\fR\->\fBscanForMessages\fR($message, \f(CW$message_ids\fR, \f(CW$timespan\fR, \f(CW$window\fR)" 4
.IX Item "$obj->scanForMessages($message, $message_ids, $timespan, $window)"
Inherited, see \*(L"The messages\*(R" in Mail::Box
.SS "Sub-folders"
.IX Subsection "Sub-folders"
Extends \*(L"Sub-folders\*(R" in Mail::Box::Net.
.ie n .IP "$obj\->\fBlistSubFolders\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBlistSubFolders\fR(%options)" 4
.IX Item "$obj->listSubFolders(%options)"
.PD 0
.IP "Mail::Box::IMAP4\->\fBlistSubFolders\fR(%options)" 4
.IX Item "Mail::Box::IMAP4->listSubFolders(%options)"
.PD
Inherited, see \*(L"Sub-folders\*(R" in Mail::Box
.ie n .IP "$obj\->\fBnameOfSubFolder\fR( $subname, [$parentname] )" 4
.el .IP "\f(CW$obj\fR\->\fBnameOfSubFolder\fR( \f(CW$subname\fR, [$parentname] )" 4
.IX Item "$obj->nameOfSubFolder( $subname, [$parentname] )"
.PD 0
.ie n .IP "Mail::Box::IMAP4\->\fBnameOfSubFolder\fR( $subname, [$parentname] )" 4
.el .IP "Mail::Box::IMAP4\->\fBnameOfSubFolder\fR( \f(CW$subname\fR, [$parentname] )" 4
.IX Item "Mail::Box::IMAP4->nameOfSubFolder( $subname, [$parentname] )"
.PD
Inherited, see \*(L"Sub-folders\*(R" in Mail::Box
.ie n .IP "$obj\->\fBopenRelatedFolder\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBopenRelatedFolder\fR(%options)" 4
.IX Item "$obj->openRelatedFolder(%options)"
Inherited, see \*(L"Sub-folders\*(R" in Mail::Box
.ie n .IP "$obj\->\fBopenSubFolder\fR($subname, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBopenSubFolder\fR($subname, \f(CW%options\fR)" 4
.IX Item "$obj->openSubFolder($subname, %options)"
Inherited, see \*(L"Sub-folders\*(R" in Mail::Box
.ie n .IP "$obj\->\fBtopFolderWithMessages\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtopFolderWithMessages\fR()" 4
.IX Item "$obj->topFolderWithMessages()"
.PD 0
.IP "Mail::Box::IMAP4\->\fBtopFolderWithMessages\fR()" 4
.IX Item "Mail::Box::IMAP4->topFolderWithMessages()"
.PD
Inherited, see \*(L"Sub-folders\*(R" in Mail::Box
.SS "Internals"
.IX Subsection "Internals"
Extends \*(L"Internals\*(R" in Mail::Box::Net.
.ie n .IP "$obj\->\fBbody\fR( [$body] )" 4
.el .IP "\f(CW$obj\fR\->\fBbody\fR( [$body] )" 4
.IX Item "$obj->body( [$body] )"
.PD 0
.ie n .IP "$obj\->\fBcoerce\fR($message, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBcoerce\fR($message, \f(CW%options\fR)" 4
.IX Item "$obj->coerce($message, %options)"
.PD
Inherited, see \*(L"Internals\*(R" in Mail::Box
.ie n .IP "$obj\->\fBcreate\fR($folder, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBcreate\fR($folder, \f(CW%options\fR)" 4
.IX Item "$obj->create($folder, %options)"
.PD 0
.ie n .IP "Mail::Box::IMAP4\->\fBcreate\fR($folder, %options)" 4
.el .IP "Mail::Box::IMAP4\->\fBcreate\fR($folder, \f(CW%options\fR)" 4
.IX Item "Mail::Box::IMAP4->create($folder, %options)"
.PD
Inherited, see \*(L"\s-1METHODS\s0\*(R" in Mail::Box::Net
.ie n .IP "$obj\->\fBcreateTransporter\fR($class, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBcreateTransporter\fR($class, \f(CW%options\fR)" 4
.IX Item "$obj->createTransporter($class, %options)"
Create a transporter object (an instance of Mail::Transport::IMAP4), where
\&\f(CW$class\fR defines the exact object type.  As \f(CW%options\fR, everything which is
acceptable to a transporter initiation can be used (see
\&\fIMail::Transport::IMAP4::new()\fR.
.Sp
.Vb 2
\& \-Option         \-\-Default
\&  join_connection  true
.Ve
.RS 4
.IP "join_connection => \s-1BOOLEAN\s0" 2
.IX Item "join_connection => BOOLEAN"
See new(join_connection).  When false, the connection will never be shared
with other \s-1IMAP\s0 mail boxes.
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBdetermineBodyType\fR($message, $head)" 4
.el .IP "\f(CW$obj\fR\->\fBdetermineBodyType\fR($message, \f(CW$head\fR)" 4
.IX Item "$obj->determineBodyType($message, $head)"
Inherited, see \*(L"Internals\*(R" in Mail::Box
.ie n .IP "$obj\->\fBfetch\fR( <$messages|$selection>, $info )" 4
.el .IP "\f(CW$obj\fR\->\fBfetch\fR( <$messages|$selection>, \f(CW$info\fR )" 4
.IX Item "$obj->fetch( <$messages|$selection>, $info )"
Low-level data retreival about one or more messages via \s-1IMAP4\s0 from
the remote server. Some of this data may differ from the information
which is stored in the message objects which are created by MailBox,
so you should avoid the use of this method for your own purposes.
The \s-1IMAP\s0 implementation provides some wrappers around this, providing
the correct behavior.
.Sp
An \s-1ARRAY\s0 of \f(CW$messages\fR may be specified or some message \f(CW$selection\fR,
acceptable to \fIMail::Box::messages()\fR.  Examples of the latter are
\&\f(CW\*(AqALL\*(Aq\fR, \f(CW\*(AqDELETED\*(Aq\fR, or \f(CW\*(C`spam\*(C'\fR (messages labelled to contain spam).
.Sp
The \f(CW$info\fR contains one or more attributes as defined by the \s-1IMAP\s0 protocol.
You have to read the full specs of the related RFCs to see these.
.ie n .IP "Mail::Box::IMAP4\->\fBfoundIn\fR( [$foldername], %options )" 4
.el .IP "Mail::Box::IMAP4\->\fBfoundIn\fR( [$foldername], \f(CW%options\fR )" 4
.IX Item "Mail::Box::IMAP4->foundIn( [$foldername], %options )"
Inherited, see \*(L"Internals\*(R" in Mail::Box
.ie n .IP "$obj\->\fBgetHead\fR($message)" 4
.el .IP "\f(CW$obj\fR\->\fBgetHead\fR($message)" 4
.IX Item "$obj->getHead($message)"
Read the header for the specified message from the remote server.
\&\f(CW\*(C`undef\*(C'\fR is returned in case the message disappeared.
.ie n .IP "$obj\->\fBgetHeadAndBody\fR($message)" 4
.el .IP "\f(CW$obj\fR\->\fBgetHeadAndBody\fR($message)" 4
.IX Item "$obj->getHeadAndBody($message)"
Read all data for the specified message from the remote server.
Return head and body of the mesasge as list, or an empty list
if the \f(CW$message\fR disappeared from the server.
.ie n .IP "$obj\->\fBlineSeparator\fR( [<STRING|'\s-1CR\s0'|'\s-1LF\s0'|'\s-1CRLF\s0'>] )" 4
.el .IP "\f(CW$obj\fR\->\fBlineSeparator\fR( [<STRING|'\s-1CR\s0'|'\s-1LF\s0'|'\s-1CRLF\s0'>] )" 4
.IX Item "$obj->lineSeparator( [<STRING|'CR'|'LF'|'CRLF'>] )"
Inherited, see \*(L"Internals\*(R" in Mail::Box
.ie n .IP "$obj\->\fBlocker\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlocker\fR()" 4
.IX Item "$obj->locker()"
Inherited, see \*(L"Internals\*(R" in Mail::Box
.ie n .IP "$obj\->\fBread\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBread\fR(%options)" 4
.IX Item "$obj->read(%options)"
Inherited, see \*(L"Internals\*(R" in Mail::Box
.ie n .IP "$obj\->\fBreadMessages\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBreadMessages\fR(%options)" 4
.IX Item "$obj->readMessages(%options)"
Inherited, see \*(L"Internals\*(R" in Mail::Box
.ie n .IP "$obj\->\fBstoreMessage\fR($message)" 4
.el .IP "\f(CW$obj\fR\->\fBstoreMessage\fR($message)" 4
.IX Item "$obj->storeMessage($message)"
Inherited, see \*(L"Internals\*(R" in Mail::Box
.ie n .IP "$obj\->\fBtoBeThreaded\fR($messages)" 4
.el .IP "\f(CW$obj\fR\->\fBtoBeThreaded\fR($messages)" 4
.IX Item "$obj->toBeThreaded($messages)"
Inherited, see \*(L"Internals\*(R" in Mail::Box
.ie n .IP "$obj\->\fBtoBeUnthreaded\fR($messages)" 4
.el .IP "\f(CW$obj\fR\->\fBtoBeUnthreaded\fR($messages)" 4
.IX Item "$obj->toBeUnthreaded($messages)"
Inherited, see \*(L"Internals\*(R" in Mail::Box
.ie n .IP "$obj\->\fBtransporter\fR( [$object] )" 4
.el .IP "\f(CW$obj\fR\->\fBtransporter\fR( [$object] )" 4
.IX Item "$obj->transporter( [$object] )"
Returns the object which is the interface to the \s-1IMAP4\s0 protocol handler.
The \s-1IMAP4\s0 handler has the current folder selected.
When an \f(CW$object\fR is specified, it is set to be the transporter from
that moment on.  The \f(CW$object\fR must extend Mail::Transport::IMAP4.
.ie n .IP "$obj\->\fBupdateMessages\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBupdateMessages\fR(%options)" 4
.IX Item "$obj->updateMessages(%options)"
Inherited, see \*(L"Internals\*(R" in Mail::Box
.ie n .IP "$obj\->\fBwrite\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBwrite\fR(%options)" 4
.IX Item "$obj->write(%options)"
The \s-1IMAP\s0 protocol usually writes the data immediately to the remote server,
because that's what the protocol wants.  However, some options to \fInew()\fR
may delay that to boost performance.  This method will, when the folder is
being closed, write that info after all.
.Sp
.Vb 3
\& \-Option      \-\-Defined in     \-\-Default
\&  force         Mail::Box        <false>
\&  save_deleted                   <false>
.Ve
.RS 4
.IP "force => \s-1BOOLEAN\s0" 2
.IX Item "force => BOOLEAN"
.PD 0
.IP "save_deleted => \s-1BOOLEAN\s0" 2
.IX Item "save_deleted => BOOLEAN"
.PD
You may be able to save the messages which are flagged for deletion now,
but they will be removed anyway when the folder is closed.
.RE
.RS 4
.RE
.ie n .IP "$obj\->\fBwriteMessages\fR(%options)" 4
.el .IP "\f(CW$obj\fR\->\fBwriteMessages\fR(%options)" 4
.IX Item "$obj->writeMessages(%options)"
.Vb 3
\& \-Option     \-\-Defined in     \-\-Default
\&  messages     Mail::Box        <required>
\&  transporter                   <required>
.Ve
.RS 4
.IP "messages => \s-1ARRAY\s0" 2
.IX Item "messages => ARRAY"
.PD 0
.IP "transporter => \s-1OBJECT\s0" 2
.IX Item "transporter => OBJECT"
.RE
.RS 4
.RE
.PD
.SS "Other methods"
.IX Subsection "Other methods"
Extends \*(L"Other methods\*(R" in Mail::Box::Net.
.ie n .IP "$obj\->\fBtimespan2seconds\fR($time)" 4
.el .IP "\f(CW$obj\fR\->\fBtimespan2seconds\fR($time)" 4
.IX Item "$obj->timespan2seconds($time)"
.PD 0
.IP "Mail::Box::IMAP4\->\fBtimespan2seconds\fR($time)" 4
.IX Item "Mail::Box::IMAP4->timespan2seconds($time)"
.PD
Inherited, see \*(L"Other methods\*(R" in Mail::Box
.SS "Error handling"
.IX Subsection "Error handling"
Extends \*(L"Error handling\*(R" in Mail::Box::Net.
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR($object)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR($object)" 4
.IX Item "$obj->addReport($object)"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "$obj->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD 0
.ie n .IP "Mail::Box::IMAP4\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "Mail::Box::IMAP4\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "Mail::Box::IMAP4->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR( [$level, [$strings]] )" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "$obj->log( [$level, [$strings]] )"
.PD 0
.IP "Mail::Box::IMAP4\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "Mail::Box::IMAP4->log( [$level, [$strings]] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR($level)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR($level)" 4
.IX Item "$obj->logPriority($level)"
.PD 0
.IP "Mail::Box::IMAP4\->\fBlogPriority\fR($level)" 4
.IX Item "Mail::Box::IMAP4->logPriority($level)"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR( [$level] )" 4
.IX Item "$obj->report( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR( [$level] )" 4
.IX Item "$obj->reportAll( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR( [$level] )" 4
.IX Item "$obj->trace( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
Extends \*(L"Cleanup\*(R" in Mail::Box::Net.
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
Inherited, see \*(L"Cleanup\*(R" in Mail::Box
.SH "DETAILS"
.IX Header "DETAILS"
Extends \*(L"\s-1DETAILS\s0\*(R" in Mail::Box::Net.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Warning: Cannot find head back for $uidl in $folder." 4
.el .IP "Warning: Cannot find head back for \f(CW$uidl\fR in \f(CW$folder\fR." 4
.IX Item "Warning: Cannot find head back for $uidl in $folder."
The header was read before, but now seems empty: the \s-1IMAP4\s0 server does
not produce the header lines anymore.
.ie n .IP "Warning: Cannot read body for $uidl in $folder." 4
.el .IP "Warning: Cannot read body for \f(CW$uidl\fR in \f(CW$folder\fR." 4
.IX Item "Warning: Cannot read body for $uidl in $folder."
The header of the message was retrieved from the \s-1IMAP4\s0 server, but the
body is not read, for an unknown reason.
.IP "Error: Copying failed for one message." 4
.IX Item "Error: Copying failed for one message."
For some reason, for instance disc full, removed by external process, or
read-protection, it is impossible to copy one of the messages.  Copying will
proceed for the other messages.
.ie n .IP "Error: Couldn't select \s-1IMAP4\s0 folder $name" 4
.el .IP "Error: Couldn't select \s-1IMAP4\s0 folder \f(CW$name\fR" 4
.IX Item "Error: Couldn't select IMAP4 folder $name"
.PD 0
.ie n .IP "Error: Destination folder $name is not writable." 4
.el .IP "Error: Destination folder \f(CW$name\fR is not writable." 4
.IX Item "Error: Destination folder $name is not writable."
.PD
The folder where the messages are copied to is not opened with write
access (see new(access)).  This has no relation with write permission
to the folder which is controled by your operating system.
.ie n .IP "Warning: Different messages with id $msgid" 4
.el .IP "Warning: Different messages with id \f(CW$msgid\fR" 4
.IX Item "Warning: Different messages with id $msgid"
The message id is discovered more than once within the same folder, but the
content of the message seems to be different.  This should not be possible:
each message must be unique.
.ie n .IP "Error: Folder $name not deleted: not writable." 4
.el .IP "Error: Folder \f(CW$name\fR not deleted: not writable." 4
.IX Item "Error: Folder $name not deleted: not writable."
The folder must be opened with write access via new(access), otherwise
removing it will be refused.  So, you may have write-access according to
the operating system, but that will not automatically mean that this
\&\f(CW\*(C`delete\*(C'\fR method permits you to.  The reverse remark is valid as well.
.IP "Notice: Impossible to keep deleted messages in \s-1IMAP\s0" 4
.IX Item "Notice: Impossible to keep deleted messages in IMAP"
Some folder type have a 'deleted' flag which can be stored in the folder to
be performed later.  The folder keeps that knowledge even when the folder
is rewritten.  Well, \s-1IMAP4\s0 cannot play that trick.
.IP "Error: Invalid timespan '$timespan' specified." 4
.IX Item "Error: Invalid timespan '$timespan' specified."
The string does not follow the strict rules of the time span syntax which
is permitted as parameter.
.ie n .IP "Warning: Message $uidl disappeared from $folder." 4
.el .IP "Warning: Message \f(CW$uidl\fR disappeared from \f(CW$folder\fR." 4
.IX Item "Warning: Message $uidl disappeared from $folder."
Trying to get the specific message from the server, but it appears to be
gone.
.ie n .IP "Warning: Message $uidl disappeared from $folder." 4
.el .IP "Warning: Message \f(CW$uidl\fR disappeared from \f(CW$folder\fR." 4
.IX Item "Warning: Message $uidl disappeared from $folder."
Trying to get the specific message from the server, but it appears to be
gone.
.IP "Warning: Message-id '$msgid' does not contain a domain." 4
.IX Item "Warning: Message-id '$msgid' does not contain a domain."
According to the RFCs, message-ids need to contain a unique random part,
then an \f(CW\*(C`@\*(C'\fR, and then a domain name.  This is made to avoid the creation
of two messages with the same id.  The warning emerges when the \f(CW\*(C`@\*(C'\fR is
missing from the string.
.IP "Error: No \s-1IMAP4\s0 transporter configured" 4
.IX Item "Error: No IMAP4 transporter configured"
.PD 0
.ie n .IP "Error: Package $package does not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR does not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package does not implement $method."
.PD
Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.
.ie n .IP "Error: Unable to create subfolder $name of $folder." 4
.el .IP "Error: Unable to create subfolder \f(CW$name\fR of \f(CW$folder\fR." 4
.IX Item "Error: Unable to create subfolder $name of $folder."
The copy includes the subfolders, but for some reason it was not possible
to copy one of these.  Copying will proceed for all other sub-folders.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.117,
built on August 24, 2014. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2014 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
