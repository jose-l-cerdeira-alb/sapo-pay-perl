.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::Message::Convert::Html 3"
.TH Mail::Message::Convert::Html 3 "2014-08-24" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Message::Convert::Html \- Format messages in HTML
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 3
\& Mail::Message::Convert::Html
\&   is a Mail::Message::Convert
\&   is a Mail::Reporter
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Mail::Message::Convert::Html;
\& my $Html = Mail::Message::Convert::Html\->new;
\&
\& print $html\->fieldToHtml($head);
\& print $html\->headToHtmlHead($head);
\& print $html\->headToHtmlTable($head);
\& print $html\->textToHtml($text);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The package contains various translators which handle \s-1HTML\s0 or \s-1XHTML\s0
without the help of external modules.  There are more \s-1HTML\s0 related modules,
which do require extra packages to be installed.
.PP
Extends \*(L"\s-1DESCRIPTION\s0\*(R" in Mail::Message::Convert.
.SH "METHODS"
.IX Header "METHODS"
Extends \*(L"\s-1METHODS\s0\*(R" in Mail::Message::Convert.
.SS "Constructors"
.IX Subsection "Constructors"
Extends \*(L"Constructors\*(R" in Mail::Message::Convert.
.IP "Mail::Message::Convert::Html\->\fBnew\fR(%options)" 4
.IX Item "Mail::Message::Convert::Html->new(%options)"
.Vb 6
\& \-Option     \-\-Defined in            \-\-Default
\&  fields       Mail::Message::Convert  <see description>
\&  head_mailto                          <true>
\&  log          Mail::Reporter          \*(AqWARNINGS\*(Aq
\&  produce                              HTML
\&  trace        Mail::Reporter          \*(AqWARNINGS\*(Aq
.Ve
.RS 4
.IP "fields => NAMES|ARRAY\-OF\-NAMES|REGEXS" 2
.IX Item "fields => NAMES|ARRAY-OF-NAMES|REGEXS"
.PD 0
.IP "head_mailto => \s-1BOOLEAN\s0" 2
.IX Item "head_mailto => BOOLEAN"
.PD
Whether to replace e\-mail addresses in some header lines with links.
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
.PD 0
.IP "produce => '\s-1HTML\s0'|'\s-1XHTML\s0'" 2
.IX Item "produce => 'HTML'|'XHTML'"
.PD
Produce \s-1HTML\s0 or \s-1XHTML\s0 output.  The output is slightly different, even
html browsers will usually accept the \s-1XHTML\s0 data.
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
.RE
.RS 4
.RE
.SS "Converting"
.IX Subsection "Converting"
Extends \*(L"Converting\*(R" in Mail::Message::Convert.
.ie n .IP "$obj\->\fBfieldContentsToHtml\fR( $field, [$subject] )" 4
.el .IP "\f(CW$obj\fR\->\fBfieldContentsToHtml\fR( \f(CW$field\fR, [$subject] )" 4
.IX Item "$obj->fieldContentsToHtml( $field, [$subject] )"
Format one field from the header to \s-1HTML\s0.  When the header line usually
contains e\-mail addresses, the line is scanned and valid addresses
are linked with an \f(CW\*(C`mailto:\*(C'\fR anchor.  The \f(CW$subject\fR can be specified to
be included in that link.
.ie n .IP "$obj\->\fBfieldToHtml\fR( $field, [$subject] )" 4
.el .IP "\f(CW$obj\fR\->\fBfieldToHtml\fR( \f(CW$field\fR, [$subject] )" 4
.IX Item "$obj->fieldToHtml( $field, [$subject] )"
Reformat one header line field to \s-1HTML\s0.  The \f(CW$field\fR's name
is printed in bold, followed by the formatted field content,
which is produced by \fIfieldContentsToHtml()\fR.
.ie n .IP "$obj\->\fBheadToHtmlHead\fR($head, $meta)" 4
.el .IP "\f(CW$obj\fR\->\fBheadToHtmlHead\fR($head, \f(CW$meta\fR)" 4
.IX Item "$obj->headToHtmlHead($head, $meta)"
Translate the selected header lines (fields) to an html page header.  Each
selected field will get its own meta line with the same name as the line.
Furthermore, the \f(CW\*(C`Subject\*(C'\fR field will become the \f(CW\*(C`title\*(C'\fR,
and \f(CW\*(C`From\*(C'\fR is used for the \f(CW\*(C`Author\*(C'\fR.
.Sp
Besides, you can specify your own meta fields, which will overrule header
fields.  Empty fields will not be included.  When a \f(CW\*(C`title\*(C'\fR is specified,
this will become the html title, otherwise the \f(CW\*(C`Subject\*(C'\fR field is
taken.  In list context, the lines are separately, where in scalar context
the whole text is returned as one.
.Sp
If you need to add lines to the head (for instance, http-equiv lines), then
splice them before the last element in the returned list.
.Sp
example:
.Sp
.Vb 7
\& my @head = $html\->headToHtmlHead
\&     ( $head
\&     , description => \*(AqThis is a message\*(Aq
\&     , generator   => \*(AqMail::Box\*(Aq
\&     );
\& splice @head, \-1, 0, \*(Aq<meta http\-equiv=...>\*(Aq;
\& print @head;
.Ve
.ie n .IP "$obj\->\fBheadToHtmlTable\fR( $head, [$table_params] )" 4
.el .IP "\f(CW$obj\fR\->\fBheadToHtmlTable\fR( \f(CW$head\fR, [$table_params] )" 4
.IX Item "$obj->headToHtmlTable( $head, [$table_params] )"
Produce a display of the \fIselectedFields()\fR of the header in a
table shape.  The optional \f(CW$table_params\fR are added as parameters to the
produced \s-1TABLE\s0 tag.  In list context, the separate lines are returned.
In scalar context, everything is returned as one.
.Sp
example:
.Sp
.Vb 1
\& print $html\->headToHtmlTable($head, \*(Aqwidth="50%"\*(Aq);
.Ve
.ie n .IP "$obj\->\fBselectedFields\fR($head)" 4
.el .IP "\f(CW$obj\fR\->\fBselectedFields\fR($head)" 4
.IX Item "$obj->selectedFields($head)"
Inherited, see \*(L"Converting\*(R" in Mail::Message::Convert
.ie n .IP "$obj\->\fBtextToHtml\fR($lines)" 4
.el .IP "\f(CW$obj\fR\->\fBtextToHtml\fR($lines)" 4
.IX Item "$obj->textToHtml($lines)"
Translate one or more \f(CW$lines\fR from text into \s-1HTML\s0.  Each line is taken one
after the other, and only simple things are translated.  \f(CW\*(C`textToHtml\*(C'\fR
is able to convert large plain texts in a descent fashion.  In scalar
context, the resulting lines are returned as one.
.SS "Error handling"
.IX Subsection "Error handling"
Extends \*(L"Error handling\*(R" in Mail::Message::Convert.
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR($object)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR($object)" 4
.IX Item "$obj->addReport($object)"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "$obj->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD 0
.ie n .IP "Mail::Message::Convert::Html\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "Mail::Message::Convert::Html\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "Mail::Message::Convert::Html->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR( [$level, [$strings]] )" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "$obj->log( [$level, [$strings]] )"
.PD 0
.IP "Mail::Message::Convert::Html\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "Mail::Message::Convert::Html->log( [$level, [$strings]] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR($level)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR($level)" 4
.IX Item "$obj->logPriority($level)"
.PD 0
.IP "Mail::Message::Convert::Html\->\fBlogPriority\fR($level)" 4
.IX Item "Mail::Message::Convert::Html->logPriority($level)"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR( [$level] )" 4
.IX Item "$obj->report( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR( [$level] )" 4
.IX Item "$obj->reportAll( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR( [$level] )" 4
.IX Item "$obj->trace( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
Extends \*(L"Cleanup\*(R" in Mail::Message::Convert.
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
Inherited, see \*(L"Cleanup\*(R" in Mail::Reporter
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Package $package does not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR does not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package does not implement $method."
Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 2.117,
built on August 24, 2014. Website: \fIhttp://perl.overmeer.net/mailbox/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2014 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://www.perl.com/perl/misc/Artistic.html\fR
