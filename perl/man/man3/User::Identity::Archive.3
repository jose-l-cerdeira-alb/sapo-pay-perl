.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "User::Identity::Archive 3"
.TH User::Identity::Archive 3 "2018-01-24" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
User::Identity::Archive \- base class for archiving user information
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 2
\& User::Identity::Archive
\&   is an User::Identity::Item
\&
\& User::Identity::Archive is extended by
\&   User::Identity::Archive::Plain
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\& use User::Identity::Archive::Plain;
\& my $friends = User::Identity::Archive::Plain\->new(\*(Aqfriends\*(Aq);
\& $friends\->from(\e*FH);
\& $friends\->from(\*(Aq.friends\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
An archive stores collections. It depends on the type of archive how and
where that is done.  Some archivers may limit the kinds of selections
which can be stored.
.PP
Extends \*(L"\s-1DESCRIPTION\*(R"\s0 in User::Identity::Item.
.SH "OVERLOADED"
.IX Header "OVERLOADED"
.SH "METHODS"
.IX Header "METHODS"
Extends \*(L"\s-1METHODS\*(R"\s0 in User::Identity::Item.
.SS "Constructors"
.IX Subsection "Constructors"
Extends \*(L"Constructors\*(R" in User::Identity::Item.
.ie n .IP "User::Identity::Archive\->\fBnew\fR( [$name], %options )" 4
.el .IP "User::Identity::Archive\->\fBnew\fR( [$name], \f(CW%options\fR )" 4
.IX Item "User::Identity::Archive->new( [$name], %options )"
.Vb 5
\& \-Option     \-\-Defined in          \-\-Default
\&  description  User::Identity::Item  undef
\&  from                               undef
\&  name         User::Identity::Item  <required>
\&  parent       User::Identity::Item  undef
.Ve
.RS 4
.IP "description => \s-1STRING\s0" 2
.IX Item "description => STRING"
.PD 0
.IP "from => FILEHANDLE|FILENAME" 2
.IX Item "from => FILEHANDLE|FILENAME"
.IP "name => \s-1STRING\s0" 2
.IX Item "name => STRING"
.IP "parent => \s-1OBJECT\s0" 2
.IX Item "parent => OBJECT"
.RE
.RS 4
.RE
.PD
.SS "Attributes"
.IX Subsection "Attributes"
Extends \*(L"Attributes\*(R" in User::Identity::Item.
.ie n .IP "$obj\->\fBdescription\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdescription\fR()" 4
.IX Item "$obj->description()"
Inherited, see \*(L"Attributes\*(R" in User::Identity::Item
.ie n .IP "$obj\->\fBname\fR( [$newname] )" 4
.el .IP "\f(CW$obj\fR\->\fBname\fR( [$newname] )" 4
.IX Item "$obj->name( [$newname] )"
Inherited, see \*(L"Attributes\*(R" in User::Identity::Item
.SS "Collections"
.IX Subsection "Collections"
Extends \*(L"Collections\*(R" in User::Identity::Item.
.ie n .IP "$obj\->\fBadd\fR($collection, $role)" 4
.el .IP "\f(CW$obj\fR\->\fBadd\fR($collection, \f(CW$role\fR)" 4
.IX Item "$obj->add($collection, $role)"
Inherited, see \*(L"Collections\*(R" in User::Identity::Item
.ie n .IP "$obj\->\fBaddCollection\fR( $object | <[$type], %options> )" 4
.el .IP "\f(CW$obj\fR\->\fBaddCollection\fR( \f(CW$object\fR | <[$type], \f(CW%options\fR> )" 4
.IX Item "$obj->addCollection( $object | <[$type], %options> )"
Inherited, see \*(L"Collections\*(R" in User::Identity::Item
.ie n .IP "$obj\->\fBcollection\fR($name)" 4
.el .IP "\f(CW$obj\fR\->\fBcollection\fR($name)" 4
.IX Item "$obj->collection($name)"
Inherited, see \*(L"Collections\*(R" in User::Identity::Item
.ie n .IP "$obj\->\fBparent\fR( [$parent] )" 4
.el .IP "\f(CW$obj\fR\->\fBparent\fR( [$parent] )" 4
.IX Item "$obj->parent( [$parent] )"
Inherited, see \*(L"Collections\*(R" in User::Identity::Item
.ie n .IP "$obj\->\fBremoveCollection\fR($object|$name)" 4
.el .IP "\f(CW$obj\fR\->\fBremoveCollection\fR($object|$name)" 4
.IX Item "$obj->removeCollection($object|$name)"
Inherited, see \*(L"Collections\*(R" in User::Identity::Item
.ie n .IP "$obj\->\fBtype\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtype\fR()" 4
.IX Item "$obj->type()"
.PD 0
.IP "User::Identity::Archive\->\fBtype\fR()" 4
.IX Item "User::Identity::Archive->type()"
.PD
Inherited, see \*(L"Collections\*(R" in User::Identity::Item
.ie n .IP "$obj\->\fBuser\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBuser\fR()" 4
.IX Item "$obj->user()"
Inherited, see \*(L"Collections\*(R" in User::Identity::Item
.SS "Searching"
.IX Subsection "Searching"
Extends \*(L"Searching\*(R" in User::Identity::Item.
.ie n .IP "$obj\->\fBfind\fR($collection, $role)" 4
.el .IP "\f(CW$obj\fR\->\fBfind\fR($collection, \f(CW$role\fR)" 4
.IX Item "$obj->find($collection, $role)"
Inherited, see \*(L"Searching\*(R" in User::Identity::Item
.SS "Access to the archive"
.IX Subsection "Access to the archive"
.ie n .IP "$obj\->\fBfrom\fR($source, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBfrom\fR($source, \f(CW%options\fR)" 4
.IX Item "$obj->from($source, %options)"
Read definitions from the specified \f(CW$source\fR, which usually can be a
filehandle or filename.  The syntax used in the information \f(CW$source\fR
is archiver dependent.
.Sp
Not all archivers implement \f(CW\*(C`from()\*(C'\fR, so you may want to check with
\&\f(CW\*(C`UNIVERSAL::can()\*(C'\fR beforehand.
.Sp
example:
.Sp
.Vb 3
\& use User::Identity::Archive::Some;
\& my $a = User::Identity::Archive::Some\->new(\*(Aqxyz\*(Aq);
\& $a\->from(\e*STDIN) if $a\->can(\*(Aqfrom\*(Aq);
.Ve
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: $object is not a collection." 4
.el .IP "Error: \f(CW$object\fR is not a collection." 4
.IX Item "Error: $object is not a collection."
The first argument is an object, but not of a class which extends
User::Identity::Collection.
.ie n .IP "Error: Cannot load collection module for $type ($class)." 4
.el .IP "Error: Cannot load collection module for \f(CW$type\fR ($class)." 4
.IX Item "Error: Cannot load collection module for $type ($class)."
Either the specified \f(CW$type\fR does not exist, or that module named \f(CW$class\fR returns
compilation errors.  If the type as specified in the warning is not
the name of a package, you specified a nickname which was not defined.
Maybe you forgot the 'require' the package which defines the nickname.
.ie n .IP "Error: Creation of a collection via $class failed." 4
.el .IP "Error: Creation of a collection via \f(CW$class\fR failed." 4
.IX Item "Error: Creation of a collection via $class failed."
The \f(CW$class\fR did compile, but it was not possible to create an object
of that class using the options you specified.
.IP "Error: Don't know what type of collection you want to add." 4
.IX Item "Error: Don't know what type of collection you want to add."
If you add a collection, it must either by a collection object or a
list of options which can be used to create a collection object.  In
the latter case, the type of collection must be specified.
.ie n .IP "Warning: No collection $name" 4
.el .IP "Warning: No collection \f(CW$name\fR" 4
.IX Item "Warning: No collection $name"
The collection with \f(CW$name\fR does not exist and can not be created.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of User-Identity distribution version 0.99,
built on January 24, 2018. Website: \fIhttp://perl.overmeer.net/CPAN/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2003\-2018 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://dev.perl.org/licenses/\fR
