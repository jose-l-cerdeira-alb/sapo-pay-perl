.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Box::Search::SpamAssassin 3"
.TH Mail::Box::Search::SpamAssassin 3 "2019-10-04" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Box::Search::SpamAssassin \- select spam messages with Mail::SpamAssassin
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 3
\& Mail::Box::Search::SpamAssassin
\&   is a Mail::Box::Search
\&   is a Mail::Reporter
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& use Mail::Box::Manager;
\& my $mgr    = Mail::Box::Manager\->new;
\& my $folder = $mgr\->open(\*(AqInbox\*(Aq);
\&
\& my $spam = Mail::Box::Search::SpamAssassin\->new;
\& if($spam\->search($message)) {...}
\&
\& my @msgs   = $filter\->search($folder);
\& foreach my $msg ($folder\->messages)
\& {   $msg\->delete if $msg\->label(\*(Aqspam\*(Aq);
\& }
\&
\& my $spam2 = Mail::Box::Search::SpamAssassin
\&               \->new(deliver => \*(AqDELETE\*(Aq);
\& $spam2\->search($folder);
\& $mgr\->moveMessages($spamfolder, $folder\->messages(\*(Aqspam\*(Aq));
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fISpam\fR means \*(L"unsollicited e\-mail\*(R", and is as name derived from a
Monty Python scatch.  Although Monty Python is fun, spam is a pain:
it needlessly spoils minutes of time from most people: telephone
bills, overful mailboxes which block honest e\-mail, and accidentally
removal of honest e\-mail which looks like spam.  Spam is the pest
of Internet.
.PP
Happily, Mail::Box can be used as spam filter, in combination with
the useful Mail::SpamAssassin module (which must be installed separately).
Each message which is searched is wrapped in a
Mail::Message::Wrapper::SpamAssassin object.
.PP
The spam-assassin module version 2 is not really well adapted for
Mail::Message objects, which will make this search even slower than
spam-detection already is.
.PP
Extends \*(L"\s-1DESCRIPTION\*(R"\s0 in Mail::Box::Search.
.SH "METHODS"
.IX Header "METHODS"
Extends \*(L"\s-1METHODS\*(R"\s0 in Mail::Box::Search.
.SS "Constructors"
.IX Subsection "Constructors"
Extends \*(L"Constructors\*(R" in Mail::Box::Search.
.IP "Mail::Box::Search::SpamAssassin\->\fBnew\fR(%options)" 4
.IX Item "Mail::Box::Search::SpamAssassin->new(%options)"
Create a spam filter.  Internally, a Mail::SpamAssassin object is
maintained.
.Sp
Only the whole message can be searched; this is a limitation of
the Mail::SpamAssassin module.
.Sp
.Vb 10
\& \-Option       \-\-Defined in       \-\-Default
\&  binaries       Mail::Box::Search  <false>
\&  decode         Mail::Box::Search  <true>
\&  delayed        Mail::Box::Search  <true>
\&  deleted        Mail::Box::Search  <false>
\&  deliver        Mail::Box::Search  undef
\&  in             Mail::Box::Search  \*(AqMESSAGE\*(Aq
\&  label                             c<\*(Aqspam\*(Aq>
\&  limit          Mail::Box::Search  0
\&  log            Mail::Reporter     \*(AqWARNINGS\*(Aq
\&  logical        Mail::Box::Search  \*(AqREPLACE\*(Aq
\&  multiparts     Mail::Box::Search  <true>
\&  rewrite_mail                      <true>
\&  sa_options                        { }
\&  spam_assassin                     undef
\&  trace          Mail::Reporter     \*(AqWARNINGS\*(Aq
.Ve
.RS 4
.IP "binaries => \s-1BOOLEAN\s0" 2
.IX Item "binaries => BOOLEAN"
.PD 0
.IP "decode => \s-1BOOLEAN\s0" 2
.IX Item "decode => BOOLEAN"
.IP "delayed => \s-1BOOLEAN\s0" 2
.IX Item "delayed => BOOLEAN"
.IP "deleted => \s-1BOOLEAN\s0" 2
.IX Item "deleted => BOOLEAN"
.IP "deliver => undef|CODE|'\s-1DELETE\s0'" 2
.IX Item "deliver => undef|CODE|'DELETE'"
.IP "in => '\s-1HEAD\s0'|'\s-1BODY\s0'|'\s-1MESSAGE\s0'" 2
.IX Item "in => 'HEAD'|'BODY'|'MESSAGE'"
.IP "label => STRING|undef" 2
.IX Item "label => STRING|undef"
.PD
Mark all selected message with the specified \s-1STRING.\s0  If this
option is explicitly set to \f(CW\*(C`undef\*(C'\fR, the label will not be set.
.IP "limit => \s-1NUMBER\s0" 2
.IX Item "limit => NUMBER"
.PD 0
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
.IP "logical => '\s-1REPLACE\s0'|'\s-1AND\s0'|'\s-1OR\s0'|'\s-1NOT\s0'|'\s-1AND NOT\s0'|'\s-1OR NOT\s0'" 2
.IX Item "logical => 'REPLACE'|'AND'|'OR'|'NOT'|'AND NOT'|'OR NOT'"
.IP "multiparts => \s-1BOOLEAN\s0" 2
.IX Item "multiparts => BOOLEAN"
.IP "rewrite_mail => \s-1BOOLEAN\s0" 2
.IX Item "rewrite_mail => BOOLEAN"
.PD
Add lines to the message header describing the results of the spam
scan. See Mail::SpamAssassin::PerMsgStatus subroutine rewrite_mail.
.IP "sa_options => \s-1HASH\s0" 2
.IX Item "sa_options => HASH"
Options to create the internal Mail::SpamAssassin object; see its
manual page for the available options.  Other setting may be provided
via SpamAssassins configuration file mechanism, which is explained in
Mail::SpamAssassin::Conf.
.IP "spam_assassin => \s-1OBJECT\s0" 2
.IX Item "spam_assassin => OBJECT"
Provide a Mail::SpamAssassin object to be used for searching spam.  If
none is specified, one is created internally.  The object can be
retrieved with \fBassassinator()\fR.
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
.RE
.RS 4
.Sp
example:
.Sp
.Vb 2
\& my $filter = Mail::Box::Search::SpamAssassin
\&               \->new( found => \*(AqDELETE\*(Aq );
.Ve
.RE
.SS "Searching"
.IX Subsection "Searching"
Extends \*(L"Searching\*(R" in Mail::Box::Search.
.ie n .IP "$obj\->\fBassassinator\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBassassinator\fR()" 4
.IX Item "$obj->assassinator()"
Returns the internally maintained assassinator object.  You may want
to reach this object for complex configuration.
.ie n .IP "$obj\->\fBinBody\fR($part, $body)" 4
.el .IP "\f(CW$obj\fR\->\fBinBody\fR($part, \f(CW$body\fR)" 4
.IX Item "$obj->inBody($part, $body)"
Inherited, see \*(L"Searching\*(R" in Mail::Box::Search
.ie n .IP "$obj\->\fBinHead\fR($part, $head)" 4
.el .IP "\f(CW$obj\fR\->\fBinHead\fR($part, \f(CW$head\fR)" 4
.IX Item "$obj->inHead($part, $head)"
Inherited, see \*(L"Searching\*(R" in Mail::Box::Search
.ie n .IP "$obj\->\fBsearch\fR($folder|$thread|$message|ARRAY)" 4
.el .IP "\f(CW$obj\fR\->\fBsearch\fR($folder|$thread|$message|ARRAY)" 4
.IX Item "$obj->search($folder|$thread|$message|ARRAY)"
Inherited, see \*(L"Searching\*(R" in Mail::Box::Search
.ie n .IP "$obj\->\fBsearchPart\fR($part)" 4
.el .IP "\f(CW$obj\fR\->\fBsearchPart\fR($part)" 4
.IX Item "$obj->searchPart($part)"
Inherited, see \*(L"Searching\*(R" in Mail::Box::Search
.SS "The Results"
.IX Subsection "The Results"
Extends \*(L"The Results\*(R" in Mail::Box::Search.
.ie n .IP "$obj\->\fBprintMatch\fR( [$fh], \s-1HASH\s0 )" 4
.el .IP "\f(CW$obj\fR\->\fBprintMatch\fR( [$fh], \s-1HASH\s0 )" 4
.IX Item "$obj->printMatch( [$fh], HASH )"
Inherited, see \*(L"The Results\*(R" in Mail::Box::Search
.SS "Error handling"
.IX Subsection "Error handling"
Extends \*(L"Error handling\*(R" in Mail::Box::Search.
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR($object)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR($object)" 4
.IX Item "$obj->addReport($object)"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "$obj->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD 0
.ie n .IP "Mail::Box::Search::SpamAssassin\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "Mail::Box::Search::SpamAssassin\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "Mail::Box::Search::SpamAssassin->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR( [$level, [$strings]] )" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "$obj->log( [$level, [$strings]] )"
.PD 0
.IP "Mail::Box::Search::SpamAssassin\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "Mail::Box::Search::SpamAssassin->log( [$level, [$strings]] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR($level)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR($level)" 4
.IX Item "$obj->logPriority($level)"
.PD 0
.IP "Mail::Box::Search::SpamAssassin\->\fBlogPriority\fR($level)" 4
.IX Item "Mail::Box::Search::SpamAssassin->logPriority($level)"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR( [$level] )" 4
.IX Item "$obj->report( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR( [$level] )" 4
.IX Item "$obj->reportAll( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR( [$level] )" 4
.IX Item "$obj->trace( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
Extends \*(L"Cleanup\*(R" in Mail::Box::Search.
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
Inherited, see \*(L"Cleanup\*(R" in Mail::Reporter
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Package $package does not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR does not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package does not implement $method."
Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 3.008,
built on October 04, 2019. Website: \fIhttp://perl.overmeer.net/CPAN/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2019 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://dev.perl.org/licenses/\fR
