.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "ZIPDETAILS 1"
.TH ZIPDETAILS 1 "2020-07-15" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
zipdetails \- display the internal structure of zip files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    zipdetails [\-v][\-\-scan] zipfile.zip
\&    zipdetails \-h
\&    zipdetails \-\-version
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Zipdetails displays information about the internal record structure of zip
files. It is not concerned with displaying any details of the compressed
data stored in the zip file.
.PP
The program assumes prior understanding of the internal structure of a Zip
file. You should have a copy of the Zip \s-1APPNOTE\s0 file at hand to help
understand the output from this program (\*(L"\s-1SEE ALSO\*(R"\s0 for details).
.SS "Default Behaviour"
.IX Subsection "Default Behaviour"
By default the program expects to be given a well-formed zip file.  It will
navigate the Zip file by first parsing the zip central directory at the end
of the file.  If that is found, it will then walk through the zip records
starting at the beginning of the file. Any badly formed zip data structures
encountered are likely to terminate the program.
.PP
If the program finds any structural problems with the zip file it will
print a summary at the end of the output report. The set of error cases
reported is very much a work in progress, so don't rely on this feature to
find all the possible errors in a zip file. If you have suggestions for
use-cases where this could be enhanced please consider creating an
enhancement request (see \*(L"\s-1SUPPORT\*(R"\s0).
.SS "Scan-Mode"
.IX Subsection "Scan-Mode"
If you do have a potentially corrupt zip file, particulatly where the
central directory at the end of the file is absent/incomplete, you can try
usng the \f(CW\*(C`\-\-scan\*(C'\fR option to search for zip records that are still present.
.PP
When Scan-mode is enabled, the program will walk the zip file from the
start blindly looking for the 4\-byte signatures that preceed each of the
zip data structures. If it finds any of the recognised signatures it will
attempt to dump the associated zip record. For very large zip files, this
operation can take a long time to run.
.PP
Note that the 4\-byte signatures used in zip files can sometimes match with
random data stored in the zip file, so care is needed interpreting the
results.
.SS "\s-1OPTIONS\s0"
.IX Subsection "OPTIONS"
.IP "\-h" 5
.IX Item "-h"
Display help
.IP "\-\-scan" 5
.IX Item "--scan"
Walk the zip file loking for possible zip records. Can be error-prone.
See \*(L"Scan-Mode\*(R"
.IP "\-v" 5
.IX Item "-v"
Enable Verbose mode. See \*(L"Verbose Output\*(R".
.IP "\-\-version" 5
.IX Item "--version"
Display version number of the program and exit.
.SS "Default Output"
.IX Subsection "Default Output"
By default zipdetails will output the details of the zip file in three
columns.
.IP "Column 1" 5
.IX Item "Column 1"
This contains the offset from the start of the file in hex.
.IP "Column 2" 5
.IX Item "Column 2"
This contains a textual description of the field.
.IP "Column 3" 5
.IX Item "Column 3"
If the field contains a numeric value it will be displayed in hex. Zip
stores most numbers in little-endian format \- the value displayed will have
the little-endian encoding removed.
.Sp
Next, is an optional description of what the value means.
.SS "Verbose Output"
.IX Subsection "Verbose Output"
If the \f(CW\*(C`\-v\*(C'\fR option is present, column 1 is expanded to include
.IP "\(bu" 5
The offset from the start of the file in hex.
.IP "\(bu" 5
The length of the field in hex.
.IP "\(bu" 5
A hex dump of the bytes in field in the order they are stored in the zip
file.
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
The following zip file features are not supported by this program:
.IP "\(bu" 5
Multi-part archives.
.IP "\(bu" 5
The strong encryption features defined in the \*(L"\s-1APPNOTE\*(R"\s0 document.
.SH "TODO"
.IX Header "TODO"
Error handling is a work in progress. If the program encounters a problem
reading a zip file it is likely to terminate with an unhelpful error
message.
.SH "SUPPORT"
.IX Header "SUPPORT"
General feedback/questions/bug reports should be sent to
<https://github.com/pmqs/IO\-Compress/issues> (preferred) or
<https://rt.cpan.org/Public/Dist/Display.html?Name=IO\-Compress>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The primary reference for Zip files is the \*(L"\s-1APPNOTE\*(R"\s0 document available at
<http://www.pkware.com/documents/casestudies/APPNOTE.TXT>.
.PP
An alternative reference is the Info-Zip appnote. This is available from
<ftp://ftp.info\-zip.org/pub/infozip/doc/>
.PP
The \f(CW\*(C`zipinfo\*(C'\fR program that comes with the info-zip distribution
(<http://www.info\-zip.org/>) can also display details of the structure of
a zip file.
.PP
See also Archive::Zip::SimpleZip, IO::Compress::Zip,
IO::Uncompress::Unzip.
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul Marquess \fIpmqs@cpan.org\fR.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2011\-2020 Paul Marquess. All rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
