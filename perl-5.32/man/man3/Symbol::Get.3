.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Symbol::Get 3"
.TH Symbol::Get 3 "2018-08-25" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Symbol::Get \- Read Perl’s symbol table programmatically
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    package Foo;
\&
\&    our $name = \*(Aqhaha\*(Aq;
\&    our @list = ( 1, 2, 3 );
\&    our %hash = ( foo => 1, bar => 2 );
\&
\&    use constant my_const => \*(Aqhaha\*(Aq;
\&
\&    use constant my_const_list => qw( a b c );
\&
\&    sub doit { ... }
\&
\&    my $name_sr = Symbol::Get::get(\*(Aq$Foo::name\*(Aq);    # \e$name
\&    my $list_ar = Symbol::Get::get(\*(Aq@Foo::list\*(Aq);    # \e@list
\&    my $hash_hr = Symbol::Get::get(\*(Aq%Foo::hash\*(Aq);    $ \e%hash
\&
\&    #Defaults to _\|_PACKAGE_\|_ if none is given:
\&    my $doit_cr = Symbol::Get::get(\*(Aq&doit\*(Aq);
\&
\&    #Constants:
\&    my $const_val = Symbol::Get::copy_constant(\*(AqFoo::my_const\*(Aq);
\&    my @const_list = Symbol::Get::copy_constant(\*(AqFoo::my_const_list\*(Aq);
\&
\&    #The below return the same results since get_names() defaults
\&    #to the current package if none is given.
\&    my @names = Symbol::Get::get_names(\*(AqFoo\*(Aq);      # keys %Foo::
\&    my @names = Symbol::Get::get_names();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Occasionally I have need to reference a variable programmatically.
This module facilitates that by providing an easy, syntactic-sugar-y,
read-only interface to the symbol table.
.PP
The \s-1SYNOPSIS\s0 above should pretty well cover usage.
.SH "ABOUT PERL CONSTANTS"
.IX Header "ABOUT PERL CONSTANTS"
Previous versions of this module endorsed constructions like:
.PP
.Vb 2
\&    my $const_sr = Symbol::Get::get(\*(AqFoo::my_const\*(Aq);
\&    my $const_ar = Symbol::Get::get(\*(AqFoo::my_const_list\*(Aq);
.Ve
.PP
… to read constants from the symbol table. This isn’t reliable across
Perl versions, though, so don’t do it; instead, use \f(CW\*(C`copy_constant()\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
Symbol::Values
.SH "LICENSE"
.IX Header "LICENSE"
This module is licensed under the same license as Perl.
