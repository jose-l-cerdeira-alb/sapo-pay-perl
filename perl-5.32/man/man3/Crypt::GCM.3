.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Crypt::GCM 3"
.TH Crypt::GCM 3 "2007-10-27" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Crypt::GCM \- Galois/Counter Mode (GCM)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Crypt::GCM;
\&  use Crypt::Rijndael;
\&  
\&  my $gcm = Crypt::GCM\->new(\-key => $key, \-cipher => \*(AqCrypt::Rijndael\*(Aq);
\&  my $gcm\->set_iv($iv);
\&  my $gcm\->aad(\*(Aq\*(Aq);
\&  my $cipher_string = $gcm\->encrypt($message);
\&  my $tag = $gcm\->tag;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The module implements the Galois/Counter Mode (\s-1GCM\s0) for Confidentiality and Authentication. The function of \s-1GCM\s0 in which the plaintext is encrypted into the ciphertext, and an authentication tag is generated on the \s-1AAD\s0 and the ciphertext.
.SS "\fBnew()\fP"
.IX Subsection "new()"
.Vb 4
\&  my $cipher = Crypt::GCM\->new(
\&      \-key    => pack \*(AqH*\*(Aq, \*(Aq00000000000000000000000000000000\*(Aq,
\&      \-cipher => \*(AqCrypt::Rijndael\*(Aq,
\&  );
.Ve
.PP
The \fBnew()\fR method creates an new Crypt::GCM object. It accepts a list of \-argument => value pairs selected from the following list:
.PP
.Vb 3
\&  Argument     Description
\&  \-\-\-\-\-\-\-\-     \-\-\-\-\-\-\-\-\-\-\-
\&  \-key         The encryption/decryption key (required)
\&  
\&  \-cipher      The cipher algorithm (required)
.Ve
.SS "\fBencrypt()\fP"
.IX Subsection "encrypt()"
.Vb 1
\&  my $ciphertext = $cipher\->encrypt($plaintext);
.Ve
.SS "\fBdecrypt()\fP"
.IX Subsection "decrypt()"
.Vb 1
\&  my $plaintext = $cipher\->decrypt($ciphertext);
.Ve
.SS "\fBset_iv()\fP"
.IX Subsection "set_iv()"
.Vb 1
\&  $cipher\->set_iv($iv);
.Ve
.PP
This allows you to change the initialization vector. allow 16byte string.
.SS "\fBaad()\fP"
.IX Subsection "aad()"
.Vb 2
\&  $cipher\->aad($text);
\&  my $text = $cipher\->aad();
.Ve
.SS "\fBtag()\fP"
.IX Subsection "tag()"
.Vb 2
\&  $cipher\->tag($tag);
\&  my $tag = $cipher\->tag();
.Ve
.SH "EXAMPLE"
.IX Header "EXAMPLE"
.SS "Encrypt"
.IX Subsection "Encrypt"
.Vb 3
\&  use Crypt::GCM;
\&  use Crypt::Rijndael;
\&  use strict;
\&  
\&  my $cipher = Crypt::GCM\->new(
\&      \-key => pack \*(AqH*\*(Aq, \*(Aq00000000000000000000000000000000\*(Aq,
\&      \-cipher => \*(AqCrypt::Rijndael\*(Aq,
\&  );
\&  $cipher\->set_iv(pack \*(AqH*\*(Aq, \*(Aq000000000000000000000000\*(Aq);
\&  $cipher\->aad(\*(Aq\*(Aq);
\&  my $ciphertext = $cipher\->encrypt(pack \*(AqH*\*(Aq, \*(Aq000000000000000000000000000000\*(Aq);
\&  my $tag = $cipher\->tag;
.Ve
.SS "Decrypt"
.IX Subsection "Decrypt"
.Vb 3
\&  use Crypt::GCM;
\&  use Crypt::Rijndael;
\&  use strict;
\&  
\&  my $cipher = Crypt::GCM\->new(
\&      \-key => pack \*(AqH*\*(Aq, \*(Aq00000000000000000000000000000000\*(Aq,
\&      \-cipher => \*(AqCrypt::Rijndael\*(Aq,
\&  );
\&  $cipher\->set_iv(pack \*(AqH*\*(Aq, \*(Aq000000000000000000000000\*(Aq);
\&  $cipher\->aad(\*(Aq\*(Aq);
\&  $cipher\->tag(pack \*(AqH*\*(Aq, \*(Aqab6e47d42cec13bdf53a67b21257bddf\*(Aq);
\&  my $plaintext = $cipher\->decrypt(pack \*(AqH*\*(Aq, \*(Aq0388dace60b6a392f328c2b971b2fe78\*(Aq);
\&  if (!defined $plaintext) {
\&      die \*(Aqcannot decrypt on GCM mode. please check your Authentication Tag\*(Aq;
\&  }
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1NIST\s0 Special Publication 800\-38D \- Recommendation for Block Cipher Modes of Operation: Galois/Counter Mode (\s-1GCM\s0) for Confidentiality and Authenticaton.
.PP
<http://csrc.nist.gov/publications/drafts/Draft\-NIST_SP800\-38D_Public_Comment.pdf>
.SH "AUTHOR"
.IX Header "AUTHOR"
Hiroyuki \s-1OYAMA,\s0 <oyama@module.jp>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2006 by Hiroyuki \s-1OYAMA.\s0
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.6 or,
at your option, any later version of Perl 5 you may have available.
