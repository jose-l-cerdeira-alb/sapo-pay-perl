.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Math::ProvablePrime 3"
.TH Math::ProvablePrime 3 "2021-09-10" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::ProvablePrime \- Generate a provable prime number, in pure Perl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&    #The returned prime will be 512 bits long
\&    #(i.e., the first and last bits will be 1)
\&    #and will be an instance of Math::BigInt.
\&    #
\&    my $prime = Math::ProvablePrime::find(512);
.Ve
.SH "DISCUSSION"
.IX Header "DISCUSSION"
There’s not much more to say: this module returns a prime number of a
specified bit length.
.PP
The specific algorithm is Maurer’s algorithm. The logic in this module
is ported from a Python implementation first posted at
<http://s13.zetaboards.com/Crypto/topic/7234475/1/>.
.SH "PLANNED DEPRECATION"
.IX Header "PLANNED DEPRECATION"
This module will be deprecated once Math::Prime::Util is installable without
a compiler. (There is pure-Perl logic in that distribution; the install
logic just needs to be tweaked.) Math::Prime::Util is faster and has a
maintainer who understands the mathematics behind all of this much better
than I do.
.PP
Math::ProvablePrime is too slow for its
intended purpose (i.e., to provide pure-Perl primes), and really, I don’t have
the mathematical background that would justify its continued maintenance.
.PP
If you have any objection, please let me know.
.SH "SPEED"
.IX Header "SPEED"
This module is too slow for practical use in pure Perl. If a recognized
alternate backend for Math::BigInt is available, though, then this module
will use that to achieve reasonable (though still unimpressive) speed.
.PP
Recognized alternate backends are (in order of preference):
.IP "\(bu" 4
Math::BigInt::GMPz
.IP "\(bu" 4
Math::BigInt::GMP
.IP "\(bu" 4
Math::BigInt::LTM
.IP "\(bu" 4
Math::BigInt::Pari
.PP
Math::BigInt::BitVect and Math::BigInt::FastCalc are also
recognized, but these don’t seem to achieve speed that’s practical
for use in, e.g., creation of \s-1RSA\s0 keys.
.SH "LICENSE"
.IX Header "LICENSE"
This module is released under the same license as Perl.
