.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Box-Overview 3"
.TH Mail::Box-Overview 3 "2019-10-04" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Box\-Overview \- objects used by Mail::Box
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Introduction"
.IX Subsection "Introduction"
The MailBox package is a suite of classes for accessing and managing
email folders in a folder-independent manner. This package is an
alternative to the \f(CW\*(C`Mail::Folder\*(C'\fR and \f(CW\*(C`MIME::*\*(C'\fR packages. It abstracts the
details of messages, message storage, and message threads, while
providing better performance than older mail packages. It is meant to
provide an object-oriented toolset for all kinds of e\-mail applications,
under which Mail User-Agents (\s-1MUA\s0) and mail filtering programs.
.PP
This package is modular \-\-parts of it can be used independently of the
rest. For example, the Mail::Box::Manager can automatically determine
that a folder is in Mbox format and return an object of the
Mail::Box::Mbox class, or the user program can bypass the manager and
create Mail::Box::Mbox objects directly. Similarly, if the user program
is only manipulating a single message, a Mail::Message.
.PP
The Mail::Box package has special features to help \s-1MUA\s0's access folder
data quickly in random order.  You will not really benefit (neither
slower) if you need the full folder sequentially.
.PP
You may want to have a look at the sample scripts in the \f(CW\*(C`scripts\*(C'\fR
directory.
.SS "Distributions"
.IX Subsection "Distributions"
Up to MailBox v2, all \f(CW\*(C`Mail::*\*(C'\fR modules were released as a single
distribution.  From v3, there are a few separate distributions in an
attempt to reduce the dependencies:
.IP "\(bu" 4
Mail::Message
.IP "\(bu" 4
Mail::Transfer
.IP "\(bu" 4
Mail::Box
.IP "\(bu" 4
Mail::Box::IMAP4
.IP "\(bu" 4
Mail::Box::POP3
.IP "\(bu" 4
Mail::Box::Parser::C
.PP
The names of the classes are not always ideal: the 'Mail' namespace on
\&\s-1CPAN\s0 is quite full.
.SS "The class relations"
.IX Subsection "The class relations"
Mail::Box::Manager objects play a central role in any program which
is built with MailBox.  Each program will create one manager, and
then open folders via that manager.  Besides folders, the manager can
also be used to discover message threads: sequences of messages with
their follow-ups.
.PP
.Vb 8
\&                       <has\-a>      Mail::Box::Mbox
\&  Mail::Box::Manager <\-\-\-\-\-\-\-\-\-*    (Mail::Box::MH)
\&         ^                :         (Mail::Box::Maildir)
\&         |           (maintains)    (Mail::Box::POP3)
\&         |                :
\&         |                :
\&         \`\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-*  Mail::Box::Thread::Manager
\&                      (<has\-a>)
.Ve
.PP
Each folder maintains a list of messages.  Much effort is made to hide
differences between folder types and kinds of messages.  Your program can
be used for \s-1MBOX, MH,\s0 Maildir, and \s-1POP3\s0 folders with no change at all (as
long as you stick to the rules).
.PP
.Vb 10
\& Mail::Box::Mbox  <\-\-\-\-\-\-\-\-\-\-\-* Mail::Box::Mbox::Message
\&        ^             <has\-a>            ^
\&        | <isa>                          | <isa>
\&        |                                |
\&    Mail::Box     ............. Mail::Box::Message
\&                                         ^
\&                                         | <isa>
\&                                         |
\&                                   Mail::Message
\&                                        / \e
\&                                       <has\-a>  
\&                                      /     \e
\&                           Mail::Message   Mail::Message 
\&                             ::Body            ::Head
.Ve
.PP
The situation for \s-1MH\s0 and Maildir folders is a little more complicated,
because they have an extra intermediate level of abstraction: Mail::Box::Dir.
The \s-1POP3\s0 folder has an intermediate Mail::Box::Net.
.PP
In the future, when more Mbox-like folder types get implemented, there
may be a Mail::Box::File level too.  The following is also true
for the mail boxes
.PP
.Vb 12
\& MB::MH::Message                 MB::POP3::Message
\&       \e  MB::Maildir::Message            /
\&        \e         /                      /
\&         \e       /   MB::Mbox::Message  /
\&          \e     /         |            /
\&        MB::Dir::Message  |   MB::Net::Message
\&                     \e    |    /
\&                      \e   |   /
\&                      MB::Message
\&                          |
\&                          |
\&                     Mail::Message
.Ve
.SS "The Manager"
.IX Subsection "The Manager"
The mailbox manager Mail::Box::Manager encapsulates folder management
issues. It maintains a set of open mail folders (mailboxes), and provides
methods for opening and closing them, efficiently moving messages between
folders, and efficiently appending messages to folders.  It contains
Mail::Box objects which may be of different types.  Most folder types
can be detected automatically.
.PP
The main manager also manages message-thread detector objects, and informs them
when the contents of a folder have changed. This manager class is the
only one you instantiate yourself: objects of all other classes will be
provided by your folder manager.
.PP
You are strongly advised to use this object, but you can often do without it
and open a specific folder-type directly.
.SS "The Messages"
.IX Subsection "The Messages"
.IP "Mail::Message" 4
.IX Item "Mail::Message"
A base class that defines an interface for manipulating the head and
body of a message.  There are various header object types
(Mail::Message::Head's) and a bunch of body object types
(Mail::Message::Body's).
.Sp
The Mail::Message::Construct package is loaded when more complex tasks
have to be performed on messages, like creating replies, bounces, or a
forward message.  These
functionalities are described and implemented in the ::Construct
file, but are automatically added to the Mail::Message namespace when used.
.Sp
Message types which are foreign to MailBox can be used in the
MailBox environment: there are some converters implemented via
Mail::Message::Convert.  Particularly the popular Mail::Internet
and MIME::Entity are supported.
.IP "Mail::Box::Message" 4
.IX Item "Mail::Box::Message"
An abstract base class which defines an interface for mail messages
which are stored in any folder.  It inherits from Mail::Message, and
adds the basic idea of \fIlocation\fR to a message.
.IP "Mail::Message::Body" 4
.IX Item "Mail::Message::Body"
This is the base class for all message bodies.  It describes what you
can do with any kind of body.  The body types differ on the way how the
keep the body content during the run of your program.
.Sp
One special case of the body types is the Mail::Message::Body::Multipart, which
contains a set of Mail::Message::Part objects.  These are just like
normal messages, except that they are contained in an other message.
The Mail::Message::Body::Nested body type is comparible, but contains only
one message: they are used for \f(CW\*(C`message/rfc822\*(C'\fR message encodings.
.Sp
When needed, the functionality of the body objects is extended with
Mail::Message::Body::Construct and Mail::Message::Body::Encode.  The
former package implements things like concatenation, the later controls message
encoding and decoding.  In the current implementation this is limited to
transfer encodings (implemented in the Mail::Message::TransferEnc packages).
Automatic character and mime recodings are on the wish-list.
.IP "Mail::Message::Head" 4
.IX Item "Mail::Message::Head"
The header for a single message. Maintains a set of Mail::Message::Field
objects, each containing one header line.  Fields are the only
objects which have no logging and tracing facilities, purely for reasons
of performance.
.Sp
The header object has three sub-classes: the Mail::Message::Head::Complete
version knows all lines for sure, Mail::Message::Head::Subset maintains
an unknown subset of lines, and the Mail::Message::Head::Delayed has no
lines yet but knows where to get them.
.Sp
The latter two will automatically get the missing header lines from the
mailbox files when needed, and so transform into a \f(CW\*(C`::Complete\*(C'\fR header.
It is fully transparent to the user of MailBox in which shape the
header really is on the moment.
.SS "The Folder types"
.IX Subsection "The Folder types"
.IP "Mail::Box" 4
.IX Item "Mail::Box"
A base class that defines a standard interface for mail boxes which
is independent of mailbox type. Objects of this class contain
a Mail::Box::Locker and a list of Mail::Box::Message objects.
.IP "Mail::Box::Dir" 4
.IX Item "Mail::Box::Dir"
The base class for all folders which use a directory organization: each
message is a separate entity (file) grouped in a directory.  Each
Mail::Box::Dir::Message represents one message, one such entity.
.IP "Mail::Box::Net" 4
.IX Item "Mail::Box::Net"
The base class for all folders which have the messages outside direct
reach of the MailBox library, for instance on a remote system, or in
a database.
.IP "Mail::Box::Mbox" 4
.IX Item "Mail::Box::Mbox"
This class derives from Mail::Box, and implements its interface for
mbox-style folders. It maintains a set of Mail::Box::Mbox::Message
objects, which are derived from a Mail::Box::Message.
.Sp
Mbox-style folders have one file containing multiple messages per
folder.  When folders get large, access tends to get slow.
.IP "Mail::Box::MH" 4
.IX Item "Mail::Box::MH"
This class derives from Mail::Box::Dir, and implements its interface for
MH-style folders. It maintains a set of Mail::Box::MH::Message
objects, which are derived from a Mail::Box::Dir::Message.
.Sp
MH-style folders are represented by a directory, where each message is
stored in a separate file.  The message files are sequentially numbered.
It is fast to open one single message, but hard to get an overview.
.IP "Mail::Box::MH::Index" 4
.IX Item "Mail::Box::MH::Index"
The base class for \s-1MH\s0 mailbox indexes which provides methods for reading,
writing, and managing message indexes.  These indexes are used to
speed-up access to directory based folders.
.IP "Mail::Box::MH::Labels" 4
.IX Item "Mail::Box::MH::Labels"
Also for efficiency reasons, a separate file is maintained which contains
flags about the messages.  This file for instance lists new files.  This
way, the \s-1MH\s0 message files do not have to be opened to find that out.
.IP "Mail::Box::Maildir" 4
.IX Item "Mail::Box::Maildir"
Like the \s-1MH\s0 folder type, this class derives from Mail::Box::Dir.  It
implements its interface for Maildir-style folders. It maintains a set
of Mail::Box::Maildir::Message objects, which are derived from a
Mail::Box::Dir::Message.
.IP "Mail::Box::POP3" 4
.IX Item "Mail::Box::POP3"
Implements the \s-1POP3\s0 protocol based on Mail::Box::Net.  The
Mail::Transport::POP3 implementation handles the protocol details.  In this
kind of folders, you can only read and delete messages.
.SS "Various Other Classes"
.IX Subsection "Various Other Classes"
.IP "Mail::Box::Thread::Manager" 4
.IX Item "Mail::Box::Thread::Manager"
Maintains a set of message-threads over one or more folders.  A
message-thread is a start message with all the replies on it.  And the
replies on replies, and so on.  This object is used to construct the
thread for a set of open folders.
.Sp
This object maintains linked lists of Mail::Box::Thread::Node objects.
Mail::Message::Dummy's fill-up some holes.
.IP "Mail::Box::Locker" 4
.IX Item "Mail::Box::Locker"
Provides a folder locking interface which is inherited by the Mail::Box
class.  Currently it supports dot-file locking (\f(CW\*(C`filename.lock\*(C'\fR),
flock filehandle locking, and locking over \s-1NFS.\s0  Each is implemented in a
separate class.  A multi-locker, using a set of lock-methods at the
same time is also available.
.IP "Mail::Box::Search" 4
.IX Item "Mail::Box::Search"
The set of search packages implement various search techniques in an uniformal
way.  Although implementing your own search algorithm is simple in general,
in practice multiparts, encodings, and mime-types complicate things.
.IP "Mail::Box::Parser" 4
.IX Item "Mail::Box::Parser"
The parser reads messages, and transforms them into data-structures such
that the content of header and body can be used within the program.  The
first parser is implemented in pure Perl.  A second parser is under development,
and will written in C, to gain speed.
.IP "Mail::Box::Tie" 4
.IX Item "Mail::Box::Tie"
Provides hash (Mail::Box::Tie::HASH) or array tied
(Mail::Box::Tie::ARRAY) access to any mail folder derived from
Mail::Box.  This beautifies your code in some applications.
.IP "Mail::Transport" 4
.IX Item "Mail::Transport"
Various ways of sending and receiving messages are implemented.  Sending
is possible via external programs, like \f(CW\*(C`mail\*(C'\fR, \f(CW\*(C`Mailx\*(C'\fR, \f(CW\*(C`sendmail\*(C'\fR, or
autonomously with direct \s-1SMTP.\s0  Receiving is currently only implemented
via \s-1POP3.\s0
.IP "Mail::Reporter" 4
.IX Item "Mail::Reporter"
A debugging and logging class which is inherited by most of the Mail::
modules.  For each object, you can say what log and error reports must be
kept or directly presented to the user.  This way you can decide to have
Mail::Box report about problems, or do it all yourself.
.PP
All classes are written to be extensible.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 3.008,
built on October 04, 2019. Website: \fIhttp://perl.overmeer.net/CPAN/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2019 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://dev.perl.org/licenses/\fR
