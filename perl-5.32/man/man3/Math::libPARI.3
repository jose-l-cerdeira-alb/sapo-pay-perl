.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "libPARI 3"
.TH libPARI 3 "2020-07-22" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::libPARI \- Functions and Operations Available in PARI and GP
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"

The functions and operators available in \s-1PARI\s0 and in the \s-1GP/PARI\s0 calculator
are numerous and everexpanding. Here is a description of the ones available
in version \fB2.3.5\fR. It should be noted that many of these functions accept
quite different types as arguments, but others are more restricted. The list
of acceptable types will be given for each function or class of functions.
Except when stated otherwise, it is understood that a function or operation
which should make natural sense is legal. In this chapter, we will describe
the functions according to a rough classification. The general entry looks
something like:
.IX Xref "Label se:functions"
.PP
\&\fBfoo\fR\f(CW\*(C`(x,{\f(CIflag\f(CW = 0})\*(C'\fR: short description.
.PP
The library syntax is \fBfoo\fR\f(CW\*(C`(x,\f(CIflag\f(CW)\*(C'\fR.
.IX Xref "foo"
.PP
This means that the \s-1GP\s0 function \f(CW\*(C`foo\*(C'\fR has one mandatory argument \f(CW\*(C`x\*(C'\fR, and
an optional one, \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR, whose default value is 0. (The \f(CW\*(C`{}\*(C'\fR should not be
typed, it is just a convenient notation we will use throughout to denote
optional arguments.) That is, you can type \f(CW\*(C`foo(x,2)\*(C'\fR, or \f(CWfoo(x)\fR,
which is then understood to mean \f(CW\*(C`foo(x,0)\*(C'\fR. As well, a comma or closing
parenthesis, where an optional argument should have been, signals to \s-1GP\s0 it
should use the default. Thus, the syntax \f(CW\*(C`foo(x,)\*(C'\fR is also accepted as a
synonym for our last expression. When a function has more than one optional
argument, the argument list is filled with user supplied values, in order.
When none are left, the defaults are used instead. Thus, assuming that
\&\f(CW\*(C`foo\*(C'\fR's prototype had been
.PP
  \f(CW\*(C`
\&\f(CBfoo\f(CW({x = 1},{y = 2},{z = 3}),
\&\*(C'\fR
.PP
typing in \f(CW\*(C`foo(6,4)\*(C'\fR would give
you \f(CW\*(C`foo(6,4,3)\*(C'\fR. In the rare case when you want to set some far away
argument, and leave the defaults in between as they stand, you can use the
``empty arg'' trick alluded to above: \f(CW\*(C`foo(6,,1)\*(C'\fR would yield
\&\f(CW\*(C`foo(6,2,1)\*(C'\fR. By the way, \f(CW\*(C`foo()\*(C'\fR by itself yields
\&\f(CW\*(C`foo(1,2,3)\*(C'\fR as was to be expected.
.PP
In this rather special case of a function having no mandatory argument, you
can even omit the \f(CW\*(C`()\*(C'\fR: a standalone \f(CW\*(C`foo\*(C'\fR would be enough (though we
do not recommend it for your scripts, for the sake of clarity). In defining
\&\s-1GP\s0 syntax, we strove to put optional arguments at the end of the argument
list (of course, since they would not make sense otherwise), and in order of
decreasing usefulness so that, most of the time, you will be able to ignore
them.
.PP
Finally, an optional argument (between braces) followed by a star, like
\&\f(CW\*(C`{\f(CIx\f(CW}*\*(C'\fR, means that any number of such arguments (possibly none) can
be given. This is in particular used by the various \f(CW\*(C`print\*(C'\fR routines.
.PP
\&\fBFlags\fR. A \fIflag\fR is an argument which, rather than conveying
actual information to the routine, intructs it to change its default
behaviour, e.g. return more or less information. All such
flags are optional, and will be called \fIflag\fR in the function descriptions to
follow. There are two different kind of flags
.IX Xref "flag"
.PP
\&\eitem generic: all valid values for the flag are individually
described (``If \fIflag\fR is equal to \f(CW1\fR, then...'').
.PP
\&\eitem binary: use customary binary notation as a
compact way to represent many toggles with just one integer. Let
\&\f(CW\*(C`(p_0,...,p_n)\*(C'\fR be a list of switches (i.e. of properties which take either
the value \f(CW0\fR or \f(CW1\fR), the number \f(CW\*(C`2^3 + 2^5 = 40\*(C'\fR means that \f(CW\*(C`p_3\*(C'\fR and \f(CW\*(C`p_5\*(C'\fR
are set (that is, set to \f(CW1\fR), and none of the others are (that is, they
are set to \f(CW0\fR). This is announced as ``The binary digits of \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR mean 1:
\&\f(CW\*(C`p_0\*(C'\fR, 2: \f(CW\*(C`p_1\*(C'\fR, 4: \f(CW\*(C`p_2\*(C'\fR'', and so on, using the available consecutive
powers of \f(CW2\fR.
.IX Xref "binary flag"
.PP
\&\fBMnemonics for flags\fR. Numeric flags as mentionned above are
obscure, error-prone, and quite rigid: should the authors
want to adopt a new flag numbering scheme (for instance when noticing
flags with the same meaning but different numeric values across a set of
routines), it would break backward compatibility. The only advantage of
explicit numeric values is that they are fast to type, so their use is only
advised when using the calculator \f(CW\*(C`gp\*(C'\fR.
.PP
As an alternative, one can replace a numeric flag by a character string
containing symbolic identifiers. For a generic flag, the mnemonic
corresponding to the numeric identifier is given after it as in
.PP
.Vb 1
\&  fun(x, {flag = 0} ):
\&
\&    If flag is equal to 1 = AGM, use an agm formula\edots
.Ve
.PP
which means that one can use indifferently \f(CW\*(C`fun(x, 1)\*(C'\fR or \f(CW\*(C`fun(x,
AGM)\*(C'\fR.
.PP
For a binary flag, mnemonics corresponding to the various toggles are given
after each of them. They can be negated by prepending \f(CW\*(C`no_\*(C'\fR to the
mnemonic, or by removing such a prefix. These toggles are grouped together
using any punctuation character (such as \f(CW\*(Aq,\*(Aq\fR or \f(CW\*(Aq;\*(Aq\fR). For instance (taken
from description of \f(CW\*(C`ploth(X = a,b,\f(CIexpr\f(CW,{\f(CIflag\f(CW = 0},{n = 0})\*(C'\fR)
.IX Xref "ploth"
.PP
.Vb 2
\&    Binary digits of flags mean: C<1 = Parametric>,
\&    C<2 = Recursive>,...
.Ve
.PP
so that, instead of \f(CW1\fR, one could use the mnemonic
\&\f(CW"Parametric; no_Recursive"\fR, or simply \f(CW"Parametric"\fR since
\&\f(CW\*(C`Recursive\*(C'\fR is unset by default (default value of \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR is \f(CW0\fR,
i.e. everything unset).
.PP
\&\fBPointers\fR.\evarsidx{pointer} If a parameter in the function
prototype is prefixed with a & sign, as in
.PP
\&\fBfoo\fR\f(CW\*(C`(x,&e)\*(C'\fR
.PP
it means that, besides the normal return value, the function may
assign a value to \f(CW\*(C`e\*(C'\fR as a side effect. When passing the argument, the &
sign has to be typed in explicitly. As of version \fB2.3.5\fR, this \fIpointer\fR
argument is optional for all documented functions, hence the & will always
appear between brackets as in \f(CW\*(C`Z_issquare\*(C'\fR\f(CW\*(C`(x,{&e})\*(C'\fR.
.IX Xref "pointer"
.PP
\&\fBAbout library programming\fR.
the \fIlibrary\fR function \f(CW\*(C`foo\*(C'\fR, as defined
at the beginning of this section, is seen to have two mandatory arguments,
\&\f(CW\*(C`x\*(C'\fR and \fIflag\fR: no \s-1PARI\s0 mathematical function has been implemented so as to
accept a variable number of arguments, so all arguments are mandatory when
programming with the library (often, variants are provided corresponding to
the various flag values). When not mentioned otherwise, the result and
arguments of a function are assumed implicitly to be of type \f(CW\*(C`GEN\*(C'\fR. Most
other functions return an object of type \f(CW\*(C`long\*(C'\fR integer in C (see
Chapter 4). The variable or parameter names \fIprec\fR and \fIflag\fR always denote
\&\f(CW\*(C`long\*(C'\fR integers.
.PP
The \f(CW\*(C`entree\*(C'\fR type is used by the library to implement iterators (loops,
sums, integrals, etc.) when a formal variable has to successively assume a
number of values in a given set. When programming with the library, it is
easier and much more efficient to code loops and the like directly. Hence
this type is not documented, although it does appear in a few library
function prototypes below. See \*(L"Label se:sums\*(R" for more details.
.IX Xref "entree"
.SH "Standard monadic or dyadic operators"
.IX Header "Standard monadic or dyadic operators"
.ie n .SS "+""/""\-"
.el .SS "+\f(CW/\fP\-"
.IX Subsection "+/-"
The expressions \f(CW\*(C`+\*(C'\fR\f(CW\*(C`x\*(C'\fR and \f(CW\*(C`\-\*(C'\fR\f(CW\*(C`x\*(C'\fR refer
to monadic operators (the first does nothing, the second negates \f(CW\*(C`x\*(C'\fR).
.PP
The library syntax is \fBgneg\fR\f(CW\*(C`(x)\*(C'\fR for \f(CW\*(C`\-\*(C'\fR\f(CW\*(C`x\*(C'\fR.
.IX Xref "gneg"
.ie n .SS "+, ""\-"""
.el .SS "+, \f(CW\-\fP"
.IX Subsection "+, -"
The expression \f(CW\*(C`x\*(C'\fR \f(CW\*(C`+\*(C'\fR \f(CW\*(C`y\*(C'\fR is the sum and
\&\f(CW\*(C`x\*(C'\fR \f(CW\*(C`\-\*(C'\fR \f(CW\*(C`y\*(C'\fR is the difference of \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR. Among the prominent
impossibilities are addition/subtraction between a scalar type and a vector
or a matrix, between vector/matrices of incompatible sizes and between an
intmod and a real number.
.IX Xref "sum difference"
.PP
The library syntax is \fBgadd\fR\f(CW\*(C`(x,y)\*(C'\fR \f(CW\*(C`x\*(C'\fR \f(CW\*(C`+\*(C'\fR \f(CW\*(C`y\*(C'\fR, \f(CW\*(C` \f(CBgsub\f(CW(x,y)\*(C'\fR for \f(CW\*(C`x\*(C'\fR \f(CW\*(C`\-\*(C'\fR \f(CW\*(C`y\*(C'\fR.
.IX Xref "gadd gsub"
.SS "*"
.IX Subsection "*"
The expression \f(CW\*(C`x\*(C'\fR \f(CW\*(C`*\*(C'\fR \f(CW\*(C`y\*(C'\fR is the product of \f(CW\*(C`x\*(C'\fR
and \f(CW\*(C`y\*(C'\fR. Among the prominent impossibilities are multiplication between
vector/matrices of incompatible sizes, between an intmod and a real
number. Note that because of vector and matrix operations, \f(CW\*(C`*\*(C'\fR is not
necessarily commutative. Note also that since multiplication between two
column or two row vectors is not allowed, to obtain the scalar product
of two vectors of the same length, you must multiply a line vector by a
column vector, if necessary by transposing one of the vectors (using
the operator \f(CW\*(C`~\*(C'\fR or the function \f(CW\*(C`mattranspose\*(C'\fR, see
\&\*(L"Label se:linear_algebra\*(R").
.IX Xref "product scalar product"
.PP
If \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR are binary quadratic forms, compose them. See also
\&\f(CW\*(C`qfbnucomp\*(C'\fR and \f(CW\*(C`qfbnupow\*(C'\fR.
.PP
The library syntax is \fBgmul\fR\f(CW\*(C`(x,y)\*(C'\fR for \f(CW\*(C`x\*(C'\fR \f(CW\*(C`*\*(C'\fR \f(CW\*(C`y\*(C'\fR. Also available is
\&\f(CW\*(C` \f(CBgsqr\f(CW(x)\*(C'\fR for \f(CW\*(C`x\*(C'\fR \f(CW\*(C`*\*(C'\fR \f(CW\*(C`x\*(C'\fR (faster of course!).
.IX Xref "gmul gsqr"
.SS "/"
.IX Subsection "/"
The expression \f(CW\*(C`x\*(C'\fR \f(CW\*(C`/\*(C'\fR \f(CW\*(C`y\*(C'\fR is the quotient of \f(CW\*(C`x\*(C'\fR
and \f(CW\*(C`y\*(C'\fR. In addition to the impossibilities for multiplication, note that if
the divisor is a matrix, it must be an invertible square matrix, and in that
case the result is \f(CW\*(C`x*y^{\-1}\*(C'\fR. Furthermore note that the result is as exact
as possible: in particular, division of two integers always gives a rational
number (which may be an integer if the quotient is exact) and \eemph{not} the
Euclidean quotient (see \f(CW\*(C`x\*(C'\fR \f(CW\*(C`\e\*(C'\fR \f(CW\*(C`y\*(C'\fR for that), and similarly the
quotient of two polynomials is a rational function in general. To obtain the
approximate real value of the quotient of two integers, add \f(CW0.\fR to the
result; to obtain the approximate \f(CW\*(C`p\*(C'\fR\-adic value of the quotient of two
integers, add \f(CW\*(C`O(p^k)\*(C'\fR to the result; finally, to obtain the
Taylor series expansion of the quotient of two polynomials, add
\&\f(CW\*(C`O(X^k)\*(C'\fR to the result or use the \f(CW\*(C`taylor\*(C'\fR function
(see \*(L"Label se:taylor\*(R").
.IX Xref "quotient Taylor series Label se:gdiv"
.PP
The library syntax is \fBgdiv\fR\f(CW\*(C`(x,y)\*(C'\fR for \f(CW\*(C`x\*(C'\fR \f(CW\*(C`/\*(C'\fR \f(CW\*(C`y\*(C'\fR.
.IX Xref "gdiv"
.SS "\e"
.IX Subsection ""
The expression \f(CW\*(C`x \ey\*(C'\fR is the Euclidean
quotient of \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR. If \f(CW\*(C`y\*(C'\fR is a real scalar, this is defined as
\&\f(CW\*(C`floor(x/y)\*(C'\fR if \f(CW\*(C`y > 0\*(C'\fR, and \f(CW\*(C`ceil(x/y)\*(C'\fR if \f(CW\*(C`y < 0\*(C'\fR and
the division is not exact. Hence the remainder \f(CW\*(C`x \- (x\ey)*y\*(C'\fR
is in \f(CW\*(C`[0, |y|[\*(C'\fR.
.IX Xref "Euclidean quotient"
.PP
Note that when \f(CW\*(C`y\*(C'\fR is an integer and \f(CW\*(C`x\*(C'\fR a polynomial, \f(CW\*(C`y\*(C'\fR is first promoted
to a polynomial of degree \f(CW0\fR. When \f(CW\*(C`x\*(C'\fR is a vector or matrix, the operator
is applied componentwise.
.PP
The library syntax is \fBgdivent\fR\f(CW\*(C`(x,y)\*(C'\fR for \f(CW\*(C`x\*(C'\fR \f(CW\*(C`\e\*(C'\fR \f(CW\*(C`y\*(C'\fR.
.IX Xref "gdivent"
.SS "\e/"
.IX Subsection "/"
The expression \f(CW\*(C`x\*(C'\fR \f(CW\*(C`\e/\*(C'\fR \f(CW\*(C`y\*(C'\fR evaluates to the rounded
Euclidean quotient of \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR. This is the same as \f(CW\*(C`x \ey\*(C'\fR
except for scalar division: the quotient is such that the corresponding
remainder is smallest in absolute value and in case of a tie the quotient
closest to \f(CW\*(C`+ oo \*(C'\fR is chosen (hence the remainder would belong to
\&\f(CW\*(C`]\-|y|/2, |y|/2]\*(C'\fR).
.IX Xref "Euclidean quotient"
.PP
When \f(CW\*(C`x\*(C'\fR is a vector or matrix, the operator is applied componentwise.
.PP
The library syntax is \fBgdivround\fR\f(CW\*(C`(x,y)\*(C'\fR for \f(CW\*(C`x\*(C'\fR \f(CW\*(C`\e/\*(C'\fR \f(CW\*(C`y\*(C'\fR.
.IX Xref "gdivround"
.SS "%"
.IX Subsection "%"
The expression \f(CW\*(C`x % y\*(C'\fR evaluates to the modular
Euclidean remainder of \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR, which we now define. If \f(CW\*(C`y\*(C'\fR is an
integer, this is the smallest non-negative integer congruent to \f(CW\*(C`x\*(C'\fR modulo
\&\f(CW\*(C`y\*(C'\fR. If \f(CW\*(C`y\*(C'\fR is a polynomial, this is the polynomial of smallest degree
congruent to \f(CW\*(C`x\*(C'\fR modulo \f(CW\*(C`y\*(C'\fR. When \f(CW\*(C`y\*(C'\fR is a non-integral real number,
\&\f(CW\*(C`x%y\*(C'\fR is defined as \f(CW\*(C`x \- (x\ey)*y\*(C'\fR. This
coincides with the definition for \f(CW\*(C`y\*(C'\fR integer if and only if \f(CW\*(C`x\*(C'\fR is an
integer, but still belongs to \f(CW\*(C`[0, |y|[\*(C'\fR. For instance:
.IX Xref "Euclidean remainder"
.PP
.Vb 6
\&  ? (1/2) % 3
\&  %1 = 2
\&  ? 0.5 % 3
\&    ***   forbidden division t_REAL % t_INT.
\&  ? (1/2) % 3.0
\&  %2 = 1/2
.Ve
.PP
Note that when \f(CW\*(C`y\*(C'\fR is an integer and \f(CW\*(C`x\*(C'\fR a polynomial, \f(CW\*(C`y\*(C'\fR is first promoted
to a polynomial of degree \f(CW0\fR. When \f(CW\*(C`x\*(C'\fR is a vector or matrix, the operator
is applied componentwise.
.PP
The library syntax is \fBgmod\fR\f(CW\*(C`(x,y)\*(C'\fR for \f(CW\*(C`x\*(C'\fR \f(CW\*(C`%\*(C'\fR \f(CW\*(C`y\*(C'\fR.
.IX Xref "gmod"
.ie n .SS "divrem""(x,y,{v})"""
.el .SS "divrem\f(CW(x,y,{v})\fP"
.IX Xref "divrem"
.IX Subsection "divrem(x,y,{v})"
creates a column vector with two components,
the first being the Euclidean quotient (\f(CW\*(C`x \ey\*(C'\fR), the second the
Euclidean remainder (\f(CW\*(C`x \- (x\ey)*y\*(C'\fR), of the division of \f(CW\*(C`x\*(C'\fR by
\&\f(CW\*(C`y\*(C'\fR. This avoids the need to do two divisions if one needs both the quotient
and the remainder. If \f(CW\*(C`v\*(C'\fR is present, and \f(CW\*(C`x\*(C'\fR, \f(CW\*(C`y\*(C'\fR are multivariate
polynomials, divide with respect to the variable \f(CW\*(C`v\*(C'\fR.
.PP
Beware that \f(CW\*(C`divrem(x,y)[2]\*(C'\fR is in general not the same as
\&\f(CW\*(C`x % y\*(C'\fR; there is no operator to obtain it in \s-1GP:\s0
.PP
.Vb 8
\&  ? divrem(1/2, 3)[2]
\&  %1 = 1/2
\&  ? (1/2) % 3
\&  %2 = 2
\&  ? divrem(Mod(2,9), 3)[2]
\&    ***   forbidden division t_INTMOD \e t_INT.
\&  ? Mod(2,9) % 6
\&  %3 = Mod(2,3)
.Ve
.PP
The library syntax is \fBdivrem\fR\f(CW\*(C`(x,y,v)\*(C'\fR,where \f(CW\*(C`v\*(C'\fR is a \f(CW\*(C`long\*(C'\fR. Also available as
\&\f(CW\*(C` \f(CBgdiventres\f(CW(x,y)\*(C'\fR when \f(CW\*(C`v\*(C'\fR is not needed.
.IX Xref "divrem gdiventres"
.SS "^"
.IX Subsection "^"
The expression \f(CW\*(C`x^n\*(C'\fR is powering.
If the exponent is an integer, then exact operations are performed using
binary (left-shift) powering techniques. In particular, in this case \f(CW\*(C`x\*(C'\fR
cannot be a vector or matrix unless it is a square matrix (invertible
if the exponent is negative). If \f(CW\*(C`x\*(C'\fR is a \f(CW\*(C`p\*(C'\fR\-adic number, its
precision will increase if \f(CW\*(C`v_p(n) > 0\*(C'\fR. Powering a binary quadratic form
(types \f(CW\*(C`t_QFI\*(C'\fR and \f(CW\*(C`t_QFR\*(C'\fR) returns a reduced representative of the
class, provided the input is reduced. In particular, \f(CW\*(C`x^1\*(C'\fR is
identical to \f(CW\*(C`x\*(C'\fR.
.IX Xref "powering"
.PP
\&\s-1PARI\s0 is able to rewrite the multiplication \f(CW\*(C`x * x\*(C'\fR of two \eemph{identical}
objects as \f(CW\*(C`x^2\*(C'\fR, or \f(CWsqr(x)\fR. Here, identical means the operands are
two different labels referencing the same chunk of memory; no equality test
is performed. This is no longer true when more than two arguments are
involved.
.PP
If the exponent is not of type integer, this is treated as a transcendental
function (see \*(L"Label se:trans\*(R"), and in particular has the effect of
componentwise powering on vector or matrices.
.PP
As an exception, if the exponent is a rational number \f(CW\*(C`p/q\*(C'\fR and \f(CW\*(C`x\*(C'\fR an
integer modulo a prime or a \f(CW\*(C`p\*(C'\fR\-adic number, return a solution \f(CW\*(C`y\*(C'\fR of
\&\f(CW\*(C`y^q = x^p\*(C'\fR if it exists. Currently, \f(CW\*(C`q\*(C'\fR must not have large prime factors.
Beware that
.PP
.Vb 8
\&      ? Mod(7,19)^(1/2)
\&      %1 = Mod(11, 19) /* is any square root */
\&      ? sqrt(Mod(7,19))
\&      %2 = Mod(8, 19)  /* is the smallest square root */
\&      ? Mod(7,19)^(3/5)
\&      %3 = Mod(1, 19)
\&      ? %3^(5/3)
\&      %4 = Mod(1, 19)  /* Mod(7,19) is just another cubic root */
.Ve
.PP
If the exponent is a negative integer, an inverse must be computed.
For non-invertible \f(CW\*(C`t_INTMOD\*(C'\fR, this will fail and implicitly exhibit a
non trivial factor of the modulus:
.IX Xref "inverse"
.PP
.Vb 2
\&      ? Mod(4,6)^(\-1)
\&        ***   impossible inverse modulo: Mod(2, 6).
.Ve
.PP
(Here, a factor 2 is obtained directly. In general, take the gcd of the
representative and the modulus.) This is most useful when performing
complicated operations modulo an integer \f(CW\*(C`N\*(C'\fR whose factorization is
unknown. Either the computation succeeds and all is well, or a factor \f(CW\*(C`d\*(C'\fR
is discovered and the computation may be restarted modulo \f(CW\*(C`d\*(C'\fR or \f(CW\*(C`N/d\*(C'\fR.
.PP
For non-invertible \f(CW\*(C`t_POLMOD\*(C'\fR, this will fail without exhibiting a
factor.
.PP
.Vb 2
\&      ? Mod(x^2, x^3\-x)^(\-1)
\&        ***   non\-invertible polynomial in RgXQ_inv.
\&
\&      ? a = Mod(3,4)*y^3 + Mod(1,4); b = y^6+y^5+y^4+y^3+y^2+y+1;
\&      ? Mod(a, b)^(\-1);
\&        ***   non\-invertible polynomial in RgXQ_inv.
.Ve
.PP
In fact the latter polynomial is invertible, but the algorithm used
(subresultant) assumes the base ring is a domain. If it is not the case,
as here for \f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW/4\f(CB\f(CBZ\f(CB\f(CW\*(C'\fR, a result will be correct but chances are an error
will occur first. In this specific case, one should work with \f(CW2\fR\-adics.
In general, one can try the following approach
.PP
.Vb 8
\&      ? inversemod(a, b) =
\&      { local(m);
\&        m = polsylvestermatrix(polrecip(a), polrecip(b));
\&        m = matinverseimage(m, matid(#m)[,1]);
\&        Polrev( vecextract(m, Str("..", poldegree(b))), variable(b) )
\&      }
\&      ? inversemod(a,b)
\&      %2 = Mod(2,4)*y^5 + Mod(3,4)*y^3 + Mod(1,4)*y^2 + Mod(3,4)*y + Mod(2,4)
.Ve
.PP
This is not guaranteed to work either since it must invert pivots. See
\&\*(L"Label se:linear_algebra\*(R".
.PP
The library syntax is \fBgpow\fR\f(CW\*(C`(x,n,\f(CIprec\f(CW)\*(C'\fR for \f(CW\*(C`x^n\*(C'\fR.
.IX Xref "gpow"
.ie n .SS "bittest""(x,n)"""
.el .SS "bittest\f(CW(x,n)\fP"
.IX Xref "bittest"
.IX Subsection "bittest(x,n)"
outputs the \f(CW\*(C`n^{th}\*(C'\fR bit of \f(CW\*(C`x\*(C'\fR starting
from the right (i.e. the coefficient of \f(CW\*(C`2^n\*(C'\fR in the binary expansion of \f(CW\*(C`x\*(C'\fR).
The result is 0 or 1. To extract several bits at once as a vector, pass a
vector for \f(CW\*(C`n\*(C'\fR.
.PP
See \*(L"Label se:bitand\*(R" for the behaviour at negative arguments.
.PP
The library syntax is \fBbittest\fR\f(CW\*(C`(x,n)\*(C'\fR, where \f(CW\*(C`n\*(C'\fR and the result are \f(CW\*(C`long\*(C'\fRs.
.IX Xref "bittest"
.ie n .SS "shift""(x,n)"" or ""x"" ""<< "" ""n"" ( = ""x"" "">> "" ""(\-n)"")"
.el .SS "shift\f(CW(x,n)\fP or \f(CWx\fP \f(CW<< \fP \f(CWn\fP ( = \f(CWx\fP \f(CW>> \fP \f(CW(\-n)\fP)"
.IX Xref "shift"
.IX Subsection "shift(x,n) or x << n ( = x >> (-n))"
shifts
\&\f(CW\*(C`x\*(C'\fR componentwise left by \f(CW\*(C`n\*(C'\fR bits if \f(CW\*(C`n >= 0\*(C'\fR and right by \f(CW\*(C`|n|\*(C'\fR bits if \f(CW\*(C`n < 0\*(C'\fR.
A left shift by \f(CW\*(C`n\*(C'\fR corresponds to multiplication by \f(CW\*(C`2^n\*(C'\fR. A right shift of an
integer \f(CW\*(C`x\*(C'\fR by \f(CW\*(C`|n|\*(C'\fR corresponds to a Euclidean division of \f(CW\*(C`x\*(C'\fR by \f(CW\*(C`2^{|n|}\*(C'\fR
with a remainder of the same sign as \f(CW\*(C`x\*(C'\fR, hence is not the same (in general) as
\&\f(CW\*(C`x \e 2^n\*(C'\fR.
.PP
The library syntax is \fBgshift\fR\f(CW\*(C`(x,n)\*(C'\fR where \f(CW\*(C`n\*(C'\fR is a \f(CW\*(C`long\*(C'\fR.
.IX Xref "gshift"
.ie n .SS "shiftmul""(x,n)"""
.el .SS "shiftmul\f(CW(x,n)\fP"
.IX Xref "shiftmul"
.IX Subsection "shiftmul(x,n)"
multiplies \f(CW\*(C`x\*(C'\fR by \f(CW\*(C`2^n\*(C'\fR. The difference with
\&\f(CW\*(C`shift\*(C'\fR is that when \f(CW\*(C`n < 0\*(C'\fR, ordinary division takes place, hence for
example if \f(CW\*(C`x\*(C'\fR is an integer the result may be a fraction, while for shifts
Euclidean division takes place when \f(CW\*(C`n < 0\*(C'\fR hence if \f(CW\*(C`x\*(C'\fR is an integer the result
is still an integer.
.PP
The library syntax is \fBgmul2n\fR\f(CW\*(C`(x,n)\*(C'\fR where \f(CW\*(C`n\*(C'\fR is a \f(CW\*(C`long\*(C'\fR.
.IX Xref "gmul2n"
.SS "Comparison and boolean operators"
.IX Subsection "Comparison and boolean operators"
The six
standard comparison operators \f(CW\*(C`<= \*(C'\fR, \f(CW\*(C`< \*(C'\fR, \f(CW\*(C`>= \*(C'\fR, \f(CW\*(C`> \*(C'\fR,
\&\f(CW\*(C` == \*(C'\fR, \f(CW\*(C`! = \*(C'\fR are available in \s-1GP,\s0 and in library mode under the names
\&\f(CW\*(C`gle\*(C'\fR, \f(CW\*(C`glt\*(C'\fR, \f(CW\*(C`gge\*(C'\fR, \f(CW\*(C`ggt\*(C'\fR, \f(CW\*(C`geq\*(C'\fR, \f(CW\*(C`gne\*(C'\fR respectively.
The library syntax is \f(CW\*(C`\f(CIco\f(CW(x,y)\*(C'\fR, where \fIco\fR is the comparison
operator. The result is 1 (as a \f(CW\*(C`GEN\*(C'\fR) if the comparison is true, 0 (as a
\&\f(CW\*(C`GEN\*(C'\fR) if it is false. For the purpose of comparison, \f(CW\*(C`t_STR\*(C'\fR objects are
strictly larger than any other non-string type; two \f(CW\*(C`t_STR\*(C'\fR objects are
compared using the standard lexicographic order.
.IX Xref "boolean operators comparison operators gle glt gge ggt geq gne"
.PP
The standard boolean functions  \f(CW\*(C`||\*(C'\fR (inclusive or), \f(CW\*(C`&&\*(C'\fR
(and) and \f(CW\*(C`!\*(C'\fR (not) are also available, and the
library syntax is \f(CW\*(C` \f(CBgor\f(CW(x,y)\*(C'\fR, \f(CW\*(C` \f(CBgand\f(CW(x,y)\*(C'\fR and \f(CW\*(C` \f(CBgnot\f(CW(x)\*(C'\fR
respectively.
.IX Xref "inclusive or and or not gor gand gnot"
.PP
In library mode, it is in fact usually preferable to use the two basic
functions which are \f(CW\*(C` \f(CBgcmp\f(CW(x,y)\*(C'\fR which gives the sign (1, 0, or \-1) of
\&\f(CW\*(C`x\-y\*(C'\fR, where \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR must be in \fB\f(BIR\fB\fR, and \f(CW\*(C` \f(CBgequal\f(CW(x,y)\*(C'\fR which can be
applied to any two \s-1PARI\s0 objects \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR and gives 1 (i.e. true) if they are
equal (but not necessarily identical), 0 (i.e. false) otherwise. Comparisons
to special constants are implemented and should be used instead of
\&\f(CW\*(C`gequal\*(C'\fR: \f(CW\*(C` \f(CBgcmp0\f(CW(x)\*(C'\fR (\f(CW\*(C`x == 0\*(C'\fR ?), \f(CW\*(C` \f(CBgcmp1\f(CW(x)\*(C'\fR (\f(CW\*(C`x == 1\*(C'\fR ?), and
\&\f(CW\*(C` \f(CBgcmp_1\f(CW(x)\*(C'\fR (\f(CW\*(C`x == \-1\*(C'\fR ?).
.IX Xref "gcmp gequal gcmp0 gcmp1 gcmp_1"
.PP
Note that \f(CWgcmp0(x)\fR tests whether \f(CW\*(C`x\*(C'\fR is equal to zero, even if \f(CW\*(C`x\*(C'\fR is
not an exact object. To test whether \f(CW\*(C`x\*(C'\fR is an exact object which is equal to
zero, one must use \f(CW\*(C` \f(CBisexactzero\f(CW(x)\*(C'\fR.
.IX Xref "isexactzero"
.PP
Also note that the \f(CW\*(C`gcmp\*(C'\fR and \f(CW\*(C`gequal\*(C'\fR functions return a C\-integer,
and \eemph{not} a \f(CW\*(C`GEN\*(C'\fR like \f(CW\*(C`gle\*(C'\fR etc.
.PP
\&\s-1GP\s0 accepts the following synonyms for some of the above functions: since we
thought it might easily lead to confusion, we don't use the customary C
operators for bitwise \f(CW\*(C`and\*(C'\fR or bitwise \f(CW\*(C`or\*(C'\fR (use \f(CW\*(C`bitand\*(C'\fR or
\&\f(CW\*(C`bitor\*(C'\fR), hence \f(CW\*(C`|\*(C'\fR and \f(CW\*(C`&\*(C'\fR are accepted as synonyms of \f(CW\*(C`||\*(C'\fR and \f(CW\*(C`&&\*(C'\fR respectively.
Also, \f(CW\*(C`<  > \*(C'\fR is accepted as a synonym for \f(CW\*(C`! = \*(C'\fR. On the other hand,
\&\f(CW\*(C` = \*(C'\fR is definitely \eemph{not} a synonym for \f(CW\*(C` == \*(C'\fR since it is the
assignment statement.
.IX Xref "bitand bitor bitwise and bitwise or"
.ie n .SS "lex""(x,y)"""
.el .SS "lex\f(CW(x,y)\fP"
.IX Xref "lex"
.IX Subsection "lex(x,y)"
gives the result of a lexicographic comparison
between \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR (as \f(CW\*(C`\-1\*(C'\fR, \f(CW0\fR or \f(CW1\fR). This is to be interpreted in quite
a wide sense: It is admissible to compare objects of different types
(scalars, vectors, matrices), provided the scalars can be compared, as well
as vectors/matrices of different lengths. The comparison is recursive.
.PP
In case all components are equal up to the smallest length of the operands,
the more complex is considered to be larger. More precisely, the longest is
the largest; when lengths are equal, we have matrix \f(CW\*(C` > \*(C'\fR vector \f(CW\*(C` > \*(C'\fR scalar.
For example:
.PP
.Vb 8
\&  ? lex([1,3], [1,2,5])
\&  %1 = 1
\&  ? lex([1,3], [1,3,\-1])
\&  %2 = \-1
\&  ? lex([1], [[1]])
\&  %3 = \-1
\&  ? lex([1], [1]~)
\&  %4 = 0
.Ve
.PP
The library syntax is \fBlexcmp\fR\f(CW\*(C`(x,y)\*(C'\fR.
.IX Xref "lexcmp"
.ie n .SS "sign""(x)"""
.el .SS "sign\f(CW(x)\fP"
.IX Xref "sign"
.IX Subsection "sign(x)"
sign (\f(CW0\fR, \f(CW1\fR or \f(CW\*(C`\-1\*(C'\fR) of \f(CW\*(C`x\*(C'\fR, which must be of
type integer, real or fraction.
.IX Xref "sign"
.PP
The library syntax is \fBgsigne\fR\f(CW\*(C`(x)\*(C'\fR. The result is a \f(CW\*(C`long\*(C'\fR.
.IX Xref "gsigne"
.ie n .SS "max""(x,y)"" and "" \f(CBmin\fP(x,y)"""
.el .SS "max\f(CW(x,y)\fP and \f(CW \fP\f(CBmin\fP\f(CW(x,y)\fP"
.IX Xref "max min"
.IX Subsection "max(x,y) and min(x,y)"
creates the
maximum and minimum of \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR when they can be compared.
.PP
The library syntax is \fBgmax\fR\f(CW\*(C`(x,y)\*(C'\fR and \f(CW\*(C` \f(CBgmin\f(CW(x,y)\*(C'\fR.
.IX Xref "gmax gmin"
.ie n .SS "vecmax""(x)"""
.el .SS "vecmax\f(CW(x)\fP"
.IX Xref "vecmax"
.IX Subsection "vecmax(x)"
if \f(CW\*(C`x\*(C'\fR is a vector or a matrix, returns the maximum
of the elements of \f(CW\*(C`x\*(C'\fR, otherwise returns a copy of \f(CW\*(C`x\*(C'\fR. Error if \f(CW\*(C`x\*(C'\fR is
empty.
.PP
The library syntax is \fBvecmax\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "vecmax"
.ie n .SS "vecmin""(x)"""
.el .SS "vecmin\f(CW(x)\fP"
.IX Xref "vecmin"
.IX Subsection "vecmin(x)"
if \f(CW\*(C`x\*(C'\fR is a vector or a matrix, returns the minimum
of the elements of \f(CW\*(C`x\*(C'\fR, otherwise returns a copy of \f(CW\*(C`x\*(C'\fR. Error if \f(CW\*(C`x\*(C'\fR is
empty.
.PP
The library syntax is \fBvecmin\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "vecmin"
.SH "Conversions and similar elementary functions or commands"
.IX Header "Conversions and similar elementary functions or commands"

Many of the conversion functions are rounding or truncating operations. In
this case, if the argument is a rational function, the result is the
Euclidean quotient of the numerator by the denominator, and if the argument
is a vector or a matrix, the operation is done componentwise. This will not
be restated for every function.
.IX Xref "Label se:conversion"
.ie n .SS "Col""({x = []})"""
.el .SS "Col\f(CW({x = []})\fP"
.IX Xref "Col"
.IX Subsection "Col({x = []})"
transforms the object \f(CW\*(C`x\*(C'\fR into a column vector.
The vector will be with one component only, except when \f(CW\*(C`x\*(C'\fR is a
vector or a quadratic form (in which case the resulting vector is simply the
initial object considered as a column vector), a matrix (the column of row
vectors comprising the matrix is returned), a character string (a column of
individual characters is returned), but more importantly when \f(CW\*(C`x\*(C'\fR is a
polynomial or a power series. In the case of a polynomial, the coefficients
of the vector start with the leading coefficient of the polynomial, while for
power series only the significant coefficients are taken into account, but
this time by increasing order of degree.
.PP
The library syntax is \fBgtocol\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "gtocol"
.ie n .SS "List""({x = []})"""
.el .SS "List\f(CW({x = []})\fP"
.IX Xref "List"
.IX Subsection "List({x = []})"
transforms a (row or column) vector \f(CW\*(C`x\*(C'\fR
into a list. The only other way to create a \f(CW\*(C`t_LIST\*(C'\fR is to use the
function \f(CW\*(C`listcreate\*(C'\fR.
.PP
This is useless in library mode.
.ie n .SS "Mat""({x = []})"""
.el .SS "Mat\f(CW({x = []})\fP"
.IX Xref "Mat"
.IX Subsection "Mat({x = []})"
transforms the object \f(CW\*(C`x\*(C'\fR into a matrix.
If \f(CW\*(C`x\*(C'\fR is already a matrix, a copy of \f(CW\*(C`x\*(C'\fR is created.
If \f(CW\*(C`x\*(C'\fR is not a vector or a matrix, this creates a \f(CW\*(C`1 x 1\*(C'\fR matrix.
If \f(CW\*(C`x\*(C'\fR is a row (resp. column) vector, this creates a 1\-row (resp.
1\-column) matrix, \eemph{unless} all elements are column (resp. row) vectors
of the same length, in which case the vectors are concatenated sideways
and the associated big matrix is returned.
.PP
.Vb 8
\&    ? Mat(x + 1)
\&    %1 =
\&    [x + 1]
\&    ? Vec( matid(3) )
\&    %2 = [[1, 0, 0]~, [0, 1, 0]~, [0, 0, 1]~]
\&    ? Mat(%)
\&    %3 =
\&    [1 0 0]
\&
\&    [0 1 0]
\&
\&    [0 0 1]
\&    ? Col( [1,2; 3,4] )
\&    %4 = [[1, 2], [3, 4]]~
\&    ? Mat(%)
\&    %5 =
\&    [1 2]
\&
\&    [3 4]
.Ve
.PP
The library syntax is \fBgtomat\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "gtomat"
.ie n .SS "Mod""(x,y,{\f(CIflag\fP = 0})"""
.el .SS "Mod\f(CW(x,y,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "Mod"
.IX Subsection "Mod(x,y,{flag = 0})"
 creates the \s-1PARI\s0 object
\&\f(CW\*(C`(x mod y)\*(C'\fR, i.e. an intmod or a polmod. \f(CW\*(C`y\*(C'\fR must be an integer or a
polynomial. If \f(CW\*(C`y\*(C'\fR is an integer, \f(CW\*(C`x\*(C'\fR must be an integer, a rational
number, or a \f(CW\*(C`p\*(C'\fR\-adic number compatible with the modulus \f(CW\*(C`y\*(C'\fR. If \f(CW\*(C`y\*(C'\fR is a
polynomial, \f(CW\*(C`x\*(C'\fR must be a scalar (which is not a polmod), a polynomial, a
rational function, or a power series.
.IX Xref "Label se:Mod"
.PP
This function is not the same as \f(CW\*(C`x\*(C'\fR \f(CW\*(C`%\*(C'\fR \f(CW\*(C`y\*(C'\fR, the result of which is an
integer or a polynomial.
.PP
\&\f(CW\*(C`\f(CIflag\f(CW\*(C'\fR is obsolete and should not be used.
.PP
The library syntax is \fBgmodulo\fR\f(CW\*(C`(x,y)\*(C'\fR.
.IX Xref "gmodulo"
.ie n .SS "Pol""(x,{v = x})"""
.el .SS "Pol\f(CW(x,{v = x})\fP"
.IX Xref "Pol"
.IX Subsection "Pol(x,{v = x})"
transforms the object \f(CW\*(C`x\*(C'\fR into a polynomial with
main variable \f(CW\*(C`v\*(C'\fR. If \f(CW\*(C`x\*(C'\fR is a scalar, this gives a constant polynomial. If
\&\f(CW\*(C`x\*(C'\fR is a power series, the effect is identical to \f(CW\*(C`truncate\*(C'\fR (see there),
i.e. it chops off the \f(CW\*(C`O(X^k)\*(C'\fR. If \f(CW\*(C`x\*(C'\fR is a vector, this function creates
the polynomial whose coefficients are given in \f(CW\*(C`x\*(C'\fR, with \f(CW\*(C`x[1]\*(C'\fR being the
leading coefficient (which can be zero).
.PP
\&\fBWarning:\fR this is \eemph{not} a substitution function. It will not
transform an object containing variables of higher priority than \f(CW\*(C`v\*(C'\fR.
.PP
.Vb 2
\&  ? Pol(x + y, y)
\&    *** Pol: variable must have higher priority in gtopoly.
.Ve
.PP
The library syntax is \fBgtopoly\fR\f(CW\*(C`(x,v)\*(C'\fR, where \f(CW\*(C`v\*(C'\fR is a variable number.
.IX Xref "gtopoly"
.ie n .SS "Polrev""(x,{v = x})"""
.el .SS "Polrev\f(CW(x,{v = x})\fP"
.IX Xref "Polrev"
.IX Subsection "Polrev(x,{v = x})"
transform the object \f(CW\*(C`x\*(C'\fR into a polynomial
with main variable \f(CW\*(C`v\*(C'\fR. If \f(CW\*(C`x\*(C'\fR is a scalar, this gives a constant polynomial.
If \f(CW\*(C`x\*(C'\fR is a power series, the effect is identical to \f(CW\*(C`truncate\*(C'\fR (see
there), i.e. it chops off the \f(CW\*(C`O(X^k)\*(C'\fR. If \f(CW\*(C`x\*(C'\fR is a vector, this function
creates the polynomial whose coefficients are given in \f(CW\*(C`x\*(C'\fR, with \f(CW\*(C`x[1]\*(C'\fR being
the constant term. Note that this is the reverse of \f(CW\*(C`Pol\*(C'\fR if \f(CW\*(C`x\*(C'\fR is a
vector, otherwise it is identical to \f(CW\*(C`Pol\*(C'\fR.
.PP
The library syntax is \fBgtopolyrev\fR\f(CW\*(C`(x,v)\*(C'\fR, where \f(CW\*(C`v\*(C'\fR is a variable number.
.IX Xref "gtopolyrev"
.ie n .SS "Qfb""(a,b,c,{D = 0.})"""
.el .SS "Qfb\f(CW(a,b,c,{D = 0.})\fP"
.IX Xref "Qfb"
.IX Subsection "Qfb(a,b,c,{D = 0.})"
creates the binary quadratic form
\&\f(CW\*(C`ax^2+bxy+cy^2\*(C'\fR. If \f(CW\*(C`b^2\-4ac > 0\*(C'\fR, initialize Shanks' distance
function to \f(CW\*(C`D\*(C'\fR. Negative definite forms are not implemented,
use their positive definite counterpart instead.
.IX Xref "Shanks"
.PP
The library syntax is \fBQfb0\fR\f(CW\*(C`(a,b,c,D,\f(CIprec\f(CW)\*(C'\fR. Also available are
\&\f(CW\*(C` \f(CBqfi\f(CW(a,b,c)\*(C'\fR (when \f(CW\*(C`b^2\-4ac < 0\*(C'\fR), and
\&\f(CW\*(C` \f(CBqfr\f(CW(a,b,c,d)\*(C'\fR (when \f(CW\*(C`b^2\-4ac > 0\*(C'\fR).
.IX Xref "Qfb0 qfi qfr binary quadratic form"
.ie n .SS "Ser""(x,{v = x})"""
.el .SS "Ser\f(CW(x,{v = x})\fP"
.IX Xref "Ser"
.IX Subsection "Ser(x,{v = x})"
transforms the object \f(CW\*(C`x\*(C'\fR into a power series
with main variable \f(CW\*(C`v\*(C'\fR (\f(CW\*(C`x\*(C'\fR by default). If \f(CW\*(C`x\*(C'\fR is a scalar, this gives a
constant power series with precision given by the default \f(CW\*(C`serieslength\*(C'\fR
(corresponding to the C global variable \f(CW\*(C`precdl\*(C'\fR). If \f(CW\*(C`x\*(C'\fR is a
polynomial, the precision is the greatest of \f(CW\*(C`precdl\*(C'\fR and the degree of
the polynomial. If \f(CW\*(C`x\*(C'\fR is a vector, the precision is similarly given, and the
coefficients of the vector are understood to be the coefficients of the power
series starting from the constant term (i.e. the reverse of the function
\&\f(CW\*(C`Pol\*(C'\fR).
.PP
The warning given for \f(CW\*(C`Pol\*(C'\fR also applies here: this is not a substitution
function.
.PP
The library syntax is \fBgtoser\fR\f(CW\*(C`(x,v)\*(C'\fR, where \f(CW\*(C`v\*(C'\fR is a variable number (i.e. a C integer).
.IX Xref "gtoser"
.ie n .SS "Set""({x = []})"""
.el .SS "Set\f(CW({x = []})\fP"
.IX Xref "Set"
.IX Subsection "Set({x = []})"
converts \f(CW\*(C`x\*(C'\fR into a set, i.e. into a row
vector of character strings, with strictly increasing entries with respect to
lexicographic ordering. The components of \f(CW\*(C`x\*(C'\fR are put in canonical form (type
\&\f(CW\*(C`t_STR\*(C'\fR) so as to be easily sorted. To recover an ordinary \f(CW\*(C`GEN\*(C'\fR from
such an element, you can apply \f(CW\*(C`eval\*(C'\fR to it.
.IX Xref "eval"
.PP
The library syntax is \fBgtoset\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "gtoset"
.ie n .SS "Str""({x}*)"""
.el .SS "Str\f(CW({x}*)\fP"
.IX Xref "Str"
.IX Subsection "Str({x}*)"
converts its argument list into a
single character string (type \f(CW\*(C`t_STR\*(C'\fR, the empty string if \f(CW\*(C`x\*(C'\fR is omitted).
To recover an ordinary \f(CW\*(C`GEN\*(C'\fR from a string, apply \f(CW\*(C`eval\*(C'\fR to it. The
arguments of \f(CW\*(C`Str\*(C'\fR are evaluated in string context, see \*(L"Label se:strings\*(R".
.PP
.Vb 4
\&  ? x2 = 0; i = 2; Str(x, i)
\&  %1 = "x2"
\&  ? eval(%)
\&  %2 = 0
.Ve
.PP
This function is mostly useless in library mode. Use the pair
\&\f(CW\*(C`strtoGEN\*(C'\fR/\f(CW\*(C`GENtostr\*(C'\fR to convert between \f(CW\*(C`GEN\*(C'\fR and \f(CW\*(C`char*\*(C'\fR.
The latter returns a malloced string, which should be freed after usage.
.IX Xref "strtoGEN GENtostr"
.ie n .SS "Strchr""(x)"""
.el .SS "Strchr\f(CW(x)\fP"
.IX Xref "Strchr"
.IX Subsection "Strchr(x)"
converts \f(CW\*(C`x\*(C'\fR to a string, translating each integer
into a character.
.PP
.Vb 6
\&  ? Strchr(97)
\&  %1 = "a"
\&  ? Vecsmall("hello world")
\&  %2 = Vecsmall([104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100])
\&  ? Strchr(%)
\&  %3 = "hello world"
.Ve
.ie n .SS "Strexpand""({x}*)"""
.el .SS "Strexpand\f(CW({x}*)\fP"
.IX Xref "Strexpand"
.IX Subsection "Strexpand({x}*)"
converts its argument list into a
single character string (type \f(CW\*(C`t_STR\*(C'\fR, the empty string if \f(CW\*(C`x\*(C'\fR is omitted).
Then performe environment expansion, see \*(L"Label se:envir\*(R".
This feature can be used to read environment variable values.
.IX Xref "environment expansion environment variable"
.PP
.Vb 2
\&  ? Strexpand("$HOME/doc")
\&  %1 = "/home/pari/doc"
.Ve
.PP
The individual arguments are read in string context, see \*(L"Label se:strings\*(R".
.ie n .SS "Strtex""({x}*)"""
.el .SS "Strtex\f(CW({x}*)\fP"
.IX Xref "Strtex"
.IX Subsection "Strtex({x}*)"
translates its arguments to TeX
format, and concatenates the results into a single character string (type
\&\f(CW\*(C`t_STR\*(C'\fR, the empty string if \f(CW\*(C`x\*(C'\fR is omitted).
.PP
The individual arguments are read in string context, see \*(L"Label se:strings\*(R".
.ie n .SS "Vec""({x = []})"""
.el .SS "Vec\f(CW({x = []})\fP"
.IX Xref "Vec"
.IX Subsection "Vec({x = []})"
transforms the object \f(CW\*(C`x\*(C'\fR into a row vector.
The vector will be with one component only, except when \f(CW\*(C`x\*(C'\fR is a
vector or a quadratic form (in which case the resulting vector is
simply the initial object considered as a row vector), a matrix
(the vector of columns comprising the matrix is return), a character string
(a vector of individual characters is returned), but more importantly when
\&\f(CW\*(C`x\*(C'\fR is a polynomial or a power series. In the case of a polynomial, the
coefficients of the vector start with the leading coefficient of the
polynomial, while for power series only the significant coefficients are
taken into account, but this time by increasing order of degree.
.PP
The library syntax is \fBgtovec\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "gtovec"
.ie n .SS "Vecsmall""({x = []})"""
.el .SS "Vecsmall\f(CW({x = []})\fP"
.IX Xref "Vecsmall"
.IX Subsection "Vecsmall({x = []})"
transforms the object \f(CW\*(C`x\*(C'\fR into a row
vector of type \f(CW\*(C`t_VECSMALL\*(C'\fR. This acts as \f(CW\*(C`Vec\*(C'\fR, but only on a
limited set of objects (the result must be representable as a vector of small
integers). In particular, polynomials and power series are forbidden.
If \f(CW\*(C`x\*(C'\fR is a character string, a vector of individual characters in \s-1ASCII\s0
encoding is returned (\f(CW\*(C`Strchr\*(C'\fR yields back the character string).
.IX Xref "Strchr"
.PP
The library syntax is \fBgtovecsmall\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "gtovecsmall"
.ie n .SS "binary""(x)"""
.el .SS "binary\f(CW(x)\fP"
.IX Xref "binary"
.IX Subsection "binary(x)"
outputs the vector of the binary digits of \f(CW\*(C`|x|\*(C'\fR.
Here \f(CW\*(C`x\*(C'\fR can be an integer, a real number (in which case the result has two
components, one for the integer part, one for the fractional part) or a
vector/matrix.
.PP
The library syntax is \fBbinaire\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "binaire"
.ie n .SS "bitand""(x,y)"""
.el .SS "bitand\f(CW(x,y)\fP"
.IX Xref "bitand"
.IX Subsection "bitand(x,y)"
 bitwise \f(CW\*(C`and\*(C'\fR
of two integers \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR, that is the integer
.IX Xref "Label se:bitand and bitwise and"
.PP
  \f(CW\*(C`\f(CIsum\f(CW_i (x_i and y_i) 2^i\*(C'\fR
.PP
Negative numbers behave \f(CW2\fR\-adically, i.e. the result is the \f(CW2\fR\-adic limit
of \f(CW\*(C`bitand\*(C'\fR\f(CW\*(C`(x_n,y_n)\*(C'\fR, where \f(CW\*(C`x_n\*(C'\fR and \f(CW\*(C`y_n\*(C'\fR are non-negative integers
tending to \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR respectively. (The result is an ordinary integer,
possibly negative.)
.PP
.Vb 6
\&  ? bitand(5, 3)
\&  %1 = 1
\&  ? bitand(\-5, 3)
\&  %2 = 3
\&  ? bitand(\-5, \-3)
\&  %3 = \-7
.Ve
.PP
The library syntax is \fBgbitand\fR\f(CW\*(C`(x,y)\*(C'\fR.
.IX Xref "gbitand"
.ie n .SS "bitneg""(x,{n = \-1})"""
.el .SS "bitneg\f(CW(x,{n = \-1})\fP"
.IX Xref "bitneg"
.IX Subsection "bitneg(x,{n = -1})"
bitwise negation of an integer \f(CW\*(C`x\*(C'\fR,
truncated to \f(CW\*(C`n\*(C'\fR bits, that is the integer
.IX Xref "bitwise negation"
.PP
  \f(CW\*(C`\f(CIsum\f(CW_{i = 0}^{n\-1} not(x_i)
2^i\*(C'\fR
.PP
The special case \f(CW\*(C`n = \-1\*(C'\fR means no truncation: an infinite sequence of
leading \f(CW1\fR is then represented as a negative number.
.PP
See \*(L"Label se:bitand\*(R" for the behaviour for negative arguments.
.PP
The library syntax is \fBgbitneg\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "gbitneg"
.ie n .SS "bitnegimply""(x,y)"""
.el .SS "bitnegimply\f(CW(x,y)\fP"
.IX Xref "bitnegimply"
.IX Subsection "bitnegimply(x,y)"
bitwise negated imply of two integers \f(CW\*(C`x\*(C'\fR and
\&\f(CW\*(C`y\*(C'\fR (or \f(CW\*(C`not\*(C'\fR \f(CW\*(C`(x ==> y)\*(C'\fR), that is the integer
.PP
  \f(CW\*(C`\f(CIsum\f(CW
(x_i and not(y_i)) 2^i\*(C'\fR
.PP
See \*(L"Label se:bitand\*(R" for the behaviour for negative arguments.
.PP
The library syntax is \fBgbitnegimply\fR\f(CW\*(C`(x,y)\*(C'\fR.
.IX Xref "gbitnegimply"
.ie n .SS "bitor""(x,y)"""
.el .SS "bitor\f(CW(x,y)\fP"
.IX Xref "bitor"
.IX Subsection "bitor(x,y)"
bitwise (inclusive)
\&\f(CW\*(C`or\*(C'\fR of two integers \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR, that is the integer
.IX Xref "bitwise inclusive or or"
.PP
  \f(CW\*(C`\f(CIsum\f(CW
(x_i or y_i) 2^i\*(C'\fR
.PP
See \*(L"Label se:bitand\*(R" for the behaviour for negative arguments.
.PP
The library syntax is \fBgbitor\fR\f(CW\*(C`(x,y)\*(C'\fR.
.IX Xref "gbitor"
.ie n .SS "bittest""(x,n)"""
.el .SS "bittest\f(CW(x,n)\fP"
.IX Xref "bittest"
.IX Subsection "bittest(x,n)"
outputs the \f(CW\*(C`n^{th}\*(C'\fR bit of \f(CW\*(C`|x|\*(C'\fR starting
from the right (i.e. the coefficient of \f(CW\*(C`2^n\*(C'\fR in the binary expansion of
\&\f(CW\*(C`x\*(C'\fR). The result is 0 or 1. To extract several bits at once as a vector, pass
a vector for \f(CW\*(C`n\*(C'\fR.
.PP
The library syntax is \fBbittest\fR\f(CW\*(C`(x,n)\*(C'\fR, where \f(CW\*(C`n\*(C'\fR and the result are \f(CW\*(C`long\*(C'\fRs.
.IX Xref "bittest"
.ie n .SS "bitxor""(x,y)"""
.el .SS "bitxor\f(CW(x,y)\fP"
.IX Xref "bitxor"
.IX Subsection "bitxor(x,y)"
bitwise (exclusive) \f(CW\*(C`or\*(C'\fR
of two integers \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR, that is the integer
.IX Xref "or bitwise exclusive or"
.PP
  \f(CW\*(C`\f(CIsum\f(CW (x_i xor y_i) 2^i\*(C'\fR
.PP
See \*(L"Label se:bitand\*(R" for the behaviour for negative arguments.
.PP
The library syntax is \fBgbitxor\fR\f(CW\*(C`(x,y)\*(C'\fR.
.IX Xref "gbitxor"
.ie n .SS "ceil""(x)"""
.el .SS "ceil\f(CW(x)\fP"
.IX Xref "ceil"
.IX Subsection "ceil(x)"
ceiling of \f(CW\*(C`x\*(C'\fR. When \f(CW\*(C`x\*(C'\fR is in \fB\f(BIR\fB\fR, the result is the
smallest integer greater than or equal to \f(CW\*(C`x\*(C'\fR. Applied to a rational
function, \f(CWceil(x)\fR returns the euclidian quotient of the numerator by
the denominator.
.PP
The library syntax is \fBgceil\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "gceil"
.ie n .SS "centerlift""(x,{v})"""
.el .SS "centerlift\f(CW(x,{v})\fP"
.IX Xref "centerlift"
.IX Subsection "centerlift(x,{v})"
lifts an element \f(CW\*(C`x = a mod n\*(C'\fR of \f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW/n\f(CB\f(CBZ\f(CB\f(CW\*(C'\fR
to \f(CW\*(C`a\*(C'\fR in \fB\f(BIZ\fB\fR, and similarly lifts a polmod to a polynomial. This is the
same as \f(CW\*(C`lift\*(C'\fR except that in the particular case of elements of
\&\f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW/n\f(CB\f(CBZ\f(CB\f(CW\*(C'\fR, the lift \f(CW\*(C`y\*(C'\fR is such that \f(CW\*(C`\-n/2 < y <= n/2\*(C'\fR. If \f(CW\*(C`x\*(C'\fR is of type
fraction, complex, quadratic, polynomial, power series, rational function,
vector or matrix, the lift is done for each coefficient. Reals are forbidden.
.IX Xref "lift"
.PP
The library syntax is \fBcenterlift0\fR\f(CW\*(C`(x,v)\*(C'\fR, where \f(CW\*(C`v\*(C'\fR is a \f(CW\*(C`long\*(C'\fR and an omitted \f(CW\*(C`v\*(C'\fR is coded
as \f(CW\*(C`\-1\*(C'\fR. Also available is \f(CW\*(C` \f(CBcenterlift\f(CW(x)\*(C'\fR = \f(CW\*(C`centerlift0(x,\-1)\*(C'\fR.
.IX Xref "centerlift0 centerlift"
.ie n .SS "changevar""(x,y)"""
.el .SS "changevar\f(CW(x,y)\fP"
.IX Xref "changevar"
.IX Subsection "changevar(x,y)"
creates a copy of the object \f(CW\*(C`x\*(C'\fR where its
variables are modified according to the permutation specified by the vector
\&\f(CW\*(C`y\*(C'\fR. For example, assume that the variables have been introduced in the
order \f(CW\*(C`x\*(C'\fR, \f(CW\*(C`a\*(C'\fR, \f(CW\*(C`b\*(C'\fR, \f(CW\*(C`c\*(C'\fR. Then, if \f(CW\*(C`y\*(C'\fR is the vector
\&\f(CW\*(C`[x,c,a,b]\*(C'\fR, the variable \f(CW\*(C`a\*(C'\fR will be replaced by \f(CW\*(C`c\*(C'\fR, \f(CW\*(C`b\*(C'\fR by
\&\f(CW\*(C`a\*(C'\fR, and \f(CW\*(C`c\*(C'\fR by \f(CW\*(C`b\*(C'\fR, \f(CW\*(C`x\*(C'\fR being unchanged. Note that the
permutation must be completely specified, e.g. \f(CW\*(C`[c,a,b]\*(C'\fR would not work,
since this would replace \f(CW\*(C`x\*(C'\fR by \f(CW\*(C`c\*(C'\fR, and leave \f(CW\*(C`a\*(C'\fR and \f(CW\*(C`b\*(C'\fR
unchanged (as well as \f(CW\*(C`c\*(C'\fR which is the fourth variable of the initial
list). In particular, the new variable names must be distinct.
.PP
The library syntax is \fBchangevar\fR\f(CW\*(C`(x,y)\*(C'\fR.
.IX Xref "changevar"
.SS "components of a \s-1PARI\s0 object"
.IX Subsection "components of a PARI object"
There are essentially three ways to extract the components from a \s-1PARI\s0
object.
.IX Xref "components"
.PP
The first and most general, is the function \f(CW\*(C` \f(CBcomponent\f(CW(x,n)\*(C'\fR which
extracts the \f(CW\*(C`n^{th}\*(C'\fR\-component of \f(CW\*(C`x\*(C'\fR. This is to be understood as
follows: every \s-1PARI\s0 type has one or two initial code words. The
components are counted, starting at 1, after these code words. In particular
if \f(CW\*(C`x\*(C'\fR is a vector, this is indeed the \f(CW\*(C`n^{th}\*(C'\fR\-component of \f(CW\*(C`x\*(C'\fR, if
\&\f(CW\*(C`x\*(C'\fR is a matrix, the \f(CW\*(C`n^{th}\*(C'\fR column, if \f(CW\*(C`x\*(C'\fR is a polynomial, the
\&\f(CW\*(C`n^{th}\*(C'\fR coefficient (i.e. of degree \f(CW\*(C`n\-1\*(C'\fR), and for power series, the
\&\f(CW\*(C`n^{th}\*(C'\fR significant coefficient. The use of the function
\&\f(CW\*(C`component\*(C'\fR implies the knowledge of the structure of the different \s-1PARI\s0
types, which can be recalled by typing \f(CW\*(C`\et\*(C'\fR under \f(CW\*(C`gp\*(C'\fR.
.IX Xref "component code words"
.PP
The library syntax is \fBcompo\fR\f(CW\*(C`(x,n)\*(C'\fR, where \f(CW\*(C`n\*(C'\fR is a \f(CW\*(C`long\*(C'\fR.
.IX Xref "compo"
.PP
The two other methods are more natural but more restricted. The function
\&\f(CW\*(C` \f(CBpolcoeff\f(CW(x,n)\*(C'\fR gives the coefficient of degree \f(CW\*(C`n\*(C'\fR of the polynomial
or power series \f(CW\*(C`x\*(C'\fR, with respect to the main variable of \f(CW\*(C`x\*(C'\fR (to check
variable ordering, or to change it, use the function \f(CW\*(C`reorder\*(C'\fR, see
\&\*(L"Label se:reorder\*(R"). In particular if \f(CW\*(C`n\*(C'\fR is less than the valuation of
\&\f(CW\*(C`x\*(C'\fR or in the case of a polynomial, greater than the degree, the result is
zero (contrary to \f(CW\*(C`compo\*(C'\fR which would send an error message). If \f(CW\*(C`x\*(C'\fR is
a power series and \f(CW\*(C`n\*(C'\fR is greater than the largest significant degree, then
an error message is issued.
.IX Xref "polcoeff reorder"
.PP
For greater flexibility, vector or matrix types are also accepted for \f(CW\*(C`x\*(C'\fR,
and the meaning is then identical with that of \f(CW\*(C`compo\*(C'\fR.
.PP
Finally note that a scalar type is considered by \f(CW\*(C`polcoeff\*(C'\fR as a
polynomial of degree zero.
.PP
The library syntax is \fBtruecoeff\fR\f(CW\*(C`(x,n)\*(C'\fR.
.IX Xref "truecoeff"
.PP
The third method is specific to vectors or matrices in \s-1GP.\s0 If \f(CW\*(C`x\*(C'\fR is a
(row or column) vector, then \f(CW\*(C`x[n]\*(C'\fR represents the \f(CW\*(C`n^{th}\*(C'\fR
component of \f(CW\*(C`x\*(C'\fR, i.e. \f(CW\*(C`compo(x,n)\*(C'\fR. It is more natural and shorter to
write. If \f(CW\*(C`x\*(C'\fR is a matrix, \f(CW\*(C`x[m,n]\*(C'\fR represents the coefficient of
row \f(CW\*(C`m\*(C'\fR and column \f(CW\*(C`n\*(C'\fR of the matrix, \f(CW\*(C`x[m,]\*(C'\fR represents
the \f(CW\*(C`m^{th}\*(C'\fR \eemph{row} of \f(CW\*(C`x\*(C'\fR, and \f(CW\*(C`x[,n]\*(C'\fR represents
the \f(CW\*(C`n^{th}\*(C'\fR \eemph{column} of \f(CW\*(C`x\*(C'\fR.
.IX Xref "x[n] x[m,n] x[m,] x[,n]"
.PP
Finally note that in library mode, the macros \fBgcoeff\fR and \fBgmael\fR
are available as direct accessors to a \f(CW\*(C`GEN component\*(C'\fR. See Chapter 4 for
details.
.IX Xref "gcoeff gmael"
.ie n .SS "conj""(x)"""
.el .SS "conj\f(CW(x)\fP"
.IX Xref "conj"
.IX Subsection "conj(x)"
conjugate of \f(CW\*(C`x\*(C'\fR. The meaning of this
is clear, except that for real quadratic numbers, it means conjugation in the
real quadratic field. This function has no effect on integers, reals,
intmods, fractions or \f(CW\*(C`p\*(C'\fR\-adics. The only forbidden type is polmod
(see \f(CW\*(C`conjvec\*(C'\fR for this).
.PP
The library syntax is \fBgconj\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "gconj"
.ie n .SS "conjvec""(x)"""
.el .SS "conjvec\f(CW(x)\fP"
.IX Xref "conjvec"
.IX Subsection "conjvec(x)"
conjugate vector representation of \f(CW\*(C`x\*(C'\fR. If \f(CW\*(C`x\*(C'\fR is a
polmod, equal to \f(CW\*(C`Mod\*(C'\fR\f(CW\*(C`(a,q)\*(C'\fR, this gives a vector of length
\&\f(CWdegree(q)\fR containing the complex embeddings of the polmod if \f(CW\*(C`q\*(C'\fR has
integral or rational coefficients, and the conjugates of the polmod if \f(CW\*(C`q\*(C'\fR
has some intmod coefficients. The order is the same as that of the
\&\f(CW\*(C`polroots\*(C'\fR functions. If \f(CW\*(C`x\*(C'\fR is an integer or a rational number, the
result is \f(CW\*(C`x\*(C'\fR. If \f(CW\*(C`x\*(C'\fR is a (row or column) vector, the result is a matrix
whose columns are the conjugate vectors of the individual elements of \f(CW\*(C`x\*(C'\fR.
.PP
The library syntax is \fBconjvec\fR\f(CW\*(C`(x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "conjvec"
.ie n .SS "denominator""(x)"""
.el .SS "denominator\f(CW(x)\fP"
.IX Xref "denominator"
.IX Subsection "denominator(x)"
denominator of \f(CW\*(C`x\*(C'\fR. The meaning of this
is clear when \f(CW\*(C`x\*(C'\fR is a rational number or function. If \f(CW\*(C`x\*(C'\fR is an integer
or a polynomial, it is treated as a rational number of function,
respectively, and the result is equal to \f(CW1\fR. For polynomials, you
probably want to use
.PP
.Vb 1
\&      denominator( content(x) )
.Ve
.PP
instead. As for modular objects, \f(CW\*(C`t_INTMOD\*(C'\fR and \f(CW\*(C`t_PADIC\*(C'\fR have
denominator \f(CW1\fR, and the denominator of a \f(CW\*(C`t_POLMOD\*(C'\fR is the denominator
of its (minimal degree) polynomial representative.
.PP
If \f(CW\*(C`x\*(C'\fR is a recursive structure, for instance a vector or matrix, the lcm
of the denominators of its components (a common denominator) is computed.
This also applies for \f(CW\*(C`t_COMPLEX\*(C'\fRs and \f(CW\*(C`t_QUAD\*(C'\fRs.
.PP
\&\fBWarning:\fR multivariate objects are created according to variable
priorities, with possibly surprising side effects (\f(CW\*(C`x/y\*(C'\fR is a polynomial, but
\&\f(CW\*(C`y/x\*(C'\fR is a rational function). See \*(L"Label se:priority\*(R".
.PP
The library syntax is \fBdenom\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "denom"
.ie n .SS "floor""(x)"""
.el .SS "floor\f(CW(x)\fP"
.IX Xref "floor"
.IX Subsection "floor(x)"
floor of \f(CW\*(C`x\*(C'\fR. When \f(CW\*(C`x\*(C'\fR is in \fB\f(BIR\fB\fR, the result is the
largest integer smaller than or equal to \f(CW\*(C`x\*(C'\fR. Applied to a rational function,
\&\f(CWfloor(x)\fR returns the euclidian quotient of the numerator by the
denominator.
.PP
The library syntax is \fBgfloor\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "gfloor"
.ie n .SS "frac""(x)"""
.el .SS "frac\f(CW(x)\fP"
.IX Xref "frac"
.IX Subsection "frac(x)"
fractional part of \f(CW\*(C`x\*(C'\fR. Identical to
\&\f(CW\*(C`x\-floor(x)\*(C'\fR. If \f(CW\*(C`x\*(C'\fR is real, the result is in \f(CW\*(C`[0,1[\*(C'\fR.
.PP
The library syntax is \fBgfrac\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "gfrac"
.ie n .SS "imag""(x)"""
.el .SS "imag\f(CW(x)\fP"
.IX Xref "imag"
.IX Subsection "imag(x)"
imaginary part of \f(CW\*(C`x\*(C'\fR. When
\&\f(CW\*(C`x\*(C'\fR is a quadratic number, this is the coefficient of \f(CW\*(C`\f(CIomega\f(CW\*(C'\fR in
the ``canonical'' integral basis \f(CW\*(C`(1,\f(CIomega\f(CW)\*(C'\fR.
.PP
The library syntax is \fBgimag\fR\f(CW\*(C`(x)\*(C'\fR. This returns a copy of the imaginary part. The internal
routine \f(CW\*(C`imag_i\*(C'\fR is faster, since it returns the pointer and skips the
copy.
.IX Xref "gimag imag_i"
.ie n .SS "length""(x)"""
.el .SS "length\f(CW(x)\fP"
.IX Xref "length"
.IX Subsection "length(x)"
number of non-code words in \f(CW\*(C`x\*(C'\fR really used
(i.e. the effective length minus 2 for integers and polynomials). In
particular, the degree of a polynomial is equal to its length minus 1. If \f(CW\*(C`x\*(C'\fR
has type \f(CW\*(C`t_STR\*(C'\fR, output number of letters.
.PP
The library syntax is \fBglength\fR\f(CW\*(C`(x)\*(C'\fR and the result is a C long.
.IX Xref "glength"
.ie n .SS "lift""(x,{v})"""
.el .SS "lift\f(CW(x,{v})\fP"
.IX Xref "lift"
.IX Subsection "lift(x,{v})"
lifts an element \f(CW\*(C`x = a mod n\*(C'\fR of \f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW/n\f(CB\f(CBZ\f(CB\f(CW\*(C'\fR to
\&\f(CW\*(C`a\*(C'\fR in \fB\f(BIZ\fB\fR, and similarly lifts a polmod to a polynomial if \f(CW\*(C`v\*(C'\fR is omitted.
Otherwise, lifts only polmods whose modulus has main variable \f(CW\*(C`v\*(C'\fR (if \f(CW\*(C`v\*(C'\fR
does not occur in \f(CW\*(C`x\*(C'\fR, lifts only intmods). If \f(CW\*(C`x\*(C'\fR is of recursive (non
modular) type, the lift is done coefficientwise. For \f(CW\*(C`p\*(C'\fR\-adics, this routine
acts as \f(CW\*(C`truncate\*(C'\fR. It is not allowed to have \f(CW\*(C`x\*(C'\fR of type \f(CW\*(C`t_REAL\*(C'\fR.
.IX Xref "truncate"
.PP
.Vb 12
\&  ? lift(Mod(5,3))
\&  %1 = 2
\&  ? lift(3 + O(3^9))
\&  %2 = 3
\&  ? lift(Mod(x,x^2+1))
\&  %3 = x
\&  ? lift(x * Mod(1,3) + Mod(2,3))
\&  %4 = x + 2
\&  ? lift(x * Mod(y,y^2+1) + Mod(2,3))
\&  %5 = y*x + Mod(2, 3)   \e\e do you understand this one ?
\&  ? lift(x * Mod(y,y^2+1) + Mod(2,3), x)
\&  %6 = Mod(y, y^2+1) * x + Mod(2, y^2+1)
.Ve
.PP
The library syntax is \fBlift0\fR\f(CW\*(C`(x,v)\*(C'\fR, where \f(CW\*(C`v\*(C'\fR is a \f(CW\*(C`long\*(C'\fR and an omitted \f(CW\*(C`v\*(C'\fR is coded as
\&\f(CW\*(C`\-1\*(C'\fR. Also available is \f(CW\*(C` \f(CBlift\f(CW(x)\*(C'\fR = \f(CW\*(C`lift0(x,\-1)\*(C'\fR.
.IX Xref "lift0 lift"
.ie n .SS "norm""(x)"""
.el .SS "norm\f(CW(x)\fP"
.IX Xref "norm"
.IX Subsection "norm(x)"
algebraic norm of \f(CW\*(C`x\*(C'\fR, i.e. the product of \f(CW\*(C`x\*(C'\fR with
its conjugate (no square roots are taken), or conjugates for polmods. For
vectors and matrices, the norm is taken componentwise and hence is not the
\&\f(CW\*(C`L^2\*(C'\fR\-norm (see \f(CW\*(C`norml2\*(C'\fR). Note that the norm of an element of
\&\fB\f(BIR\fB\fR is its square, so as to be compatible with the complex norm.
.PP
The library syntax is \fBgnorm\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "gnorm"
.ie n .SS "norml2""(x)"""
.el .SS "norml2\f(CW(x)\fP"
.IX Xref "norml2"
.IX Subsection "norml2(x)"
square of the \f(CW\*(C`L^2\*(C'\fR\-norm of \f(CW\*(C`x\*(C'\fR. More precisely,
if \f(CW\*(C`x\*(C'\fR is a scalar, \f(CWnorml2(x)\fR is defined to be \f(CW\*(C`x * conj(x)\*(C'\fR.
If \f(CW\*(C`x\*(C'\fR is a (row or column) vector or a matrix, \f(CWnorml2(x)\fR is
defined recursively as \f(CW\*(C`\f(CIsum\f(CW_i norml2(x_i)\*(C'\fR, where \f(CW\*(C`(x_i)\*(C'\fR run through
the components of \f(CW\*(C`x\*(C'\fR. In particular, this yields the usual \f(CW\*(C`\f(CIsum\f(CW |x_i|^2\*(C'\fR
(resp. \f(CW\*(C`\f(CIsum\f(CW |x_{i,j}|^2\*(C'\fR) if \f(CW\*(C`x\*(C'\fR is a vector (resp. matrix) with complex
components.
.PP
.Vb 8
\&  ? norml2( [ 1, 2, 3 ] )      \e\e vector
\&  %1 = 14
\&  ? norml2( [ 1, 2; 3, 4] )   \e\e matrix
\&  %1 = 30
\&  ? norml2( I + x )
\&  %3 = x^2 + 1
\&  ? norml2( [ [1,2], [3,4], 5, 6 ] )   \e\e recursively defined
\&  %4 = 91
.Ve
.PP
The library syntax is \fBgnorml2\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "gnorml2"
.ie n .SS "numerator""(x)"""
.el .SS "numerator\f(CW(x)\fP"
.IX Xref "numerator"
.IX Subsection "numerator(x)"
numerator of \f(CW\*(C`x\*(C'\fR. The meaning of this
is clear when \f(CW\*(C`x\*(C'\fR is a rational number or function. If \f(CW\*(C`x\*(C'\fR is an integer
or a polynomial, it is treated as a rational number of function,
respectively, and the result is \f(CW\*(C`x\*(C'\fR itself. For polynomials, you
probably want to use
.PP
.Vb 1
\&      numerator( content(x) )
.Ve
.PP
instead.
.PP
In other cases, \f(CWnumerator(x)\fR is defined to be
\&\f(CW\*(C`denominator(x)*x\*(C'\fR. This is the case when \f(CW\*(C`x\*(C'\fR is a vector or a
matrix, but also for \f(CW\*(C`t_COMPLEX\*(C'\fR or \f(CW\*(C`t_QUAD\*(C'\fR. In particular since a
\&\f(CW\*(C`t_PADIC\*(C'\fR or \f(CW\*(C`t_INTMOD\*(C'\fR has  denominator \f(CW1\fR, its numerator is
itself.
.PP
\&\fBWarning:\fR multivariate objects are created according to variable
priorities, with possibly surprising side effects (\f(CW\*(C`x/y\*(C'\fR is a polynomial, but
\&\f(CW\*(C`y/x\*(C'\fR is a rational function). See \*(L"Label se:priority\*(R".
.PP
The library syntax is \fBnumer\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "numer"
.ie n .SS "numtoperm""(n,k)"""
.el .SS "numtoperm\f(CW(n,k)\fP"
.IX Xref "numtoperm"
.IX Subsection "numtoperm(n,k)"
generates the \f(CW\*(C`k\*(C'\fR\-th permutation (as a
row vector of length \f(CW\*(C`n\*(C'\fR) of the numbers \f(CW1\fR to \f(CW\*(C`n\*(C'\fR. The number \f(CW\*(C`k\*(C'\fR is taken
modulo \f(CW\*(C`n!\*(C'\fR, i.e. inverse function of \f(CW\*(C`permtonum\*(C'\fR.
.IX Xref "permtonum"
.PP
The library syntax is \fBnumtoperm\fR\f(CW\*(C`(n,k)\*(C'\fR, where \f(CW\*(C`n\*(C'\fR is a \f(CW\*(C`long\*(C'\fR.
.IX Xref "numtoperm"
.ie n .SS "padicprec""(x,p)"""
.el .SS "padicprec\f(CW(x,p)\fP"
.IX Xref "padicprec"
.IX Subsection "padicprec(x,p)"
absolute \f(CW\*(C`p\*(C'\fR\-adic precision of the object \f(CW\*(C`x\*(C'\fR.
This is the minimum precision of the components of \f(CW\*(C`x\*(C'\fR. The result is
\&\f(CW\*(C`VERYBIGINT\*(C'\fR (\f(CW\*(C`2^{31}\-1\*(C'\fR for 32\-bit machines or \f(CW\*(C`2^{63}\-1\*(C'\fR for 64\-bit
machines) if \f(CW\*(C`x\*(C'\fR is an exact object.
.PP
The library syntax is \fBpadicprec\fR\f(CW\*(C`(x,p)\*(C'\fR and the result is a \f(CW\*(C`long\*(C'\fR
integer.
.IX Xref "padicprec"
.ie n .SS "permtonum""(x)"""
.el .SS "permtonum\f(CW(x)\fP"
.IX Xref "permtonum"
.IX Subsection "permtonum(x)"
given a permutation \f(CW\*(C`x\*(C'\fR on \f(CW\*(C`n\*(C'\fR elements,
gives the number \f(CW\*(C`k\*(C'\fR such that \f(CW\*(C`x = numtoperm(n,k)\*(C'\fR, i.e. inverse
function of \f(CW\*(C`numtoperm\*(C'\fR.
.IX Xref "numtoperm"
.PP
The library syntax is \fBpermtonum\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "permtonum"
.ie n .SS "precision""(x,{n})"""
.el .SS "precision\f(CW(x,{n})\fP"
.IX Xref "precision"
.IX Subsection "precision(x,{n})"
gives the precision in decimal digits of the
\&\s-1PARI\s0 object \f(CW\*(C`x\*(C'\fR. If \f(CW\*(C`x\*(C'\fR is an exact object, the largest single precision
integer is returned. If \f(CW\*(C`n\*(C'\fR is not omitted, creates a new object equal to \f(CW\*(C`x\*(C'\fR
with a new precision \f(CW\*(C`n\*(C'\fR. This is to be understood as follows:
.PP
For exact types, no change. For \f(CW\*(C`x\*(C'\fR a vector or a matrix, the operation
is done componentwise.
.PP
For real \f(CW\*(C`x\*(C'\fR, \f(CW\*(C`n\*(C'\fR is the number of desired significant \eemph{decimal} digits.
If \f(CW\*(C`n\*(C'\fR is smaller than the precision of \f(CW\*(C`x\*(C'\fR, \f(CW\*(C`x\*(C'\fR is truncated, otherwise \f(CW\*(C`x\*(C'\fR
is extended with zeros.
.PP
For \f(CW\*(C`x\*(C'\fR a \f(CW\*(C`p\*(C'\fR\-adic or a power series, \f(CW\*(C`n\*(C'\fR is the desired number of
significant \f(CW\*(C`p\*(C'\fR\-adic or \f(CW\*(C`X\*(C'\fR\-adic digits, where \f(CW\*(C`X\*(C'\fR is the main variable of
\&\f(CW\*(C`x\*(C'\fR.
.PP
Note that the function \f(CW\*(C`precision\*(C'\fR never changes the type of the result.
In particular it is not possible to use it to obtain a polynomial from a
power series. For that, see \f(CW\*(C`truncate\*(C'\fR.
.PP
The library syntax is \fBprecision0\fR\f(CW\*(C`(x,n)\*(C'\fR, where \f(CW\*(C`n\*(C'\fR is a \f(CW\*(C`long\*(C'\fR. Also available are
\&\f(CW\*(C` \f(CBggprecision\f(CW(x)\*(C'\fR (result is a \f(CW\*(C`GEN\*(C'\fR) and \f(CW\*(C` \f(CBgprec\f(CW(x,n)\*(C'\fR, where
\&\f(CW\*(C`n\*(C'\fR is a \f(CW\*(C`long\*(C'\fR.
.IX Xref "precision0 ggprecision gprec"
.ie n .SS "random""({N = 2^{31}})"""
.el .SS "random\f(CW({N = 2^{31}})\fP"
.IX Xref "random"
.IX Subsection "random({N = 2^{31}})"
returns a random integer between \f(CW0\fR and
\&\f(CW\*(C`N\-1\*(C'\fR. \f(CW\*(C`N\*(C'\fR is an integer, which can be arbitrary large. This is an internal
\&\s-1PARI\s0 function and does not depend on the system's random number generator.
.PP
The resulting integer is obtained by means of linear congruences and will not
be well distributed in arithmetic progressions. The random seed may be
obtained via \f(CW\*(C`getrand\*(C'\fR, and reset using \f(CW\*(C`setrand\*(C'\fR.
.IX Xref "getrand setrand"
.PP
Note that \f(CW\*(C`random(2^31)\*(C'\fR is \eemph{not} equivalent to \f(CW\*(C`random()\*(C'\fR,
although both return an integer between \f(CW0\fR and \f(CW\*(C`2^{31}\-1\*(C'\fR. In fact, calling
\&\f(CW\*(C`random\*(C'\fR with an argument generates a number of random words (32bit or
64bit depending on the architecture), rescaled to the desired interval.
The default uses directly a 31\-bit generator.
.PP
\&\fBImportant technical note:\fR the implementation of this function
is incorrect unless \f(CW\*(C`N\*(C'\fR is a power of \f(CW2\fR (integers less than the bound are
not equally likely, some may not even occur). It is kept for backward
compatibility only, and has been rewritten from scratch in the 2.4.x unstable
series. Use the following script for a correct version:
.PP
.Vb 2
\&  RANDOM(N) = 
\&  { local(n, L);
\&
\&    L = 1; while (L < N, L <<= 1;);
\&    /* L/2 < N <= L, L power of 2 */
\&    until(n < N, n = random(L)); n
\&  }
.Ve
.PP
The library syntax is \fBgenrand\fR\f(CW\*(C`(N)\*(C'\fR. Also available are \f(CW\*(C`pari_rand\*(C'\fR\f(CW\*(C`()\*(C'\fR which returns a
random \f(CW\*(C`unsigned long\*(C'\fR (32bit or 64bit depending on the architecture), and
\&\f(CW\*(C`pari_rand31\*(C'\fR\f(CW\*(C`()\*(C'\fR which returns a 31bit \f(CW\*(C`long\*(C'\fR integer.
.IX Xref "genrand pari_rand pari_rand31"
.ie n .SS "real""(x)"""
.el .SS "real\f(CW(x)\fP"
.IX Xref "real"
.IX Subsection "real(x)"
real part of \f(CW\*(C`x\*(C'\fR. In the case where \f(CW\*(C`x\*(C'\fR is a quadratic
number, this is the coefficient of \f(CW1\fR in the ``canonical'' integral basis
\&\f(CW\*(C`(1,\f(CIomega\f(CW)\*(C'\fR.
.PP
The library syntax is \fBgreal\fR\f(CW\*(C`(x)\*(C'\fR. This returns a copy of the real part. The internal routine
\&\f(CW\*(C`real_i\*(C'\fR is faster, since it returns the pointer and skips the copy.
.IX Xref "greal real_i"
.ie n .SS "round""(x,{&e})"""
.el .SS "round\f(CW(x,{&e})\fP"
.IX Xref "round"
.IX Subsection "round(x,{&e})"
If \f(CW\*(C`x\*(C'\fR is in \fB\f(BIR\fB\fR, rounds \f(CW\*(C`x\*(C'\fR to the nearest
integer and sets \f(CW\*(C`e\*(C'\fR to the number of error bits, that is the binary exponent
of the difference between the original and the rounded value (the
``fractional part''). If the exponent of \f(CW\*(C`x\*(C'\fR is too large compared to its
precision (i.e. \f(CW\*(C`e > 0\*(C'\fR), the result is undefined and an error occurs if \f(CW\*(C`e\*(C'\fR
was not given.
.PP
\&\fBImportant remark:\fR note that, contrary to the other truncation
functions, this function operates on every coefficient at every level of a
\&\s-1PARI\s0 object. For example
.PP
  \f(CW\*(C`truncate((2.4*X^2\-1.7)/(X)) = 2.4*X,\*(C'\fR
.PP
whereas
.PP
  \f(CW\*(C`round((2.4*X^2\-1.7)/(X)) = (2*X^2\-2)/(X).\*(C'\fR
.PP
An
important use of \f(CW\*(C`round\*(C'\fR is to get exact results after a long approximate
computation, when theory tells you that the coefficients must be integers.
.PP
The library syntax is \fBgrndtoi\fR\f(CW\*(C`(x,&e)\*(C'\fR, where \f(CW\*(C`e\*(C'\fR is a \f(CW\*(C`long\*(C'\fR integer. Also available is
\&\f(CW\*(C` \f(CBground\f(CW(x)\*(C'\fR.
.IX Xref "grndtoi ground"
.ie n .SS "simplify""(x)"""
.el .SS "simplify\f(CW(x)\fP"
.IX Xref "simplify"
.IX Subsection "simplify(x)"
this function simplifies \f(CW\*(C`x\*(C'\fR as much as it can.
Specifically, a complex or quadratic number whose imaginary part is an exact
0 (i.e. not an approximate one as a \f(CWO(3)\fR or \f(CW\*(C`0.E\-28\*(C'\fR) is converted
to its real part, and a polynomial of degree \f(CW0\fR is converted to its constant
term. Simplifications occur recursively.
.PP
This function is especially useful before using arithmetic functions,
which expect integer arguments:
.PP
.Vb 8
\&  ? x = 1 + y \- y
\&  %1 = 1
\&  ? divisors(x)
\&    *** divisors: not an integer argument in an arithmetic function
\&  ? type(x)
\&  %2 = "t_POL"
\&  ? type(simplify(x))
\&  %3 = "t_INT"
.Ve
.PP
Note that \s-1GP\s0 results are simplified as above before they are stored in the
history. (Unless you disable automatic simplification with \f(CW\*(C`\ey\*(C'\fR, that is.)
In particular
.PP
.Vb 2
\&  ? type(%1)
\&  %4 = "t_INT"
.Ve
.PP
The library syntax is \fBsimplify\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "simplify"
.ie n .SS "sizebyte""(x)"""
.el .SS "sizebyte\f(CW(x)\fP"
.IX Xref "sizebyte"
.IX Subsection "sizebyte(x)"
outputs the total number of bytes occupied by the
tree representing the \s-1PARI\s0 object \f(CW\*(C`x\*(C'\fR.
.PP
The library syntax is \fBtaille2\fR\f(CW\*(C`(x)\*(C'\fR which returns a \f(CW\*(C`long\*(C'\fR; \f(CW\*(C` \f(CBtaille\f(CW(x)\*(C'\fR returns the
number of \eemph{words} instead.
.IX Xref "taille2 taille"
.ie n .SS "sizedigit""(x)"""
.el .SS "sizedigit\f(CW(x)\fP"
.IX Xref "sizedigit"
.IX Subsection "sizedigit(x)"
outputs a quick bound for the number of decimal
digits of (the components of) \f(CW\*(C`x\*(C'\fR, off by at most \f(CW1\fR. If you want the
exact value, you can use \f(CW\*(C`#Str(x)\*(C'\fR, which is slower.
.PP
The library syntax is \fBsizedigit\fR\f(CW\*(C`(x)\*(C'\fR which returns a \f(CW\*(C`long\*(C'\fR.
.IX Xref "sizedigit"
.ie n .SS "truncate""(x,{&e})"""
.el .SS "truncate\f(CW(x,{&e})\fP"
.IX Xref "truncate"
.IX Subsection "truncate(x,{&e})"
truncates \f(CW\*(C`x\*(C'\fR and sets \f(CW\*(C`e\*(C'\fR to the number of
error bits. When \f(CW\*(C`x\*(C'\fR is in \fB\f(BIR\fB\fR, this means that the part after the decimal
point is chopped away, \f(CW\*(C`e\*(C'\fR is the binary exponent of the difference between
the original and the truncated value (the ``fractional part''). If the
exponent of \f(CW\*(C`x\*(C'\fR is too large compared to its precision (i.e. \f(CW\*(C`e > 0\*(C'\fR), the
result is undefined and an error occurs if \f(CW\*(C`e\*(C'\fR was not given. The function
applies componentwise on vector / matrices; \f(CW\*(C`e\*(C'\fR is then the maximal number of
error bits. If \f(CW\*(C`x\*(C'\fR is a rational function, the result is the ``integer part''
(Euclidean quotient of numerator by denominator) and \f(CW\*(C`e\*(C'\fR is not set.
.PP
Note a very special use of \f(CW\*(C`truncate\*(C'\fR: when applied to a power series, it
transforms it into a polynomial or a rational function with denominator
a power of \f(CW\*(C`X\*(C'\fR, by chopping away the \f(CW\*(C`O(X^k)\*(C'\fR. Similarly, when applied to
a \f(CW\*(C`p\*(C'\fR\-adic number, it transforms it into an integer or a rational number
by chopping away the \f(CW\*(C`O(p^k)\*(C'\fR.
.PP
The library syntax is \fBgcvtoi\fR\f(CW\*(C`(x,&e)\*(C'\fR, where \f(CW\*(C`e\*(C'\fR is a \f(CW\*(C`long\*(C'\fR integer. Also available is
\&\f(CW\*(C` \f(CBgtrunc\f(CW(x)\*(C'\fR.
.IX Xref "gcvtoi gtrunc"
.ie n .SS "valuation""(x,p)"""
.el .SS "valuation\f(CW(x,p)\fP"
.IX Xref "valuation"
.IX Subsection "valuation(x,p)"
 computes the highest
exponent of \f(CW\*(C`p\*(C'\fR dividing \f(CW\*(C`x\*(C'\fR. If \f(CW\*(C`p\*(C'\fR is of type integer, \f(CW\*(C`x\*(C'\fR must be an
integer, an intmod whose modulus is divisible by \f(CW\*(C`p\*(C'\fR, a fraction, a
\&\f(CW\*(C`q\*(C'\fR\-adic number with \f(CW\*(C`q = p\*(C'\fR, or a polynomial or power series in which case the
valuation is the minimum of the valuation of the coefficients.
.IX Xref "Label se:valuation"
.PP
If \f(CW\*(C`p\*(C'\fR is of type polynomial, \f(CW\*(C`x\*(C'\fR must be of type polynomial or rational
function, and also a power series if \f(CW\*(C`x\*(C'\fR is a monomial. Finally, the
valuation of a vector, complex or quadratic number is the minimum of the
component valuations.
.PP
If \f(CW\*(C`x = 0\*(C'\fR, the result is \f(CW\*(C`VERYBIGINT\*(C'\fR (\f(CW\*(C`2^{31}\-1\*(C'\fR for 32\-bit machines or
\&\f(CW\*(C`2^{63}\-1\*(C'\fR for 64\-bit machines) if \f(CW\*(C`x\*(C'\fR is an exact object. If \f(CW\*(C`x\*(C'\fR is a
\&\f(CW\*(C`p\*(C'\fR\-adic numbers or power series, the result is the exponent of the zero.
Any other type combinations gives an error.
.PP
The library syntax is \fBggval\fR\f(CW\*(C`(x,p)\*(C'\fR, and the result is a \f(CW\*(C`long\*(C'\fR.
.IX Xref "ggval"
.ie n .SS "variable""(x)"""
.el .SS "variable\f(CW(x)\fP"
.IX Xref "variable"
.IX Subsection "variable(x)"
gives the main variable of the object \f(CW\*(C`x\*(C'\fR, and
\&\f(CW\*(C`p\*(C'\fR if \f(CW\*(C`x\*(C'\fR is a \f(CW\*(C`p\*(C'\fR\-adic number. Gives an error if \f(CW\*(C`x\*(C'\fR has no variable
associated to it. Note that this function is useful only in \s-1GP,\s0 since in
library mode the function \f(CW\*(C`gvar\*(C'\fR is more appropriate.
.PP
The library syntax is \fBgpolvar\fR\f(CW\*(C`(x)\*(C'\fR. However, in library mode, this function should not be used.
Instead, test whether \f(CW\*(C`x\*(C'\fR is a \f(CW\*(C`p\*(C'\fR\-adic (type \f(CW\*(C`t_PADIC\*(C'\fR), in which case \f(CW\*(C`p\*(C'\fR
is in \f(CW\*(C`x[2]\*(C'\fR, or call the function \f(CW\*(C` \f(CBgvar\f(CW(x)\*(C'\fR which returns the variable
\&\eemph{number} of \f(CW\*(C`x\*(C'\fR if it exists, \f(CW\*(C`BIGINT\*(C'\fR otherwise.
.IX Xref "gpolvar gvar"
.SH "Transcendental functions"
.IX Header "Transcendental functions"

As a general rule, which of course in some cases may have exceptions,
transcendental functions operate in the following way:
.IX Xref "Label se:trans"
.PP
\&\eitem If the argument is either an integer, a real, a rational, a complex
or a quadratic number, it is, if necessary, first converted to a real (or
complex) number using the current precision held in the default
\&\f(CW\*(C`realprecision\*(C'\fR. Note that only exact arguments are converted, while
inexact arguments such as reals are not.
.IX Xref "precision"
.PP
In \s-1GP\s0 this is transparent to the user, but when programming in library
mode, care must be taken to supply a meaningful parameter \fIprec\fR as the
last argument of the function if the first argument is an exact object.
This parameter is ignored if the argument is inexact.
.PP
Note that in library mode the precision argument \fIprec\fR is a word
count including codewords, i.e. represents the length in words of a real
number, while under \f(CW\*(C`gp\*(C'\fR the precision (which is changed by the metacommand
\&\f(CW\*(C`\ep\*(C'\fR or using \f(CW\*(C`default(realprecision,...)\*(C'\fR) is the number of significant
decimal digits.
.PP
Note that some accuracies attainable on 32\-bit machines cannot be attained
on 64\-bit machines for parity reasons. For example the default \f(CW\*(C`gp\*(C'\fR accuracy
is 28 decimal digits on 32\-bit machines, corresponding to \fIprec\fR having
the value 5, but this cannot be attained on 64\-bit machines.
.PP
After possible conversion, the function is computed. Note that even if the
argument is real, the result may be complex (e.g. \f(CW\*(C`acos(2.0)\*(C'\fR or
\&\f(CW\*(C`acosh(0.0)\*(C'\fR). Note also that the principal branch is always chosen.
.PP
\&\eitem If the argument is an intmod or a \f(CW\*(C`p\*(C'\fR\-adic, at present only a
few functions like \f(CW\*(C`sqrt\*(C'\fR (square root), \f(CW\*(C`sqr\*(C'\fR (square), \f(CW\*(C`log\*(C'\fR,
\&\f(CW\*(C`exp\*(C'\fR, powering, \f(CW\*(C`teichmuller\*(C'\fR (Teichmüller character) and
\&\f(CW\*(C`agm\*(C'\fR (arithmetic-geometric mean) are implemented.
.PP
Note that in the case of a \f(CW2\fR\-adic number, \f(CWsqr(x)\fR may not be
identical to \f(CW\*(C`x*x\*(C'\fR: for example if \f(CW\*(C`x = 1+O(2^5)\*(C'\fR and \f(CW\*(C`y = 1+O(2^5)\*(C'\fR then
\&\f(CW\*(C`x*y = 1+O(2^5)\*(C'\fR while \f(CW\*(C`sqr(x) = 1+O(2^6)\*(C'\fR. Here, \f(CW\*(C`x * x\*(C'\fR yields the
same result as \f(CWsqr(x)\fR since the two operands are known to be
\&\eemph{identical}. The same statement holds true for \f(CW\*(C`p\*(C'\fR\-adics raised to the
power \f(CW\*(C`n\*(C'\fR, where \f(CW\*(C`v_p(n) > 0\*(C'\fR.
.PP
\&\fBRemark:\fR note that if we wanted to be strictly consistent with
the \s-1PARI\s0 philosophy, we should have \f(CW\*(C`x*y = (4 mod 8)\*(C'\fR and \f(CW\*(C`sqr(x) = 
(4 mod 32)\*(C'\fR when both \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR are congruent to \f(CW2\fR modulo \f(CW4\fR.
However, since intmod is an exact object, \s-1PARI\s0 assumes that the modulus
must not change, and the result is hence \f(CW\*(C`(0 mod 4)\*(C'\fR in both cases. On
the other hand, \f(CW\*(C`p\*(C'\fR\-adics are not exact objects, hence are treated
differently.
.PP
\&\eitem If the argument is a polynomial, power series or rational function,
it is, if necessary, first converted to a power series using the current
precision held in the variable \f(CW\*(C`precdl\*(C'\fR. Under \f(CW\*(C`gp\*(C'\fR this again is
transparent to the user. When programming in library mode, however, the
global variable \f(CW\*(C`precdl\*(C'\fR must be set before calling the function if the
argument has an exact type (i.e. not a power series). Here \f(CW\*(C`precdl\*(C'\fR is
not an argument of the function, but a global variable.
.IX Xref "precdl"
.PP
Then the Taylor series expansion of the function around \f(CW\*(C`X = 0\*(C'\fR (where \f(CW\*(C`X\*(C'\fR is
the main variable) is computed to a number of terms depending on the number
of terms of the argument and the function being computed.
.PP
\&\eitem If the argument is a vector or a matrix, the result is the
componentwise evaluation of the function. In particular, transcendental
functions on square matrices, which are not implemented in the present
version \fB2.3.5\fR, will have a different name if they are implemented some day.
.SS "^"
.IX Subsection "^"
If \f(CW\*(C`y\*(C'\fR is not of type integer, \f(CW\*(C`x^y\*(C'\fR has the same
effect as \f(CW\*(C`exp(y*log(x))\*(C'\fR. It can be applied to \f(CW\*(C`p\*(C'\fR\-adic numbers as well
as to the more usual types.
.IX Xref "powering"
.PP
The library syntax is \fBgpow\fR\f(CW\*(C`(x,y,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "gpow"
.SS "Euler"
.IX Subsection "Euler"
Euler's constant \f(CW\*(C`\f(CIgamma\f(CW = 0.57721...\*(C'\fR. Note that
\&\f(CW\*(C`Euler\*(C'\fR is one of the few special reserved names which cannot be used for
variables (the others are \f(CW\*(C`I\*(C'\fR and \f(CW\*(C`Pi\*(C'\fR, as well as all function
names).
.IX Xref "Label se:euler"
.PP
The library syntax is \fBmpeuler\fR\f(CW\*(C`(\f(CIprec\f(CW)\*(C'\fR where \f(CW\*(C`\f(CIprec\f(CW\*(C'\fR \eemph{must} be given. Note that
this creates \f(CW\*(C`\f(CIgamma\f(CW\*(C'\fR on the \s-1PARI\s0 stack, but a copy is also created on the
heap for quicker computations next time the function is called.
.IX Xref "mpeuler"
.SS "I"
.IX Subsection "I"
the complex number \f(CW\*(C` \f(CIsqrt\f(CW {\-1}\*(C'\fR.
.PP
The library syntax is the global variable \f(CW\*(C`gi\*(C'\fR (of type \f(CW\*(C`GEN\*(C'\fR).
.SS "Pi"
.IX Subsection "Pi"
the constant \f(CW\*(C`\f(CIPi\f(CW\*(C'\fR (\f(CW3.14159...\fR).
.IX Xref "Label se:pi"
.PP
The library syntax is \fBmppi\fR\f(CW\*(C`(\f(CIprec\f(CW)\*(C'\fR where \f(CW\*(C`\f(CIprec\f(CW\*(C'\fR \eemph{must} be given. Note that
this creates \f(CW\*(C`\f(CIPi\f(CW\*(C'\fR on the \s-1PARI\s0 stack, but a copy is also created on the heap
for quicker computations next time the function is called.
.IX Xref "mppi"
.ie n .SS "abs""(x)"""
.el .SS "abs\f(CW(x)\fP"
.IX Xref "abs"
.IX Subsection "abs(x)"
absolute value of \f(CW\*(C`x\*(C'\fR (modulus if \f(CW\*(C`x\*(C'\fR is complex).
Rational functions are not allowed. Contrary to most transcendental
functions, an exact argument is \eemph{not} converted to a real number before
applying \f(CW\*(C`abs\*(C'\fR and an exact result is returned if possible.
.PP
.Vb 6
\&  ? abs(\-1)
\&  %1 = 1
\&  ? abs(3/7 + 4/7*I)
\&  %2 = 5/7
\&  ? abs(1 + I)
\&  %3 = 1.414213562373095048801688724
.Ve
.PP
If \f(CW\*(C`x\*(C'\fR is a polynomial, returns \f(CW\*(C`\-x\*(C'\fR if the leading coefficient is
real and negative else returns \f(CW\*(C`x\*(C'\fR. For a power series, the constant
coefficient is considered instead.
.PP
The library syntax is \fBgabs\fR\f(CW\*(C`(x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "gabs"
.ie n .SS "acos""(x)"""
.el .SS "acos\f(CW(x)\fP"
.IX Xref "acos"
.IX Subsection "acos(x)"
principal branch of \f(CW\*(C`cos^{\-1}(x)\*(C'\fR,
i.e. such that \f(CW\*(C`Re(acos(x)) belongs to [0,\f(CIPi\f(CW]\*(C'\fR. If
\&\f(CW\*(C`x belongs to \f(CB\f(CBR\f(CB\f(CW\*(C'\fR and \f(CW\*(C`|x| > 1\*(C'\fR, then \f(CWacos(x)\fR is complex.
.PP
The library syntax is \fBgacos\fR\f(CW\*(C`(x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "gacos"
.ie n .SS "acosh""(x)"""
.el .SS "acosh\f(CW(x)\fP"
.IX Xref "acosh"
.IX Subsection "acosh(x)"
principal branch of \f(CW\*(C`cosh^{\-1}(x)\*(C'\fR,
i.e. such that \f(CW\*(C`Im(acosh(x)) belongs to [0,\f(CIPi\f(CW]\*(C'\fR. If
\&\f(CW\*(C`x belongs to \f(CB\f(CBR\f(CB\f(CW\*(C'\fR and \f(CW\*(C`x < 1\*(C'\fR, then \f(CWacosh(x)\fR is complex.
.PP
The library syntax is \fBgach\fR\f(CW\*(C`(x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "gach"
.ie n .SS "agm""(x,y)"""
.el .SS "agm\f(CW(x,y)\fP"
.IX Xref "agm"
.IX Subsection "agm(x,y)"
arithmetic-geometric mean of \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR. In the
case of complex or negative numbers, the principal square root is always
chosen. \f(CW\*(C`p\*(C'\fR\-adic or power series arguments are also allowed. Note that
a \f(CW\*(C`p\*(C'\fR\-adic agm exists only if \f(CW\*(C`x/y\*(C'\fR is congruent to 1 modulo \f(CW\*(C`p\*(C'\fR (modulo
16 for \f(CW\*(C`p = 2\*(C'\fR). \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR cannot both be vectors or matrices.
.PP
The library syntax is \fBagm\fR\f(CW\*(C`(x,y,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "agm"
.ie n .SS "arg""(x)"""
.el .SS "arg\f(CW(x)\fP"
.IX Xref "arg"
.IX Subsection "arg(x)"
argument of the complex number \f(CW\*(C`x\*(C'\fR, such that
\&\f(CW\*(C`\-\f(CIPi\f(CW < arg(x) <= \f(CIPi\f(CW\*(C'\fR.
.PP
The library syntax is \fBgarg\fR\f(CW\*(C`(x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "garg"
.ie n .SS "asin""(x)"""
.el .SS "asin\f(CW(x)\fP"
.IX Xref "asin"
.IX Subsection "asin(x)"
principal branch of \f(CW\*(C`sin^{\-1}(x)\*(C'\fR, i.e. such
that \f(CW\*(C`Re(asin(x)) belongs to [\-\f(CIPi\f(CW/2,\f(CIPi\f(CW/2]\*(C'\fR. If \f(CW\*(C`x belongs to \f(CB\f(CBR\f(CB\f(CW\*(C'\fR and \f(CW\*(C`|x| > 1\*(C'\fR then
\&\f(CWasin(x)\fR is complex.
.PP
The library syntax is \fBgasin\fR\f(CW\*(C`(x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "gasin"
.ie n .SS "asinh""(x)"""
.el .SS "asinh\f(CW(x)\fP"
.IX Xref "asinh"
.IX Subsection "asinh(x)"
principal branch of \f(CW\*(C`sinh^{\-1}(x)\*(C'\fR, i.e. such
that \f(CW\*(C`Im(asinh(x)) belongs to [\-\f(CIPi\f(CW/2,\f(CIPi\f(CW/2]\*(C'\fR.
.PP
The library syntax is \fBgash\fR\f(CW\*(C`(x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "gash"
.ie n .SS "atan""(x)"""
.el .SS "atan\f(CW(x)\fP"
.IX Xref "atan"
.IX Subsection "atan(x)"
principal branch of \f(CW\*(C`tan^{\-1}(x)\*(C'\fR, i.e. such
that \f(CW\*(C`Re(atan(x)) belongs to  ]\-\f(CIPi\f(CW/2,\f(CIPi\f(CW/2[\*(C'\fR.
.PP
The library syntax is \fBgatan\fR\f(CW\*(C`(x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "gatan"
.ie n .SS "atanh""(x)"""
.el .SS "atanh\f(CW(x)\fP"
.IX Xref "atanh"
.IX Subsection "atanh(x)"
principal branch of \f(CW\*(C`tanh^{\-1}(x)\*(C'\fR, i.e. such
that \f(CW\*(C`Im(atanh(x)) belongs to  ]\-\f(CIPi\f(CW/2,\f(CIPi\f(CW/2]\*(C'\fR. If \f(CW\*(C`x belongs to \f(CB\f(CBR\f(CB\f(CW\*(C'\fR and \f(CW\*(C`|x| > 1\*(C'\fR then
\&\f(CWatanh(x)\fR is complex.
.PP
The library syntax is \fBgath\fR\f(CW\*(C`(x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "gath"
.ie n .SS "bernfrac""(x)"""
.el .SS "bernfrac\f(CW(x)\fP"
.IX Xref "bernfrac"
.IX Subsection "bernfrac(x)"
Bernoulli number \f(CW\*(C`B_x\*(C'\fR,
where \f(CW\*(C`B_0 = 1\*(C'\fR, \f(CW\*(C`B_1 = \-1/2\*(C'\fR, \f(CW\*(C`B_2 = 1/6\*(C'\fR,..., expressed as a rational number.
The argument \f(CW\*(C`x\*(C'\fR should be of type integer.
.IX Xref "Bernoulli numbers"
.PP
The library syntax is \fBbernfrac\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "bernfrac"
.ie n .SS "bernreal""(x)"""
.el .SS "bernreal\f(CW(x)\fP"
.IX Xref "bernreal"
.IX Subsection "bernreal(x)"
Bernoulli number
\&\f(CW\*(C`B_x\*(C'\fR, as \f(CW\*(C`bernfrac\*(C'\fR, but \f(CW\*(C`B_x\*(C'\fR is returned as a real number
(with the current precision).
.IX Xref "Bernoulli numbers"
.PP
The library syntax is \fBbernreal\fR\f(CW\*(C`(x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "bernreal"
.ie n .SS "bernvec""(x)"""
.el .SS "bernvec\f(CW(x)\fP"
.IX Xref "bernvec"
.IX Subsection "bernvec(x)"
creates a vector containing, as rational numbers,
the Bernoulli numbers \f(CW\*(C`B_0\*(C'\fR, \f(CW\*(C`B_2\*(C'\fR,..., \f(CW\*(C`B_{2x}\*(C'\fR.
This routine is obsolete. Use \f(CW\*(C`bernfrac\*(C'\fR instead each time you need a
Bernoulli number in exact form.
.IX Xref "Bernoulli numbers"
.PP
\&\fBNote:\fR this routine is implemented using repeated independent
calls to \f(CW\*(C`bernfrac\*(C'\fR, which is faster than the standard recursion in exact
arithmetic. It is only kept for backward compatibility: it is not faster than
individual calls to \f(CW\*(C`bernfrac\*(C'\fR, its output uses a lot of memory space,
and coping with the index shift is awkward.
.PP
The library syntax is \fBbernvec\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "bernvec"
.ie n .SS "besselh1""(\f(CInu\fP,x)"""
.el .SS "besselh1\f(CW(\fP\f(CInu\fP\f(CW,x)\fP"
.IX Xref "besselh1"
.IX Subsection "besselh1(nu,x)"
\&\f(CW\*(C`H^1\*(C'\fR\-Bessel function of index \fInu\fR
and argument \f(CW\*(C`x\*(C'\fR.
.PP
The library syntax is \fBhbessel1\fR\f(CW\*(C`(\f(CInu\f(CW,x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "hbessel1"
.ie n .SS "besselh2""(\f(CInu\fP,x)"""
.el .SS "besselh2\f(CW(\fP\f(CInu\fP\f(CW,x)\fP"
.IX Xref "besselh2"
.IX Subsection "besselh2(nu,x)"
\&\f(CW\*(C`H^2\*(C'\fR\-Bessel function of index \fInu\fR
and argument \f(CW\*(C`x\*(C'\fR.
.PP
The library syntax is \fBhbessel2\fR\f(CW\*(C`(\f(CInu\f(CW,x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "hbessel2"
.ie n .SS "besseli""(\f(CInu\fP,x)"""
.el .SS "besseli\f(CW(\fP\f(CInu\fP\f(CW,x)\fP"
.IX Xref "besseli"
.IX Subsection "besseli(nu,x)"
\&\f(CW\*(C`I\*(C'\fR\-Bessel function of index \fInu\fR and
argument \f(CW\*(C`x\*(C'\fR. If \f(CW\*(C`x\*(C'\fR converts to a power series, the initial factor
\&\f(CW\*(C`(x/2)^\f(CInu\f(CW/\f(CIGamma\f(CW(\f(CInu\f(CW+1)\*(C'\fR is omitted (since it cannot be represented in \s-1PARI\s0
when \f(CW\*(C`\f(CInu\f(CW\*(C'\fR is not integral).
.PP
The library syntax is \fBibessel\fR\f(CW\*(C`(\f(CInu\f(CW,x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "ibessel"
.ie n .SS "besselj""(\f(CInu\fP,x)"""
.el .SS "besselj\f(CW(\fP\f(CInu\fP\f(CW,x)\fP"
.IX Xref "besselj"
.IX Subsection "besselj(nu,x)"
\&\f(CW\*(C`J\*(C'\fR\-Bessel function of index \fInu\fR and
argument \f(CW\*(C`x\*(C'\fR. If \f(CW\*(C`x\*(C'\fR converts to a power series, the initial factor
\&\f(CW\*(C`(x/2)^\f(CInu\f(CW/\f(CIGamma\f(CW(\f(CInu\f(CW+1)\*(C'\fR is omitted (since it cannot be represented in \s-1PARI\s0
when \f(CW\*(C`\f(CInu\f(CW\*(C'\fR is not integral).
.PP
The library syntax is \fBjbessel\fR\f(CW\*(C`(\f(CInu\f(CW,x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "jbessel"
.ie n .SS "besseljh""(n,x)"""
.el .SS "besseljh\f(CW(n,x)\fP"
.IX Xref "besseljh"
.IX Subsection "besseljh(n,x)"
\&\f(CW\*(C`J\*(C'\fR\-Bessel function of half integral index.
More precisely, \f(CW\*(C`besseljh(n,x)\*(C'\fR computes \f(CW\*(C`J_{n+1/2}(x)\*(C'\fR where \f(CW\*(C`n\*(C'\fR
must be of type integer, and \f(CW\*(C`x\*(C'\fR is any element of \fB\f(BIC\fB\fR. In the
present version \fB2.3.5\fR, this function is not very accurate when \f(CW\*(C`x\*(C'\fR is
small.
.PP
The library syntax is \fBjbesselh\fR\f(CW\*(C`(n,x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "jbesselh"
.ie n .SS "besselk""(\f(CInu\fP,x,{\f(CIflag\fP = 0})"""
.el .SS "besselk\f(CW(\fP\f(CInu\fP\f(CW,x,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "besselk"
.IX Subsection "besselk(nu,x,{flag = 0})"
\&\f(CW\*(C`K\*(C'\fR\-Bessel function of index
\&\fInu\fR (which can be complex) and argument \f(CW\*(C`x\*(C'\fR. Only real and positive
arguments \f(CW\*(C`x\*(C'\fR are allowed in the present version \fB2.3.5\fR. If \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR is equal to
1, uses another implementation of this function which is faster when \f(CW\*(C`x\egg 1\*(C'\fR.
.PP
The library syntax is \fBkbessel\fR\f(CW\*(C`(\f(CInu\f(CW,x,\f(CIprec\f(CW)\*(C'\fR and
\&\f(CW\*(C` \f(CBkbessel2\f(CW(\f(CInu\f(CW,x,\f(CIprec\f(CW)\*(C'\fR respectively.
.IX Xref "kbessel kbessel2"
.ie n .SS "besseln""(\f(CInu\fP,x)"""
.el .SS "besseln\f(CW(\fP\f(CInu\fP\f(CW,x)\fP"
.IX Xref "besseln"
.IX Subsection "besseln(nu,x)"
\&\f(CW\*(C`N\*(C'\fR\-Bessel function of index \fInu\fR
and argument \f(CW\*(C`x\*(C'\fR.
.PP
The library syntax is \fBnbessel\fR\f(CW\*(C`(\f(CInu\f(CW,x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "nbessel"
.ie n .SS "cos""(x)"""
.el .SS "cos\f(CW(x)\fP"
.IX Xref "cos"
.IX Subsection "cos(x)"
cosine of \f(CW\*(C`x\*(C'\fR.
.PP
The library syntax is \fBgcos\fR\f(CW\*(C`(x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "gcos"
.ie n .SS "cosh""(x)"""
.el .SS "cosh\f(CW(x)\fP"
.IX Xref "cosh"
.IX Subsection "cosh(x)"
hyperbolic cosine of \f(CW\*(C`x\*(C'\fR.
.PP
The library syntax is \fBgch\fR\f(CW\*(C`(x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "gch"
.ie n .SS "cotan""(x)"""
.el .SS "cotan\f(CW(x)\fP"
.IX Xref "cotan"
.IX Subsection "cotan(x)"
cotangent of \f(CW\*(C`x\*(C'\fR.
.PP
The library syntax is \fBgcotan\fR\f(CW\*(C`(x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "gcotan"
.ie n .SS "dilog""(x)"""
.el .SS "dilog\f(CW(x)\fP"
.IX Xref "dilog"
.IX Subsection "dilog(x)"
principal branch of the dilogarithm of \f(CW\*(C`x\*(C'\fR,
i.e. analytic continuation of the power series \f(CW\*(C` \f(CIlog\f(CW _2(x) = \f(CIsum\f(CW_{n >= 1}x^n/n^2\*(C'\fR.
.PP
The library syntax is \fBdilog\fR\f(CW\*(C`(x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "dilog"
.ie n .SS "eint1""(x,{n})"""
.el .SS "eint1\f(CW(x,{n})\fP"
.IX Xref "eint1"
.IX Subsection "eint1(x,{n})"
exponential integral
\&\f(CW\*(C`\f(CIint\f(CW_x^ oo (e^{\-t})/(t)dt\*(C'\fR (\f(CW\*(C`x belongs to \f(CB\f(CBR\f(CB\f(CW\*(C'\fR)
.PP
If \f(CW\*(C`n\*(C'\fR is present, outputs the \f(CW\*(C`n\*(C'\fR\-dimensional vector
\&\f(CW\*(C`[eint1(x),...,eint1(nx)]\*(C'\fR (\f(CW\*(C`x >= 0\*(C'\fR). This is faster than
repeatedly calling \f(CW\*(C`eint1(i * x)\*(C'\fR.
.PP
The library syntax is \fBveceint1\fR\f(CW\*(C`(x,n,prec)\*(C'\fR. Also available is \f(CW\*(C` \f(CBeint1\f(CW(x,prec)\*(C'\fR.
.IX Xref "veceint1 eint1"
.ie n .SS "erfc""(x)"""
.el .SS "erfc\f(CW(x)\fP"
.IX Xref "erfc"
.IX Subsection "erfc(x)"
complementary error function
\&\f(CW\*(C`(2/ \f(CIsqrt\f(CW \f(CIPi\f(CW)\f(CIint\f(CW_x^ oo e^{\-t^2}dt\*(C'\fR (\f(CW\*(C`x belongs to \f(CB\f(CBR\f(CB\f(CW\*(C'\fR).
.PP
The library syntax is \fBerfc\fR\f(CW\*(C`(x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "erfc"
.ie n .SS "eta""(x,{\f(CIflag\fP = 0})"""
.el .SS "eta\f(CW(x,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "eta"
.IX Subsection "eta(x,{flag = 0})"
Dedekind's \f(CW\*(C`\f(CIeta\f(CW\*(C'\fR function, without the
\&\f(CW\*(C`q^{1/24}\*(C'\fR. This means the following: if \f(CW\*(C`x\*(C'\fR is a complex number with positive
imaginary part, the result is \f(CW\*(C`\f(CIprod\f(CW_{n = 1}^ oo (1\-q^n)\*(C'\fR, where
\&\f(CW\*(C`q = e^{2i\f(CIPi\f(CW x}\*(C'\fR. If \f(CW\*(C`x\*(C'\fR is a power series (or can be converted to a power
series) with positive valuation, the result is \f(CW\*(C`\f(CIprod\f(CW_{n = 1}^ oo (1\-x^n)\*(C'\fR.
.IX Xref "Dedekind"
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR and \f(CW\*(C`x\*(C'\fR can be converted to a complex number (i.e. is not a power
series), computes the true \f(CW\*(C`\f(CIeta\f(CW\*(C'\fR function, including the leading \f(CW\*(C`q^{1/24}\*(C'\fR.
.PP
The library syntax is \fBeta\fR\f(CW\*(C`(x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "eta"
.ie n .SS "exp""(x)"""
.el .SS "exp\f(CW(x)\fP"
.IX Xref "exp"
.IX Subsection "exp(x)"
exponential of \f(CW\*(C`x\*(C'\fR.
\&\f(CW\*(C`p\*(C'\fR\-adic arguments with positive valuation are accepted.
.PP
The library syntax is \fBgexp\fR\f(CW\*(C`(x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "gexp"
.ie n .SS "gammah""(x)"""
.el .SS "gammah\f(CW(x)\fP"
.IX Xref "gammah"
.IX Subsection "gammah(x)"
gamma function evaluated at the argument \f(CW\*(C`x+1/2\*(C'\fR.
.PP
The library syntax is \fBggamd\fR\f(CW\*(C`(x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "ggamd"
.ie n .SS "gamma""(x)"""
.el .SS "gamma\f(CW(x)\fP"
.IX Xref "gamma"
.IX Subsection "gamma(x)"
gamma function of \f(CW\*(C`x\*(C'\fR.
.PP
The library syntax is \fBggamma\fR\f(CW\*(C`(x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "ggamma"
.ie n .SS "hyperu""(a,b,x)"""
.el .SS "hyperu\f(CW(a,b,x)\fP"
.IX Xref "hyperu"
.IX Subsection "hyperu(a,b,x)"
\&\f(CW\*(C`U\*(C'\fR\-confluent hypergeometric function with
parameters \f(CW\*(C`a\*(C'\fR and \f(CW\*(C`b\*(C'\fR. The parameters \f(CW\*(C`a\*(C'\fR and \f(CW\*(C`b\*(C'\fR can be complex but
the present implementation requires \f(CW\*(C`x\*(C'\fR to be positive.
.PP
The library syntax is \fBhyperu\fR\f(CW\*(C`(a,b,x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "hyperu"
.ie n .SS "incgam""(s,x,{y})"""
.el .SS "incgam\f(CW(s,x,{y})\fP"
.IX Xref "incgam"
.IX Subsection "incgam(s,x,{y})"
incomplete gamma function. The argument \f(CW\*(C`x\*(C'\fR
and \f(CW\*(C`s\*(C'\fR are complex numbers (\f(CW\*(C`x\*(C'\fR must be a positive real number if \f(CW\*(C`s = 0\*(C'\fR).
The result returned is \f(CW\*(C`\f(CIint\f(CW_x^ oo e^{\-t}t^{s\-1}dt\*(C'\fR. When \f(CW\*(C`y\*(C'\fR is given,
assume (of course without checking!) that \f(CW\*(C`y = \f(CIGamma\f(CW(s)\*(C'\fR. For small \f(CW\*(C`x\*(C'\fR, this
will speed up the computation.
.PP
The library syntax is \fBincgam\fR\f(CW\*(C`(s,x,\f(CIprec\f(CW)\*(C'\fR and \f(CW\*(C` \f(CBincgam0\f(CW(s,x,y,prec)\*(C'\fR,
respectively (an omitted \f(CW\*(C`y\*(C'\fR is coded as \f(CW\*(C`NULL\*(C'\fR).
.IX Xref "incgam incgam0"
.ie n .SS "incgamc""(s,x)"""
.el .SS "incgamc\f(CW(s,x)\fP"
.IX Xref "incgamc"
.IX Subsection "incgamc(s,x)"
complementary incomplete gamma function.
The arguments \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`s\*(C'\fR are complex numbers such that \f(CW\*(C`s\*(C'\fR is not a pole of
\&\f(CW\*(C`\f(CIGamma\f(CW\*(C'\fR and \f(CW\*(C`|x|/(|s|+1)\*(C'\fR is not much larger than 1 (otherwise the
convergence is very slow). The result returned is \f(CW\*(C`\f(CIint\f(CW_0^x
e^{\-t}t^{s\-1}dt\*(C'\fR.
.PP
The library syntax is \fBincgamc\fR\f(CW\*(C`(s,x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "incgamc"
.ie n .SS "log""(x)"""
.el .SS "log\f(CW(x)\fP"
.IX Xref "log"
.IX Subsection "log(x)"
principal branch of the natural logarithm of
\&\f(CW\*(C`x\*(C'\fR, i.e. such that \f(CW\*(C`Im(log(x)) belongs to  ]\-\f(CIPi\f(CW,\f(CIPi\f(CW]\*(C'\fR. The result is complex
(with imaginary part equal to \f(CW\*(C`\f(CIPi\f(CW\*(C'\fR) if \f(CW\*(C`x belongs to \f(CB\f(CBR\f(CB\f(CW\*(C'\fR and \f(CW\*(C`x < 0\*(C'\fR. In general,
the algorithm uses the formula
.PP
  \f(CW\*(C` \f(CIlog\f(CW (x)  ~  (\f(CIPi\f(CW)/(2agm(1, 4/s)) \- m  \f(CIlog\f(CW  2, \*(C'\fR
.PP
if \f(CW\*(C`s = x 2^m\*(C'\fR is large enough. (The result is exact to \f(CW\*(C`B\*(C'\fR bits provided
\&\f(CW\*(C`s > 2^{B/2}\*(C'\fR.) At low accuracies, the series expansion near \f(CW1\fR is used.
.PP
\&\f(CW\*(C`p\*(C'\fR\-adic arguments are also accepted for \f(CW\*(C`x\*(C'\fR, with the convention that
\&\f(CW\*(C` \f(CIlog\f(CW (p) = 0\*(C'\fR. Hence in particular \f(CW\*(C` \f(CIexp\f(CW ( \f(CIlog\f(CW (x))/x\*(C'\fR is not in general equal to
1 but to a \f(CW\*(C`(p\-1)\*(C'\fR\-th root of unity (or \f(CW\*(C`\f(CI+\-\f(CW1\*(C'\fR if \f(CW\*(C`p = 2\*(C'\fR) times a power of
\&\f(CW\*(C`p\*(C'\fR.
.PP
The library syntax is \fBglog\fR\f(CW\*(C`(x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "glog"
.ie n .SS "lngamma""(x)"""
.el .SS "lngamma\f(CW(x)\fP"
.IX Xref "lngamma"
.IX Subsection "lngamma(x)"
principal branch of the logarithm of the gamma
function of \f(CW\*(C`x\*(C'\fR. This function is analytic on the complex plane with
non-positive integers removed. Can have much larger arguments than \f(CW\*(C`gamma\*(C'\fR
itself. The \f(CW\*(C`p\*(C'\fR\-adic \f(CW\*(C`lngamma\*(C'\fR function is not implemented.
.PP
The library syntax is \fBglngamma\fR\f(CW\*(C`(x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "glngamma"
.ie n .SS "polylog""(m,x,{\f(CIflag\fP = 0})"""
.el .SS "polylog\f(CW(m,x,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "polylog"
.IX Subsection "polylog(m,x,{flag = 0})"
one of the different polylogarithms,
depending on \fIflag\fR:
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR or is omitted: \f(CW\*(C`m^th\*(C'\fR polylogarithm of \f(CW\*(C`x\*(C'\fR, i.e. analytic
continuation of the power series \f(CW\*(C`Li_m(x) = \f(CIsum\f(CW_{n >= 1}x^n/n^m\*(C'\fR
(\f(CW\*(C`x < 1\*(C'\fR). Uses the functional equation linking the values at \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`1/x\*(C'\fR
to restrict to the case \f(CW\*(C`|x| <= 1\*(C'\fR, then the power series when
\&\f(CW\*(C`|x|^2 <= 1/2\*(C'\fR, and the power series expansion in \f(CW\*(C` \f(CIlog\f(CW (x)\*(C'\fR otherwise.
.PP
Using \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR, computes a modified \f(CW\*(C`m^th\*(C'\fR polylogarithm of \f(CW\*(C`x\*(C'\fR.
We use Zagier's notations; let \f(CW\*(C` \f(CIRe\f(CW _m\*(C'\fR denotes \f(CW\*(C` \f(CIRe\f(CW \*(C'\fR or \f(CW\*(C` \f(CIIm\f(CW \*(C'\fR depending
whether \f(CW\*(C`m\*(C'\fR is odd or even:
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR: compute \f(CW\*(C`~ D_m(x)\*(C'\fR, defined for \f(CW\*(C`|x| <= 1\*(C'\fR by
.PP
  \f(CW\*(C` \f(CIRe\f(CW _m(\f(CIsum\f(CW_{k = 0}^{m\-1} ((\- \f(CIlog\f(CW |x|)^k)/(k!)Li_{m\-k}(x)
+((\- \f(CIlog\f(CW |x|)^{m\-1})/(m!) \f(CIlog\f(CW |1\-x|).\*(C'\fR
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 2\*(C'\fR: compute \f(CWD_m(x)\fR, defined for \f(CW\*(C`|x| <= 1\*(C'\fR by
.PP
  \f(CW\*(C` \f(CIRe\f(CW _m(\f(CIsum\f(CW_{k = 0}^{m\-1}((\- \f(CIlog\f(CW |x|)^k)/(k!)Li_{m\-k}(x)
\&\-(1)/(2)((\- \f(CIlog\f(CW |x|)^m)/(m!)).\*(C'\fR
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 3\*(C'\fR: compute \f(CWP_m(x)\fR, defined for \f(CW\*(C`|x| <= 1\*(C'\fR by
.PP
  \f(CW\*(C` \f(CIRe\f(CW _m(\f(CIsum\f(CW_{k = 0}^{m\-1}(2^kB_k)/(k!)( \f(CIlog\f(CW |x|)^kLi_{m\-k}(x)
\&\-(2^{m\-1}B_m)/(m!)( \f(CIlog\f(CW |x|)^m).\*(C'\fR
.PP
These three functions satisfy the functional equation
\&\f(CW\*(C`f_m(1/x) = (\-1)^{m\-1}f_m(x)\*(C'\fR.
.PP
The library syntax is \fBpolylog0\fR\f(CW\*(C`(m,x,\f(CIflag\f(CW,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "polylog0"
.ie n .SS "psi""(x)"""
.el .SS "psi\f(CW(x)\fP"
.IX Xref "psi"
.IX Subsection "psi(x)"
the \f(CW\*(C`\f(CIpsi\f(CW\*(C'\fR\-function of \f(CW\*(C`x\*(C'\fR, i.e. the
logarithmic derivative \f(CW\*(C`\f(CIGamma\f(CW\*(Aq(x)/\f(CIGamma\f(CW(x)\*(C'\fR.
.PP
The library syntax is \fBgpsi\fR\f(CW\*(C`(x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "gpsi"
.ie n .SS "sin""(x)"""
.el .SS "sin\f(CW(x)\fP"
.IX Xref "sin"
.IX Subsection "sin(x)"
sine of \f(CW\*(C`x\*(C'\fR.
.PP
The library syntax is \fBgsin\fR\f(CW\*(C`(x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "gsin"
.ie n .SS "sinh""(x)"""
.el .SS "sinh\f(CW(x)\fP"
.IX Xref "sinh"
.IX Subsection "sinh(x)"
hyperbolic sine of \f(CW\*(C`x\*(C'\fR.
.PP
The library syntax is \fBgsh\fR\f(CW\*(C`(x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "gsh"
.ie n .SS "sqr""(x)"""
.el .SS "sqr\f(CW(x)\fP"
.IX Xref "sqr"
.IX Subsection "sqr(x)"
square of \f(CW\*(C`x\*(C'\fR. This operation is not completely
straightforward, i.e. identical to \f(CW\*(C`x * x\*(C'\fR, since it can usually be
computed more efficiently (roughly one-half of the elementary
multiplications can be saved). Also, squaring a \f(CW2\fR\-adic number increases
its precision. For example,
.PP
.Vb 4
\&  ? (1 + O(2^4))^2
\&  %1 = 1 + O(2^5)
\&  ? (1 + O(2^4)) * (1 + O(2^4))
\&  %2 = 1 + O(2^4)
.Ve
.PP
Note that this function is also called whenever one multiplies two objects
which are known to be \eemph{identical}, e.g. they are the value of the same
variable, or we are computing a power.
.PP
.Vb 4
\&  ? x = (1 + O(2^4)); x * x
\&  %3 = 1 + O(2^5)
\&  ? (1 + O(2^4))^4
\&  %4 = 1 + O(2^6)
.Ve
.PP
(note the difference between \f(CW%2\fR and \f(CW%3\fR above).
.PP
The library syntax is \fBgsqr\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "gsqr"
.ie n .SS "sqrt""(x)"""
.el .SS "sqrt\f(CW(x)\fP"
.IX Xref "sqrt"
.IX Subsection "sqrt(x)"
principal branch of the square root of \f(CW\*(C`x\*(C'\fR,
i.e. such that \f(CW\*(C`Arg(sqrt(x)) belongs to  ]\-\f(CIPi\f(CW/2, \f(CIPi\f(CW/2]\*(C'\fR, or in other
words such that \f(CW\*(C` \f(CIRe\f(CW (sqrt(x)) > 0\*(C'\fR or \f(CW\*(C` \f(CIRe\f(CW (sqrt(x)) = 0\*(C'\fR and
\&\f(CW\*(C` \f(CIIm\f(CW (sqrt(x)) >= 0\*(C'\fR. If \f(CW\*(C`x belongs to \f(CB\f(CBR\f(CB\f(CW\*(C'\fR and \f(CW\*(C`x < 0\*(C'\fR, then the result is
complex with positive imaginary part.
.PP
Intmod a prime and \f(CW\*(C`p\*(C'\fR\-adics are allowed as arguments. In that case,
the square root (if it exists) which is returned is the one whose
first \f(CW\*(C`p\*(C'\fR\-adic digit (or its unique \f(CW\*(C`p\*(C'\fR\-adic digit in the case of
intmods) is in the interval \f(CW\*(C`[0,p/2]\*(C'\fR. When the argument is an
intmod a non-prime (or a non-prime-adic), the result is undefined.
.PP
The library syntax is \fBgsqrt\fR\f(CW\*(C`(x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "gsqrt"
.ie n .SS "sqrtn""(x,n,{&z})"""
.el .SS "sqrtn\f(CW(x,n,{&z})\fP"
.IX Xref "sqrtn"
.IX Subsection "sqrtn(x,n,{&z})"
principal branch of the \f(CW\*(C`n\*(C'\fRth root of \f(CW\*(C`x\*(C'\fR,
i.e. such that \f(CW\*(C`Arg(sqrt(x)) belongs to  ]\-\f(CIPi\f(CW/n, \f(CIPi\f(CW/n]\*(C'\fR. Intmod
a prime and \f(CW\*(C`p\*(C'\fR\-adics are allowed as arguments.
.PP
If \f(CW\*(C`z\*(C'\fR is present, it is set to a suitable root of unity allowing to
recover all the other roots. If it was not possible, z is
set to zero. In the case this argument is present and no square root exist,
\&\f(CW0\fR is returned instead or raising an error.
.PP
.Vb 10
\&  ? sqrtn(Mod(2,7), 2)
\&  %1 = Mod(4, 7)
\&  ? sqrtn(Mod(2,7), 2, &z); z
\&  %2 = Mod(6, 7)
\&  ? sqrtn(Mod(2,7), 3)
\&    *** sqrtn: nth\-root does not exist in gsqrtn.
\&  ? sqrtn(Mod(2,7), 3,  &z)
\&  %2 = 0
\&  ? z
\&  %3 = 0
.Ve
.PP
The following script computes all roots in all possible cases:
.PP
.Vb 10
\&  sqrtnall(x,n)=
\&  {
\&    local(V,r,z,r2);
\&    r = sqrtn(x,n, &z);
\&    if (!z, error("Impossible case in sqrtn"));
\&    if (type(x) == "t_INTMOD" || type(x)=="t_PADIC" ,
\&      r2 = r*z; n = 1;
\&      while (r2!=r, r2*=z;n++));
\&    V = vector(n); V[1] = r;
\&    for(i=2, n, V[i] = V[i\-1]*z);
\&    V
\&  }
\&  addhelp(sqrtnall,"sqrtnall(x,n):compute the vector of nth\-roots of x");
.Ve
.PP
The library syntax is \fBgsqrtn\fR\f(CW\*(C`(x,n,&z,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "gsqrtn"
.ie n .SS "tan""(x)"""
.el .SS "tan\f(CW(x)\fP"
.IX Xref "tan"
.IX Subsection "tan(x)"
tangent of \f(CW\*(C`x\*(C'\fR.
.PP
The library syntax is \fBgtan\fR\f(CW\*(C`(x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "gtan"
.ie n .SS "tanh""(x)"""
.el .SS "tanh\f(CW(x)\fP"
.IX Xref "tanh"
.IX Subsection "tanh(x)"
hyperbolic tangent of \f(CW\*(C`x\*(C'\fR.
.PP
The library syntax is \fBgth\fR\f(CW\*(C`(x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "gth"
.ie n .SS "teichmuller""(x)"""
.el .SS "teichmuller\f(CW(x)\fP"
.IX Xref "teichmuller"
.IX Subsection "teichmuller(x)"
Teichmüller character of the \f(CW\*(C`p\*(C'\fR\-adic number
\&\f(CW\*(C`x\*(C'\fR, i.e. the unique \f(CW\*(C`(p\-1)\*(C'\fR\-th root of unity congruent to \f(CW\*(C`x / p^{v_p(x)}\*(C'\fR
modulo \f(CW\*(C`p\*(C'\fR.
.PP
The library syntax is \fBteich\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "teich"
.ie n .SS "theta""(q,z)"""
.el .SS "theta\f(CW(q,z)\fP"
.IX Xref "theta"
.IX Subsection "theta(q,z)"
Jacobi sine theta-function.
.PP
The library syntax is \fBtheta\fR\f(CW\*(C`(q,z,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "theta"
.ie n .SS "thetanullk""(q,k)"""
.el .SS "thetanullk\f(CW(q,k)\fP"
.IX Xref "thetanullk"
.IX Subsection "thetanullk(q,k)"
\&\f(CW\*(C`k\*(C'\fR\-th derivative at \f(CW\*(C`z = 0\*(C'\fR of
\&\f(CW\*(C`theta(q,z)\*(C'\fR.
.PP
The library syntax is \fBthetanullk\fR\f(CW\*(C`(q,k,\f(CIprec\f(CW)\*(C'\fR, where \f(CW\*(C`k\*(C'\fR is a \f(CW\*(C`long\*(C'\fR.
.IX Xref "thetanullk"
.ie n .SS "weber""(x,{\f(CIflag\fP = 0})"""
.el .SS "weber\f(CW(x,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "weber"
.IX Subsection "weber(x,{flag = 0})"
one of Weber's three \f(CW\*(C`f\*(C'\fR functions.
If \f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR, returns
.PP
  \f(CW\*(C`f(x) =  \f(CIexp\f(CW (\-i\f(CIPi\f(CW/24).\f(CIeta\f(CW((x+1)/2)/\f(CIeta\f(CW(x)   such that  j = (f^{24}\-16)^3/f^{24},\*(C'\fR
.PP
where \f(CW\*(C`j\*(C'\fR is the elliptic \f(CW\*(C`j\*(C'\fR\-invariant  (see the function \f(CW\*(C`ellj\*(C'\fR).
If \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR, returns
.PP
  \f(CW\*(C`f_1(x) = \f(CIeta\f(CW(x/2)/\f(CIeta\f(CW(x)  such that  j = (f_1^{24}+16)^3/f_1^{24}.\*(C'\fR
.PP
Finally, if \f(CW\*(C`\f(CIflag\f(CW = 2\*(C'\fR, returns
.PP
  \f(CW\*(C`f_2(x) =  \f(CIsqrt\f(CW {2}\f(CIeta\f(CW(2x)/\f(CIeta\f(CW(x)  such that  j = (f_2^{24}+16)^3/f_2^{24}.\*(C'\fR
.PP
Note the identities \f(CW\*(C`f^8 = f_1^8+f_2^8\*(C'\fR and \f(CW\*(C`ff_1f_2 =  \f(CIsqrt\f(CW 2\*(C'\fR.
.PP
The library syntax is \fBweber0\fR\f(CW\*(C`(x,\f(CIflag\f(CW,prec)\*(C'\fR. Associated to the various values of \fIflag\fR, the
following functions are also available: \f(CW\*(C` \f(CBwerberf\f(CW(x,prec)\*(C'\fR,
\&\f(CW\*(C` \f(CBwerberf1\f(CW(x,prec)\*(C'\fR or \f(CW\*(C` \f(CBwerberf2\f(CW(x,prec)\*(C'\fR.
.IX Xref "weber0 werberf werberf1 werberf2"
.ie n .SS "zeta""(s)"""
.el .SS "zeta\f(CW(s)\fP"
.IX Xref "zeta"
.IX Subsection "zeta(s)"
For \f(CW\*(C`s\*(C'\fR a complex number, Riemann's zeta
function  \f(CW\*(C`\f(CIzeta\f(CW(s) = \f(CIsum\f(CW_{n >= 1}n^{\-s}\*(C'\fR,
computed using the Euler-Maclaurin summation formula, except
when \f(CW\*(C`s\*(C'\fR is of type integer, in which case it is computed using
Bernoulli numbers for \f(CW\*(C`s <= 0\*(C'\fR or \f(CW\*(C`s > 0\*(C'\fR and
even, and using modular forms for \f(CW\*(C`s > 0\*(C'\fR and odd.
.IX Xref "Riemann zeta-function Euler-Maclaurin Bernoulli numbers"
.PP
For \f(CW\*(C`s\*(C'\fR a \f(CW\*(C`p\*(C'\fR\-adic number, Kubota-Leopoldt zeta function at \f(CW\*(C`s\*(C'\fR, that
is the unique continuous \f(CW\*(C`p\*(C'\fR\-adic function on the \f(CW\*(C`p\*(C'\fR\-adic integers
that interpolates the values of \f(CW\*(C`(1 \- p^{\-k}) \f(CIzeta\f(CW(k)\*(C'\fR at negative
integers \f(CW\*(C`k\*(C'\fR such that \f(CW\*(C`k = 1 (mod p\-1)\*(C'\fR (resp. \f(CW\*(C`k\*(C'\fR is odd) if
\&\f(CW\*(C`p\*(C'\fR is odd (resp. \f(CW\*(C`p = 2\*(C'\fR).
.PP
The library syntax is \fBgzeta\fR\f(CW\*(C`(s,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "gzeta"
.SH "Arithmetic functions"
.IX Header "Arithmetic functions"

These functions are by definition functions whose natural domain of
definition is either \fB\f(BIZ\fB\fR (or \f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW_{ > 0}\*(C'\fR), or sometimes polynomials
over a base ring. Functions which concern polynomials exclusively will be
explained in the next section. The way these functions are used is
completely different from transcendental functions: in general only the types
integer and polynomial are accepted as arguments. If a vector or matrix type
is given, the function will be applied on each coefficient independently.
.IX Xref "Label se:arithmetic"
.PP
In the present version \fB2.3.5\fR, all arithmetic functions in the narrow sense
of the word \-\-\- Euler's totient function, the
Moebius function, the sums over divisors or powers of divisors
etc.\-\-\- call, after trial division by small primes, the same versatile
factoring machinery described under \f(CW\*(C`factorint\*(C'\fR. It includes
Shanks \s-1SQUFOF,\s0 Pollard Rho, \s-1ECM\s0 and \s-1MPQS\s0 stages, and
has an early exit option for the functions \fBmoebius\fR and (the integer
function underlying) \fBissquarefree\fR. Note that it relies on a (fairly
strong) probabilistic primality test, see \f(CW\*(C`ispseudoprime\*(C'\fR.
.IX Xref "Euler totient function Moebius Shanks SQUFOF Pollard Rho ECM MPQS moebius issquarefree"
.ie n .SS "addprimes""({x = []})"""
.el .SS "addprimes\f(CW({x = []})\fP"
.IX Xref "addprimes"
.IX Subsection "addprimes({x = []})"
adds the integers contained in the
vector \f(CW\*(C`x\*(C'\fR (or the single integer \f(CW\*(C`x\*(C'\fR) to a special table of
``user\-defined primes'', and returns that table. Whenever \f(CW\*(C`factor\*(C'\fR is
subsequently called, it will trial divise by the elements in this table.
If \f(CW\*(C`x\*(C'\fR is empty or omitted, just returns the current list of extra
primes.
.PP
The entries in \f(CW\*(C`x\*(C'\fR are not checked for primality, and in fact they need
only be positive integers. The algorithm makes sure that all elements in
the table are pairwise coprime, so it may end up containing divisors
of the input integers.
.PP
It is a useful trick to add known composite numbers, which the function
\&\f(CW\*(C`factor(x,0)\*(C'\fR was not able to factor. In case the message
``impossible inverse modulo \f(CW\*(C`<\*(C'\fR\fIsome \s-1INTMOD\s0\fR\f(CW\*(C`>\*(C'\fR'' shows
up afterwards, you have just stumbled over a non-trivial factor. Note
that the arithmetic functions in the narrow sense, like \fBeulerphi\fR,
do \eemph{not} use this extra table.
.IX Xref "eulerphi"
.PP
To remove primes from the list use \f(CW\*(C`removeprimes\*(C'\fR.
.PP
The library syntax is \fBaddprimes\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "addprimes"
.ie n .SS "bestappr""(x,A,{B})"""
.el .SS "bestappr\f(CW(x,A,{B})\fP"
.IX Xref "bestappr"
.IX Subsection "bestappr(x,A,{B})"
if \f(CW\*(C`B\*(C'\fR is omitted, finds the best rational
approximation to \f(CW\*(C`x belongs to \f(CB\f(CBR\f(CB\f(CW\*(C'\fR (or \f(CW\*(C`\f(CB\f(CBR\f(CB\f(CW[X]\*(C'\fR, or \f(CW\*(C`\f(CB\f(CBR\f(CB\f(CW^n\*(C'\fR,...) with denominator at
most equal to \f(CW\*(C`A\*(C'\fR using continued fractions.
.PP
If \f(CW\*(C`B\*(C'\fR is present, \f(CW\*(C`x\*(C'\fR is assumed to be of type \f(CW\*(C`t_INTMOD\*(C'\fR modulo \f(CW\*(C`M\*(C'\fR (or a
recursive combination of those), and the routine returns the unique fraction
\&\f(CW\*(C`a/b\*(C'\fR in coprime integers \f(CW\*(C`a <= A\*(C'\fR and \f(CW\*(C`b <= B\*(C'\fR which is congruent to \f(CW\*(C`x\*(C'\fR
modulo \f(CW\*(C`M\*(C'\fR. If \f(CW\*(C`M <= 2AB\*(C'\fR, uniqueness is not guaranteed and the function
fails with an error message. If rational reconstruction is not possible
(no such \f(CW\*(C`a/b\*(C'\fR exists for at least one component of \f(CW\*(C`x\*(C'\fR), returns \f(CW\*(C`\-1\*(C'\fR.
.PP
The library syntax is \fBbestappr0\fR\f(CW\*(C`(x,A,B)\*(C'\fR. Also available is \f(CW\*(C` \f(CBbestappr\f(CW(x,A)\*(C'\fR corresponding
to an omitted \f(CW\*(C`B\*(C'\fR.
.IX Xref "bestappr0 bestappr"
.ie n .SS "bezout""(x,y)"""
.el .SS "bezout\f(CW(x,y)\fP"
.IX Xref "bezout"
.IX Subsection "bezout(x,y)"
finds \f(CW\*(C`u\*(C'\fR and \f(CW\*(C`v\*(C'\fR minimal in a
natural sense such that \f(CW\*(C`x*u+y*v = \f(CIgcd\f(CW(x,y)\*(C'\fR. The arguments
must be both integers or both polynomials, and the result is a
row vector with three components \f(CW\*(C`u\*(C'\fR, \f(CW\*(C`v\*(C'\fR, and \f(CW\*(C`\f(CIgcd\f(CW(x,y)\*(C'\fR.
.IX Xref "extended gcd"
.PP
The library syntax is \fBvecbezout\fR\f(CW\*(C`(x,y)\*(C'\fR to get the vector, or \f(CW\*(C` \f(CBgbezout\f(CW(x,y, &u, &v)\*(C'\fR
which gives as result the address of the created gcd, and puts
the addresses of the corresponding created objects into \f(CW\*(C`u\*(C'\fR and \f(CW\*(C`v\*(C'\fR.
.IX Xref "vecbezout gbezout"
.ie n .SS "bezoutres""(x,y)"""
.el .SS "bezoutres\f(CW(x,y)\fP"
.IX Xref "bezoutres"
.IX Subsection "bezoutres(x,y)"
as \f(CW\*(C`bezout\*(C'\fR, with the resultant of \f(CW\*(C`x\*(C'\fR and
\&\f(CW\*(C`y\*(C'\fR replacing the gcd.  The algorithm uses
(subresultant) assumes the base ring is a domain.
.IX Xref "extended gcd"
.PP
The library syntax is \fBvecbezoutres\fR\f(CW\*(C`(x,y)\*(C'\fR to get the vector, or \f(CW\*(C` \f(CBsubresext\f(CW(x,y, &u, &v)\*(C'\fR
which gives as result the address of the created gcd, and puts the
addresses of the corresponding created objects into \f(CW\*(C`u\*(C'\fR and \f(CW\*(C`v\*(C'\fR.
.IX Xref "vecbezoutres subresext"
.ie n .SS "bigomega""(x)"""
.el .SS "bigomega\f(CW(x)\fP"
.IX Xref "bigomega"
.IX Subsection "bigomega(x)"
number of prime divisors of \f(CW\*(C`|x|\*(C'\fR counted with
multiplicity. \f(CW\*(C`x\*(C'\fR must be an integer.
.PP
The library syntax is \fBbigomega\fR\f(CW\*(C`(x)\*(C'\fR, the result is a \f(CW\*(C`long\*(C'\fR.
.IX Xref "bigomega"
.ie n .SS "binomial""(x,y)"""
.el .SS "binomial\f(CW(x,y)\fP"
.IX Xref "binomial"
.IX Subsection "binomial(x,y)"
binomial coefficient \f(CW\*(C`\ebinom{x}{y}\*(C'\fR.
Here \f(CW\*(C`y\*(C'\fR must be an integer, but \f(CW\*(C`x\*(C'\fR can be any \s-1PARI\s0 object.
.IX Xref "binomial coefficient"
.PP
The library syntax is \fBbinomial\fR\f(CW\*(C`(x,y)\*(C'\fR, where \f(CW\*(C`y\*(C'\fR must be a \f(CW\*(C`long\*(C'\fR.
.IX Xref "binomial"
.ie n .SS "chinese""(x,{y})"""
.el .SS "chinese\f(CW(x,{y})\fP"
.IX Xref "chinese"
.IX Subsection "chinese(x,{y})"
if \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR are both intmods or both
polmods, creates (with the same type) a \f(CW\*(C`z\*(C'\fR in the same residue class
as \f(CW\*(C`x\*(C'\fR and in the same residue class as \f(CW\*(C`y\*(C'\fR, if it is possible.
.PP
This function also allows vector and matrix arguments, in which case the
operation is recursively applied to each component of the vector or matrix.
For polynomial arguments, it is applied to each coefficient.
.PP
If \f(CW\*(C`y\*(C'\fR is omitted, and \f(CW\*(C`x\*(C'\fR is a vector, \f(CW\*(C`chinese\*(C'\fR is applied recursively
to the components of \f(CW\*(C`x\*(C'\fR, yielding a residue belonging to the same class as all
components of \f(CW\*(C`x\*(C'\fR.
.PP
Finally \f(CW\*(C`chinese(x,x) = x\*(C'\fR regardless of the type of \f(CW\*(C`x\*(C'\fR; this allows
vector arguments to contain other data, so long as they are identical in both
vectors.
.PP
The library syntax is \fBchinese\fR\f(CW\*(C`(x,y)\*(C'\fR. Also available is \f(CW\*(C`chinese1\*(C'\fR\f(CW\*(C`(x)\*(C'\fR, corresponding to an
ommitted \f(CW\*(C`y\*(C'\fR.
.IX Xref "chinese chinese1"
.ie n .SS "content""(x)"""
.el .SS "content\f(CW(x)\fP"
.IX Xref "content"
.IX Subsection "content(x)"
computes the gcd of all the coefficients of \f(CW\*(C`x\*(C'\fR,
when this gcd makes sense. This is the natural definition
if \f(CW\*(C`x\*(C'\fR is a polynomial (and by extension a power series) or a
vector/matrix. This is in general a weaker notion than the \eemph{ideal}
generated by the coefficients:
.PP
.Vb 2
\&      ? content(2*x+y)
\&      %1 = 1            \e\e = gcd(2,y) over Q[y]
.Ve
.PP
If \f(CW\*(C`x\*(C'\fR is a scalar, this simply returns the absolute value of \f(CW\*(C`x\*(C'\fR if \f(CW\*(C`x\*(C'\fR is
rational (\f(CW\*(C`t_INT\*(C'\fR or \f(CW\*(C`t_FRAC\*(C'\fR), and either \f(CW1\fR (inexact input) or \f(CW\*(C`x\*(C'\fR
(exact input) otherwise; the result should be identical to \f(CW\*(C`gcd(x, 0)\*(C'\fR.
.PP
The content of a rational function is the ratio of the contents of the
numerator and the denominator. In recursive structures, if a
matrix or vector \eemph{coefficient} \f(CW\*(C`x\*(C'\fR appears, the gcd is taken 
not with \f(CW\*(C`x\*(C'\fR, but with its content:
.PP
.Vb 2
\&      ? content([ [2], 4*matid(3) ])
\&      %1 = 2
.Ve
.PP
The library syntax is \fBcontent\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "content"
.ie n .SS "contfrac""(x,{b},{nmax})"""
.el .SS "contfrac\f(CW(x,{b},{nmax})\fP"
.IX Xref "contfrac"
.IX Subsection "contfrac(x,{b},{nmax})"
creates the row vector whose
components are the partial quotients of the continued fraction
expansion of \f(CW\*(C`x\*(C'\fR. That is a result \f(CW\*(C`[a_0,...,a_n]\*(C'\fR means that \f(CW\*(C`x  ~ 
a_0+1/(a_1+...+1/a_n)...)\*(C'\fR. The output is normalized so that \f(CW\*(C`a_n  ! = 1\*(C'\fR
(unless we also have \f(CW\*(C`n = 0\*(C'\fR).
.IX Xref "continued fraction"
.PP
The number of partial quotients \f(CW\*(C`n\*(C'\fR is limited to \f(CW\*(C`nmax\*(C'\fR. If \f(CW\*(C`x\*(C'\fR is a real
number, the expansion stops at the last significant partial quotient if
\&\f(CW\*(C`nmax\*(C'\fR is omitted. \f(CW\*(C`x\*(C'\fR can also be a rational function or a power series.
.PP
If a vector \f(CW\*(C`b\*(C'\fR is supplied, the numerators will be equal to the coefficients
of \f(CW\*(C`b\*(C'\fR (instead of all equal to \f(CW1\fR as above). The length of the result is
then equal to the length of \f(CW\*(C`b\*(C'\fR, unless a partial remainder is encountered
which is equal to zero, in which case the expansion stops. In the case of
real numbers, the stopping criterion is thus different from the one mentioned
above since, if \f(CW\*(C`b\*(C'\fR is too long, some partial quotients may not be
significant.
.PP
If \f(CW\*(C`b\*(C'\fR is an integer, the command is understood as \f(CW\*(C`contfrac(x,nmax)\*(C'\fR.
.PP
The library syntax is \fBcontfrac0\fR\f(CW\*(C`(x,b,nmax)\*(C'\fR. Also available are
\&\f(CW\*(C` \f(CBgboundcf\f(CW(x,nmax)\*(C'\fR, \f(CW\*(C` \f(CBgcf\f(CW(x)\*(C'\fR, or \f(CW\*(C` \f(CBgcf2\f(CW(b,x)\*(C'\fR, where \f(CW\*(C`nmax\*(C'\fR
is a C integer.
.IX Xref "contfrac0 gboundcf gcf gcf2"
.ie n .SS "contfracpnqn""(x)"""
.el .SS "contfracpnqn\f(CW(x)\fP"
.IX Xref "contfracpnqn"
.IX Subsection "contfracpnqn(x)"
when \f(CW\*(C`x\*(C'\fR is a vector or a one-row matrix, \f(CW\*(C`x\*(C'\fR
is considered as the list of partial quotients \f(CW\*(C`[a_0,a_1,...,a_n]\*(C'\fR of a
rational number, and the result is the 2 by 2 matrix
\&\f(CW\*(C`[p_n,p_{n\-1};q_n,q_{n\-1}]\*(C'\fR in the standard notation of continued fractions,
so \f(CW\*(C`p_n/q_n = a_0+1/(a_1+...+1/a_n)...)\*(C'\fR. If \f(CW\*(C`x\*(C'\fR is a matrix with two rows
\&\f(CW\*(C`[b_0,b_1,...,b_n]\*(C'\fR and \f(CW\*(C`[a_0,a_1,...,a_n]\*(C'\fR, this is then considered as a
generalized continued fraction and we have similarly
\&\f(CW\*(C`p_n/q_n = 1/b_0(a_0+b_1/(a_1+...+b_n/a_n)...)\*(C'\fR. Note that in this case one
usually has \f(CW\*(C`b_0 = 1\*(C'\fR.
.PP
The library syntax is \fBpnqn\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "pnqn"
.ie n .SS "core""(n,{\f(CIflag\fP = 0})"""
.el .SS "core\f(CW(n,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "core"
.IX Subsection "core(n,{flag = 0})"
if \f(CW\*(C`n\*(C'\fR is a non-zero integer written as
\&\f(CW\*(C`n = df^2\*(C'\fR with \f(CW\*(C`d\*(C'\fR squarefree, returns \f(CW\*(C`d\*(C'\fR. If \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR is non-zero,
returns the two-element row vector \f(CW\*(C`[d,f]\*(C'\fR.
.PP
The library syntax is \fBcore0\fR\f(CW\*(C`(n,\f(CIflag\f(CW)\*(C'\fR.
Also available are \f(CW\*(C` \f(CBcore\f(CW(n)\*(C'\fR ( = \f(CW\*(C` \f(CBcore0\f(CW(n,0)\*(C'\fR) and \f(CW\*(C` \f(CBcore2\f(CW(n)\*(C'\fR
( = \f(CW\*(C` \f(CBcore0\f(CW(n,1)\*(C'\fR).
.IX Xref "core0 core core0 core2 core0"
.ie n .SS "coredisc""(n,{\f(CIflag\fP})"""
.el .SS "coredisc\f(CW(n,{\fP\f(CIflag\fP\f(CW})\fP"
.IX Xref "coredisc"
.IX Subsection "coredisc(n,{flag})"
if \f(CW\*(C`n\*(C'\fR is a non-zero integer written as
\&\f(CW\*(C`n = df^2\*(C'\fR with \f(CW\*(C`d\*(C'\fR fundamental discriminant (including 1), returns \f(CW\*(C`d\*(C'\fR. If
\&\f(CW\*(C`\f(CIflag\f(CW\*(C'\fR is non-zero, returns the two-element row vector \f(CW\*(C`[d,f]\*(C'\fR. Note that if
\&\f(CW\*(C`n\*(C'\fR is not congruent to 0 or 1 modulo 4, \f(CW\*(C`f\*(C'\fR will be a half integer and not
an integer.
.PP
The library syntax is \fBcoredisc0\fR\f(CW\*(C`(n,\f(CIflag\f(CW)\*(C'\fR.
Also available are
\&\f(CW\*(C` \f(CBcoredisc\f(CW(n)\*(C'\fR ( = \f(CW\*(C` \f(CBcoredisc\f(CW(n,0)\*(C'\fR) and
\&\f(CW\*(C` \f(CBcoredisc2\f(CW(n)\*(C'\fR ( = \f(CW\*(C` \f(CBcoredisc\f(CW(n,1)\*(C'\fR).
.IX Xref "coredisc0 coredisc coredisc coredisc2 coredisc"
.ie n .SS "dirdiv""(x,y)"""
.el .SS "dirdiv\f(CW(x,y)\fP"
.IX Xref "dirdiv"
.IX Subsection "dirdiv(x,y)"
\&\f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR being vectors of perhaps different
lengths but with \f(CW\*(C`y[1] ! = 0\*(C'\fR considered as Dirichlet series, computes
the quotient of \f(CW\*(C`x\*(C'\fR by \f(CW\*(C`y\*(C'\fR, again as a vector.
.IX Xref "Dirichlet series"
.PP
The library syntax is \fBdirdiv\fR\f(CW\*(C`(x,y)\*(C'\fR.
.IX Xref "dirdiv"
.ie n .SS "direuler""(p = a,b,\f(CIexpr\fP,{c})"""
.el .SS "direuler\f(CW(p = a,b,\fP\f(CIexpr\fP\f(CW,{c})\fP"
.IX Xref "direuler"
.IX Subsection "direuler(p = a,b,expr,{c})"
computes the
Dirichlet series associated to the Euler product of
expression \fIexpr\fR as \f(CW\*(C`p\*(C'\fR ranges through the primes from \f(CW\*(C`a\*(C'\fR to \f(CW\*(C`b\*(C'\fR.
\&\fIexpr\fR must be a polynomial or rational function in another variable
than \f(CW\*(C`p\*(C'\fR (say \f(CW\*(C`X\*(C'\fR) and \f(CW\*(C`\f(CIexpr\f(CW(X)\*(C'\fR is understood as
the local factor \f(CW\*(C`\f(CIexpr\f(CW(p^{\-s})\*(C'\fR.
.IX Xref "Dirichlet series Euler product"
.PP
The series is output as a vector of coefficients. If \f(CW\*(C`c\*(C'\fR is present, output
only the first \f(CW\*(C`c\*(C'\fR coefficients in the series. The following command computes
the \fBsigma\fR function, associated to \f(CW\*(C`\f(CIzeta\f(CW(s)\f(CIzeta\f(CW(s\-1)\*(C'\fR:
.IX Xref "sigma"
.PP
.Vb 2
\&  ? direuler(p=2, 10, 1/((1\-X)*(1\-p*X)))
\&  %1 = [1, 3, 4, 7, 6, 12, 8, 15, 13, 18]
.Ve
.PP
The library syntax is \fBdireuler\fR\f(CW\*(C`(void *E, GEN (*eval)(GEN,void*), GEN a, GEN b)\*(C'\fR
.IX Xref "direuler"
.ie n .SS "dirmul""(x,y)"""
.el .SS "dirmul\f(CW(x,y)\fP"
.IX Xref "dirmul"
.IX Subsection "dirmul(x,y)"
\&\f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR being vectors of perhaps different
lengths considered as Dirichlet series, computes the product of
\&\f(CW\*(C`x\*(C'\fR by \f(CW\*(C`y\*(C'\fR, again as a vector.
.IX Xref "Dirichlet series"
.PP
The library syntax is \fBdirmul\fR\f(CW\*(C`(x,y)\*(C'\fR.
.IX Xref "dirmul"
.ie n .SS "divisors""(x)"""
.el .SS "divisors\f(CW(x)\fP"
.IX Xref "divisors"
.IX Subsection "divisors(x)"
creates a row vector whose components are the
divisors of \f(CW\*(C`x\*(C'\fR. The factorization of \f(CW\*(C`x\*(C'\fR (as output by \f(CW\*(C`factor\*(C'\fR) can
be used instead.
.IX Xref "factor"
.PP
By definition, these divisors are the products of the irreducible
factors of \f(CW\*(C`n\*(C'\fR, as produced by \f(CWfactor(n)\fR, raised to appropriate
powers (no negative exponent may occur in the factorization). If \f(CW\*(C`n\*(C'\fR is
an integer, they are the positive divisors, in increasing order.
.PP
The library syntax is \fBdivisors\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "divisors"
.ie n .SS "eulerphi""(x)"""
.el .SS "eulerphi\f(CW(x)\fP"
.IX Xref "eulerphi"
.IX Subsection "eulerphi(x)"
Euler's \f(CW\*(C`\f(CIphi\f(CW\*(C'\fR
(totient) function of \f(CW\*(C`|x|\*(C'\fR, in other words
\&\f(CW\*(C`|(\f(CB\f(CBZ\f(CB\f(CW/x\f(CB\f(CBZ\f(CB\f(CW)^*|\*(C'\fR. \f(CW\*(C`x\*(C'\fR must be of type integer.
.IX Xref "Euler totient function"
.PP
The library syntax is \fBphi\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "phi"
.ie n .SS "factor""(x,{\f(CIlim\fP = \-1})"""
.el .SS "factor\f(CW(x,{\fP\f(CIlim\fP\f(CW = \-1})\fP"
.IX Xref "factor"
.IX Subsection "factor(x,{lim = -1})"
general factorization function.
If \f(CW\*(C`x\*(C'\fR is of type integer, rational, polynomial or rational function, the
result is a two-column matrix, the first column being the irreducibles
dividing \f(CW\*(C`x\*(C'\fR (prime numbers or polynomials), and the second the exponents.
If \f(CW\*(C`x\*(C'\fR is a vector or a matrix, the factoring is done componentwise (hence
the result is a vector or matrix of two-column matrices). By definition,
\&\f(CW0\fR is factored as \f(CW\*(C`0^1\*(C'\fR.
.PP
If \f(CW\*(C`x\*(C'\fR is of type integer or rational, the factors are \fIpseudoprimes\fR
(see \f(CW\*(C`ispseudoprime\*(C'\fR), and in general not rigorously proven primes. In
fact, any factor which is \f(CW\*(C` <= 10^{13}\*(C'\fR is a genuine prime number. Use
\&\f(CW\*(C`isprime\*(C'\fR to prove primality of other factors, as in
.PP
.Vb 2
\&  fa = factor(2^2^7 +1)
\&  isprime( fa[,1] )
.Ve
.PP
An argument \fIlim\fR can be added, meaning that we look only for prime
factors \f(CW\*(C`p < \f(CIlim\f(CW\*(C'\fR, or up to \f(CW\*(C`primelimit\*(C'\fR, whichever is lowest
(except when \f(CW\*(C`\f(CIlim\f(CW = 0\*(C'\fR where the effect is identical to setting
\&\f(CW\*(C`\f(CIlim\f(CW = primelimit\*(C'\fR). In this case, the remaining part may actually
be a proven composite! See \f(CW\*(C`factorint\*(C'\fR for more information about the
algorithms used.
.IX Xref "factorint"
.PP
The polynomials or rational functions to be factored must have scalar
coefficients. In particular \s-1PARI\s0 does \eemph{not} know how to factor
multivariate polynomials. See \f(CW\*(C`factormod\*(C'\fR and \f(CW\*(C`factorff\*(C'\fR for the
algorithms used over finite fields, \f(CW\*(C`factornf\*(C'\fR for the algorithms over
number fields. Over \fB\f(BIQ\fB\fR, van Hoeij's method is used, which is able to
cope with hundreds of modular factors.
.IX Xref "factormod factorff factornf van Hoeij"
.PP
Note that \s-1PARI\s0 tries to guess in a sensible way over which ring you want
to factor. Note also that factorization of polynomials is done up to
multiplication by a constant. In particular, the factors of rational
polynomials will have integer coefficients, and the content of a polynomial
or rational function is discarded and not included in the factorization. If
needed, you can always ask for the content explicitly:
.PP
.Vb 3
\&  ? factor(t^2 + 5/2*t + 1)
\&  %1 =
\&  [2*t + 1 1]
\&
\&  [t + 2 1]
\&
\&  ? content(t^2 + 5/2*t + 1)
\&  %2 = 1/2
.Ve
.PP
See also \f(CW\*(C`factornf\*(C'\fR and \f(CW\*(C`nffactor\*(C'\fR.
.IX Xref "factornf nffactor"
.PP
The library syntax is \fBfactor0\fR\f(CW\*(C`(x,\f(CIlim\f(CW)\*(C'\fR, where \fIlim\fR is a C integer.
Also available are
\&\f(CW\*(C` \f(CBfactor\f(CW(x)\*(C'\fR ( = \f(CW\*(C` \f(CBfactor0\f(CW(x,\-1)\*(C'\fR),
\&\f(CW\*(C` \f(CBsmallfact\f(CW(x)\*(C'\fR ( = \f(CW\*(C` \f(CBfactor0\f(CW(x,0)\*(C'\fR).
.IX Xref "factor0 factor factor0 smallfact factor0"
.ie n .SS "factorback""(f,{e},{nf})"""
.el .SS "factorback\f(CW(f,{e},{nf})\fP"
.IX Xref "factorback"
.IX Subsection "factorback(f,{e},{nf})"
gives back the factored object
corresponding to a factorization. The integer \f(CW1\fR corresponds to the empty
factorization. If the last argument is of number field type (e.g. created by
\&\f(CW\*(C`nfinit\*(C'\fR), assume we are dealing with an ideal factorization in the
number field. The resulting ideal product is given in \s-1HNF\s0 form.
.PP
If \f(CW\*(C`e\*(C'\fR is present, \f(CW\*(C`e\*(C'\fR and \f(CW\*(C`f\*(C'\fR must be vectors of the same length (\f(CW\*(C`e\*(C'\fR being
integral), and the corresponding factorization is the product of the
\&\f(CW\*(C`f[i]^{e[i]}\*(C'\fR.
.PP
If not, and \f(CW\*(C`f\*(C'\fR is vector, it is understood as in the preceding case with \f(CW\*(C`e\*(C'\fR
a vector of 1 (the product of the \f(CW\*(C`f[i]\*(C'\fR is returned). Finally, \f(CW\*(C`f\*(C'\fR can be a
regular factorization, as produced with any \f(CW\*(C`factor\*(C'\fR command. A few
examples:
.PP
.Vb 9
\&  ? factorback([2,2; 3,1])
\&  %1 = 12
\&  ? factorback([2,2], [3,1])
\&  %2 = 12
\&  ? factorback([5,2,3])
\&  %3 = 30
\&  ? factorback([2,2], [3,1], nfinit(x^3+2))
\&  %4 =
\&  [16 0 0]
\&
\&  [0 16 0]
\&
\&  [0 0 16]
\&  ? nf = nfinit(x^2+1); fa = idealfactor(nf, 10)
\&  %5 =
\&  [[2, [1, 1]~, 2, 1, [1, 1]~] 2]
\&
\&  [[5, [\-2, 1]~, 1, 1, [2, 1]~] 1]
\&
\&  [[5, [2, 1]~, 1, 1, [\-2, 1]~] 1]
\&  ? factorback(fa)
\&    ***   forbidden multiplication t_VEC * t_VEC.
\&  ? factorback(fa, nf)
\&  %6 =
\&  [10 0]
\&
\&  [0 10]
.Ve
.PP
In the fourth example, \f(CW2\fR and \f(CW3\fR are interpreted as principal ideals in a
cubic field. In the fifth one, \f(CW\*(C`factorback(fa)\*(C'\fR is meaningless since we
forgot to indicate the number field, and the entries in the first column of
\&\f(CW\*(C`fa\*(C'\fR can't be multiplied.
.PP
The library syntax is \fBfactorback0\fR\f(CW\*(C`(f,e,\f(CInf\f(CW)\*(C'\fR, where an omitted
\&\f(CW\*(C`\f(CInf\f(CW\*(C'\fR or \f(CW\*(C`e\*(C'\fR is entered as \f(CW\*(C`NULL\*(C'\fR. Also available is
\&\f(CW\*(C`factorback\*(C'\fR\f(CW\*(C`(f,\f(CInf\f(CW)\*(C'\fR (case \f(CW\*(C`e = NULL\*(C'\fR) where an omitted
\&\f(CW\*(C`\f(CInf\f(CW\*(C'\fR is entered as \f(CW\*(C`NULL\*(C'\fR.
.IX Xref "factorback0 factorback"
.ie n .SS "factorcantor""(x,p)"""
.el .SS "factorcantor\f(CW(x,p)\fP"
.IX Xref "factorcantor"
.IX Subsection "factorcantor(x,p)"
factors the polynomial \f(CW\*(C`x\*(C'\fR modulo the
prime \f(CW\*(C`p\*(C'\fR, using distinct degree plus
Cantor-Zassenhaus. The coefficients of \f(CW\*(C`x\*(C'\fR must be
operation-compatible with \f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW/p\f(CB\f(CBZ\f(CB\f(CW\*(C'\fR. The result is a two-column matrix, the
first column being the irreducible polynomials dividing \f(CW\*(C`x\*(C'\fR, and the second
the exponents. If you want only the \eemph{degrees} of the irreducible
polynomials (for example for computing an \f(CW\*(C`L\*(C'\fR\-function), use
\&\f(CW\*(C`factormod(x,p,1)\*(C'\fR. Note that the \f(CW\*(C`factormod\*(C'\fR algorithm is
usually faster than \f(CW\*(C`factorcantor\*(C'\fR.
.IX Xref "Cantor-Zassenhaus Zassenhaus"
.PP
The library syntax is \fBfactcantor\fR\f(CW\*(C`(x,p)\*(C'\fR.
.IX Xref "factcantor"
.ie n .SS "factorff""(x,p,a)"""
.el .SS "factorff\f(CW(x,p,a)\fP"
.IX Xref "factorff"
.IX Subsection "factorff(x,p,a)"
factors the polynomial \f(CW\*(C`x\*(C'\fR in the field
\&\f(CW\*(C`\f(CB\f(CBF\f(CB\f(CW_q\*(C'\fR defined by the irreducible polynomial \f(CW\*(C`a\*(C'\fR over \f(CW\*(C`\f(CB\f(CBF\f(CB\f(CW_p\*(C'\fR. The
coefficients of \f(CW\*(C`x\*(C'\fR must be operation-compatible with \f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW/p\f(CB\f(CBZ\f(CB\f(CW\*(C'\fR. The result
is a two-column matrix: the first column contains the irreducible factors of
\&\f(CW\*(C`x\*(C'\fR, and the second their exponents. If all the coefficients of \f(CW\*(C`x\*(C'\fR are in
\&\f(CW\*(C`\f(CB\f(CBF\f(CB\f(CW_p\*(C'\fR, a much faster algorithm is applied, using the computation of
isomorphisms between finite fields.
.PP
The library syntax is \fBfactorff\fR\f(CW\*(C`(x,p,a)\*(C'\fR.
.IX Xref "factorff"
.ie n .SS "factorial""(x)"" or ""x!"""
.el .SS "factorial\f(CW(x)\fP or \f(CWx!\fP"
.IX Xref "factorial"
.IX Subsection "factorial(x) or x!"
factorial of \f(CW\*(C`x\*(C'\fR. The expression \f(CW\*(C`x!\*(C'\fR
gives a result which is an integer, while \f(CWfactorial(x)\fR gives a real
number.
.PP
The library syntax is \fBmpfact\fR\f(CW\*(C`(x)\*(C'\fR for \f(CW\*(C`x!\*(C'\fR and
\&\f(CW\*(C` \f(CBmpfactr\f(CW(x,prec)\*(C'\fR for \f(CWfactorial(x)\fR. \f(CW\*(C`x\*(C'\fR must be a \f(CW\*(C`long\*(C'\fR
integer and not a \s-1PARI\s0 integer.
.IX Xref "mpfact mpfactr"
.ie n .SS "factorint""(n,{\f(CIflag\fP = 0})"""
.el .SS "factorint\f(CW(n,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "factorint"
.IX Subsection "factorint(n,{flag = 0})"
factors the integer \f(CW\*(C`n\*(C'\fR into a product of
pseudoprimes (see \f(CW\*(C`ispseudoprime\*(C'\fR), using a combination of the
Shanks \s-1SQUFOF\s0 and Pollard Rho method (with modifications due to
Brent), Lenstra's \s-1ECM\s0 (with modifications by Montgomery), and
\&\s-1MPQS\s0 (the latter adapted from the LiDIA code with the kind
permission of the LiDIA maintainers), as well as a search for pure powers
with exponents\f(CW\*(C` <= 10\*(C'\fR. The output is a two-column matrix as for
\&\f(CW\*(C`factor\*(C'\fR. Use \f(CW\*(C`isprime\*(C'\fR on the result if you want to guarantee
primality.
.IX Xref "Shanks SQUFOF Pollard Rho Lenstra ECM MPQS LiDIA"
.PP
This gives direct access to the integer factoring engine called by most
arithmetical functions. \fIflag\fR is optional; its binary digits mean 1: avoid
\&\s-1MPQS, 2:\s0 skip first stage \s-1ECM\s0 (we may still fall back to it later), 4: avoid
Rho and \s-1SQUFOF, 8:\s0 don't run final \s-1ECM\s0 (as a result, a huge composite may be
declared to be prime). Note that a (strong) probabilistic primality test is
used; thus composites might (very rarely) not be detected.
.PP
You are invited to play with the flag settings and watch the internals at
work by using \f(CW\*(C`gp\*(C'\fR's \f(CW\*(C`debuglevel\*(C'\fR default parameter (level 3 shows
just the outline, 4 turns on time keeping, 5 and above show an increasing
amount of internal details). If you see anything funny happening, please let
us know.
.IX Xref "debuglevel"
.PP
The library syntax is \fBfactorint\fR\f(CW\*(C`(n,\f(CIflag\f(CW)\*(C'\fR.
.IX Xref "factorint"
.ie n .SS "factormod""(x,p,{\f(CIflag\fP = 0})"""
.el .SS "factormod\f(CW(x,p,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "factormod"
.IX Subsection "factormod(x,p,{flag = 0})"
factors the polynomial \f(CW\*(C`x\*(C'\fR modulo
the prime integer \f(CW\*(C`p\*(C'\fR, using Berlekamp. The coefficients of \f(CW\*(C`x\*(C'\fR must be
operation-compatible with \f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW/p\f(CB\f(CBZ\f(CB\f(CW\*(C'\fR. The result is a two-column matrix, the
first column being the irreducible polynomials dividing \f(CW\*(C`x\*(C'\fR, and the second
the exponents. If \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR is non-zero, outputs only the \eemph{degrees} of the
irreducible polynomials (for example, for computing an \f(CW\*(C`L\*(C'\fR\-function). A
different algorithm for computing the mod \f(CW\*(C`p\*(C'\fR factorization is
\&\f(CW\*(C`factorcantor\*(C'\fR which is sometimes faster.
.IX Xref "Berlekamp"
.PP
The library syntax is \fBfactormod\fR\f(CW\*(C`(x,p,\f(CIflag\f(CW)\*(C'\fR. Also available are
\&\f(CW\*(C` \f(CBfactmod\f(CW(x,p)\*(C'\fR (which is equivalent to \f(CW\*(C` \f(CBfactormod\f(CW(x,p,0)\*(C'\fR) and
\&\f(CW\*(C` \f(CBsimplefactmod\f(CW(x,p)\*(C'\fR ( = \f(CW\*(C` \f(CBfactormod\f(CW(x,p,1)\*(C'\fR).
.IX Xref "factormod factmod factormod simplefactmod factormod"
.ie n .SS "fibonacci""(x)"""
.el .SS "fibonacci\f(CW(x)\fP"
.IX Xref "fibonacci"
.IX Subsection "fibonacci(x)"
\&\f(CW\*(C`x^{th}\*(C'\fR Fibonacci number.
.PP
The library syntax is \fBfibo\fR\f(CW\*(C`(x)\*(C'\fR. \f(CW\*(C`x\*(C'\fR must be a \f(CW\*(C`long\*(C'\fR.
.IX Xref "fibo"
.ie n .SS "ffinit""(p,n,{v = x})"""
.el .SS "ffinit\f(CW(p,n,{v = x})\fP"
.IX Xref "ffinit"
.IX Subsection "ffinit(p,n,{v = x})"
computes a monic polynomial of degree
\&\f(CW\*(C`n\*(C'\fR which is irreducible over \f(CW\*(C`\f(CB\f(CBF\f(CB\f(CW_p\*(C'\fR. For instance if
\&\f(CW\*(C`P = ffinit(3,2,y)\*(C'\fR, you can represent elements in \f(CW\*(C`\f(CB\f(CBF\f(CB\f(CW_{3^2}\*(C'\fR as polmods
modulo \f(CW\*(C`P\*(C'\fR. This function uses a fast variant of Adleman-Lenstra's
algorithm.
.PP
The library syntax is \fBffinit\fR\f(CW\*(C`(p,n,v)\*(C'\fR, where \f(CW\*(C`v\*(C'\fR is a variable number.
.IX Xref "ffinit"
.ie n .SS "gcd""(x,{y})"""
.el .SS "gcd\f(CW(x,{y})\fP"
.IX Xref "gcd"
.IX Subsection "gcd(x,{y})"
creates the greatest common divisor of \f(CW\*(C`x\*(C'\fR
and \f(CW\*(C`y\*(C'\fR. \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR can be of quite general types, for instance both
rational numbers. If \f(CW\*(C`y\*(C'\fR is omitted and \f(CW\*(C`x\*(C'\fR is a vector, returns the
\&\f(CW\*(C`gcd\*(C'\fR of all components of \f(CW\*(C`x\*(C'\fR, i.e. this is equivalent to
\&\f(CWcontent(x)\fR.
.PP
When \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR are both given and one of them is a vector/matrix type,
the \s-1GCD\s0 is again taken recursively on each component, but in a different way.
If \f(CW\*(C`y\*(C'\fR is a vector, resp. matrix, then the result has the same type as \f(CW\*(C`y\*(C'\fR,
and components equal to \f(CW\*(C`gcd(x, y[i])\*(C'\fR, resp. \f(CW\*(C`gcd(x, y[,i])\*(C'\fR. Else
if \f(CW\*(C`x\*(C'\fR is a vector/matrix the result has the same type as \f(CW\*(C`x\*(C'\fR and an
analogous definition. Note that for these types, \f(CW\*(C`gcd\*(C'\fR is not
commutative.
.PP
The algorithm used is a naive Euclid except for the following inputs:
.IX Xref "Euclid"
.PP
\&\eitem integers: use modified right-shift binary (``plus\-minus''
variant).
.PP
\&\eitem univariate polynomials with coeffients in the same number
field (in particular rational): use modular gcd algorithm.
.PP
\&\eitem general polynomials: use the subresultant algorithm if
coefficient explosion is likely (exact, non modular, coefficients).
.IX Xref "subresultant algorithm"
.PP
The library syntax is \fBggcd\fR\f(CW\*(C`(x,y)\*(C'\fR. For general polynomial inputs, \f(CW\*(C` \f(CBsrgcd\f(CW(x,y)\*(C'\fR is also
available. For univariate \eemph{rational} polynomials, one also has
\&\f(CW\*(C` \f(CBmodulargcd\f(CW(x,y)\*(C'\fR.
.IX Xref "ggcd srgcd modulargcd"
.ie n .SS "hilbert""(x,y,{p})"""
.el .SS "hilbert\f(CW(x,y,{p})\fP"
.IX Xref "hilbert"
.IX Subsection "hilbert(x,y,{p})"
Hilbert symbol of \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR modulo
\&\f(CW\*(C`p\*(C'\fR. If \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR are of type integer or fraction, an explicit third
parameter \f(CW\*(C`p\*(C'\fR must be supplied, \f(CW\*(C`p = 0\*(C'\fR meaning the place at infinity.
Otherwise, \f(CW\*(C`p\*(C'\fR needs not be given, and \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR can be of compatible types
integer, fraction, real, intmod a prime (result is undefined if the
modulus is not prime), or \f(CW\*(C`p\*(C'\fR\-adic.
.IX Xref "Hilbert symbol"
.PP
The library syntax is \fBhil\fR\f(CW\*(C`(x,y,p)\*(C'\fR.
.IX Xref "hil"
.ie n .SS "isfundamental""(x)"""
.el .SS "isfundamental\f(CW(x)\fP"
.IX Xref "isfundamental"
.IX Subsection "isfundamental(x)"
true (1) if \f(CW\*(C`x\*(C'\fR is equal to 1 or to the
discriminant of a quadratic field, false (0) otherwise.
.PP
The library syntax is \fBgisfundamental\fR\f(CW\*(C`(x)\*(C'\fR, but the simpler function \f(CW\*(C` \f(CBisfundamental\f(CW(x)\*(C'\fR
which returns a \f(CW\*(C`long\*(C'\fR should be used if \f(CW\*(C`x\*(C'\fR is known to be of type
integer.
.IX Xref "gisfundamental isfundamental"
.ie n .SS "ispower""(x,{k}, {&n})"""
.el .SS "ispower\f(CW(x,{k}, {&n})\fP"
.IX Xref "ispower"
.IX Subsection "ispower(x,{k}, {&n})"
if \f(CW\*(C`k\*(C'\fR is given, returns true (1) if \f(CW\*(C`x\*(C'\fR is a \f(CW\*(C`k\*(C'\fR\-th power, false
(0) if not. In this case, \f(CW\*(C`x\*(C'\fR may be an integer or polynomial,
a rational number or function, or an intmod a prime or \f(CW\*(C`p\*(C'\fR\-adic.
.PP
If \f(CW\*(C`k\*(C'\fR is omitted, only integers and fractions are allowed and the
function returns the maximal \f(CW\*(C`k >= 2\*(C'\fR such that \f(CW\*(C`x = n^k\*(C'\fR is a perfect
power, or 0 if no such \f(CW\*(C`k\*(C'\fR exist; in particular \f(CW\*(C`ispower(\-1)\*(C'\fR,
\&\f(CWispower(0)\fR, and \f(CWispower(1)\fR all return \f(CW0\fR.
.PP
If a third argument \f(CW&n\fR is given and a \f(CW\*(C`k\*(C'\fR\-th root was computed in the
process, then \f(CW\*(C`n\*(C'\fR is set to that root.
.PP
The library syntax is \fBispower\fR\f(CW\*(C`(x, k, &n)\*(C'\fR, the result is a \f(CW\*(C`long\*(C'\fR. Omitted \f(CW\*(C`k\*(C'\fR or \f(CW\*(C`n\*(C'\fR
are coded as \f(CW\*(C`NULL\*(C'\fR.
.IX Xref "ispower"
.ie n .SS "isprime""(x,{\f(CIflag\fP = 0})"""
.el .SS "isprime\f(CW(x,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "isprime"
.IX Subsection "isprime(x,{flag = 0})"
true (1) if \f(CW\*(C`x\*(C'\fR is a (proven) prime
number, false (0) otherwise. This can be very slow when \f(CW\*(C`x\*(C'\fR is indeed
prime and has more than \f(CW1000\fR digits, say. Use \f(CW\*(C`ispseudoprime\*(C'\fR to
quickly check for pseudo primality. See also \f(CW\*(C`factor\*(C'\fR.
.IX Xref "ispseudoprime"
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR, use a combination of Baillie-PSW pseudo primality test (see
\&\f(CW\*(C`ispseudoprime\*(C'\fR), Selfridge ``\f(CW\*(C`p\-1\*(C'\fR'' test if \f(CW\*(C`x\-1\*(C'\fR is smooth enough, and
Adleman-Pomerance-Rumely-Cohen-Lenstra (\s-1APRCL\s0) for general \f(CW\*(C`x\*(C'\fR.
.IX Xref "ispseudoprime"
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR, use Selfridge-Pocklington-Lehmer ``\f(CW\*(C`p\-1\*(C'\fR'' test and output a
primality certificate as follows: return 0 if \f(CW\*(C`x\*(C'\fR is composite, 1 if \f(CW\*(C`x\*(C'\fR is
small enough that passing Baillie-PSW test guarantees its primality
(currently \f(CW\*(C`x < 10^{13}\*(C'\fR), \f(CW2\fR if \f(CW\*(C`x\*(C'\fR is a large prime whose primality could
only sensibly be proven (given the algorithms implemented in \s-1PARI\s0) using the
\&\s-1APRCL\s0 test. Otherwise (\f(CW\*(C`x\*(C'\fR is large and \f(CW\*(C`x\-1\*(C'\fR is smooth) output a three
column matrix as a primality certificate. The first column contains the prime
factors \f(CW\*(C`p\*(C'\fR of \f(CW\*(C`x\-1\*(C'\fR, the second the corresponding elements \f(CW\*(C`a_p\*(C'\fR as in
Proposition 8.3.1 in GTM 138, and the third the output of isprime(p,1). The
algorithm fails if one of the pseudo-prime factors is not prime, which is
exceedingly unlikely (and well worth a bug report).
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 2\*(C'\fR, use \s-1APRCL.\s0
.PP
The library syntax is \fBgisprime\fR\f(CW\*(C`(x,\f(CIflag\f(CW)\*(C'\fR, but the simpler function \f(CW\*(C` \f(CBisprime\f(CW(x)\*(C'\fR
which returns a \f(CW\*(C`long\*(C'\fR should be used if \f(CW\*(C`x\*(C'\fR is known to be of
type integer.
.IX Xref "gisprime isprime"
.ie n .SS "ispseudoprime""(x,{\f(CIflag\fP})"""
.el .SS "ispseudoprime\f(CW(x,{\fP\f(CIflag\fP\f(CW})\fP"
.IX Xref "ispseudoprime"
.IX Subsection "ispseudoprime(x,{flag})"
true (1) if \f(CW\*(C`x\*(C'\fR is a strong pseudo
prime (see below), false (0) otherwise. If this function returns false, \f(CW\*(C`x\*(C'\fR
is not prime; if, on the other hand it returns true, it is only highly likely
that \f(CW\*(C`x\*(C'\fR is a prime number. Use \f(CW\*(C`isprime\*(C'\fR (which is of course much
slower) to prove that \f(CW\*(C`x\*(C'\fR is indeed prime.
.IX Xref "isprime"
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR, checks whether \f(CW\*(C`x\*(C'\fR is a Baillie-Pomerance-Selfridge-Wagstaff
pseudo prime (strong Rabin-Miller pseudo prime for base \f(CW2\fR, followed by
strong Lucas test for the sequence \f(CW\*(C`(P,\-1)\*(C'\fR, \f(CW\*(C`P\*(C'\fR smallest positive integer
such that \f(CW\*(C`P^2 \- 4\*(C'\fR is not a square mod \f(CW\*(C`x\*(C'\fR).
.PP
There are no known composite numbers passing this test (in particular, all
composites \f(CW\*(C` <= 10^{13}\*(C'\fR are correctly detected), although it is expected
that infinitely many such numbers exist.
.PP
If \f(CW\*(C`\f(CIflag\f(CW > 0\*(C'\fR, checks whether \f(CW\*(C`x\*(C'\fR is a strong Miller-Rabin pseudo prime  for
\&\f(CW\*(C`\f(CIflag\f(CW\*(C'\fR randomly chosen bases (with end-matching to catch square roots of
\&\f(CW\*(C`\-1\*(C'\fR).
.PP
The library syntax is \fBgispseudoprime\fR\f(CW\*(C`(x,\f(CIflag\f(CW)\*(C'\fR, but the simpler function \f(CW\*(C` \f(CBispseudoprime\f(CW(x)\*(C'\fR
which returns a \f(CW\*(C`long\*(C'\fR should be used if \f(CW\*(C`x\*(C'\fR is known to be of type
integer.
.IX Xref "gispseudoprime ispseudoprime"
.ie n .SS "issquare""(x,{&n})"""
.el .SS "issquare\f(CW(x,{&n})\fP"
.IX Xref "issquare"
.IX Subsection "issquare(x,{&n})"
true (1) if \f(CW\*(C`x\*(C'\fR is a square, false (0)
if not. What ``being a square'' means depends on the type of \f(CW\*(C`x\*(C'\fR: all
\&\f(CW\*(C`t_COMPLEX\*(C'\fR are squares, as well as all non-negative \f(CW\*(C`t_REAL\*(C'\fR; for
exact types such as \f(CW\*(C`t_INT\*(C'\fR, \f(CW\*(C`t_FRAC\*(C'\fR and \f(CW\*(C`t_INTMOD\*(C'\fR, squares are
numbers of the form \f(CW\*(C`s^2\*(C'\fR with \f(CW\*(C`s\*(C'\fR in \fB\f(BIZ\fB\fR, \fB\f(BIQ\fB\fR and \f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW/N\f(CB\f(CBZ\f(CB\f(CW\*(C'\fR respectively.
.PP
.Vb 8
\&      ? issquare(3)          \e\e as an integer
\&      %1 = 0
\&      ? issquare(3.)         \e\e as a real number
\&      %2 = 1
\&      ? issquare(Mod(7, 8))  \e\e in Z/8Z
\&      %3 = 0
\&      ? issquare( 5 + O(13^4) )  \e\e in Q_13
\&      %4 = 0
.Ve
.PP
If \f(CW\*(C`n\*(C'\fR is given and an exact square root had to be computed in
the checking process, puts that square root in \f(CW\*(C`n\*(C'\fR. This is the case when
\&\f(CW\*(C`x\*(C'\fR is a \f(CW\*(C`t_INT\*(C'\fR, \f(CW\*(C`t_FRAC\*(C'\fR, \f(CW\*(C`t_POL\*(C'\fR or \f(CW\*(C`t_RFRAC\*(C'\fR (or a vector of
such objects):
.PP
.Vb 8
\&      ? issquare(4, &n)
\&      %1 = 1
\&      ? n
\&      %2 = 2
\&      ? issquare([4, x^2], &n)
\&      %3 = [1, 1]  \e\e both are squares
\&      ? n
\&      %4 = [2, x]  \e\e the square roots
.Ve
.PP
This will \eemph{not} work for \f(CW\*(C`t_INTMOD\*(C'\fR (use quadratic reciprocity) or
\&\f(CW\*(C`t_SER\*(C'\fR (only check the leading coefficient).
.PP
The library syntax is \fBgissquarerem\fR\f(CW\*(C`(x,&n)\*(C'\fR. Also available is \f(CW\*(C` \f(CBgissquare\f(CW(x)\*(C'\fR.
.IX Xref "gissquarerem gissquare"
.ie n .SS "issquarefree""(x)"""
.el .SS "issquarefree\f(CW(x)\fP"
.IX Xref "issquarefree"
.IX Subsection "issquarefree(x)"
true (1) if \f(CW\*(C`x\*(C'\fR is squarefree, false (0) if not.
Here \f(CW\*(C`x\*(C'\fR can be an integer or a polynomial.
.PP
The library syntax is \fBgissquarefree\fR\f(CW\*(C`(x)\*(C'\fR, but the simpler function \f(CW\*(C` \f(CBissquarefree\f(CW(x)\*(C'\fR
which returns a \f(CW\*(C`long\*(C'\fR should be used if \f(CW\*(C`x\*(C'\fR is known to be of type
integer. This \fBissquarefree\fR is just the square of the Moebius
function, and is computed as a multiplicative arithmetic function much like
the latter.
.IX Xref "gissquarefree issquarefree issquarefree Moebius"
.ie n .SS "kronecker""(x,y)"""
.el .SS "kronecker\f(CW(x,y)\fP"
.IX Xref "kronecker"
.IX Subsection "kronecker(x,y)"
Kronecker symbol \f(CW\*(C`(x|y)\*(C'\fR, where \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR must be of type integer. By
definition, this is the extension of Legendre symbol to \f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW  x \f(CB\f(CBZ\f(CB\f(CW\*(C'\fR
by total multiplicativity in both arguments with the following special rules
for \f(CW\*(C`y = 0, \-1\*(C'\fR or \f(CW2\fR:
.IX Xref "Kronecker symbol Legendre symbol"
.PP
\&\eitem \f(CW\*(C`(x|0) = 1\*(C'\fR if \f(CW\*(C`|x |= 1\*(C'\fR and \f(CW0\fR otherwise.
.PP
\&\eitem \f(CW\*(C`(x|\-1) = 1\*(C'\fR if \f(CW\*(C`x >= 0\*(C'\fR and \f(CW\*(C`\-1\*(C'\fR otherwise.
.PP
\&\eitem \f(CW\*(C`(x|2) = 0\*(C'\fR if \f(CW\*(C`x\*(C'\fR is even and \f(CW1\fR if \f(CW\*(C`x = 1,\-1 mod 8\*(C'\fR and \f(CW\*(C`\-1\*(C'\fR
if \f(CW\*(C`x = 3,\-3 mod 8\*(C'\fR.
.PP
The library syntax is \fBkronecker\fR\f(CW\*(C`(x,y)\*(C'\fR, the result (\f(CW0\fR or \f(CW\*(C`\f(CI+\-\f(CW 1\*(C'\fR) is a \f(CW\*(C`long\*(C'\fR.
.IX Xref "kronecker"
.ie n .SS "lcm""(x,{y})"""
.el .SS "lcm\f(CW(x,{y})\fP"
.IX Xref "lcm"
.IX Subsection "lcm(x,{y})"
least common multiple of \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR, i.e. such
that \f(CW\*(C`lcm(x,y)*\f(CIgcd\f(CW(x,y) = abs(x*y)\*(C'\fR. If \f(CW\*(C`y\*(C'\fR is omitted and \f(CW\*(C`x\*(C'\fR
is a vector, returns the \f(CW\*(C`lcm\*(C'\fR of all components of \f(CW\*(C`x\*(C'\fR.
.PP
When \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR are both given and one of them is a vector/matrix type,
the \s-1LCM\s0 is again taken recursively on each component, but in a different way.
If \f(CW\*(C`y\*(C'\fR is a vector, resp. matrix, then the result has the same type as \f(CW\*(C`y\*(C'\fR,
and components equal to \f(CW\*(C`lcm(x, y[i])\*(C'\fR, resp. \f(CW\*(C`lcm(x, y[,i])\*(C'\fR. Else
if \f(CW\*(C`x\*(C'\fR is a vector/matrix the result has the same type as \f(CW\*(C`x\*(C'\fR and an
analogous definition. Note that for these types, \f(CW\*(C`lcm\*(C'\fR is not
commutative.
.PP
Note that \f(CWlcm(v)\fR is quite different from
.PP
.Vb 1
\&      l = v[1]; for (i = 1, #v, l = lcm(l, v[i]))
.Ve
.PP
Indeed, \f(CWlcm(v)\fR is a scalar, but \f(CW\*(C`l\*(C'\fR may not be (if one of
the \f(CW\*(C`v[i]\*(C'\fR is a vector/matrix). The computation uses a divide-conquer tree
and should be much more efficient, especially when using the \s-1GMP\s0
multiprecision kernel (and more subquadratic algorithms become available):
.PP
.Vb 5
\&      ? v = vector(10^4, i, random);
\&      ? lcm(v);
\&      time = 323 ms.
\&      ? l = v[1]; for (i = 1, #v, l = lcm(l, v[i]))
\&      time = 833 ms.
.Ve
.PP
The library syntax is \fBglcm\fR\f(CW\*(C`(x,y)\*(C'\fR.
.IX Xref "glcm"
.ie n .SS "moebius""(x)"""
.el .SS "moebius\f(CW(x)\fP"
.IX Xref "moebius"
.IX Subsection "moebius(x)"
Moebius \f(CW\*(C`\f(CImu\f(CW\*(C'\fR\-function of \f(CW\*(C`|x|\*(C'\fR. \f(CW\*(C`x\*(C'\fR must
be of type integer.
.IX Xref "Moebius"
.PP
The library syntax is \fBmu\fR\f(CW\*(C`(x)\*(C'\fR, the result (\f(CW0\fR or \f(CW\*(C`\f(CI+\-\f(CW 1\*(C'\fR) is a \f(CW\*(C`long\*(C'\fR.
.IX Xref "mu"
.ie n .SS "nextprime""(x)"""
.el .SS "nextprime\f(CW(x)\fP"
.IX Xref "nextprime"
.IX Subsection "nextprime(x)"
finds the smallest pseudoprime (see
\&\f(CW\*(C`ispseudoprime\*(C'\fR) greater than or equal to \f(CW\*(C`x\*(C'\fR. \f(CW\*(C`x\*(C'\fR can be of any real
type. Note that if \f(CW\*(C`x\*(C'\fR is a pseudoprime, this function returns \f(CW\*(C`x\*(C'\fR and not
the smallest pseudoprime strictly larger than \f(CW\*(C`x\*(C'\fR. To rigorously prove that
the result is prime, use \f(CW\*(C`isprime\*(C'\fR.
.IX Xref "ispseudoprime"
.PP
The library syntax is \fBnextprime\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "nextprime"
.ie n .SS "numdiv""(x)"""
.el .SS "numdiv\f(CW(x)\fP"
.IX Xref "numdiv"
.IX Subsection "numdiv(x)"
number of divisors of \f(CW\*(C`|x|\*(C'\fR. \f(CW\*(C`x\*(C'\fR must be of type
integer.
.PP
The library syntax is \fBnumbdiv\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "numbdiv"
.ie n .SS "numbpart""(n)"""
.el .SS "numbpart\f(CW(n)\fP"
.IX Xref "numbpart"
.IX Subsection "numbpart(n)"
gives the number of unrestricted partitions of
\&\f(CW\*(C`n\*(C'\fR, usually called \f(CWp(n)\fR in the litterature; in other words the number of
nonnegative integer solutions to \f(CW\*(C`a+2b+3c+.. .= n\*(C'\fR. \f(CW\*(C`n\*(C'\fR must be of type
integer and \f(CW\*(C`1 <= n < 10^{15}\*(C'\fR. The algorithm uses the
Hardy-Ramanujan-Rademacher formula.
.PP
The library syntax is \fBnumbpart\fR\f(CW\*(C`(n)\*(C'\fR.
.IX Xref "numbpart"
.ie n .SS "omega""(x)"""
.el .SS "omega\f(CW(x)\fP"
.IX Xref "omega"
.IX Subsection "omega(x)"
number of distinct prime divisors of \f(CW\*(C`|x|\*(C'\fR. \f(CW\*(C`x\*(C'\fR
must be of type integer.
.PP
The library syntax is \fBomega\fR\f(CW\*(C`(x)\*(C'\fR, the result is a \f(CW\*(C`long\*(C'\fR.
.IX Xref "omega"
.ie n .SS "precprime""(x)"""
.el .SS "precprime\f(CW(x)\fP"
.IX Xref "precprime"
.IX Subsection "precprime(x)"
finds the largest pseudoprime (see
\&\f(CW\*(C`ispseudoprime\*(C'\fR) less than or equal to \f(CW\*(C`x\*(C'\fR. \f(CW\*(C`x\*(C'\fR can be of any real type.
Returns 0 if \f(CW\*(C`x <= 1\*(C'\fR. Note that if \f(CW\*(C`x\*(C'\fR is a prime, this function returns \f(CW\*(C`x\*(C'\fR
and not the largest prime strictly smaller than \f(CW\*(C`x\*(C'\fR. To rigorously prove that
the result is prime, use \f(CW\*(C`isprime\*(C'\fR.
.IX Xref "ispseudoprime"
.PP
The library syntax is \fBprecprime\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "precprime"
.ie n .SS "prime""(x)"""
.el .SS "prime\f(CW(x)\fP"
.IX Xref "prime"
.IX Subsection "prime(x)"
the \f(CW\*(C`x^{th}\*(C'\fR prime number, which must be among
the precalculated primes.
.PP
The library syntax is \fBprime\fR\f(CW\*(C`(x)\*(C'\fR. \f(CW\*(C`x\*(C'\fR must be a \f(CW\*(C`long\*(C'\fR.
.IX Xref "prime"
.ie n .SS "primepi""(x)"""
.el .SS "primepi\f(CW(x)\fP"
.IX Xref "primepi"
.IX Subsection "primepi(x)"
the prime counting function. Returns the number of
primes \f(CW\*(C`p\*(C'\fR, \f(CW\*(C`p <= x\*(C'\fR. Uses a naive algorithm so that \f(CW\*(C`x\*(C'\fR must be less than
\&\f(CW\*(C`primelimit\*(C'\fR.
.PP
The library syntax is \fBprimepi\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "primepi"
.ie n .SS "primes""(x)"""
.el .SS "primes\f(CW(x)\fP"
.IX Xref "primes"
.IX Subsection "primes(x)"
creates a row vector whose components
are the first \f(CW\*(C`x\*(C'\fR prime numbers, which must be among the precalculated primes.
.PP
The library syntax is \fBprimes\fR\f(CW\*(C`(x)\*(C'\fR. \f(CW\*(C`x\*(C'\fR must be a \f(CW\*(C`long\*(C'\fR.
.IX Xref "primes"
.ie n .SS "qfbclassno""(D,{\f(CIflag\fP = 0})"""
.el .SS "qfbclassno\f(CW(D,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "qfbclassno"
.IX Subsection "qfbclassno(D,{flag = 0})"
ordinary class number of the quadratic
order of discriminant \f(CW\*(C`D\*(C'\fR. In the present version \fB2.3.5\fR, a \f(CW\*(C`O(D^{1/2})\*(C'\fR
algorithm is used for \f(CW\*(C`D > 0\*(C'\fR (using Euler product and the functional
equation) so \f(CW\*(C`D\*(C'\fR should not be too large, say \f(CW\*(C`D < 10^8\*(C'\fR, for the time to be
reasonable. On the other hand, for \f(CW\*(C`D < 0\*(C'\fR one can reasonably compute
\&\f(CWqfbclassno(D)\fR for \f(CW\*(C`|D| < 10^{25}\*(C'\fR, since the routine uses
Shanks's method which is in \f(CW\*(C`O(|D|^{1/4})\*(C'\fR. For larger values of \f(CW\*(C`|D|\*(C'\fR,
see \f(CW\*(C`quadclassunit\*(C'\fR.
.IX Xref "Shanks"
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR, compute the class number using Euler products and the
functional equation. However, it is in \f(CW\*(C`O(|D|^{1/2})\*(C'\fR.
.IX Xref "Euler product"
.PP
\&\fBImportant warning.\fR For \f(CW\*(C`D < 0\*(C'\fR, this function may give incorrect
results when the class group has a low exponent (has many cyclic factors),
because implementing Shanks's method in full generality slows it down
immensely. It is therefore strongly recommended to double-check results using
either the version with \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR or the function \f(CW\*(C`quadclassunit\*(C'\fR.
.IX Xref "Shanks"
.PP
\&\fBWarning.\fR contrary to what its name implies, this routine does not
compute the number of classes of binary primitive forms of discriminant \f(CW\*(C`D\*(C'\fR,
which is equal to the \eemph{narrow} class number. The two notions are the same
when \f(CW\*(C`D < 0\*(C'\fR or the fundamental unit \f(CW\*(C`\f(CIvarepsilon\f(CW\*(C'\fR has negative norm; when \f(CW\*(C`D
> 0\*(C'\fR and \f(CW\*(C`N\f(CIvarepsilon\f(CW > 0\*(C'\fR, the number of classes of forms is twice the
ordinary class number. This is a problem which we cannot fix for backward
compatibility reasons. Use the following routine if you are only interested
in the number of classes of forms:
.PP
.Vb 2
\&  QFBclassno(D) =
\&    qfbclassno(D) * if (D < 0 || norm(quadunit(D)) < 0, 1, 2)
.Ve
.PP
Here are a few examples:
.PP
.Vb 11
\&  %2 = 1
\&  ? qfbclassno(\-400000028)
\&  time = 0 ms.
\&  %3 = 7253 \e{ much faster}
\&  %2 = 1
\&  ? qfbclassno(\-400000028)
\&  time = 0 ms.
\&  %3 = 7253 \e{ correct, and fast enough}
\&  ? quadclassunit(\-400000028).no
\&  time = 0 ms.
\&  %4 = 7253
.Ve
.PP
The library syntax is \fBqfbclassno0\fR\f(CW\*(C`(D,\f(CIflag\f(CW)\*(C'\fR. Also available:
\&\f(CW\*(C` \f(CBclassno\f(CW(D)\*(C'\fR ( = \f(CW\*(C` \f(CBqfbclassno\f(CW(D)\*(C'\fR),
\&\f(CW\*(C` \f(CBclassno2\f(CW(D)\*(C'\fR ( = \f(CW\*(C` \f(CBqfbclassno\f(CW(D,1)\*(C'\fR), and finally
we have the function \f(CW\*(C` \f(CBhclassno\f(CW(D)\*(C'\fR which computes the class number of
an imaginary quadratic field by counting reduced forms, an \f(CW\*(C`O(|D|)\*(C'\fR
algorithm. See also \f(CW\*(C`qfbhclassno\*(C'\fR.
.IX Xref "qfbclassno0 classno qfbclassno classno2 qfbclassno hclassno"
.ie n .SS "qfbcompraw""(x,y)"""
.el .SS "qfbcompraw\f(CW(x,y)\fP"
.IX Xref "qfbcompraw"
.IX Subsection "qfbcompraw(x,y)"
composition of the binary quadratic forms
\&\f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR, without reduction of the result. This is useful e.g. to
compute a generating element of an ideal.
.IX Xref "composition reduction"
.PP
The library syntax is \fBcompraw\fR\f(CW\*(C`(x,y)\*(C'\fR.
.IX Xref "compraw"
.ie n .SS "qfbhclassno""(x)"""
.el .SS "qfbhclassno\f(CW(x)\fP"
.IX Xref "qfbhclassno"
.IX Subsection "qfbhclassno(x)"
Hurwitz class number of \f(CW\*(C`x\*(C'\fR, where
\&\f(CW\*(C`x\*(C'\fR is non-negative and congruent to 0 or 3 modulo 4. For \f(CW\*(C`x > 5.
10^5\*(C'\fR, we assume the \s-1GRH,\s0 and use \f(CW\*(C`quadclassunit\*(C'\fR with default
parameters.
.IX Xref "Hurwitz class number"
.PP
The library syntax is \fBhclassno\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "hclassno"
.ie n .SS "qfbnucomp""(x,y,l)"""
.el .SS "qfbnucomp\f(CW(x,y,l)\fP"
.IX Xref "qfbnucomp"
.IX Subsection "qfbnucomp(x,y,l)"
composition of the primitive positive
definite binary quadratic forms \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR (type \f(CW\*(C`t_QFI\*(C'\fR) using the \s-1NUCOMP\s0
and \s-1NUDUPL\s0 algorithms of Shanks, à la Atkin. \f(CW\*(C`l\*(C'\fR is any positive
constant, but for optimal speed, one should take \f(CW\*(C`l = |D|^{1/4}\*(C'\fR, where \f(CW\*(C`D\*(C'\fR is
the common discriminant of \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR. When \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR do not have the same
discriminant, the result is undefined.
.IX Xref "composition Shanks"
.PP
The current implementation is straightforward and in general \eemph{slower}
than the generic routine (since the latter take advantadge of asymptotically
fast operations and careful optimizations).
.PP
The library syntax is \fBnucomp\fR\f(CW\*(C`(x,y,l)\*(C'\fR. The auxiliary function \f(CW\*(C` \f(CBnudupl\f(CW(x,l)\*(C'\fR can be
used when \f(CW\*(C`x = y\*(C'\fR.
.IX Xref "nucomp nudupl"
.ie n .SS "qfbnupow""(x,n)"""
.el .SS "qfbnupow\f(CW(x,n)\fP"
.IX Xref "qfbnupow"
.IX Subsection "qfbnupow(x,n)"
\&\f(CW\*(C`n\*(C'\fR\-th power of the primitive positive definite
binary quadratic form \f(CW\*(C`x\*(C'\fR using Shanks's \s-1NUCOMP\s0 and \s-1NUDUPL\s0 algorithms
(see \f(CW\*(C`qfbnucomp\*(C'\fR, in particular the final warning).
.IX Xref "Shanks"
.PP
The library syntax is \fBnupow\fR\f(CW\*(C`(x,n)\*(C'\fR.
.IX Xref "nupow"
.ie n .SS "qfbpowraw""(x,n)"""
.el .SS "qfbpowraw\f(CW(x,n)\fP"
.IX Xref "qfbpowraw"
.IX Subsection "qfbpowraw(x,n)"
\&\f(CW\*(C`n\*(C'\fR\-th power of the binary quadratic form
\&\f(CW\*(C`x\*(C'\fR, computed without doing any reduction (i.e. using \f(CW\*(C`qfbcompraw\*(C'\fR).
Here \f(CW\*(C`n\*(C'\fR must be non-negative and \f(CW\*(C`n < 2^{31}\*(C'\fR.
.IX Xref "reduction"
.PP
The library syntax is \fBpowraw\fR\f(CW\*(C`(x,n)\*(C'\fR where \f(CW\*(C`n\*(C'\fR must be a \f(CW\*(C`long\*(C'\fR
integer.
.IX Xref "powraw"
.ie n .SS "qfbprimeform""(x,p)"""
.el .SS "qfbprimeform\f(CW(x,p)\fP"
.IX Xref "qfbprimeform"
.IX Subsection "qfbprimeform(x,p)"
prime binary quadratic form of discriminant
\&\f(CW\*(C`x\*(C'\fR whose first coefficient is the prime number \f(CW\*(C`p\*(C'\fR. By abuse of notation,
\&\f(CW\*(C`p = \f(CI+\-\f(CW 1\*(C'\fR is a valid special case which returns the unit form. Returns an
error if \f(CW\*(C`x\*(C'\fR is not a quadratic residue mod \f(CW\*(C`p\*(C'\fR. In the case where \f(CW\*(C`x > 0\*(C'\fR,
\&\f(CW\*(C`p < 0\*(C'\fR is allowed, and the ``distance'' component of the form is set equal
to zero according to the current precision. (Note that negative definite
\&\f(CW\*(C`t_QFI\*(C'\fR are not implemented.)
.PP
The library syntax is \fBprimeform\fR\f(CW\*(C`(x,p,\f(CIprec\f(CW)\*(C'\fR, where the third variable \f(CW\*(C`\f(CIprec\f(CW\*(C'\fR is a
\&\f(CW\*(C`long\*(C'\fR, but is only taken into account when \f(CW\*(C`x > 0\*(C'\fR.
.IX Xref "primeform"
.ie n .SS "qfbred""(x,{\f(CIflag\fP = 0},{D},{\f(CIisqrtD\fP},{\f(CIsqrtD\fP})"""
.el .SS "qfbred\f(CW(x,{\fP\f(CIflag\fP\f(CW = 0},{D},{\fP\f(CIisqrtD\fP\f(CW},{\fP\f(CIsqrtD\fP\f(CW})\fP"
.IX Xref "qfbred"
.IX Subsection "qfbred(x,{flag = 0},{D},{isqrtD},{sqrtD})"
reduces the binary quadratic form \f(CW\*(C`x\*(C'\fR (updating Shanks's distance function
if \f(CW\*(C`x\*(C'\fR is indefinite). The binary digits of \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR are toggles meaning
.PP
  1: perform a single reduction step
.IX Xref "reduction"
.PP
  2: don't update Shanks's distance
.IX Xref "Shanks"
.PP
\&\f(CW\*(C`D\*(C'\fR, \fIisqrtD\fR, \fIsqrtD\fR, if present, supply the values of the
discriminant, \f(CW\*(C`\efloor{ \f(CIsqrt\f(CW {D}}\*(C'\fR, and \f(CW\*(C` \f(CIsqrt\f(CW {D}\*(C'\fR respectively
(no checking is done of these facts). If \f(CW\*(C`D < 0\*(C'\fR these values are useless,
and all references to Shanks's distance are irrelevant.
.PP
The library syntax is \fBqfbred0\fR\f(CW\*(C`(x,\f(CIflag\f(CW,D,\f(CIisqrtD\f(CW,\f(CIsqrtD\f(CW)\*(C'\fR. Use \f(CW\*(C`NULL\*(C'\fR
to omit any of \f(CW\*(C`D\*(C'\fR, \fIisqrtD\fR, \fIsqrtD\fR.
.IX Xref "qfbred0"
.PP
Also available are
.PP
\&\f(CW\*(C` \f(CBredimag\f(CW(x)\*(C'\fR ( = \f(CW\*(C` \f(CBqfbred\f(CW(x)\*(C'\fR where \f(CW\*(C`x\*(C'\fR is definite),
.IX Xref "redimag qfbred"
.PP
and for indefinite forms:
.PP
\&\f(CW\*(C` \f(CBredreal\f(CW(x)\*(C'\fR ( = \f(CW\*(C` \f(CBqfbred\f(CW(x)\*(C'\fR),
.IX Xref "redreal qfbred"
.PP
\&\f(CW\*(C` \f(CBrhoreal\f(CW(x)\*(C'\fR ( = \f(CW\*(C` \f(CBqfbred\f(CW(x,1)\*(C'\fR),
.IX Xref "rhoreal qfbred"
.PP
\&\f(CW\*(C` \f(CBredrealnod\f(CW(x,sq)\*(C'\fR ( = \f(CW\*(C` \f(CBqfbred\f(CW(x,2,,isqrtD)\*(C'\fR),
.IX Xref "redrealnod qfbred"
.PP
\&\f(CW\*(C` \f(CBrhorealnod\f(CW(x,sq)\*(C'\fR ( = \f(CW\*(C` \f(CBqfbred\f(CW(x,3,,isqrtD)\*(C'\fR).
.IX Xref "rhorealnod qfbred"
.ie n .SS "qfbsolve""(Q,p)"""
.el .SS "qfbsolve\f(CW(Q,p)\fP"
.IX Xref "qfbsolve"
.IX Subsection "qfbsolve(Q,p)"
Solve the equation \f(CW\*(C`Q(x,y) = p\*(C'\fR over the integers,
where \f(CW\*(C`Q\*(C'\fR is a binary quadratic form and \f(CW\*(C`p\*(C'\fR a prime number.
.PP
Return \f(CW\*(C`[x,y]\*(C'\fR as a two-components vector, or zero if there is no solution.
Note that this function returns only one solution and not all the solutions.
.PP
Let \f(CW\*(C`D = \edisc Q\*(C'\fR. The algorithm used runs in probabilistic polynomial time
in \f(CW\*(C`p\*(C'\fR (through the computation of a square root of \f(CW\*(C`D\*(C'\fR modulo \f(CW\*(C`p\*(C'\fR); it is
polynomial time in \f(CW\*(C`D\*(C'\fR if \f(CW\*(C`Q\*(C'\fR is imaginary, but exponential time if \f(CW\*(C`Q\*(C'\fR is
real (through the computation of a full cycle of reduced forms). In the
latter case, note that \f(CW\*(C`bnfisprincipal\*(C'\fR provides a solution in heuristic
subexponential time in \f(CW\*(C`D\*(C'\fR assuming the \s-1GRH.\s0
.IX Xref "bnfisprincipal"
.PP
The library syntax is \fBqfbsolve\fR\f(CW\*(C`(Q,n)\*(C'\fR.
.IX Xref "qfbsolve"
.ie n .SS "quadclassunit""(D,{\f(CIflag\fP = 0},{\f(CItech\fP = []})"""
.el .SS "quadclassunit\f(CW(D,{\fP\f(CIflag\fP\f(CW = 0},{\fP\f(CItech\fP\f(CW = []})\fP"
.IX Xref "quadclassunit"
.IX Subsection "quadclassunit(D,{flag = 0},{tech = []})"
Buchmann-McCurley's sub-exponential algorithm for computing the class
group of a quadratic order of discriminant \f(CW\*(C`D\*(C'\fR.
.IX Xref "Buchmann-McCurley"
.PP
This function should be used instead of \f(CW\*(C`qfbclassno\*(C'\fR or \f(CW\*(C`quadregula\*(C'\fR
when \f(CW\*(C`D < \-10^{25}\*(C'\fR, \f(CW\*(C`D > 10^{10}\*(C'\fR, or when the \eemph{structure} is wanted. It
is a special case of \f(CW\*(C`bnfinit\*(C'\fR, which is slower, but more robust.
.IX Xref "qfbclassno quadregula bnfinit"
.PP
If \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR is non-zero \eemph{and} \f(CW\*(C`D > 0\*(C'\fR, computes the narrow class group and
regulator, instead of the ordinary (or wide) ones. In the current version
\&\fB2.3.5\fR, this does not work at all: use the general function \f(CW\*(C`bnfnarrow\*(C'\fR.
.IX Xref "bnfnarrow"
.PP
Optional parameter \fItech\fR is a row vector of the form \f(CW\*(C`[c_1, c_2]\*(C'\fR, where
\&\f(CW\*(C`c_1 <= c_2\*(C'\fR are positive real numbers which control the execution time and
the stack size. For a given \f(CW\*(C`c_1\*(C'\fR, set \f(CW\*(C`c_2 = c_1\*(C'\fR to get maximum speed. To
get a rigorous result under \s-1GRH,\s0 you must take \f(CW\*(C`c_2 >= 6\*(C'\fR. Reasonable
values for \f(CW\*(C`c_1\*(C'\fR are between \f(CW0.1\fR and \f(CW2\fR. More precisely, the algorithm will
\&\eemph{assume} that prime ideals of norm less than \f(CW\*(C`c_2 ( \f(CIlog\f(CW  |D|)^2\*(C'\fR generate
the class group, but the bulk of the work is done with prime ideals of norm
less than \f(CW\*(C`c_1 ( \f(CIlog\f(CW  |D|)^2\*(C'\fR. A larger \f(CW\*(C`c_1\*(C'\fR means that relations are easier
to find, but more relations are needed and the linear algebra will be harder.
The default is \f(CW\*(C`c_1 = c_2 = 0.2\*(C'\fR, so the result is \eemph{not} rigorously
proven.
.IX Xref "GRH"
.PP
The result is a vector \f(CW\*(C`v\*(C'\fR with 3 components if \f(CW\*(C`D < 0\*(C'\fR, and
\&\f(CW4\fR otherwise. The correspond respectively to
.PP
\&\eitem \f(CW\*(C`v[1]\*(C'\fR: the class number
.PP
\&\eitem \f(CW\*(C`v[2]\*(C'\fR: a vector giving the structure of the class group as a
product of cyclic groups;
.PP
\&\eitem \f(CW\*(C`v[3]\*(C'\fR: a vector giving generators of those cyclic groups (as
binary quadratic forms).
.PP
\&\eitem \f(CW\*(C`v[4]\*(C'\fR: (omitted if \f(CW\*(C`D < 0\*(C'\fR) the regulator, computed to an
accuracy which is the maximum of an internal accuracy determined by the
program and the current default (note that once the regulator is known to a
small accuracy it is trivial to compute it to very high accuracy, see the
tutorial).
.PP
The library syntax is \fBquadclassunit0\fR\f(CW\*(C`(D,\f(CIflag\f(CW,tech)\*(C'\fR. Also available are
\&\f(CW\*(C` \f(CBbuchimag\f(CW(D,c_1,c_2)\*(C'\fR and \f(CW\*(C` \f(CBbuchreal\f(CW(D,\f(CIflag\f(CW,c_1,c_2)\*(C'\fR.
.IX Xref "quadclassunit0 buchimag buchreal"
.ie n .SS "quaddisc""(x)"""
.el .SS "quaddisc\f(CW(x)\fP"
.IX Xref "quaddisc"
.IX Subsection "quaddisc(x)"
discriminant of the quadratic field
\&\f(CW\*(C`\f(CB\f(CBQ\f(CB\f(CW( \f(CIsqrt\f(CW {x})\*(C'\fR, where \f(CW\*(C`x belongs to \f(CB\f(CBQ\f(CB\f(CW\*(C'\fR.
.PP
The library syntax is \fBquaddisc\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "quaddisc"
.ie n .SS "quadhilbert""(D,{pq})"""
.el .SS "quadhilbert\f(CW(D,{pq})\fP"
.IX Xref "quadhilbert"
.IX Subsection "quadhilbert(D,{pq})"
relative equation defining the
Hilbert class field of the quadratic field of discriminant \f(CW\*(C`D\*(C'\fR.
.IX Xref "Hilbert class field"
.PP
If \f(CW\*(C`D < 0\*(C'\fR, uses complex multiplication (Schertz's variant). The
technical component \f(CW\*(C`pq\*(C'\fR, if supplied, is a vector \f(CW\*(C`[p,q]\*(C'\fR where \f(CW\*(C`p\*(C'\fR, \f(CW\*(C`q\*(C'\fR are
the prime numbers needed for the Schertz's method. More precisely, prime
ideals above \f(CW\*(C`p\*(C'\fR and \f(CW\*(C`q\*(C'\fR should be non-principal and coprime to all reduced
representatives of the class group. In addition, if one of these ideals has
order \f(CW2\fR in the class group, they should have the same class. Finally, for
efficiency, \f(CW\*(C`\f(CIgcd\f(CW(24,(p\-1)(q\-1))\*(C'\fR should be as large as possible.
The routine returns \f(CW0\fR if \f(CW\*(C`[p,q]\*(C'\fR is not suitable.
.IX Xref "Schertz"
.PP
If \f(CW\*(C`D > 0\*(C'\fR Stark units are used and (in rare cases) a
vector of extensions may be returned whose compositum is the requested class
field. See \f(CW\*(C`bnrstark\*(C'\fR for details.
.IX Xref "Stark units"
.PP
The library syntax is \fBquadhilbert\fR\f(CW\*(C`(D,pq,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "quadhilbert"
.ie n .SS "quadgen""(D)"""
.el .SS "quadgen\f(CW(D)\fP"
.IX Xref "quadgen"
.IX Subsection "quadgen(D)"
creates the quadratic
number \f(CW\*(C`\f(CIomega\f(CW = (a+ \f(CIsqrt\f(CW {D})/2\*(C'\fR where \f(CW\*(C`a = 0\*(C'\fR if \f(CW\*(C`x = 0 mod 4\*(C'\fR,
\&\f(CW\*(C`a = 1\*(C'\fR if \f(CW\*(C`D = 1 mod 4\*(C'\fR, so that \f(CW\*(C`(1,\f(CIomega\f(CW)\*(C'\fR is an integral basis for the
quadratic order of discriminant \f(CW\*(C`D\*(C'\fR. \f(CW\*(C`D\*(C'\fR must be an integer congruent to 0 or
1 modulo 4, which is not a square.
.IX Xref "Label se:quadgen omega"
.PP
The library syntax is \fBquadgen\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "quadgen"
.ie n .SS "quadpoly""(D,{v = x})"""
.el .SS "quadpoly\f(CW(D,{v = x})\fP"
.IX Xref "quadpoly"
.IX Subsection "quadpoly(D,{v = x})"
creates the ``canonical'' quadratic
polynomial (in the variable \f(CW\*(C`v\*(C'\fR) corresponding to the discriminant \f(CW\*(C`D\*(C'\fR,
i.e. the minimal polynomial of \f(CWquadgen(D)\fR. \f(CW\*(C`D\*(C'\fR must be an integer
congruent to 0 or 1 modulo 4, which is not a square.
.PP
The library syntax is \fBquadpoly0\fR\f(CW\*(C`(x,v)\*(C'\fR.
.IX Xref "quadpoly0"
.ie n .SS "quadray""(D,f,{\f(CIlambda\fP})"""
.el .SS "quadray\f(CW(D,f,{\fP\f(CIlambda\fP\f(CW})\fP"
.IX Xref "quadray"
.IX Subsection "quadray(D,f,{lambda})"
relative equation for the ray
class field of conductor \f(CW\*(C`f\*(C'\fR for the quadratic field of discriminant \f(CW\*(C`D\*(C'\fR
using analytic methods. A \f(CW\*(C`bnf\*(C'\fR for \f(CW\*(C`x^2 \- D\*(C'\fR is also accepted in place
of \f(CW\*(C`D\*(C'\fR.
.PP
For \f(CW\*(C`D < 0\*(C'\fR, uses the \f(CW\*(C`\f(CIsigma\f(CW\*(C'\fR function. If supplied, \fIlambda\fR is is the
technical element \f(CW\*(C`\f(CIlambda\f(CW\*(C'\fR of \f(CW\*(C`bnf\*(C'\fR necessary for Schertz's method. In
that case, returns 0 if \f(CW\*(C`\f(CIlambda\f(CW\*(C'\fR is not suitable.
.PP
For \f(CW\*(C`D > 0\*(C'\fR, uses Stark's conjecture, and a vector of relative equations may be
returned. See \f(CW\*(C`bnrstark\*(C'\fR for more details.
.IX Xref "bnrstark"
.PP
The library syntax is \fBquadray\fR\f(CW\*(C`(D,f,lambda,prec)\*(C'\fR, where an omitted \f(CW\*(C`lambda\*(C'\fR is coded as
\&\f(CW\*(C`NULL\*(C'\fR.
.IX Xref "quadray"
.ie n .SS "quadregulator""(x)"""
.el .SS "quadregulator\f(CW(x)\fP"
.IX Xref "quadregulator"
.IX Subsection "quadregulator(x)"
regulator of the quadratic field of
positive discriminant \f(CW\*(C`x\*(C'\fR. Returns an error if \f(CW\*(C`x\*(C'\fR is not a discriminant
(fundamental or not) or if \f(CW\*(C`x\*(C'\fR is a square. See also \f(CW\*(C`quadclassunit\*(C'\fR if
\&\f(CW\*(C`x\*(C'\fR is large.
.PP
The library syntax is \fBregula\fR\f(CW\*(C`(x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "regula"
.ie n .SS "quadunit""(D)"""
.el .SS "quadunit\f(CW(D)\fP"
.IX Xref "quadunit"
.IX Subsection "quadunit(D)"
fundamental unit of the
real quadratic field \f(CW\*(C`\f(CB\f(CBQ\f(CB\f(CW( \f(CIsqrt\f(CW  D)\*(C'\fR where  \f(CW\*(C`D\*(C'\fR is the positive discriminant
of the field. If \f(CW\*(C`D\*(C'\fR is not a fundamental discriminant, this probably gives
the fundamental unit of the corresponding order. \f(CW\*(C`D\*(C'\fR must be an integer
congruent to 0 or 1 modulo 4, which is not a square; the result is a
quadratic number (see \*(L"Label se:quadgen\*(R").
.IX Xref "fundamental units"
.PP
The library syntax is \fBfundunit\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "fundunit"
.ie n .SS "removeprimes""({x = []})"""
.el .SS "removeprimes\f(CW({x = []})\fP"
.IX Xref "removeprimes"
.IX Subsection "removeprimes({x = []})"
removes the primes listed in \f(CW\*(C`x\*(C'\fR from
the prime number table. In particular \f(CW\*(C`removeprimes(addprimes)\*(C'\fR empties
the extra prime table. \f(CW\*(C`x\*(C'\fR can also be a single integer. List the current
extra primes if \f(CW\*(C`x\*(C'\fR is omitted.
.PP
The library syntax is \fBremoveprimes\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "removeprimes"
.ie n .SS "sigma""(x,{k = 1})"""
.el .SS "sigma\f(CW(x,{k = 1})\fP"
.IX Xref "sigma"
.IX Subsection "sigma(x,{k = 1})"
sum of the \f(CW\*(C`k^{th}\*(C'\fR powers of the
positive divisors of \f(CW\*(C`|x|\*(C'\fR. \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`k\*(C'\fR must be of type integer.
.PP
The library syntax is \fBsumdiv\fR\f(CW\*(C`(x)\*(C'\fR ( = \f(CW\*(C` \f(CBsigma\f(CW(x)\*(C'\fR) or \f(CW\*(C` \f(CBgsumdivk\f(CW(x,k)\*(C'\fR ( = 
\&\f(CW\*(C` \f(CBsigma\f(CW(x,k)\*(C'\fR), where \f(CW\*(C`k\*(C'\fR is a C long integer.
.IX Xref "sumdiv sigma gsumdivk sigma"
.ie n .SS "sqrtint""(x)"""
.el .SS "sqrtint\f(CW(x)\fP"
.IX Xref "sqrtint"
.IX Subsection "sqrtint(x)"
integer square root of \f(CW\*(C`x\*(C'\fR, which must be a
non-negative integer. The result is non-negative and rounded towards zero.
.PP
The library syntax is \fBsqrti\fR\f(CW\*(C`(x)\*(C'\fR. Also available is \f(CW\*(C`sqrtremi\*(C'\fR\f(CW\*(C`(x,&r)\*(C'\fR which returns
\&\f(CW\*(C`s\*(C'\fR such that \f(CW\*(C`s^2 = x+r\*(C'\fR, with \f(CW\*(C`0 <= r <= 2s\*(C'\fR.
.IX Xref "sqrti sqrtremi"
.ie n .SS "zncoppersmith""(P, N, X, {B = N})"""
.el .SS "zncoppersmith\f(CW(P, N, X, {B = N})\fP"
.IX Xref "zncoppersmith"
.IX Subsection "zncoppersmith(P, N, X, {B = N})"
finds all integers \f(CW\*(C`x_0\*(C'\fR with
\&\f(CW\*(C`|x_0| <= X\*(C'\fR such that
.PP
  \f(CW\*(C`\f(CIgcd\f(CW(N, P(x_0)) >= B.\*(C'\fR
.PP
If \f(CW\*(C`N\*(C'\fR is prime or a prime power, \f(CW\*(C`polrootsmod\*(C'\fR or \f(CW\*(C`polrootspadic\*(C'\fR
will be much faster. \f(CW\*(C`X\*(C'\fR must be smaller than \f(CW\*(C` \f(CIexp\f(CW ( \f(CIlog\f(CW ^2 B / ( \f(CIdeg\f(CW (P)  \f(CIlog\f(CW 
N))\*(C'\fR.
.IX Xref "polrootsmod polrootspadic"
.PP
The library syntax is \fBzncoppersmith\fR\f(CW\*(C`(P, N, X, B)\*(C'\fR, where an omitted \f(CW\*(C`B\*(C'\fR is coded as \f(CW\*(C`NULL\*(C'\fR.
.IX Xref "zncoppersmith"
.ie n .SS "znlog""(x,g)"""
.el .SS "znlog\f(CW(x,g)\fP"
.IX Xref "znlog"
.IX Subsection "znlog(x,g)"
\&\f(CW\*(C`g\*(C'\fR must be a primitive root mod a prime \f(CW\*(C`p\*(C'\fR, and
the result is the discrete log of \f(CW\*(C`x\*(C'\fR in the multiplicative group
\&\f(CW\*(C`(\f(CB\f(CBZ\f(CB\f(CW/p\f(CB\f(CBZ\f(CB\f(CW)^*\*(C'\fR. This function uses a simple-minded combination of
Pohlig-Hellman algorithm and Shanks baby\-step/giant\-step which requires
\&\f(CW\*(C`O( \f(CIsqrt\f(CW {q})\*(C'\fR storage, where \f(CW\*(C`q\*(C'\fR is the largest prime factor of \f(CW\*(C`p\-1\*(C'\fR. Hence
it cannot be used when the largest prime divisor of \f(CW\*(C`p\-1\*(C'\fR is greater than
about \f(CW\*(C`10^{13}\*(C'\fR.
.PP
The library syntax is \fBznlog\fR\f(CW\*(C`(x,g)\*(C'\fR.
.IX Xref "znlog"
.ie n .SS "znorder""(x,{\f(CIo\fP})"""
.el .SS "znorder\f(CW(x,{\fP\f(CIo\fP\f(CW})\fP"
.IX Xref "znorder"
.IX Subsection "znorder(x,{o})"
\&\f(CW\*(C`x\*(C'\fR must be an integer mod \f(CW\*(C`n\*(C'\fR, and the
result is the order of \f(CW\*(C`x\*(C'\fR in the multiplicative group \f(CW\*(C`(\f(CB\f(CBZ\f(CB\f(CW/n\f(CB\f(CBZ\f(CB\f(CW)^*\*(C'\fR. Returns
an error if \f(CW\*(C`x\*(C'\fR is not invertible. If optional parameter \f(CW\*(C`o\*(C'\fR is given it is
assumed to be a multiple of the order (used to limit the search space).
.PP
The library syntax is \fBznorder\fR\f(CW\*(C`(x,o)\*(C'\fR, where an omitted \f(CW\*(C`o\*(C'\fR is coded as \f(CW\*(C`NULL\*(C'\fR. Also
available is \f(CW\*(C` \f(CBorder\f(CW(x)\*(C'\fR.
.IX Xref "znorder order"
.ie n .SS "znprimroot""(n)"""
.el .SS "znprimroot\f(CW(n)\fP"
.IX Xref "znprimroot"
.IX Subsection "znprimroot(n)"
returns a primitive root (generator) of
\&\f(CW\*(C`(\f(CB\f(CBZ\f(CB\f(CW/n\f(CB\f(CBZ\f(CB\f(CW)^*\*(C'\fR, whenever this latter group is cyclic (\f(CW\*(C`n = 4\*(C'\fR or \f(CW\*(C`n = 2p^k\*(C'\fR or
\&\f(CW\*(C`n = p^k\*(C'\fR, where \f(CW\*(C`p\*(C'\fR is an odd prime and \f(CW\*(C`k >= 0\*(C'\fR).
.PP
The library syntax is \fBgener\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "gener"
.ie n .SS "znstar""(n)"""
.el .SS "znstar\f(CW(n)\fP"
.IX Xref "znstar"
.IX Subsection "znstar(n)"
gives the structure of the multiplicative group
\&\f(CW\*(C`(\f(CB\f(CBZ\f(CB\f(CW/n\f(CB\f(CBZ\f(CB\f(CW)^*\*(C'\fR as a 3\-component row vector \f(CW\*(C`v\*(C'\fR, where \f(CW\*(C`v[1] = \f(CIphi\f(CW(n)\*(C'\fR is the
order of that group, \f(CW\*(C`v[2]\*(C'\fR is a \f(CW\*(C`k\*(C'\fR\-component row-vector \f(CW\*(C`d\*(C'\fR of integers
\&\f(CW\*(C`d[i]\*(C'\fR such that \f(CW\*(C`d[i] > 1\*(C'\fR and \f(CW\*(C`d[i] | d[i\-1]\*(C'\fR for \f(CW\*(C`i >= 2\*(C'\fR and
\&\f(CW\*(C`(\f(CB\f(CBZ\f(CB\f(CW/n\f(CB\f(CBZ\f(CB\f(CW)^*  ~  \f(CIprod\f(CW_{i = 1}^k(\f(CB\f(CBZ\f(CB\f(CW/d[i]\f(CB\f(CBZ\f(CB\f(CW)\*(C'\fR, and \f(CW\*(C`v[3]\*(C'\fR is a \f(CW\*(C`k\*(C'\fR\-component row
vector giving generators of the image of the cyclic groups \f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW/d[i]\f(CB\f(CBZ\f(CB\f(CW\*(C'\fR.
.PP
The library syntax is \fBznstar\fR\f(CW\*(C`(n)\*(C'\fR.
.IX Xref "znstar"
.SH "Functions related to elliptic curves"
.IX Header "Functions related to elliptic curves"
We have implemented a number of functions which are useful for number
theorists working on elliptic curves. We always use Tate's notations.
The functions assume that the curve is given by a general Weierstrass
model
.IX Xref "Tate Weierstrass equation"
.PP
  \f(CW\*(C`
y^2+a_1xy+a_3y = x^3+a_2x^2+a_4x+a_6,
\&\*(C'\fR
.PP
where a priori the \f(CW\*(C`a_i\*(C'\fR can be of any scalar type. This curve can be
considered as a five-component vector \f(CW\*(C`E = [a1,a2,a3,a4,a6]\*(C'\fR. Points on
\&\f(CW\*(C`E\*(C'\fR are represented as two-component vectors \f(CW\*(C`[x,y]\*(C'\fR, except for the
point at infinity, i.e. the identity element of the group law, represented by
the one-component vector \f(CW\*(C`[0]\*(C'\fR.
.PP
It is useful to have at one's disposal more information. This is given by
the function \f(CW\*(C`ellinit\*(C'\fR (see there), which initalizes and returns an
\&\fIell\fR structure by default. If a specific flag is added, a
shortened \fIsell\fR, for small \fIell\fR, is returned, which is much
faster to compute but contains less information. The following member
functions are available to deal with the output of \f(CW\*(C`ellinit\*(C'\fR,
both \fIell\fR and \fIsell\fR:
.IX Xref "ellinit ell sell ell member functions"
.PP
  \f(CW\*(C`a1\*(C'\fR\-\-\f(CW\*(C`a6\*(C'\fR, \f(CW\*(C`b2\*(C'\fR\-\-\f(CW\*(C`b8\*(C'\fR, \f(CW\*(C`c4\*(C'\fR\-\-\f(CW\*(C`c6\*(C'\fR  :  
coefficients of the elliptic curve.
.PP
  \f(CW\*(C`area\*(C'\fR  :    volume of the complex lattice defining \f(CW\*(C`E\*(C'\fR.
.IX Xref "area"
.PP
  \f(CW\*(C`disc\*(C'\fR  :   discriminant of the curve.
.IX Xref "disc"
.PP
  \f(CW\*(C`j\*(C'\fR     :   \f(CW\*(C`j\*(C'\fR\-invariant of the curve.
.IX Xref "j"
.PP
  \f(CW\*(C`omega\*(C'\fR :   \f(CW\*(C`[\f(CIomega\f(CW_1,\f(CIomega\f(CW_2]\*(C'\fR, periods forming a basis of
the complex lattice defining \f(CW\*(C`E\*(C'\fR (\f(CW\*(C`\f(CIomega\f(CW_1\*(C'\fR is the
.IX Xref "omega"
.PP
                   real period, and \f(CW\*(C`\f(CIomega\f(CW_2/\f(CIomega\f(CW_1\*(C'\fR belongs to
Poincaré's half-plane).
.PP
  \f(CW\*(C`eta\*(C'\fR   :   quasi-periods \f(CW\*(C`[\f(CIeta\f(CW_1, \f(CIeta\f(CW_2]\*(C'\fR, such that
\&\f(CW\*(C`\f(CIeta\f(CW_1\f(CIomega\f(CW_2\-\f(CIeta\f(CW_2\f(CIomega\f(CW_1 = i\f(CIPi\f(CW\*(C'\fR.
.IX Xref "eta"
.PP
  \f(CW\*(C`roots\*(C'\fR :   roots of the associated Weierstrass equation.
.IX Xref "roots"
.PP
  \f(CW\*(C`tate\*(C'\fR  :   \f(CW\*(C`[u^2,u,v]\*(C'\fR in the notation of Tate.
.IX Xref "tate"
.PP
  \f(CW\*(C`w\*(C'\fR  :   Mestre's \f(CW\*(C`w\*(C'\fR (this is technical).
.IX Xref "w"
.PP
The member functions \f(CW\*(C`area\*(C'\fR, \f(CW\*(C`eta\*(C'\fR and \f(CW\*(C`omega\*(C'\fR are only available
for curves over \fB\f(BIQ\fB\fR. Conversely, \f(CW\*(C`tate\*(C'\fR and \f(CW\*(C`w\*(C'\fR are only available
for curves defined over \f(CW\*(C`\f(CB\f(CBQ\f(CB\f(CW_p\*(C'\fR. The use of member functions is best described
by an example:
.PP
.Vb 7
\&    ? E = ellinit([0,0,0,0,1]); \e\e The curve y^2 = x^3 + 1
\&    ? E.a6
\&    %2 = 1
\&    ? E.c6
\&    %3 = \-864
\&    ? E.disc
\&    %4 = \-432
.Ve
.PP
Some functions, in particular those relative to height computations (see
\&\f(CW\*(C`ellheight\*(C'\fR) require also that the curve be in minimal Weierstrass
form, which is duly stressed in their description below. This is achieved by
the function \f(CW\*(C`ellminimalmodel\*(C'\fR. \eemph{Using a non-minimal model in such a
routine will yield a wrong result!}
.PP
All functions related to elliptic curves share the prefix \f(CW\*(C`ell\*(C'\fR, and the
precise curve we are interested in is always the first argument, in either
one of the three formats discussed above, unless otherwise specified. The
requirements are given as the \eemph{minimal} ones: any richer structure may
replace the ones requested. For instance, in functions which have no use for
the extra information given by an \fIell\fR structure, the curve can be given
either as a five-component vector, as an \fIsell\fR, or as an \fIell\fR;
if an \fIsell\fR is requested, an \fIell\fR may equally be given.
.IX Xref "ell"
.ie n .SS "elladd""(E,z1,z2)"""
.el .SS "elladd\f(CW(E,z1,z2)\fP"
.IX Xref "elladd"
.IX Subsection "elladd(E,z1,z2)"
sum of the points \f(CW\*(C`z1\*(C'\fR and \f(CW\*(C`z2\*(C'\fR on the
elliptic curve corresponding to \f(CW\*(C`E\*(C'\fR.
.PP
The library syntax is \fBaddell\fR\f(CW\*(C`(E,z1,z2)\*(C'\fR.
.IX Xref "addell"
.ie n .SS "ellak""(E,n)"""
.el .SS "ellak\f(CW(E,n)\fP"
.IX Xref "ellak"
.IX Subsection "ellak(E,n)"
computes the coefficient \f(CW\*(C`a_n\*(C'\fR of the
\&\f(CW\*(C`L\*(C'\fR\-function of the elliptic curve \f(CW\*(C`E\*(C'\fR, i.e. in principle coefficients of a
newform of weight 2 assuming Taniyama-Weil conjecture (which is now
known to hold in full generality thanks to the work of Breuil,
Conrad, Diamond, Taylor and Wiles). \f(CW\*(C`E\*(C'\fR must be an
\&\fIsell\fR as output by \f(CW\*(C`ellinit\*(C'\fR. For this function
to work for every \f(CW\*(C`n\*(C'\fR and not just those prime to the conductor, \f(CW\*(C`E\*(C'\fR must
be a minimal Weierstrass equation. If this is not the case, use the
function \f(CW\*(C`ellminimalmodel\*(C'\fR before using \f(CW\*(C`ellak\*(C'\fR.
.IX Xref "Taniyama-Weil conjecture Breuil Conrad Diamond Taylor Wiles"
.PP
The library syntax is \fBakell\fR\f(CW\*(C`(E,n)\*(C'\fR.
.IX Xref "akell"
.ie n .SS "ellan""(E,n)"""
.el .SS "ellan\f(CW(E,n)\fP"
.IX Xref "ellan"
.IX Subsection "ellan(E,n)"
computes the vector of the first \f(CW\*(C`n\*(C'\fR \f(CW\*(C`a_k\*(C'\fR
corresponding to the elliptic curve \f(CW\*(C`E\*(C'\fR. All comments in \f(CW\*(C`ellak\*(C'\fR
description remain valid.
.PP
The library syntax is \fBanell\fR\f(CW\*(C`(E,n)\*(C'\fR, where \f(CW\*(C`n\*(C'\fR is a C integer.
.IX Xref "anell"
.ie n .SS "ellap""(E,p,{\f(CIflag\fP = 0})"""
.el .SS "ellap\f(CW(E,p,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "ellap"
.IX Subsection "ellap(E,p,{flag = 0})"
computes the \f(CW\*(C`a_p\*(C'\fR corresponding to the
elliptic curve \f(CW\*(C`E\*(C'\fR and the prime number \f(CW\*(C`p\*(C'\fR. These are defined by the
equation \f(CW\*(C`#E(\f(CB\f(CBF\f(CB\f(CW_p) = p+1 \- a_p\*(C'\fR, where \f(CW\*(C`#E(\f(CB\f(CBF\f(CB\f(CW_p)\*(C'\fR stands for the number
of points of the curve \f(CW\*(C`E\*(C'\fR over the finite field \f(CW\*(C`\f(CB\f(CBF\f(CB\f(CW_p\*(C'\fR. When \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR is \f(CW0\fR,
this uses the baby-step giant-step method and a trick due to Mestre. This
runs in time \f(CW\*(C`O(p^{1/4})\*(C'\fR and requires \f(CW\*(C`O(p^{1/4})\*(C'\fR storage, hence becomes
unreasonable when \f(CW\*(C`p\*(C'\fR has about 30 digits.
.PP
If \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR is \f(CW1\fR, computes the \f(CW\*(C`a_p\*(C'\fR as a sum of Legendre symbols. This is
slower than the previous method as soon as \f(CW\*(C`p\*(C'\fR is greater than 100, say.
.PP
No checking is done that \f(CW\*(C`p\*(C'\fR is indeed prime. \f(CW\*(C`E\*(C'\fR must be an \fIsell\fR as
output by \f(CW\*(C`ellinit\*(C'\fR, defined over \fB\f(BIQ\fB\fR, \f(CW\*(C`\f(CB\f(CBF\f(CB\f(CW_p\*(C'\fR or \f(CW\*(C`\f(CB\f(CBQ\f(CB\f(CW_p\*(C'\fR. \f(CW\*(C`E\*(C'\fR must be
given by a Weierstrass equation minimal at \f(CW\*(C`p\*(C'\fR.
.PP
The library syntax is \fBellap0\fR\f(CW\*(C`(E,p,\f(CIflag\f(CW)\*(C'\fR. Also available are \f(CW\*(C` \f(CBapell\f(CW(E,p)\*(C'\fR, corresponding
to \f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR, and \f(CW\*(C` \f(CBapell2\f(CW(E,p)\*(C'\fR (\f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR).
.IX Xref "ellap0 apell apell2"
.ie n .SS "ellbil""(E,z1,z2)"""
.el .SS "ellbil\f(CW(E,z1,z2)\fP"
.IX Xref "ellbil"
.IX Subsection "ellbil(E,z1,z2)"
if \f(CW\*(C`z1\*(C'\fR and \f(CW\*(C`z2\*(C'\fR are points on the elliptic
curve \f(CW\*(C`E\*(C'\fR, assumed to be integral given by a minimal model, this function
computes the value of the canonical bilinear form on \f(CW\*(C`z1\*(C'\fR, \f(CW\*(C`z2\*(C'\fR:
.PP
  \f(CW\*(C` ( h(E,z1+z2) \- h(E,z1) \- h(E,z2) ) / 2 \*(C'\fR
.PP
where \f(CW\*(C`+\*(C'\fR denotes of course addition on \f(CW\*(C`E\*(C'\fR. In addition, \f(CW\*(C`z1\*(C'\fR or \f(CW\*(C`z2\*(C'\fR
(but not both) can be vectors or matrices.
.PP
The library syntax is \fBbilhell\fR\f(CW\*(C`(E,z1,z2,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "bilhell"
.ie n .SS "ellchangecurve""(E,v)"""
.el .SS "ellchangecurve\f(CW(E,v)\fP"
.IX Xref "ellchangecurve"
.IX Subsection "ellchangecurve(E,v)"
changes the data for the elliptic curve \f(CW\*(C`E\*(C'\fR
by changing the coordinates using the vector \f(CW\*(C`v = [u,r,s,t]\*(C'\fR, i.e. if \f(CW\*(C`x\*(Aq\*(C'\fR
and \f(CW\*(C`y\*(Aq\*(C'\fR are the new coordinates, then \f(CW\*(C`x = u^2x\*(Aq+r\*(C'\fR, \f(CW\*(C`y = u^3y\*(Aq+su^2x\*(Aq+t\*(C'\fR.
\&\f(CW\*(C`E\*(C'\fR must be an \fIsell\fR as output by \f(CW\*(C`ellinit\*(C'\fR.
.PP
The library syntax is \fBcoordch\fR\f(CW\*(C`(E,v)\*(C'\fR.
.IX Xref "coordch"
.ie n .SS "ellchangepoint""(x,v)"""
.el .SS "ellchangepoint\f(CW(x,v)\fP"
.IX Xref "ellchangepoint"
.IX Subsection "ellchangepoint(x,v)"
changes the coordinates of the point or
vector of points \f(CW\*(C`x\*(C'\fR using the vector \f(CW\*(C`v = [u,r,s,t]\*(C'\fR, i.e. if \f(CW\*(C`x\*(Aq\*(C'\fR and
\&\f(CW\*(C`y\*(Aq\*(C'\fR are the new coordinates, then \f(CW\*(C`x = u^2x\*(Aq+r\*(C'\fR, \f(CW\*(C`y = u^3y\*(Aq+su^2x\*(Aq+t\*(C'\fR (see also
\&\f(CW\*(C`ellchangecurve\*(C'\fR).
.PP
The library syntax is \fBpointch\fR\f(CW\*(C`(x,v)\*(C'\fR.
.IX Xref "pointch"
.ie n .SS "ellconvertname""(\f(CIname\fP)"""
.el .SS "ellconvertname\f(CW(\fP\f(CIname\fP\f(CW)\fP"
.IX Xref "ellconvertname"
.IX Subsection "ellconvertname(name)"
converts an elliptic curve name, as found in the \f(CW\*(C`elldata\*(C'\fR database,
from a string to a triplet \f(CW\*(C`[\f(CIconductor\f(CW, \f(CIisogeny class\f(CW,
\&\f(CIindex\f(CW]\*(C'\fR. It will also convert a triplet back to a curve name.
Examples:
.IX Xref "elldata"
.PP
.Vb 4
\&  ? ellconvertname("123b1")
\&  %1 = [123, 1, 1]
\&  ? ellconvertname(%)
\&  %2 = "123b1"
.Ve
.PP
The library syntax is \fBellconvertname\fR\f(CW\*(C`(\f(CIname\f(CW)\*(C'\fR.
.IX Xref "ellconvertname"
.ie n .SS "elleisnum""(E,k,{\f(CIflag\fP = 0})"""
.el .SS "elleisnum\f(CW(E,k,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "elleisnum"
.IX Subsection "elleisnum(E,k,{flag = 0})"
\&\f(CW\*(C`E\*(C'\fR being an elliptic curve as
output by \f(CW\*(C`ellinit\*(C'\fR (or, alternatively, given by a 2\-component vector
\&\f(CW\*(C`[\f(CIomega\f(CW_1,\f(CIomega\f(CW_2]\*(C'\fR representing its periods), and \f(CW\*(C`k\*(C'\fR being an even
positive integer, computes the numerical value of the Eisenstein series of
weight \f(CW\*(C`k\*(C'\fR at \f(CW\*(C`E\*(C'\fR, namely
.PP
  \f(CW\*(C`
(2i \f(CIPi\f(CW/\f(CIomega\f(CW_2)^k
\&\eBig(1 + 2/\f(CIzeta\f(CW(1\-k) \f(CIsum\f(CW_{n >= 0} n^{k\-1}q^n / (1\-q^n)\eBig),
\&\*(C'\fR
.PP
where \f(CW\*(C`q = e(\f(CIomega\f(CW_1/\f(CIomega\f(CW_2)\*(C'\fR.
.PP
When \fIflag\fR is non-zero and \f(CW\*(C`k = 4\*(C'\fR or 6, returns the elliptic invariants \f(CW\*(C`g_2\*(C'\fR
or \f(CW\*(C`g_3\*(C'\fR, such that
.PP
  \f(CW\*(C`y^2 = 4x^3 \- g_2 x \- g_3\*(C'\fR
.PP
is a Weierstrass equation for \f(CW\*(C`E\*(C'\fR.
.PP
The library syntax is \fBelleisnum\fR\f(CW\*(C`(E,k,\f(CIflag\f(CW)\*(C'\fR.
.IX Xref "elleisnum"
.ie n .SS "elleta""(om)"""
.el .SS "elleta\f(CW(om)\fP"
.IX Xref "elleta"
.IX Subsection "elleta(om)"
returns the two-component row vector
\&\f(CW\*(C`[\f(CIeta\f(CW_1,\f(CIeta\f(CW_2]\*(C'\fR of quasi-periods associated to \f(CW\*(C`om = [\f(CIomega\f(CW_1,
\&\f(CIomega\f(CW_2]\*(C'\fR
.PP
The library syntax is \fBelleta\fR\f(CW\*(C`(om, \f(CIprec\f(CW)\*(C'\fR
.IX Xref "elleta"
.ie n .SS "ellgenerators""(E)"""
.el .SS "ellgenerators\f(CW(E)\fP"
.IX Xref "ellgenerators"
.IX Subsection "ellgenerators(E)"
returns a \fB\f(BIZ\fB\fR\-basis of the free part of the
Mordell-Weil group associated to \f(CW\*(C`E\*(C'\fR.  This function depends on the
\&\f(CW\*(C`elldata\*(C'\fR database being installed and referencing the curve, and so
is only available for curves over \fB\f(BIZ\fB\fR of small conductors.
.IX Xref "Mordell-Weil group elldata"
.PP
The library syntax is \fBellgenerators\fR\f(CW\*(C`(E)\*(C'\fR.
.IX Xref "ellgenerators"
.ie n .SS "ellglobalred""(E)"""
.el .SS "ellglobalred\f(CW(E)\fP"
.IX Xref "ellglobalred"
.IX Subsection "ellglobalred(E)"
calculates the arithmetic conductor, the global
minimal model of \f(CW\*(C`E\*(C'\fR and the global Tamagawa number \f(CW\*(C`c\*(C'\fR. 
\&\f(CW\*(C`E\*(C'\fR must be an \fIsell\fR as output by \f(CW\*(C`ellinit\*(C'\fR, \eemph{and is supposed
to have all its coefficients \f(CW\*(C`a_i\*(C'\fR in} \fB\f(BIQ\fB\fR. The result is a 3 component
vector \f(CW\*(C`[N,v,c]\*(C'\fR. \f(CW\*(C`N\*(C'\fR is the arithmetic conductor of the curve. \f(CW\*(C`v\*(C'\fR gives the
coordinate change for \f(CW\*(C`E\*(C'\fR over \fB\f(BIQ\fB\fR to the minimal integral model (see
\&\f(CW\*(C`ellminimalmodel\*(C'\fR). Finally \f(CW\*(C`c\*(C'\fR is the product of the local Tamagawa
numbers \f(CW\*(C`c_p\*(C'\fR, a quantity which enters in the Birch and Swinnerton-Dyer
conjecture.
.IX Xref "Tamagawa number ellminimalmodel Birch and Swinnerton-Dyer conjecture minimal model"
.PP
The library syntax is \fBellglobalred\fR\f(CW\*(C`(E)\*(C'\fR.
.IX Xref "ellglobalred"
.ie n .SS "ellheight""(E,z,{\f(CIflag\fP = 2})"""
.el .SS "ellheight\f(CW(E,z,{\fP\f(CIflag\fP\f(CW = 2})\fP"
.IX Xref "ellheight"
.IX Subsection "ellheight(E,z,{flag = 2})"
global Néron\-Tate height of
the point \f(CW\*(C`z\*(C'\fR on the elliptic curve \f(CW\*(C`E\*(C'\fR (defined over \fB\f(BIQ\fB\fR), given by a
standard minimal integral model. \f(CW\*(C`E\*(C'\fR must be an \f(CW\*(C`ell\*(C'\fR as output by
\&\f(CW\*(C`ellinit\*(C'\fR. \fIflag\fR selects the algorithm used to compute the archimedean
local height. If \f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR, this computation is done using sigma and
theta-functions and a trick due to J. Silverman. If \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR, use Tate's \f(CW\*(C`4^n\*(C'\fR
algorithm. If \f(CW\*(C`\f(CIflag\f(CW = 2\*(C'\fR, use Mestre's \s-1AGM\s0 algorithm. The latter is much faster
than the other two, both in theory (converges quadratically) and in practice.
.IX Xref "Néron-Tate height"
.PP
The library syntax is \fBellheight0\fR\f(CW\*(C`(E,z,\f(CIflag\f(CW,\f(CIprec\f(CW)\*(C'\fR. Also available are
\&\f(CW\*(C` \f(CBghell\f(CW(E,z,\f(CIprec\f(CW)\*(C'\fR (\f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR) and \f(CW\*(C` \f(CBghell2\f(CW(E,z,\f(CIprec\f(CW)\*(C'\fR
(\f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR).
.IX Xref "ellheight0 ghell ghell2"
.ie n .SS "ellheightmatrix""(E,x)"""
.el .SS "ellheightmatrix\f(CW(E,x)\fP"
.IX Xref "ellheightmatrix"
.IX Subsection "ellheightmatrix(E,x)"
\&\f(CW\*(C`x\*(C'\fR being a vector of points, this
function outputs the Gram matrix of \f(CW\*(C`x\*(C'\fR with respect to the Néron\-Tate
height, in other words, the \f(CW\*(C`(i,j)\*(C'\fR component of the matrix is equal to
\&\f(CW\*(C`ellbil(E,x[i],x[j])\*(C'\fR. The rank of this matrix, at least in some
approximate sense, gives the rank of the set of points, and if \f(CW\*(C`x\*(C'\fR is a
basis of the Mordell-Weil group of \f(CW\*(C`E\*(C'\fR, its determinant is equal to
the regulator of \f(CW\*(C`E\*(C'\fR. Note that this matrix should be divided by 2 to be in
accordance with certain normalizations. \f(CW\*(C`E\*(C'\fR is assumed to be integral,
given by a minimal model.
.IX Xref "Mordell-Weil group"
.PP
The library syntax is \fBmathell\fR\f(CW\*(C`(E,x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "mathell"
.ie n .SS "ellidentify""(E)"""
.el .SS "ellidentify\f(CW(E)\fP"
.IX Xref "ellidentify"
.IX Subsection "ellidentify(E)"
look up the elliptic curve \f(CW\*(C`E\*(C'\fR (over \fB\f(BIZ\fB\fR)
in the \f(CW\*(C`elldata\*(C'\fR database and return \f(CW\*(C`[[N, M, G], C]\*(C'\fR  where \f(CW\*(C`N\*(C'\fR
is the name of the curve in J.  E.  Cremona database, \f(CW\*(C`M\*(C'\fR the minimal
model, \f(CW\*(C`G\*(C'\fR a \fB\f(BIZ\fB\fR\-basis of the free part of the Mordell-Weil group
of \f(CW\*(C`E\*(C'\fR and \f(CW\*(C`C\*(C'\fR the coordinates change (see \f(CW\*(C`ellchangecurve\*(C'\fR).
.IX Xref "elldata Mordell-Weil group"
.PP
The library syntax is \fBellidentify\fR\f(CW\*(C`(E)\*(C'\fR.
.IX Xref "ellidentify"
.ie n .SS "ellinit""(E,{\f(CIflag\fP = 0})"""
.el .SS "ellinit\f(CW(E,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "ellinit"
.IX Subsection "ellinit(E,{flag = 0})"
initialize an \f(CW\*(C`ell\*(C'\fR structure,
associated to the elliptic curve \f(CW\*(C`E\*(C'\fR. \f(CW\*(C`E\*(C'\fR is a \f(CW5\fR\-component
vector \f(CW\*(C`[a_1,a_2,a_3,a_4,a_6]\*(C'\fR defining the elliptic curve with Weierstrass
equation
.IX Xref "ell"
.PP
  \f(CW\*(C` Y^2 + a_1 XY + a_3 Y = X^3 + a_2 X^2 + a_4 X + a_6 \*(C'\fR
.PP
or a string, in this case the coefficients of the curve with matching name
are looked in the \f(CW\*(C`elldata\*(C'\fR database if available. For the time
being, only curves over a prime field \f(CW\*(C`\f(CB\f(CBF\f(CB\f(CW_p\*(C'\fR and over the \f(CW\*(C`p\*(C'\fR\-adic or
real numbers (including rational numbers) are fully supported. Other
domains are only supported for very basic operations such as point
addition.
.IX Xref "elldata"
.PP
The result of \f(CW\*(C`ellinit\*(C'\fR is a an \fIell\fR structure by default, and
a shorted \fIsell\fR if \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR. Both contain the following information in
their components:
.IX Xref "ellinit ell sell"
.PP
  \f(CW\*(C` a_1,a_2,a_3,a_4,a_6,b_2,b_4,b_6,b_8,c_4,c_6,\f(CIDelta\f(CW,j.\*(C'\fR
.PP
All are accessible via member functions. In particular, the discriminant is
\&\f(CW\*(C`E.disc\*(C'\fR, and the \f(CW\*(C`j\*(C'\fR\-invariant is \f(CW\*(C`E.j\*(C'\fR.
.PP
The other six components are only present if \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR is \f(CW0\fR or omitted.
Their content depends on whether the curve is defined over \fB\f(BIR\fB\fR or not:
.PP
\&\eitem When \f(CW\*(C`E\*(C'\fR is defined over \fB\f(BIR\fB\fR, \f(CW\*(C`E.roots\*(C'\fR is a vector whose
three components contain the roots of the right hand side of the associated
Weierstrass equation.
.PP
  \f(CW\*(C` (y + a_1x/2 + a_3/2)^2 = g(x) \*(C'\fR
.PP
If the roots are all real, then they are ordered by decreasing value. If only
one is real, it is the first component.
.PP
Then \f(CW\*(C`\f(CIomega\f(CW_1 = \*(C'\fR\f(CW\*(C`E.omega[1]\*(C'\fR is the real period of \f(CW\*(C`E\*(C'\fR (integral of
\&\f(CW\*(C`dx/(2y+a_1x+a_3)\*(C'\fR over the connected component of the identity element of
the real points of the curve), and \f(CW\*(C`\f(CIomega\f(CW_2 = \*(C'\fR\f(CW\*(C`E.omega[2]\*(C'\fR is a
complex period. In other words, \f(CW\*(C`E.omega\*(C'\fR forms a basis of the
complex lattice defining \f(CW\*(C`E\*(C'\fR, with
\&\f(CW\*(C`\f(CItau\f(CW = (\f(CIomega\f(CW_2)/(\f(CIomega\f(CW_1)\*(C'\fR having positive imaginary part.
.PP
\&\f(CW\*(C`E.eta\*(C'\fR is a row vector containing the corresponding values \f(CW\*(C`\f(CIeta\f(CW_1\*(C'\fR
and \f(CW\*(C`\f(CIeta\f(CW_2\*(C'\fR such that \f(CW\*(C`\f(CIeta\f(CW_1\f(CIomega\f(CW_2\-\f(CIeta\f(CW_2\f(CIomega\f(CW_1 = i\f(CIPi\f(CW\*(C'\fR.
.PP
Finally, \f(CW\*(C`E.area\*(C'\fR is the volume of the complex lattice defining
\&\f(CW\*(C`E\*(C'\fR.
.PP
\&\eitem When \f(CW\*(C`E\*(C'\fR is defined over \f(CW\*(C`\f(CB\f(CBQ\f(CB\f(CW_p\*(C'\fR, the \f(CW\*(C`p\*(C'\fR\-adic valuation of \f(CW\*(C`j\*(C'\fR
must be negative. Then \f(CW\*(C`E.roots\*(C'\fR is the vector with a single component
equal to the \f(CW\*(C`p\*(C'\fR\-adic root of the associated Weierstrass equation
corresponding to \f(CW\*(C`\-1\*(C'\fR under the Tate parametrization.
.PP
\&\f(CW\*(C`E.tate\*(C'\fR yields the three-component vector \f(CW\*(C`[u^2,u,q]\*(C'\fR, in the
notations of Tate. If the \f(CW\*(C`u\*(C'\fR\-component does not belong to \f(CW\*(C`\f(CB\f(CBQ\f(CB\f(CW_p\*(C'\fR, it is set
to zero.
.PP
\&\f(CW\*(C`E.w\*(C'\fR is Mestre's \f(CW\*(C`w\*(C'\fR (this is technical).
.PP
For all other base fields or rings, the last six components are
arbitrarily set equal to zero. See also the description of member functions
related to elliptic curves at the beginning of this section.
.PP
The library syntax is \fBellinit0\fR\f(CW\*(C`(E,\f(CIflag\f(CW,\f(CIprec\f(CW)\*(C'\fR. Also available are
\&\f(CW\*(C` \f(CBinitell\f(CW(E,\f(CIprec\f(CW)\*(C'\fR (\f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR) and
\&\f(CW\*(C` \f(CBsmallinitell\f(CW(E,\f(CIprec\f(CW)\*(C'\fR (\f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR).
.IX Xref "ellinit0 initell smallinitell"
.ie n .SS "ellisoncurve""(E,z)"""
.el .SS "ellisoncurve\f(CW(E,z)\fP"
.IX Xref "ellisoncurve"
.IX Subsection "ellisoncurve(E,z)"
gives 1 (i.e. true) if the point \f(CW\*(C`z\*(C'\fR is on
the elliptic curve \f(CW\*(C`E\*(C'\fR, 0 otherwise. If \f(CW\*(C`E\*(C'\fR or \f(CW\*(C`z\*(C'\fR have imprecise coefficients,
an attempt is made to take this into account, i.e. an imprecise equality is
checked, not a precise one. It is allowed for \f(CW\*(C`z\*(C'\fR to be a vector of points
in which case a vector (of the same type) is returned.
.PP
The library syntax is \fBellisoncurve\fR\f(CW\*(C`(E,z)\*(C'\fR. Also available is \f(CW\*(C` \f(CBoncurve\f(CW(E,z)\*(C'\fR
which returns a \f(CW\*(C`long\*(C'\fR but does not accept vector of points.
.IX Xref "ellisoncurve oncurve"
.ie n .SS "ellj""(x)"""
.el .SS "ellj\f(CW(x)\fP"
.IX Xref "ellj"
.IX Subsection "ellj(x)"
elliptic \f(CW\*(C`j\*(C'\fR\-invariant. \f(CW\*(C`x\*(C'\fR must be a complex number
with positive imaginary part, or convertible into a power series or a
\&\f(CW\*(C`p\*(C'\fR\-adic number with positive valuation.
.PP
The library syntax is \fBjell\fR\f(CW\*(C`(x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "jell"
.ie n .SS "elllocalred""(E,p)"""
.el .SS "elllocalred\f(CW(E,p)\fP"
.IX Xref "elllocalred"
.IX Subsection "elllocalred(E,p)"
calculates the Kodaira type of the
local fiber of the elliptic curve \f(CW\*(C`E\*(C'\fR at the prime \f(CW\*(C`p\*(C'\fR.
\&\f(CW\*(C`E\*(C'\fR must be an \fIsell\fR as output by \f(CW\*(C`ellinit\*(C'\fR, and is assumed to have
all its coefficients \f(CW\*(C`a_i\*(C'\fR in \fB\f(BIZ\fB\fR. The result is a 4\-component vector
\&\f(CW\*(C`[f,kod,v,c]\*(C'\fR. Here \f(CW\*(C`f\*(C'\fR is the exponent of \f(CW\*(C`p\*(C'\fR in the arithmetic conductor of
\&\f(CW\*(C`E\*(C'\fR, and \f(CW\*(C`kod\*(C'\fR is the Kodaira type which is coded as follows:
.IX Xref "Kodaira"
.PP
1 means good reduction (type I\f(CW\*(C`_0\*(C'\fR), 2, 3 and 4 mean types \s-1II, III\s0 and \s-1IV\s0
respectively, \f(CW\*(C`4+\f(CInu\f(CW\*(C'\fR with \f(CW\*(C`\f(CInu\f(CW > 0\*(C'\fR means type I\f(CW\*(C`_\f(CInu\f(CW\*(C'\fR;
finally the opposite values \f(CW\*(C`\-1\*(C'\fR, \f(CW\*(C`\-2\*(C'\fR, etc. refer to the starred types
I\f(CW\*(C`_0^*\*(C'\fR, \s-1II\s0\f(CW\*(C`^*\*(C'\fR, etc. The third component \f(CW\*(C`v\*(C'\fR is itself a vector \f(CW\*(C`[u,r,s,t]\*(C'\fR
giving the coordinate changes done during the local reduction. Normally, this
has no use if \f(CW\*(C`u\*(C'\fR is 1, that is, if the given equation was already minimal.
Finally, the last component \f(CW\*(C`c\*(C'\fR is the local Tamagawa number \f(CW\*(C`c_p\*(C'\fR.
.IX Xref "Tamagawa number"
.PP
The library syntax is \fBelllocalred\fR\f(CW\*(C`(E,p)\*(C'\fR.
.IX Xref "elllocalred"
.ie n .SS "elllseries""(E,s,{A = 1})"""
.el .SS "elllseries\f(CW(E,s,{A = 1})\fP"
.IX Xref "elllseries"
.IX Subsection "elllseries(E,s,{A = 1})"
\&\f(CW\*(C`E\*(C'\fR being an \fIsell\fR as output by
\&\f(CW\*(C`ellinit\*(C'\fR, this computes the value of the L\-series of \f(CW\*(C`E\*(C'\fR at \f(CW\*(C`s\*(C'\fR. It is
assumed that \f(CW\*(C`E\*(C'\fR is defined over \fB\f(BIQ\fB\fR, not necessarily minimal. The optional
parameter \f(CW\*(C`A\*(C'\fR is a cutoff point for the integral, which must be chosen close
to 1 for best speed. The result must be independent of \f(CW\*(C`A\*(C'\fR, so this allows
some internal checking of the function.
.PP
Note that if the conductor of the curve is large, say greater than \f(CW\*(C`10^{12}\*(C'\fR,
this function will take an unreasonable amount of time since it uses an
\&\f(CW\*(C`O(N^{1/2})\*(C'\fR algorithm.
.PP
The library syntax is \fBelllseries\fR\f(CW\*(C`(E,s,A,\f(CIprec\f(CW)\*(C'\fR where \f(CW\*(C`\f(CIprec\f(CW\*(C'\fR is a \f(CW\*(C`long\*(C'\fR and an
omitted \f(CW\*(C`A\*(C'\fR is coded as \f(CW\*(C`NULL\*(C'\fR.
.IX Xref "elllseries"
.ie n .SS "ellminimalmodel""(E,{&v})"""
.el .SS "ellminimalmodel\f(CW(E,{&v})\fP"
.IX Xref "ellminimalmodel"
.IX Subsection "ellminimalmodel(E,{&v})"
return the standard minimal
integral model of the rational elliptic curve \f(CW\*(C`E\*(C'\fR. If present, sets \f(CW\*(C`v\*(C'\fR to the
corresponding change of variables, which is a vector \f(CW\*(C`[u,r,s,t]\*(C'\fR with
rational components. The return value is identical to that of
\&\f(CW\*(C`ellchangecurve(E, v)\*(C'\fR.
.PP
The resulting model has integral coefficients, is everywhere minimal, \f(CW\*(C`a_1\*(C'\fR
is 0 or 1, \f(CW\*(C`a_2\*(C'\fR is 0, 1 or \f(CW\*(C`\-1\*(C'\fR and \f(CW\*(C`a_3\*(C'\fR is 0 or 1. Such a model is unique,
and the vector \f(CW\*(C`v\*(C'\fR is unique if we specify that \f(CW\*(C`u\*(C'\fR is positive, which we do.
.IX Xref "minimal model"
.PP
The library syntax is \fBellminimalmodel\fR\f(CW\*(C`(E,&v)\*(C'\fR, where an omitted \f(CW\*(C`v\*(C'\fR is coded as \f(CW\*(C`NULL\*(C'\fR.
.IX Xref "ellminimalmodel"
.ie n .SS "ellorder""(E,z)"""
.el .SS "ellorder\f(CW(E,z)\fP"
.IX Xref "ellorder"
.IX Subsection "ellorder(E,z)"
gives the order of the point \f(CW\*(C`z\*(C'\fR on the elliptic
curve \f(CW\*(C`E\*(C'\fR if it is a torsion point, zero otherwise. In the present version
\&\fB2.3.5\fR, this is implemented only for elliptic curves defined over \fB\f(BIQ\fB\fR.
.PP
The library syntax is \fBorderell\fR\f(CW\*(C`(E,z)\*(C'\fR.
.IX Xref "orderell"
.ie n .SS "ellordinate""(E,x)"""
.el .SS "ellordinate\f(CW(E,x)\fP"
.IX Xref "ellordinate"
.IX Subsection "ellordinate(E,x)"
gives a 0, 1 or 2\-component vector containing
the \f(CW\*(C`y\*(C'\fR\-coordinates of the points of the curve \f(CW\*(C`E\*(C'\fR having \f(CW\*(C`x\*(C'\fR as
\&\f(CW\*(C`x\*(C'\fR\-coordinate.
.PP
The library syntax is \fBordell\fR\f(CW\*(C`(E,x)\*(C'\fR.
.IX Xref "ordell"
.ie n .SS "ellpointtoz""(E,z)"""
.el .SS "ellpointtoz\f(CW(E,z)\fP"
.IX Xref "ellpointtoz"
.IX Subsection "ellpointtoz(E,z)"
if \f(CW\*(C`E\*(C'\fR is an elliptic curve with coefficients
in \fB\f(BIR\fB\fR, this computes a complex number \f(CW\*(C`t\*(C'\fR (modulo the lattice defining
\&\f(CW\*(C`E\*(C'\fR) corresponding to the point \f(CW\*(C`z\*(C'\fR, i.e. such that, in the standard
Weierstrass model, \f(CW\*(C` \f(CIwp\f(CW (t) = z[1], \f(CIwp\f(CW \*(Aq(t) = z[2]\*(C'\fR. In other words, this is the
inverse function of \f(CW\*(C`ellztopoint\*(C'\fR. More precisely, if \f(CW\*(C`(w1,w2)\*(C'\fR are the
real and complex periods of \f(CW\*(C`E\*(C'\fR, \f(CW\*(C`t\*(C'\fR is such that \f(CW\*(C`0 <=  \f(CIRe\f(CW (t) < w1\*(C'\fR
and \f(CW\*(C`0 <=  \f(CIIm\f(CW (t) <  \f(CIIm\f(CW (w2)\*(C'\fR.
.PP
If \f(CW\*(C`E\*(C'\fR has coefficients in \f(CW\*(C`\f(CB\f(CBQ\f(CB\f(CW_p\*(C'\fR, then either Tate's \f(CW\*(C`u\*(C'\fR is in \f(CW\*(C`\f(CB\f(CBQ\f(CB\f(CW_p\*(C'\fR, in
which case the output is a \f(CW\*(C`p\*(C'\fR\-adic number \f(CW\*(C`t\*(C'\fR corresponding to the point \f(CW\*(C`z\*(C'\fR
under the Tate parametrization, or only its square is, in which case the
output is \f(CW\*(C`t+1/t\*(C'\fR. \f(CW\*(C`E\*(C'\fR must be an \fIell\fR as output by \f(CW\*(C`ellinit\*(C'\fR.
.PP
The library syntax is \fBzell\fR\f(CW\*(C`(E,z,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "zell"
.ie n .SS "ellpow""(E,z,n)"""
.el .SS "ellpow\f(CW(E,z,n)\fP"
.IX Xref "ellpow"
.IX Subsection "ellpow(E,z,n)"
computes \f(CW\*(C`n\*(C'\fR times the point \f(CW\*(C`z\*(C'\fR for the
group law on the elliptic curve \f(CW\*(C`E\*(C'\fR. Here, \f(CW\*(C`n\*(C'\fR can be in \fB\f(BIZ\fB\fR, or \f(CW\*(C`n\*(C'\fR
can be a complex quadratic integer if the curve \f(CW\*(C`E\*(C'\fR has complex multiplication
by \f(CW\*(C`n\*(C'\fR (if not, an error message is issued).
.PP
The library syntax is \fBpowell\fR\f(CW\*(C`(E,z,n)\*(C'\fR.
.IX Xref "powell"
.ie n .SS "ellrootno""(E,{p = 1})"""
.el .SS "ellrootno\f(CW(E,{p = 1})\fP"
.IX Xref "ellrootno"
.IX Subsection "ellrootno(E,{p = 1})"
\&\f(CW\*(C`E\*(C'\fR being an \fIsell\fR as output by
\&\f(CW\*(C`ellinit\*(C'\fR, this computes the local (if \f(CW\*(C`p ! = 1\*(C'\fR) or global (if \f(CW\*(C`p = 1\*(C'\fR)
root number of the L\-series of the elliptic curve \f(CW\*(C`E\*(C'\fR. Note that the global
root number is the sign of the functional equation and conjecturally is the
parity of the rank of the Mordell-Weil group. The equation for \f(CW\*(C`E\*(C'\fR must
have coefficients in \fB\f(BIQ\fB\fR but need \eemph{not} be minimal.
.IX Xref "Mordell-Weil group"
.PP
The library syntax is \fBellrootno\fR\f(CW\*(C`(E,p)\*(C'\fR and the result (equal to \f(CW\*(C`\f(CI+\-\f(CW1\*(C'\fR) is a \f(CW\*(C`long\*(C'\fR.
.IX Xref "ellrootno"
.ie n .SS "ellsigma""(E,z,{\f(CIflag\fP = 0})"""
.el .SS "ellsigma\f(CW(E,z,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "ellsigma"
.IX Subsection "ellsigma(E,z,{flag = 0})"
value of the Weierstrass \f(CW\*(C`\f(CIsigma\f(CW\*(C'\fR
function of the lattice associated to \f(CW\*(C`E\*(C'\fR as given by \f(CW\*(C`ellinit\*(C'\fR
(alternatively, \f(CW\*(C`E\*(C'\fR can be given as a lattice \f(CW\*(C`[\f(CIomega\f(CW_1,\f(CIomega\f(CW_2]\*(C'\fR).
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR, computes an (arbitrary) determination of \f(CW\*(C` \f(CIlog\f(CW (\f(CIsigma\f(CW(z))\*(C'\fR.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 2,3\*(C'\fR, same using the product expansion instead of theta series.
The library syntax is \fBellsigma\fR\f(CW\*(C`(E,z,\f(CIflag\f(CW)\*(C'\fR
.IX Xref "ellsigma"
.ie n .SS "ellsearch""(N)"""
.el .SS "ellsearch\f(CW(N)\fP"
.IX Xref "ellsearch"
.IX Subsection "ellsearch(N)"
if \f(CW\*(C`N\*(C'\fR is an integer, it is taken as a conductor
else if \f(CW\*(C`N\*(C'\fR is a string, it can be a curve name (\*(L"11a1\*(R"), a isogeny class
(\*(L"11a\*(R") or a conductor \*(L"11\*(R". This function finds all curves in the
\&\f(CW\*(C`elldata\*(C'\fR database with the given property.
.IX Xref "elldata"
.PP
If \f(CW\*(C`N\*(C'\fR is a full curve name, the output format is \f(CW\*(C`[N, [a_1,a_2,a_3,a_4,a_6],
G]\*(C'\fR where \f(CW\*(C`[a_1,a_2,a_3,a_4,a_6]\*(C'\fR are the coefficients of the Weierstrass
equation of the curve and \f(CW\*(C`G\*(C'\fR is a \fB\f(BIZ\fB\fR\-basis of the free part of the
Mordell-Weil group associated to the curve.
.IX Xref "Mordell-Weil group"
.PP
If \f(CW\*(C`N\*(C'\fR is not a full-curve name, the output is the list (as a vector) of all
matching curves in the above format.
.PP
The library syntax is \fBellsearch\fR\f(CW\*(C`(N)\*(C'\fR. Also available is \f(CW\*(C` \f(CBellsearchcurve\f(CW(N)\*(C'\fR that only
accept complete curve names.
.IX Xref "ellsearch ellsearchcurve"
.ie n .SS "ellsub""(E,z1,z2)"""
.el .SS "ellsub\f(CW(E,z1,z2)\fP"
.IX Xref "ellsub"
.IX Subsection "ellsub(E,z1,z2)"
difference of the points \f(CW\*(C`z1\*(C'\fR and \f(CW\*(C`z2\*(C'\fR on the
elliptic curve corresponding to \f(CW\*(C`E\*(C'\fR.
.PP
The library syntax is \fBsubell\fR\f(CW\*(C`(E,z1,z2)\*(C'\fR.
.IX Xref "subell"
.ie n .SS "elltaniyama""(E)"""
.el .SS "elltaniyama\f(CW(E)\fP"
.IX Xref "elltaniyama"
.IX Subsection "elltaniyama(E)"
computes the modular parametrization of the
elliptic curve \f(CW\*(C`E\*(C'\fR, where \f(CW\*(C`E\*(C'\fR is an \fIsell\fR as output by \f(CW\*(C`ellinit\*(C'\fR, in
the form of a two-component vector \f(CW\*(C`[u,v]\*(C'\fR of power series, given to the
current default series precision. This vector is characterized by the
following two properties. First the point \f(CW\*(C`(x,y) = (u,v)\*(C'\fR satisfies the
equation of the elliptic curve. Second, the differential \f(CW\*(C`du/(2v+a_1u+a_3)\*(C'\fR
is equal to \f(CW\*(C`f(z)dz\*(C'\fR, a differential form on \f(CW\*(C`H/\f(CIGamma\f(CW_0(N)\*(C'\fR where \f(CW\*(C`N\*(C'\fR is the
conductor of the curve. The variable used in the power series for \f(CW\*(C`u\*(C'\fR and \f(CW\*(C`v\*(C'\fR
is \f(CW\*(C`x\*(C'\fR, which is implicitly understood to be equal to \f(CW\*(C` \f(CIexp\f(CW (2i\f(CIPi\f(CW z)\*(C'\fR. It is
assumed that the curve is a \eemph{strong} Weil curve, and that the
Manin constant is equal to 1. The equation of the curve \f(CW\*(C`E\*(C'\fR must be minimal
(use \f(CW\*(C`ellminimalmodel\*(C'\fR to get a minimal equation).
.IX Xref "Weil curve"
.PP
The library syntax is \fBelltaniyama\fR\f(CW\*(C`(E, prec)\*(C'\fR, and the precision of the result is determined by
\&\f(CW\*(C`prec\*(C'\fR.
.IX Xref "elltaniyama"
.ie n .SS "elltors""(E,{\f(CIflag\fP = 0})"""
.el .SS "elltors\f(CW(E,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "elltors"
.IX Subsection "elltors(E,{flag = 0})"
if \f(CW\*(C`E\*(C'\fR is an elliptic curve \eemph{defined
over \fB\f(BIQ\fB\fR}, outputs the torsion subgroup of \f(CW\*(C`E\*(C'\fR as a 3\-component vector
\&\f(CW\*(C`[t,v1,v2]\*(C'\fR, where \f(CW\*(C`t\*(C'\fR is the order of the torsion group, \f(CW\*(C`v1\*(C'\fR
gives the structure of the torsion group as a product of cyclic groups
(sorted by decreasing order), and \f(CW\*(C`v2\*(C'\fR gives generators for these cyclic
groups. \f(CW\*(C`E\*(C'\fR must be an \fIell\fR as output by \f(CW\*(C`ellinit\*(C'\fR.
.PP
.Vb 3
\&  ?  E = ellinit([0,0,0,\-1,0]);
\&  ?  elltors(E)
\&  %1 = [4, [2, 2], [[0, 0], [1, 0]]]
.Ve
.PP
Here, the torsion subgroup is isomorphic to \f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW/2\f(CB\f(CBZ\f(CB\f(CW  x \f(CB\f(CBZ\f(CB\f(CW/2\f(CB\f(CBZ\f(CB\f(CW\*(C'\fR, with
generators \f(CW\*(C`[0,0]\*(C'\fR and \f(CW\*(C`[1,0]\*(C'\fR.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR, use Doud's algorithm: bound torsion by computing \f(CW\*(C`#E(\f(CB\f(CBF\f(CB\f(CW_p)\*(C'\fR
for small primes of good reduction, then look for torsion points using
Weierstrass parametrization (and Mazur's classification).
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR, use Lutz-Nagell (\eemph{much} slower), \f(CW\*(C`E\*(C'\fR is allowed to be an
\&\fIsell\fR.
.PP
The library syntax is \fBelltors0\fR\f(CW\*(C`(E,flag)\*(C'\fR.
.IX Xref "elltors0"
.ie n .SS "ellwp""(E,{z = x},{\f(CIflag\fP = 0})"""
.el .SS "ellwp\f(CW(E,{z = x},{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "ellwp"
.IX Subsection "ellwp(E,{z = x},{flag = 0})"
Computes the value at \f(CW\*(C`z\*(C'\fR of the Weierstrass \f(CW\*(C` \f(CIwp\f(CW \*(C'\fR function attached to the
elliptic curve \f(CW\*(C`E\*(C'\fR as given by \f(CW\*(C`ellinit\*(C'\fR (alternatively, \f(CW\*(C`E\*(C'\fR can be
given as a lattice \f(CW\*(C`[\f(CIomega\f(CW_1,\f(CIomega\f(CW_2]\*(C'\fR).
.PP
If \f(CW\*(C`z\*(C'\fR is omitted or is a simple variable, computes the \eemph{power series}
expansion in \f(CW\*(C`z\*(C'\fR (starting \f(CW\*(C`z^{\-2}+O(z^2)\*(C'\fR). The number of terms to an
\&\eemph{even} power in the expansion is the default serieslength in \f(CW\*(C`gp\*(C'\fR, and the
second argument (C long integer) in library mode.
.PP
Optional \fIflag\fR is (for now) only taken into account when \f(CW\*(C`z\*(C'\fR is numeric, and
means 0: compute only \f(CW\*(C` \f(CIwp\f(CW (z)\*(C'\fR, 1: compute \f(CW\*(C`[ \f(CIwp\f(CW (z), \f(CIwp\f(CW \*(Aq(z)]\*(C'\fR.
.PP
The library syntax is \fBellwp0\fR\f(CW\*(C`(E,z,\f(CIflag\f(CW,\f(CIprec\f(CW,\f(CIprecdl\f(CW)\*(C'\fR. Also available is
\&\f(CW\*(C` \f(CBweipell\f(CW(E,\f(CIprecdl\f(CW)\*(C'\fR for the power series.
.IX Xref "ellwp0 weipell"
.ie n .SS "ellzeta""(E,z)"""
.el .SS "ellzeta\f(CW(E,z)\fP"
.IX Xref "ellzeta"
.IX Subsection "ellzeta(E,z)"
value of the Weierstrass \f(CW\*(C`\f(CIzeta\f(CW\*(C'\fR function of the
lattice associated to \f(CW\*(C`E\*(C'\fR as given by \f(CW\*(C`ellinit\*(C'\fR (alternatively, \f(CW\*(C`E\*(C'\fR can
be given as a lattice \f(CW\*(C`[\f(CIomega\f(CW_1,\f(CIomega\f(CW_2]\*(C'\fR).
.PP
The library syntax is \fBellzeta\fR\f(CW\*(C`(E,z)\*(C'\fR.
.IX Xref "ellzeta"
.ie n .SS "ellztopoint""(E,z)"""
.el .SS "ellztopoint\f(CW(E,z)\fP"
.IX Xref "ellztopoint"
.IX Subsection "ellztopoint(E,z)"
\&\f(CW\*(C`E\*(C'\fR being an \fIell\fR as output by
\&\f(CW\*(C`ellinit\*(C'\fR, computes the coordinates \f(CW\*(C`[x,y]\*(C'\fR on the curve \f(CW\*(C`E\*(C'\fR
corresponding to the complex number \f(CW\*(C`z\*(C'\fR. Hence this is the inverse function
of \f(CW\*(C`ellpointtoz\*(C'\fR. In other words, if the curve is put in Weierstrass
form, \f(CW\*(C`[x,y]\*(C'\fR represents the Weierstrass \f(CW\*(C` \f(CIwp\f(CW \*(C'\fR\-function and its
derivative. If \f(CW\*(C`z\*(C'\fR is in the lattice defining \f(CW\*(C`E\*(C'\fR over \fB\f(BIC\fB\fR, the result is
the point at infinity \f(CW\*(C`[0]\*(C'\fR.
.IX Xref "Weierstrass \\f(ISwp\\f(IE -function"
.PP
The library syntax is \fBpointell\fR\f(CW\*(C`(E,z,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "pointell"
.SH "Functions related to general number fields"
.IX Header "Functions related to general number fields"
In this section can be found functions which are used almost exclusively for
working in general number fields. Other less specific functions can be found
in the next section on polynomials. Functions related to quadratic number
fields are found in section \*(L"Label se:arithmetic\*(R" (Arithmetic functions).
.SS "Number field structures"
.IX Subsection "Number field structures"
Let \f(CW\*(C`K = \f(CB\f(CBQ\f(CB\f(CW[X] / (T)\*(C'\fR a number field, \f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW_K\*(C'\fR its ring of integers, \f(CW\*(C`T belongs to \f(CB\f(CBZ\f(CB\f(CW[X]\*(C'\fR
is monic. Three basic number field structures can be associated to \f(CW\*(C`K\*(C'\fR in
\&\s-1GP:\s0
.PP
\&\eitem \f(CW\*(C`\f(CInf\f(CW\*(C'\fR denotes a number field, i.e. a data structure output by
\&\f(CW\*(C`nfinit\*(C'\fR. This contains the basic arithmetic data associated to the
number field: signature, maximal order (given by a basis \f(CW\*(C`nf.zk\*(C'\fR),
discriminant, defining polynomial \f(CW\*(C`T\*(C'\fR, etc.
.IX Xref "nf nfinit"
.PP
\&\eitem \f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR denotes a ``Buchmann's number field'', i.e. a
data structure output by \f(CW\*(C`bnfinit\*(C'\fR. This contains
\&\f(CW\*(C`\f(CInf\f(CW\*(C'\fR and the deeper invariants of the field: units \f(CWU(K)\fR, class group
\&\f(CW\*(C`\eCl(K)\*(C'\fR, as well as technical data required to solve the two associated
discrete logarithm problems.
.IX Xref "bnf bnfinit"
.PP
\&\eitem \f(CW\*(C`\f(CIbnr\f(CW\*(C'\fR denotes a ``ray number field'', i.e. a data structure
output by \f(CW\*(C`bnrinit\*(C'\fR, corresponding to the ray class group structure of
the field, for some modulus \f(CW\*(C`f\*(C'\fR. It contains a \fIbnf\fR, the modulus
\&\f(CW\*(C`f\*(C'\fR, the ray class group \f(CW\*(C`\eCl_f(K)\*(C'\fR and data associated to
the discrete logarithm problem therein.
.IX Xref "bnr"
.SS "Algebraic numbers and ideals"
.IX Subsection "Algebraic numbers and ideals"
An \fIalgebraic number\fR belonging to \f(CW\*(C`K = \f(CB\f(CBQ\f(CB\f(CW[X]/(T)\*(C'\fR is given as
.IX Xref "algebraic number"
.PP
\&\eitem a \f(CW\*(C`t_INT\*(C'\fR, \f(CW\*(C`t_FRAC\*(C'\fR or \f(CW\*(C`t_POL\*(C'\fR (implicitly modulo \f(CW\*(C`T\*(C'\fR), or
.PP
\&\eitem a \f(CW\*(C`t_POLMOD\*(C'\fR (modulo \f(CW\*(C`T\*(C'\fR), or
.PP
\&\eitem a \f(CW\*(C`t_COL\*(C'\fR \f(CW\*(C`v\*(C'\fR of dimension \f(CW\*(C`N = [K:\f(CB\f(CBQ\f(CB\f(CW]\*(C'\fR, representing
the element in terms of the computed integral basis, as
\&\f(CW\*(C`sum(i = 1, N, v[i] * nf.zk[i])\*(C'\fR. Note that a \f(CW\*(C`t_VEC\*(C'\fR
will not be recognized.
.PP
An \fIideal\fR is given in any of the following ways:
.IX Xref "ideal"
.PP
\&\eitem an algebraic number in one of the above forms, defining a principal ideal.
.PP
\&\eitem a prime ideal, i.e. a 5\-component vector in the format output by
\&\f(CW\*(C`idealprimedec\*(C'\fR.
.PP
\&\eitem a \f(CW\*(C`t_MAT\*(C'\fR, square and in Hermite Normal Form (or at least
upper triangular with non-negative coefficients), whose columns represent a
basis of the ideal.
.PP
One may use \f(CW\*(C`idealhnf\*(C'\fR to convert an ideal to the last (preferred) format.
.PP
\&\fBNote.\fR Some routines accept non-square matrices, but using this
format is strongly discouraged. Nevertheless, their behaviour is as follows:
If strictly less than \f(CW\*(C`N = [K:\f(CB\f(CBQ\f(CB\f(CW]\*(C'\fR generators are given, it is assumed they
form a \f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW_K\*(C'\fR\-basis. If \f(CW\*(C`N\*(C'\fR or more are given, a \fB\f(BIZ\fB\fR\-basis is assumed. If
exactly \f(CW\*(C`N\*(C'\fR are given, it is further assumed the matrix is in \s-1HNF.\s0 If any of
these assumptions is not correct the behaviour of the routine is undefined.
.PP
\&\eitem an \fIidele\fR is a 2\-component vector, the first being an ideal as
above, the second being a \f(CW\*(C`R_1+R_2\*(C'\fR\-component row vector giving Archimedean
information, as complex numbers.
.IX Xref "idele"
.SS "Finite abelian groups"
.IX Subsection "Finite abelian groups"
A finite abelian group \f(CW\*(C`G\*(C'\fR in user-readable format is given by its Smith
Normal Form as a pair \f(CW\*(C`[h,d]\*(C'\fR or triple \f(CW\*(C`[h,d,g]\*(C'\fR.
Here \f(CW\*(C`h\*(C'\fR is the cardinality of \f(CW\*(C`G\*(C'\fR, \f(CW\*(C`(d_i)\*(C'\fR is the vector of elementary
divisors, and \f(CW\*(C`(g_i)\*(C'\fR is a vector of generators. In short,
\&\f(CW\*(C`G =  \f(CIoplus\f(CW _{i <= n} (\f(CB\f(CBZ\f(CB\f(CW/d_i\f(CB\f(CBZ\f(CB\f(CW) g_i\*(C'\fR, with \f(CW\*(C`d_n | ... | d_2 | d_1\*(C'\fR
and \f(CW\*(C`\f(CIprod\f(CW d_i = h\*(C'\fR. This information can also be retrieved as
\&\f(CW\*(C`G.no\*(C'\fR, \f(CW\*(C`G.cyc\*(C'\fR and \f(CW\*(C`G.gen\*(C'\fR.
.PP
\&\eitem a \fIcharacter\fR on the abelian group
\&\f(CW\*(C` \f(CIoplus\f(CW  (\f(CB\f(CBZ\f(CB\f(CW/d_i\f(CB\f(CBZ\f(CB\f(CW) g_i\*(C'\fR
is given by a row vector \f(CW\*(C`\f(CIchi\f(CW = [a_1,...,a_n]\*(C'\fR such that
\&\f(CW\*(C`\f(CIchi\f(CW(\f(CIprod\f(CW g_i^{n_i}) =  \f(CIexp\f(CW (2i\f(CIPi\f(CW\f(CIsum\f(CW a_i n_i / d_i)\*(C'\fR.
.IX Xref "character"
.PP
\&\eitem given such a structure, a \fIsubgroup\fR \f(CW\*(C`H\*(C'\fR is input as a square
matrix, whose column express generators of \f(CW\*(C`H\*(C'\fR on the given generators \f(CW\*(C`g_i\*(C'\fR.
Note that the absolute value of the determinant of that matrix is equal to
the index \f(CW\*(C`(G:H)\*(C'\fR.
.IX Xref "subgroup"
.SS "Relative extensions"
.IX Subsection "Relative extensions"
When defining a relative extension, the base field \f(CW\*(C`\f(CInf\f(CW\*(C'\fR must be defined
by a variable having a lower priority (see \*(L"Label se:priority\*(R") than the
variable defining the extension. For example, you may use the variable name
\&\f(CW\*(C`y\*(C'\fR to define the base field, and \f(CW\*(C`x\*(C'\fR to define the relative extension.
.PP
\&\eitem \f(CW\*(C`\f(CIrnf\f(CW\*(C'\fR denotes a relative number field, i.e. a data structure
output by \f(CW\*(C`rnfinit\*(C'\fR.
.IX Xref "rnf"
.PP
\&\eitem A \eemph{relative matrix} is a matrix whose entries are
elements of a (fixed) number field \f(CW\*(C`\f(CInf\f(CW\*(C'\fR, always expressed as column
vectors on the integral basis \f(CW\*(C`\f(CInf\f(CW.zk\*(C'\fR. Hence it is a matrix of
vectors.
.PP
\&\eitem An \fIideal list\fR is a row vector of (fractional)
ideals of the number field \f(CW\*(C`\f(CInf\f(CW\*(C'\fR.
.IX Xref "ideal list"
.PP
\&\eitem A \fIpseudo-matrix\fR is a pair \f(CW\*(C`(A,I)\*(C'\fR where \f(CW\*(C`A\*(C'\fR is a
relative matrix and \f(CW\*(C`I\*(C'\fR an ideal list whose length is the same as the number
of columns of \f(CW\*(C`A\*(C'\fR. This pair is represented by a 2\-component row vector.
.IX Xref "pseudo-matrix"
.PP
\&\eitem The \fIprojective module\fR generated by a pseudo-matrix \f(CW\*(C`(A,I)\*(C'\fR is
the sum \f(CW\*(C`\f(CIsum\f(CW_i {\f(CB\f(CBa\f(CB\f(CW}_j A_j\*(C'\fR where the \f(CW\*(C`{\f(CB\f(CBa\f(CB\f(CW}_j\*(C'\fR are the ideals of \f(CW\*(C`I\*(C'\fR
and \f(CW\*(C`A_j\*(C'\fR is the \f(CW\*(C`j\*(C'\fR\-th column of \f(CW\*(C`A\*(C'\fR.
.IX Xref "projective module"
.PP
\&\eitem A pseudo-matrix \f(CW\*(C`(A,I)\*(C'\fR is a \fIpseudo-basis\fR of the module
it generates if \f(CW\*(C`A\*(C'\fR is a square matrix with non-zero determinant and all the
ideals of \f(CW\*(C`I\*(C'\fR are non-zero. We say that it is in Hermite Normal
Form (\s-1HNF\s0) if it is upper triangular and all the
elements of the diagonal are equal to 1.
.IX Xref "pseudo-basis Hermite normal form"
.PP
\&\eitem The \eemph{determinant} of a pseudo-basis \f(CW\*(C`(A,I)\*(C'\fR is the ideal
equal to the product of the determinant of \f(CW\*(C`A\*(C'\fR by all the ideals of \f(CW\*(C`I\*(C'\fR. The
determinant of a pseudo-matrix is the determinant of any pseudo-basis of the
module it generates.
.SS "Class field theory"
.IX Subsection "Class field theory"
A \f(CW\*(C`\f(CImodulus\f(CW\*(C'\fR, in the sense of class field theory, is a divisor supported
on the non-complex places of \f(CW\*(C`K\*(C'\fR. In \s-1PARI\s0 terms, this means either an
ordinary ideal \f(CW\*(C`I\*(C'\fR as above (no archimedean component), or a pair \f(CW\*(C`[I,a]\*(C'\fR,
where \f(CW\*(C`a\*(C'\fR is a vector with \f(CW\*(C`r_1\*(C'\fR \f(CW\*(C`{0,1}\*(C'\fR\-components, corresponding to the
infinite part of the divisor. More precisely, the \f(CW\*(C`i\*(C'\fR\-th component of \f(CW\*(C`a\*(C'\fR
corresponds to the real embedding associated to the \f(CW\*(C`i\*(C'\fR\-th real root of
\&\f(CW\*(C`K.roots\*(C'\fR. (That ordering is not canonical, but well defined once a
defining polynomial for \f(CW\*(C`K\*(C'\fR is chosen.) For instance, \f(CW\*(C`[1, [1,1]]\*(C'\fR is a
modulus for a real quadratic field, allowing ramification at any of the two
places at infinity.
.IX Xref "modulus"
.PP
A \fIbid\fR or ``big ideal'' is a structure output by \f(CW\*(C`idealstar\*(C'\fR
needed to compute in \f(CW\*(C`(\f(CB\f(CBZ\f(CB\f(CW_K/I)^*\*(C'\fR, where \f(CW\*(C`I\*(C'\fR is a modulus in the above sense.
If is a finite abelian group as described above, supplemented by
technical data needed to solve discrete log problems.
.IX Xref "bid"
.PP
Finally we explain how to input ray number fields (or \fIbnr\fR), using class
field theory. These are defined by a triple \f(CW\*(C`a1\*(C'\fR, \f(CW\*(C`a2\*(C'\fR, \f(CW\*(C`a3\*(C'\fR, where the
defining set \f(CW\*(C`[a1,a2,a3]\*(C'\fR can have any of the following forms: \f(CW\*(C`[\f(CIbnr\f(CW]\*(C'\fR,
\&\f(CW\*(C`[\f(CIbnr\f(CW,\f(CIsubgroup\f(CW]\*(C'\fR, \f(CW\*(C`[\f(CIbnf\f(CW,\f(CImodule\f(CW]\*(C'\fR,
\&\f(CW\*(C`[\f(CIbnf\f(CW,\f(CImodule\f(CW,\f(CIsubgroup\f(CW]\*(C'\fR.
.PP
\&\eitem \f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR is as output by \f(CW\*(C`bnfinit\*(C'\fR, where units are mandatory
unless the modulus is trivial; \fIbnr\fR is as output by \f(CW\*(C`bnrinit\*(C'\fR. This
is the ground field \f(CW\*(C`K\*(C'\fR.
.PP
\&\eitem \eemph{module} is a modulus \f(CW\*(C`\egoth{f}\*(C'\fR, as described above.
.PP
\&\eitem \eemph{subgroup} a subgroup of the ray class group modulo \f(CW\*(C`\egoth{f}\*(C'\fR of
\&\f(CW\*(C`K\*(C'\fR. As described above, this is input as a square matrix expressing
generators of a subgroup of the ray class group \f(CW\*(C`\f(CIbnr\f(CW.clgp\*(C'\fR on the
given generators.
.PP
The corresponding \fIbnr\fR is the subfield of the ray class field of \f(CW\*(C`K\*(C'\fR
modulo \f(CW\*(C`\egoth{f}\*(C'\fR, fixed by the given subgroup.
.SS "General use"
.IX Subsection "General use"
All the functions which are specific to relative extensions, number fields,
Buchmann's number fields, Buchmann's number rays, share the prefix \f(CW\*(C`rnf\*(C'\fR,
\&\f(CW\*(C`nf\*(C'\fR, \f(CW\*(C`bnf\*(C'\fR, \f(CW\*(C`bnr\*(C'\fR respectively. They take as first argument a
number field of that precise type, respectively output by \f(CW\*(C`rnfinit\*(C'\fR,
\&\f(CW\*(C`nfinit\*(C'\fR, \f(CW\*(C`bnfinit\*(C'\fR, and \f(CW\*(C`bnrinit\*(C'\fR.
.PP
However, and even though it may not be specified in the descriptions of the
functions below, it is permissible, if the function expects a \f(CW\*(C`\f(CInf\f(CW\*(C'\fR, to
use a \f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR instead, which contains much more information. On the other
hand, if the function requires a \f(CW\*(C`bnf\*(C'\fR, it will \eemph{not} launch
\&\f(CW\*(C`bnfinit\*(C'\fR for you, which is a costly operation. Instead, it will give you
a specific error message. In short, the types
.PP
  \f(CW\*(C` nf <= bnf <= bnr\*(C'\fR
.PP
are ordered, each function requires a minimal type to work properly, but you
may always substitute a larger type.
.PP
The data types corresponding to the structures described above are rather
complicated. Thus, as we already have seen it with elliptic curves, \s-1GP\s0
provides ``member functions'' to retrieve data from these structures (once
they have been initialized of course). The relevant types of number fields
are indicated between parentheses:
.PP

 \f(CW\*(C`bid\*(C'\fR     (\fIbnr\fR, ) :   bid ideal structure.
.IX Xref "member functions bid"
.PP
 \f(CW\*(C`bnf\*(C'\fR     (\fIbnr\fR,  \fIbnf\fR ) :   Buchmann's number field.
.IX Xref "bnf"
.PP
 \f(CW\*(C`clgp\*(C'\fR   (\fIbnr\fR,  \fIbnf\fR ) :   classgroup. This one admits the
following three subclasses:
.IX Xref "clgp"
.PP
         \f(CW\*(C`cyc\*(C'\fR  :     cyclic decomposition
(\s-1SNF\s0).
.IX Xref "cyc Smith normal form"
.PP
         \f(CW\*(C`gen\*(C'\fR  :  
generators.
.IX Xref "gen (member function)"
.PP
         \f(CW\*(C`no\*(C'\fR   :     number of elements.
.IX Xref "no"
.PP
 \f(CW\*(C`diff\*(C'\fR   (\fIbnr\fR,  \fIbnf\fR,  \fInf\fR ) :   the different ideal.
.IX Xref "diff"
.PP
 \f(CW\*(C`codiff\*(C'\fR (\fIbnr\fR,  \fIbnf\fR,  \fInf\fR ) :   the codifferent
(inverse of the different in the ideal group).
.IX Xref "codiff"
.PP
 \f(CW\*(C`disc\*(C'\fR  (\fIbnr\fR,  \fIbnf\fR,  \fInf\fR ) :   discriminant.
.IX Xref "disc"
.PP
 \f(CW\*(C`fu\*(C'\fR    (\fIbnr\fR,  \fIbnf\fR,  \fInf\fR ) :  
fundamental units.
.IX Xref "fu fundamental units"
.PP
 \f(CW\*(C`index\*(C'\fR    (\fIbnr\fR,  \fIbnf\fR,  \fInf\fR ) :  
index of the power order in the ring of integers.
.IX Xref "index index"
.PP
 \f(CW\*(C`nf\*(C'\fR    (\fIbnr\fR,  \fIbnf\fR,  \fInf\fR ) :   number field.
.IX Xref "nf"
.PP
 \f(CW\*(C`r1\*(C'\fR  (\fIbnr\fR,  \fIbnf\fR,  \fInf\fR ) :   the number
of real embeddings.
.IX Xref "r1"
.PP
 \f(CW\*(C`r2\*(C'\fR  (\fIbnr\fR,  \fIbnf\fR,  \fInf\fR ) :   the number
of pairs of complex embeddings.
.IX Xref "r2"
.PP
 \f(CW\*(C`reg\*(C'\fR   (\fIbnr\fR,  \fIbnf\fR, ) :   regulator.
.IX Xref "reg"
.PP
 \f(CW\*(C`roots\*(C'\fR (\fIbnr\fR,  \fIbnf\fR,  \fInf\fR ) :   roots of the
polynomial generating the field.
.IX Xref "roots"
.PP
 \f(CW\*(C`t2\*(C'\fR    (\fIbnr\fR,  \fIbnf\fR,  \fInf\fR ) :   the T2 matrix (see
\&\f(CW\*(C`nfinit\*(C'\fR).
.IX Xref "t2"
.PP
 \f(CW\*(C`tu\*(C'\fR    (\fIbnr\fR,  \fIbnf\fR, ) :   a generator for the torsion
units.
.IX Xref "tu"
.PP
 \f(CW\*(C`tufu\*(C'\fR  (\fIbnr\fR,  \fIbnf\fR, ) :  
\&\f(CW\*(C`[w,u_1,...,u_r]\*(C'\fR, \f(CW\*(C`(u_i)\*(C'\fR is a vector of
fundamental units, \f(CW\*(C`w\*(C'\fR generates the torsion units.
.IX Xref "tufu"
.PP
 \f(CW\*(C`zk\*(C'\fR    (\fIbnr\fR,  \fIbnf\fR,  \fInf\fR ) :   integral basis, i.e. a
\&\fB\f(BIZ\fB\fR\-basis of the maximal order.
.IX Xref "zk"
.PP
For instance, assume that \f(CW\*(C`\f(CIbnf\f(CW = bnfinit(\f(CIpol\f(CW)\*(C'\fR, for some
polynomial. Then \f(CW\*(C`\f(CIbnf\f(CW.clgp\*(C'\fR retrieves the class group, and
\&\f(CW\*(C`\f(CIbnf\f(CW.clgp.no\*(C'\fR the class number. If we had set \f(CW\*(C`\f(CIbnf\f(CW = 
nfinit(\f(CIpol\f(CW)\*(C'\fR, both would have output an error message. All these
functions are completely recursive, thus for instance
\&\f(CW\*(C`\f(CIbnr\f(CW.bnf.nf.zk\*(C'\fR will yield the maximal order of \fIbnr\fR, which
you could get directly with a simple \f(CW\*(C`\f(CIbnr\f(CW.zk\*(C'\fR.
.SS "Class group, units, and the \s-1GRH\s0"
.IX Subsection "Class group, units, and the GRH"

Some of the functions starting with \f(CW\*(C`bnf\*(C'\fR are implementations of the
sub-exponential algorithms for finding class and unit groups under \s-1GRH,\s0
due to Hafner-McCurley, Buchmann and Cohen-Diaz-Olivier. The general
call to the functions concerning class groups of general number fields
(i.e. excluding \f(CW\*(C`quadclassunit\*(C'\fR) involves a polynomial \f(CW\*(C`P\*(C'\fR and a
technical vector
.IX Xref "Label se:GRHbnf GRH Buchmann"
.PP
  \f(CW\*(C`\f(CItech\f(CW = [c, c2, \f(CInrpid\f(CW ],\*(C'\fR
.PP
where the parameters are to be understood as follows:
.PP
\&\f(CW\*(C`P\*(C'\fR is the defining polynomial for the number field, which must be in
\&\f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW[X]\*(C'\fR, irreducible and monic. In fact, if you supply a non-monic polynomial
at this point, \f(CW\*(C`gp\*(C'\fR issues a warning, then \eemph{transforms your
polynomial} so that it becomes monic. The \f(CW\*(C`nfinit\*(C'\fR routine
will return a different result in this case: instead of \f(CW\*(C`res\*(C'\fR, you get a
vector \f(CW\*(C`[res,Mod(a,Q)]\*(C'\fR, where \f(CW\*(C`Mod(a,Q) = Mod(X,P)\*(C'\fR gives the change
of variables. In all other routines, the variable change is simply lost.
.PP
The numbers \f(CW\*(C`c <= c_2\*(C'\fR are positive real numbers which control the
execution time and the stack size. For a given \f(CW\*(C`c\*(C'\fR, set
\&\f(CW\*(C`c_2 = c\*(C'\fR to get maximum speed. To get a rigorous result under \s-1GRH\s0 you
must take \f(CW\*(C`c2 >= 12\*(C'\fR (or \f(CW\*(C`c2 >= 6\*(C'\fR in \f(CW\*(C`P\*(C'\fR is quadratic). Reasonable values
for \f(CW\*(C`c\*(C'\fR are between \f(CW0.1\fR and \f(CW2\fR. The default is \f(CW\*(C`c = c_2 = 0.3\*(C'\fR.
.IX Xref "GRH"
.PP
\&\f(CW\*(C`\f(CInrpid\f(CW\*(C'\fR is the maximal number of small norm relations associated to each
ideal in the factor base. Set it to \f(CW0\fR to disable the search for small norm
relations. Otherwise, reasonable values are between 4 and 20. The default is
4.
.PP
\&\fBWarning.\fR Make sure you understand the above! By default, most of
the \f(CW\*(C`bnf\*(C'\fR routines depend on the correctness of a heuristic assumption
which is stronger than the \s-1GRH.\s0 In particular, any of the class number, class
group structure, class group generators, regulator and fundamental units may
be wrong, independently of each other. Any result computed from such a
\&\f(CW\*(C`bnf\*(C'\fR may be wrong. The only guarantee is that the units given generate a
subgroup of finite index in the full unit group. In practice, very few
counter-examples are known, requiring unlucky random seeds. No
counter-example has been reported for \f(CW\*(C`c_2 = 0.5\*(C'\fR (which should be almost as
fast as \f(CW\*(C`c_2 = 0.3\*(C'\fR, and shall very probably become the default). If you use
\&\f(CW\*(C`c_2 = 12\*(C'\fR, then everything is correct assuming the \s-1GRH\s0 holds. You can
use \f(CW\*(C`bnfcertify\*(C'\fR to certify the computations unconditionally.
.PP
\&\fBRemarks.\fR
.PP
Apart from the polynomial \f(CW\*(C`P\*(C'\fR, you do not need to supply the technical
parameters (under the library you still need to send at least an empty
vector, coded as \f(CW\*(C`NULL\*(C'\fR). However, should you choose to set some of them,
they \eemph{must} be given in the requested order. For example, if you want to
specify a given value of 
\&\fInrpid\fR, you must give some values as well for \f(CW\*(C`c\*(C'\fR
and \f(CW\*(C`c_2\*(C'\fR, and provide a vector \f(CW\*(C`[c,c_2,\f(CInrpid\f(CW]\*(C'\fR.
.PP
Note also that you can use an \f(CW\*(C`\f(CInf\f(CW\*(C'\fR instead of \f(CW\*(C`P\*(C'\fR, which avoids
recomputing the integral basis and analogous quantities.
.ie n .SS "bnfcertify""(\f(CIbnf\fP)"""
.el .SS "bnfcertify\f(CW(\fP\f(CIbnf\fP\f(CW)\fP"
.IX Xref "bnfcertify"
.IX Subsection "bnfcertify(bnf)"
\&\f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR being as output by
\&\f(CW\*(C`bnfinit\*(C'\fR, checks whether the result is correct, i.e. whether it is
possible to remove the assumption of the Generalized Riemann
Hypothesis. It is correct if and only if the answer is 1. If it is
incorrect, the program may output some error message, or loop indefinitely.
You can check its progress by increasing the debug level.
.IX Xref "GRH"
.PP
The library syntax is \fBcertifybuchall\fR\f(CW\*(C`(\f(CIbnf\f(CW)\*(C'\fR, and the result is a C long.
.IX Xref "certifybuchall"
.ie n .SS "bnfclassunit""(P,{\f(CIflag\fP = 0},{\f(CItech\fP = []})"""
.el .SS "bnfclassunit\f(CW(P,{\fP\f(CIflag\fP\f(CW = 0},{\fP\f(CItech\fP\f(CW = []})\fP"
.IX Xref "bnfclassunit"
.IX Subsection "bnfclassunit(P,{flag = 0},{tech = []})"
\&\eemph{this function
is \s-1DEPRECATED,\s0 use \f(CW\*(C`bnfinit\*(C'\fR}.
.PP
Buchmann's sub-exponential algorithm for computing the class group, the
regulator and a system of fundamental units of the general algebraic
number field \f(CW\*(C`K\*(C'\fR defined by the irreducible polynomial \f(CW\*(C`P\*(C'\fR with integer
coefficients.
.IX Xref "Buchmann fundamental units"
.PP
The result of this function is a vector \f(CW\*(C`v\*(C'\fR with many components, which for
ease of presentation is in fact output as a one column matrix. It is
\&\eemph{not} a \f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR, you need \f(CW\*(C`bnfinit\*(C'\fR for that. First we describe
the default behaviour (\f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR):
.PP
\&\f(CW\*(C`v[1]\*(C'\fR is equal to the polynomial \f(CW\*(C`P\*(C'\fR.
.PP
\&\f(CW\*(C`v[2]\*(C'\fR is the 2\-component vector \f(CW\*(C`[r1,r2]\*(C'\fR, where \f(CW\*(C`r1\*(C'\fR and \f(CW\*(C`r2\*(C'\fR are as usual
the number of real and half the number of complex embeddings of the number
field \f(CW\*(C`K\*(C'\fR.
.PP
\&\f(CW\*(C`v[3]\*(C'\fR is the 2\-component vector containing the field discriminant and the
index.
.PP
\&\f(CW\*(C`v[4]\*(C'\fR is an integral basis in Hermite normal form.
.PP
\&\f(CW\*(C`v[5]\*(C'\fR (\f(CW\*(C`v.clgp\*(C'\fR) is a 3\-component vector containing the class number
(\f(CW\*(C`v.clgp.no\*(C'\fR), the structure of the class group as a product of cyclic
groups of order \f(CW\*(C`n_i\*(C'\fR (\f(CW\*(C`v.clgp.cyc\*(C'\fR), and the corresponding generators
of the class group of respective orders \f(CW\*(C`n_i\*(C'\fR (\f(CW\*(C`v.clgp.gen\*(C'\fR).
.PP
\&\f(CW\*(C`v[6]\*(C'\fR (\f(CW\*(C`v.reg\*(C'\fR) is the regulator computed to an accuracy which is the
maximum of an internally determined accuracy and of the default.
.PP
\&\f(CW\*(C`v[7]\*(C'\fR is deprecated, maintained for backward compatibility and always equal
to \f(CW1\fR.
.PP
\&\f(CW\*(C`v[8]\*(C'\fR (\f(CW\*(C`v.tu\*(C'\fR) a vector with 2 components, the first being the number
\&\f(CW\*(C`w\*(C'\fR of roots of unity in \f(CW\*(C`K\*(C'\fR and the second a primitive \f(CW\*(C`w\*(C'\fR\-th root of unity
expressed as a polynomial.
.PP
\&\f(CW\*(C`v[9]\*(C'\fR (\f(CW\*(C`v.fu\*(C'\fR) is a system of fundamental units also expressed as
polynomials.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR, and the precision happens to be insufficient for obtaining the
fundamental units, the internal precision is doubled and the computation
redone, until the exact results are obtained. Be warned that this can take a
very long time when the coefficients of the fundamental units on the integral
basis are very large, for example in large real quadratic fields.
For this case, there are alternate compact representations for algebraic
numbers, implemented in \s-1PARI\s0 but currently not available in \s-1GP.\s0
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 2\*(C'\fR, the fundamental units and roots of unity are not computed.
Hence the result has only 7 components, the first seven ones.
.PP
The library syntax is \fBbnfclassunit0\fR\f(CW\*(C`(P,\f(CIflag\f(CW,\f(CItech\f(CW,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "bnfclassunit0"
.ie n .SS "bnfclgp""(P,{\f(CItech\fP = []})"""
.el .SS "bnfclgp\f(CW(P,{\fP\f(CItech\fP\f(CW = []})\fP"
.IX Xref "bnfclgp"
.IX Subsection "bnfclgp(P,{tech = []})"
as \f(CW\*(C`bnfinit\*(C'\fR, but only
outputs \f(CW\*(C`bnf.clgp\*(C'\fR, i.e. the class group.
.PP
The library syntax is \fBclassgrouponly\fR\f(CW\*(C`(P,\f(CItech\f(CW,\f(CIprec\f(CW)\*(C'\fR, where \fItech\fR
is as described under \f(CW\*(C`bnfinit\*(C'\fR.
.IX Xref "classgrouponly"
.ie n .SS "bnfdecodemodule""(\f(CInf\fP,m)"""
.el .SS "bnfdecodemodule\f(CW(\fP\f(CInf\fP\f(CW,m)\fP"
.IX Xref "bnfdecodemodule"
.IX Subsection "bnfdecodemodule(nf,m)"
if \f(CW\*(C`m\*(C'\fR is a module as output in the
first component of an extension given by \f(CW\*(C`bnrdisclist\*(C'\fR, outputs the
true module.
.PP
The library syntax is \fBdecodemodule\fR\f(CW\*(C`(\f(CInf\f(CW,m)\*(C'\fR.
.IX Xref "decodemodule"
.ie n .SS "bnfinit""(P,{\f(CIflag\fP = 0},{\f(CItech\fP = []})"""
.el .SS "bnfinit\f(CW(P,{\fP\f(CIflag\fP\f(CW = 0},{\fP\f(CItech\fP\f(CW = []})\fP"
.IX Xref "bnfinit"
.IX Subsection "bnfinit(P,{flag = 0},{tech = []})"
initializes a
\&\fIbnf\fR structure. Used in programs such as \f(CW\*(C`bnfisprincipal\*(C'\fR,
\&\f(CW\*(C`bnfisunit\*(C'\fR or \f(CW\*(C`bnfnarrow\*(C'\fR. By default, the results are conditional
on a heuristic strengthening of the \s-1GRH,\s0 see se:GRHbnf. The result is a
10\-component vector \fIbnf\fR.
.IX Xref "se:GRHbnf"
.PP
This implements Buchmann's sub-exponential algorithm for computing the
class group, the regulator and a system of fundamental units of the
general algebraic number field \f(CW\*(C`K\*(C'\fR defined by the irreducible polynomial \f(CW\*(C`P\*(C'\fR
with integer coefficients.
.IX Xref "Buchmann fundamental units"
.PP
If the precision becomes insufficient, \f(CW\*(C`gp\*(C'\fR outputs a warning
(\f(CW\*(C`fundamental units too large, not given\*(C'\fR) and does not strive to compute
the units by default (\f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR).
.PP
When \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR, we insist on finding the fundamental units exactly. Be
warned that this can take a very long time when the coefficients of the
fundamental units on the integral basis are very large. If the fundamental
units are simply too large to be represented in this form, an error message
is issued. They could be obtained using the so-called compact representation
of algebraic numbers as a formal product of algebraic integers. The latter is
implemented internally but not publicly accessible yet.
.PP
When \f(CW\*(C`\f(CIflag\f(CW = 2\*(C'\fR, on the contrary, it is initially agreed that units are not
computed. Note that the resulting \fIbnf\fR will not be suitable for
\&\f(CW\*(C`bnrinit\*(C'\fR, and that this flag provides negligible time savings
compared to the default. In short, it is deprecated.
.PP
When \f(CW\*(C`\f(CIflag\f(CW = 3\*(C'\fR, computes a very small version of \f(CW\*(C`bnfinit\*(C'\fR, a ``small
Buchmann's number field'' (or \fIsbnf\fR for short) which contains enough
information to recover the full \f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR vector very rapidly, but which is
much smaller and hence easy to store and print. It is supposed to be used in
conjunction with \f(CW\*(C`bnfmake\*(C'\fR.
.PP
\&\f(CW\*(C`\f(CItech\f(CW\*(C'\fR is a technical vector (empty by default, see se:GRHbnf).
Careful use of this parameter may speed up your computations considerably.
.IX Xref "se:GRHbnf"
.PP
The components of a \fIbnf\fR or \fIsbnf\fR are technical and never used by
the casual user. In fact: \eemph{never access a component directly, always use
a proper member function.} However, for the sake of completeness and internal
documentation, their description is as follows. We use the notations
explained in the book by H. Cohen, \eemph{A Course in Computational Algebraic
Number Theory}, Graduate Texts in Maths \fB138\fR, Springer-Verlag, 1993,
Section 6.5, and subsection 6.5.5 in particular.
.PP
\&\f(CW\*(C`\f(CIbnf\f(CW[1]\*(C'\fR contains the matrix \f(CW\*(C`W\*(C'\fR, i.e. the matrix in Hermite normal
form giving relations for the class group on prime ideal generators
\&\f(CW\*(C`( \f(CIwp\f(CW _i)_{1 <= i <= r}\*(C'\fR.
.PP
\&\f(CW\*(C`\f(CIbnf\f(CW[2]\*(C'\fR contains the matrix \f(CW\*(C`B\*(C'\fR, i.e. the matrix containing the
expressions of the prime ideal factorbase in terms of the \f(CW\*(C` \f(CIwp\f(CW _i\*(C'\fR. It is an
\&\f(CW\*(C`r x c\*(C'\fR matrix.
.PP
\&\f(CW\*(C`\f(CIbnf\f(CW[3]\*(C'\fR contains the complex logarithmic embeddings of the system of
fundamental units which has been found. It is an \f(CW\*(C`(r_1+r_2) x (r_1+r_2\-1)\*(C'\fR
matrix.
.PP
\&\f(CW\*(C`\f(CIbnf\f(CW[4]\*(C'\fR contains the matrix \f(CW\*(C`M\*(Aq\*(Aq_C\*(C'\fR of Archimedean components of the
relations of the matrix \f(CW\*(C`(W|B)\*(C'\fR.
.PP
\&\f(CW\*(C`\f(CIbnf\f(CW[5]\*(C'\fR contains the prime factor base, i.e. the list of prime
ideals used in finding the relations.
.PP
\&\f(CW\*(C`\f(CIbnf\f(CW[6]\*(C'\fR used to contain a permutation of the prime factor base, but
has been obsoleted. It contains a dummy \f(CW0\fR.
.PP
\&\f(CW\*(C`\f(CIbnf\f(CW[7]\*(C'\fR or \f(CW\*(C`\f(CIbnf\f(CW.nf\*(C'\fR is equal to the number field data
\&\f(CW\*(C`\f(CInf\f(CW\*(C'\fR as would be given by \f(CW\*(C`nfinit\*(C'\fR.
.PP
\&\f(CW\*(C`\f(CIbnf\f(CW[8]\*(C'\fR is a vector containing the classgroup \f(CW\*(C`\f(CIbnf\f(CW.clgp\*(C'\fR
as a finite abelian group, the regulator \f(CW\*(C`\f(CIbnf\f(CW.reg\*(C'\fR, a \f(CW1\fR (used to
contain an obsolete ``check number''), the number of roots of unity and a
generator \f(CW\*(C`\f(CIbnf\f(CW.tu\*(C'\fR, the fundamental units \f(CW\*(C`\f(CIbnf\f(CW.fu\*(C'\fR.
.PP
\&\f(CW\*(C`\f(CIbnf\f(CW[9]\*(C'\fR is a 3\-element row vector used in \f(CW\*(C`bnfisprincipal\*(C'\fR only
and obtained as follows. Let \f(CW\*(C`D = U W V\*(C'\fR obtained by applying the
Smith normal form algorithm to the matrix \f(CW\*(C`W\*(C'\fR ( = \f(CW\*(C`\f(CIbnf\f(CW[1]\*(C'\fR) and
let \f(CW\*(C`U_r\*(C'\fR be the reduction of \f(CW\*(C`U\*(C'\fR modulo \f(CW\*(C`D\*(C'\fR. The first elements of the
factorbase are given (in terms of \f(CW\*(C`bnf.gen\*(C'\fR) by the columns of \f(CW\*(C`U_r\*(C'\fR,
with Archimedean component \f(CW\*(C`g_a\*(C'\fR; let also \f(CW\*(C`GD_a\*(C'\fR be the Archimedean
components of the generators of the (principal) ideals defined by the
\&\f(CW\*(C`bnf.gen[i]^bnf.cyc[i]\*(C'\fR. Then \f(CW\*(C`\f(CIbnf\f(CW[9] = [U_r, g_a, GD_a]\*(C'\fR.
.IX Xref "bnfisprincipal Smith normal form"
.PP
\&\f(CW\*(C`\f(CIbnf\f(CW[10]\*(C'\fR is by default unused and set equal to 0. This field is used
to store further information about the field as it becomes available, which
is rarely needed, hence would be too expensive to compute during the initial
\&\f(CW\*(C`bnfinit\*(C'\fR call. For instance, the generators of the principal ideals
\&\f(CW\*(C`bnf.gen[i]^bnf.cyc[i]\*(C'\fR (during a call to \f(CW\*(C`bnrisprincipal\*(C'\fR), or
those corresponding to the relations in \f(CW\*(C`W\*(C'\fR and \f(CW\*(C`B\*(C'\fR (when the \f(CW\*(C`bnf\*(C'\fR
internal precision needs to be increased).
.IX Xref "bnrisprincipal"
.PP
An \fIsbnf\fR is a 12 component vector \f(CW\*(C`v\*(C'\fR, as follows. Let \f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR be
the result of a full \f(CW\*(C`bnfinit\*(C'\fR, complete with units. Then \f(CW\*(C`v[1]\*(C'\fR is the
polynomial \f(CW\*(C`P\*(C'\fR, \f(CW\*(C`v[2]\*(C'\fR is the number of real embeddings \f(CW\*(C`r_1\*(C'\fR, \f(CW\*(C`v[3]\*(C'\fR is the
field discriminant, \f(CW\*(C`v[4]\*(C'\fR is the integral basis, \f(CW\*(C`v[5]\*(C'\fR is the list of roots
as in the sixth component of \f(CW\*(C`nfinit\*(C'\fR, \f(CW\*(C`v[6]\*(C'\fR is the matrix \f(CW\*(C`MD\*(C'\fR of
\&\f(CW\*(C`nfinit\*(C'\fR giving a \fB\f(BIZ\fB\fR\-basis of the different, \f(CW\*(C`v[7]\*(C'\fR is the matrix
\&\f(CW\*(C`W = \f(CIbnf\f(CW[1]\*(C'\fR, \f(CW\*(C`v[8]\*(C'\fR is the matrix \f(CW\*(C`matalpha = \f(CIbnf\f(CW[2]\*(C'\fR,
\&\f(CW\*(C`v[9]\*(C'\fR is the prime ideal factor base \f(CW\*(C`\f(CIbnf\f(CW[5]\*(C'\fR coded in a compact way,
and ordered according to the permutation \f(CW\*(C`\f(CIbnf\f(CW[6]\*(C'\fR, \f(CW\*(C`v[10]\*(C'\fR is the
2\-component vector giving the number of roots of unity and a generator,
expressed on the integral basis, \f(CW\*(C`v[11]\*(C'\fR is the list of fundamental units,
expressed on the integral basis, \f(CW\*(C`v[12]\*(C'\fR is a vector containing the algebraic
numbers alpha corresponding to the columns of the matrix \f(CW\*(C`matalpha\*(C'\fR,
expressed on the integral basis.
.PP
Note that all the components are exact (integral or rational), except for
the roots in \f(CW\*(C`v[5]\*(C'\fR. Note also that member functions will \eemph{not} work on
\&\fIsbnf\fR, you have to use \f(CW\*(C`bnfmake\*(C'\fR explicitly first.
.PP
The library syntax is \fBbnfinit0\fR\f(CW\*(C`(P,\f(CIflag\f(CW,\f(CItech\f(CW,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "bnfinit0"
.ie n .SS "bnfisintnorm""(\f(CIbnf\fP,x)"""
.el .SS "bnfisintnorm\f(CW(\fP\f(CIbnf\fP\f(CW,x)\fP"
.IX Xref "bnfisintnorm"
.IX Subsection "bnfisintnorm(bnf,x)"
computes a complete system of
solutions (modulo units of positive norm) of the absolute norm equation
\&\f(CW\*(C`\eNorm(a) = x\*(C'\fR,
where \f(CW\*(C`a\*(C'\fR is an integer in \f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR. If \f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR has not been certified,
the correctness of the result depends on the validity of \s-1GRH.\s0
.IX Xref "GRH"
.PP
See also \f(CW\*(C`bnfisnorm\*(C'\fR.
.IX Xref "bnfisnorm"
.PP
The library syntax is \fBbnfisintnorm\fR\f(CW\*(C`(\f(CIbnf\f(CW,x)\*(C'\fR.
.IX Xref "bnfisintnorm"
.ie n .SS "bnfisnorm""(\f(CIbnf\fP,x,{\f(CIflag\fP = 1})"""
.el .SS "bnfisnorm\f(CW(\fP\f(CIbnf\fP\f(CW,x,{\fP\f(CIflag\fP\f(CW = 1})\fP"
.IX Xref "bnfisnorm"
.IX Subsection "bnfisnorm(bnf,x,{flag = 1})"
tries to tell whether the
rational number \f(CW\*(C`x\*(C'\fR is the norm of some element y in \f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR. Returns a
vector \f(CW\*(C`[a,b]\*(C'\fR where \f(CW\*(C`x = Norm(a)*b\*(C'\fR. Looks for a solution which is an \f(CW\*(C`S\*(C'\fR\-unit,
with \f(CW\*(C`S\*(C'\fR a certain set of prime ideals containing (among others) all primes
dividing \f(CW\*(C`x\*(C'\fR. If \f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR is known to be Galois, set \f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR (in
this case, \f(CW\*(C`x\*(C'\fR is a norm iff \f(CW\*(C`b = 1\*(C'\fR). If \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR is non zero the program adds to
\&\f(CW\*(C`S\*(C'\fR the following prime ideals, depending on the sign of \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR. If \f(CW\*(C`\f(CIflag\f(CW > 0\*(C'\fR,
the ideals of norm less than \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR. And if \f(CW\*(C`\f(CIflag\f(CW < 0\*(C'\fR the ideals dividing \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR.
.IX Xref "Galois"
.PP
Assuming \s-1GRH,\s0 the answer is guaranteed (i.e. \f(CW\*(C`x\*(C'\fR is a norm iff \f(CW\*(C`b = 1\*(C'\fR),
if \f(CW\*(C`S\*(C'\fR contains all primes less than \f(CW\*(C`12 \f(CIlog\f(CW (\edisc(\f(CIBnf\f(CW))^2\*(C'\fR, where
\&\f(CW\*(C`\f(CIBnf\f(CW\*(C'\fR is the Galois closure of \f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR.
.IX Xref "GRH"
.PP
See also \f(CW\*(C`bnfisintnorm\*(C'\fR.
.IX Xref "bnfisintnorm"
.PP
The library syntax is \fBbnfisnorm\fR\f(CW\*(C`(\f(CIbnf\f(CW,x,\f(CIflag\f(CW,\f(CIprec\f(CW)\*(C'\fR, where \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR and
\&\f(CW\*(C`\f(CIprec\f(CW\*(C'\fR are \f(CW\*(C`long\*(C'\fRs.
.IX Xref "bnfisnorm"
.ie n .SS "bnfissunit""(\f(CIbnf\fP,\f(CIsfu\fP,x)"""
.el .SS "bnfissunit\f(CW(\fP\f(CIbnf\fP\f(CW,\fP\f(CIsfu\fP\f(CW,x)\fP"
.IX Xref "bnfissunit"
.IX Subsection "bnfissunit(bnf,sfu,x)"
\&\f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR being output by
\&\f(CW\*(C`bnfinit\*(C'\fR, \fIsfu\fR by \f(CW\*(C`bnfsunit\*(C'\fR, gives the column vector of
exponents of \f(CW\*(C`x\*(C'\fR on the fundamental \f(CW\*(C`S\*(C'\fR\-units and the roots of unity.
If \f(CW\*(C`x\*(C'\fR is not a unit, outputs an empty vector.
.PP
The library syntax is \fBbnfissunit\fR\f(CW\*(C`(\f(CIbnf\f(CW,\f(CIsfu\f(CW,x)\*(C'\fR.
.IX Xref "bnfissunit"
.ie n .SS "bnfisprincipal""(\f(CIbnf\fP,x,{\f(CIflag\fP = 1})"""
.el .SS "bnfisprincipal\f(CW(\fP\f(CIbnf\fP\f(CW,x,{\fP\f(CIflag\fP\f(CW = 1})\fP"
.IX Xref "bnfisprincipal"
.IX Subsection "bnfisprincipal(bnf,x,{flag = 1})"
\&\f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR being the
number field data output by \f(CW\*(C`bnfinit\*(C'\fR, and \f(CW\*(C`x\*(C'\fR being either a \fB\f(BIZ\fB\fR\-basis
of an ideal in the number field (not necessarily in \s-1HNF\s0) or a prime ideal in
the format output by the function \f(CW\*(C`idealprimedec\*(C'\fR, this function tests
whether the ideal is principal or not. The result is more complete than a
simple true/false answer: it gives a row vector \f(CW\*(C`[v_1,v_2]\*(C'\fR, where
.PP
\&\f(CW\*(C`v_1\*(C'\fR is the vector of components \f(CW\*(C`c_i\*(C'\fR of the class of the ideal \f(CW\*(C`x\*(C'\fR in the
class group, expressed on the generators \f(CW\*(C`g_i\*(C'\fR given by \f(CW\*(C`bnfinit\*(C'\fR
(specifically \f(CW\*(C`\f(CIbnf\f(CW.gen\*(C'\fR). The \f(CW\*(C`c_i\*(C'\fR are chosen so that \f(CW\*(C`0 <= c_i < n_i\*(C'\fR
where \f(CW\*(C`n_i\*(C'\fR is the order of \f(CW\*(C`g_i\*(C'\fR (the vector of \f(CW\*(C`n_i\*(C'\fR being \f(CW\*(C`\f(CIbnf\f(CW.cyc\*(C'\fR).
.PP
\&\f(CW\*(C`v_2\*(C'\fR gives on the integral basis the components of \f(CW\*(C`\f(CIalpha\f(CW\*(C'\fR such that
\&\f(CW\*(C`x = \f(CIalpha\f(CW\f(CIprod\f(CW_ig_i^{c_i}\*(C'\fR. In particular, \f(CW\*(C`x\*(C'\fR is principal if and only if
\&\f(CW\*(C`v_1\*(C'\fR is equal to the zero vector. In the latter case, \f(CW\*(C`x = \f(CIalpha\f(CW\f(CB\f(CBZ\f(CB\f(CW_K\*(C'\fR where
\&\f(CW\*(C`\f(CIalpha\f(CW\*(C'\fR is given by \f(CW\*(C`v_2\*(C'\fR. Note that if \f(CW\*(C`\f(CIalpha\f(CW\*(C'\fR is too large to be given, a
warning message will be printed and \f(CW\*(C`v_2\*(C'\fR will be set equal to the empty
vector.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR, outputs only \f(CW\*(C`v_1\*(C'\fR, which is much easier to compute.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 2\*(C'\fR, does as if \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR were \f(CW0\fR, but doubles the precision until a
result is obtained.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 3\*(C'\fR, as in the default behaviour (\f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR), but doubles the precision
until a result is obtained.
.PP
The user is warned that these two last setting may induce \eemph{very} lengthy
computations.
.PP
The library syntax is \fBisprincipalall\fR\f(CW\*(C`(\f(CIbnf\f(CW,x,\f(CIflag\f(CW)\*(C'\fR.
.IX Xref "isprincipalall"
.ie n .SS "bnfisunit""(\f(CIbnf\fP,x)"""
.el .SS "bnfisunit\f(CW(\fP\f(CIbnf\fP\f(CW,x)\fP"
.IX Xref "bnfisunit"
.IX Subsection "bnfisunit(bnf,x)"
\&\f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR being the number field data
output by \f(CW\*(C`bnfinit\*(C'\fR and \f(CW\*(C`x\*(C'\fR being an algebraic number (type integer,
rational or polmod), this outputs the decomposition of \f(CW\*(C`x\*(C'\fR on the fundamental
units and the roots of unity if \f(CW\*(C`x\*(C'\fR is a unit, the empty vector otherwise.
More precisely, if \f(CW\*(C`u_1\*(C'\fR,...,\f(CW\*(C`u_r\*(C'\fR are the fundamental units, and \f(CW\*(C`\f(CIzeta\f(CW\*(C'\fR
is the generator of the group of roots of unity (\f(CW\*(C`bnf.tu\*(C'\fR), the output is
a vector \f(CW\*(C`[x_1,...,x_r,x_{r+1}]\*(C'\fR such that \f(CW\*(C`x = u_1^{x_1}...
u_r^{x_r}.\f(CIzeta\f(CW^{x_{r+1}}\*(C'\fR. The \f(CW\*(C`x_i\*(C'\fR are integers for \f(CW\*(C`i <= r\*(C'\fR and is an
integer modulo the order of \f(CW\*(C`\f(CIzeta\f(CW\*(C'\fR for \f(CW\*(C`i = r+1\*(C'\fR.
.PP
The library syntax is \fBisunit\fR\f(CW\*(C`(\f(CIbnf\f(CW,x)\*(C'\fR.
.IX Xref "isunit"
.ie n .SS "bnfmake""(\f(CIsbnf\fP)"""
.el .SS "bnfmake\f(CW(\fP\f(CIsbnf\fP\f(CW)\fP"
.IX Xref "bnfmake"
.IX Subsection "bnfmake(sbnf)"
\&\fIsbnf\fR being a ``small \f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR''
as output by \f(CW\*(C`bnfinit\*(C'\fR\f(CW\*(C`(x,3)\*(C'\fR, computes the complete \f(CW\*(C`bnfinit\*(C'\fR
information. The result is \eemph{not} identical to what \f(CW\*(C`bnfinit\*(C'\fR would
yield, but is functionally identical. The execution time is very small
compared to a complete \f(CW\*(C`bnfinit\*(C'\fR. Note that if the default precision in
\&\f(CW\*(C`gp\*(C'\fR (or \f(CW\*(C`\f(CIprec\f(CW\*(C'\fR in library mode) is greater than the precision of the
roots \f(CW\*(C`\f(CIsbnf\f(CW[5]\*(C'\fR, these are recomputed so as to get a result with
greater accuracy.
.PP
Note that the member functions are \eemph{not} available for \fIsbnf\fR, you
have to use \f(CW\*(C`bnfmake\*(C'\fR explicitly first.
.PP
The library syntax is \fBmakebigbnf\fR\f(CW\*(C`(\f(CIsbnf\f(CW,\f(CIprec\f(CW)\*(C'\fR, where \f(CW\*(C`\f(CIprec\f(CW\*(C'\fR is a
C long integer.
.IX Xref "makebigbnf"
.ie n .SS "bnfnarrow""(\f(CIbnf\fP)"""
.el .SS "bnfnarrow\f(CW(\fP\f(CIbnf\fP\f(CW)\fP"
.IX Xref "bnfnarrow"
.IX Subsection "bnfnarrow(bnf)"
\&\f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR being as output by
\&\f(CW\*(C`bnfinit\*(C'\fR, computes the narrow class group of \f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR. The output is
a 3\-component row vector \f(CW\*(C`v\*(C'\fR analogous to the corresponding class group
component \f(CW\*(C`\f(CIbnf\f(CW.clgp\*(C'\fR (\f(CW\*(C`\f(CIbnf\f(CW[8][1]\*(C'\fR): the first component
is the narrow class number \f(CW\*(C`v.no\*(C'\fR, the second component is a vector
containing the \s-1SNF\s0 cyclic components \f(CW\*(C`v.cyc\*(C'\fR of
the narrow class group, and the third is a vector giving the generators of
the corresponding \f(CW\*(C`v.gen\*(C'\fR cyclic groups. Note that this function is a
special case of \f(CW\*(C`bnrinit\*(C'\fR.
.IX Xref "Smith normal form"
.PP
The library syntax is \fBbuchnarrow\fR\f(CW\*(C`(\f(CIbnf\f(CW)\*(C'\fR.
.IX Xref "buchnarrow"
.ie n .SS "bnfsignunit""(\f(CIbnf\fP)"""
.el .SS "bnfsignunit\f(CW(\fP\f(CIbnf\fP\f(CW)\fP"
.IX Xref "bnfsignunit"
.IX Subsection "bnfsignunit(bnf)"
\&\f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR being as output by
\&\f(CW\*(C`bnfinit\*(C'\fR, this computes an \f(CW\*(C`r_1 x (r_1+r_2\-1)\*(C'\fR matrix having \f(CW\*(C`\f(CI+\-\f(CW1\*(C'\fR
components, giving the signs of the real embeddings of the fundamental units.
The following functions compute generators for the totally positive units:
.PP
.Vb 3
\&  /* exponents of totally positive units generators on bnf.tufu */
\&  tpuexpo(bnf)=
\&  { local(S,d,K);
\&
\&    S = bnfsignunit(bnf); d = matsize(S);
\&    S = matrix(d[1],d[2], i,j, if (S[i,j] < 0, 1,0));
\&    S = concat(vectorv(d[1],i,1), S);   \e\e add sign(\-1)
\&    K = lift(matker(S * Mod(1,2)));
\&    if (K, mathnfmodid(K, 2), 2*matid(d[1]))
\&  }
\&
\&  /* totally positive units */
\&  tpu(bnf)=
\&  { local(vu = bnf.tufu, ex = tpuexpo(bnf));
\&
\&    vector(#ex\-1, i, factorback(vu, ex[,i+1]))  \e\e ex[,1] is 1
\&  }
.Ve
.PP
The library syntax is \fBsignunits\fR\f(CW\*(C`(\f(CIbnf\f(CW)\*(C'\fR.
.IX Xref "signunits"
.ie n .SS "bnfreg""(\f(CIbnf\fP)"""
.el .SS "bnfreg\f(CW(\fP\f(CIbnf\fP\f(CW)\fP"
.IX Xref "bnfreg"
.IX Subsection "bnfreg(bnf)"
\&\f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR being as output by
\&\f(CW\*(C`bnfinit\*(C'\fR, computes its regulator.
.PP
The library syntax is \fBregulator\fR\f(CW\*(C`(\f(CIbnf\f(CW,\f(CItech\f(CW,\f(CIprec\f(CW)\*(C'\fR, where \fItech\fR is as in
\&\f(CW\*(C`bnfinit\*(C'\fR.
.IX Xref "regulator"
.ie n .SS "bnfsunit""(\f(CIbnf\fP,S)"""
.el .SS "bnfsunit\f(CW(\fP\f(CIbnf\fP\f(CW,S)\fP"
.IX Xref "bnfsunit"
.IX Subsection "bnfsunit(bnf,S)"
computes the fundamental \f(CW\*(C`S\*(C'\fR\-units of the
number field \f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR (output by \f(CW\*(C`bnfinit\*(C'\fR), where \f(CW\*(C`S\*(C'\fR is a list of
prime ideals (output by \f(CW\*(C`idealprimedec\*(C'\fR). The output is a vector \f(CW\*(C`v\*(C'\fR with
6 components.
.PP
\&\f(CW\*(C`v[1]\*(C'\fR gives a minimal system of (integral) generators of the \f(CW\*(C`S\*(C'\fR\-unit group
modulo the unit group.
.PP
\&\f(CW\*(C`v[2]\*(C'\fR contains technical data needed by \f(CW\*(C`bnfissunit\*(C'\fR.
.PP
\&\f(CW\*(C`v[3]\*(C'\fR is an empty vector (used to give the logarithmic embeddings of the
generators in \f(CW\*(C`v[1]\*(C'\fR in version 2.0.16).
.PP
\&\f(CW\*(C`v[4]\*(C'\fR is the \f(CW\*(C`S\*(C'\fR\-regulator (this is the product of the regulator, the
determinant of \f(CW\*(C`v[2]\*(C'\fR and the natural logarithms of the norms of the ideals
in \f(CW\*(C`S\*(C'\fR).
.PP
\&\f(CW\*(C`v[5]\*(C'\fR gives the \f(CW\*(C`S\*(C'\fR\-class group structure, in the usual format
(a row vector whose three components give in order the \f(CW\*(C`S\*(C'\fR\-class number,
the cyclic components and the generators).
.PP
\&\f(CW\*(C`v[6]\*(C'\fR is a copy of \f(CW\*(C`S\*(C'\fR.
.PP
The library syntax is \fBbnfsunit\fR\f(CW\*(C`(\f(CIbnf\f(CW,S,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "bnfsunit"
.ie n .SS "bnfunit""(\f(CIbnf\fP)"""
.el .SS "bnfunit\f(CW(\fP\f(CIbnf\fP\f(CW)\fP"
.IX Xref "bnfunit"
.IX Subsection "bnfunit(bnf)"
\&\f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR being as output by
\&\f(CW\*(C`bnfinit\*(C'\fR, outputs the vector of fundamental units of the number field.
.PP
This function is mostly useless, since it will only succeed if
\&\fIbnf\fR contains the units, in which case \f(CW\*(C`bnf.fu\*(C'\fR is recommanded
instead, or \fIbnf\fR was produced with \f(CW\*(C`bnfinit(,,2)\*(C'\fR, which is itself
deprecated.
.PP
The library syntax is \fBbuchfu\fR\f(CW\*(C`(\f(CIbnf\f(CW)\*(C'\fR.
.IX Xref "buchfu"
.ie n .SS "bnrL1""(\f(CIbnr\fP,{\f(CIsubgroup\fP},{\f(CIflag\fP = 0})"""
.el .SS "bnrL1\f(CW(\fP\f(CIbnr\fP\f(CW,{\fP\f(CIsubgroup\fP\f(CW},{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "bnrL1"
.IX Subsection "bnrL1(bnr,{subgroup},{flag = 0})"
\&\fIbnr\fR being
the number field data which is output by \f(CW\*(C`bnrinit(,,1)\*(C'\fR and
\&\fIsubgroup\fR being a square matrix defining a congruence subgroup of the
ray class group corresponding to \fIbnr\fR (the trivial congruence subgroup
if omitted), returns for each character \f(CW\*(C`\f(CIchi\f(CW\*(C'\fR of the ray class group
which is trivial on this subgroup, the value at \f(CW\*(C`s = 1\*(C'\fR (or \f(CW\*(C`s = 0\*(C'\fR) of the
abelian \f(CW\*(C`L\*(C'\fR\-function associated to \f(CW\*(C`\f(CIchi\f(CW\*(C'\fR. For the value at \f(CW\*(C`s = 0\*(C'\fR, the
function returns in fact for each character \f(CW\*(C`\f(CIchi\f(CW\*(C'\fR a vector \f(CW\*(C`[r_\f(CIchi\f(CW ,
c_\f(CIchi\f(CW]\*(C'\fR where \f(CW\*(C`r_\f(CIchi\f(CW\*(C'\fR is the order of \f(CW\*(C`L(s, \f(CIchi\f(CW)\*(C'\fR at \f(CW\*(C`s = 0\*(C'\fR and \f(CW\*(C`c_\f(CIchi\f(CW\*(C'\fR
the first non-zero term in the expansion of \f(CW\*(C`L(s, \f(CIchi\f(CW)\*(C'\fR at \f(CW\*(C`s = 0\*(C'\fR; in other
words
.IX Xref "character"
.PP
  \f(CW\*(C`L(s, \f(CIchi\f(CW) = c_\f(CIchi\f(CW.s^{r_\f(CIchi\f(CW} + O(s^{r_\f(CIchi\f(CW + 1})\*(C'\fR
.PP
near \f(CW0\fR. \fIflag\fR is optional, default value is 0; its binary digits
mean 1: compute at \f(CW\*(C`s = 1\*(C'\fR if set to 1 or \f(CW\*(C`s = 0\*(C'\fR if set to 0, 2: compute the
primitive \f(CW\*(C`L\*(C'\fR\-functions associated to \f(CW\*(C`\f(CIchi\f(CW\*(C'\fR if set to 0 or the \f(CW\*(C`L\*(C'\fR\-function
with Euler factors at prime ideals dividing the modulus of \fIbnr\fR removed
if set to 1 (this is the so-called \f(CW\*(C`L_S(s, \f(CIchi\f(CW)\*(C'\fR function where \f(CW\*(C`S\*(C'\fR is the
set of infinite places of the number field together with the finite prime
ideals dividing the modulus of \fIbnr\fR, see the example below), 3: returns
also the character. Example:
.PP
.Vb 3
\&  bnf = bnfinit(x^2 \- 229);
\&  bnr = bnrinit(bnf,1,1);
\&  bnrL1(bnr)
.Ve
.PP
returns the order and the first non-zero term of the abelian
\&\f(CW\*(C`L\*(C'\fR\-functions \f(CW\*(C`L(s, \f(CIchi\f(CW)\*(C'\fR at \f(CW\*(C`s = 0\*(C'\fR where \f(CW\*(C`\f(CIchi\f(CW\*(C'\fR runs through the
characters of the class group of \f(CW\*(C`\f(CB\f(CBQ\f(CB\f(CW( \f(CIsqrt\f(CW {229})\*(C'\fR. Then
.PP
.Vb 2
\&  bnr2 = bnrinit(bnf,2,1);
\&  bnrL1(bnr2,,2)
.Ve
.PP
returns the order and the first non-zero terms of the abelian
\&\f(CW\*(C`L\*(C'\fR\-functions \f(CW\*(C`L_S(s, \f(CIchi\f(CW)\*(C'\fR at \f(CW\*(C`s = 0\*(C'\fR where \f(CW\*(C`\f(CIchi\f(CW\*(C'\fR runs through the
characters of the class group of \f(CW\*(C`\f(CB\f(CBQ\f(CB\f(CW( \f(CIsqrt\f(CW {229})\*(C'\fR and \f(CW\*(C`S\*(C'\fR is the set
of infinite places of \f(CW\*(C`\f(CB\f(CBQ\f(CB\f(CW( \f(CIsqrt\f(CW {229})\*(C'\fR together with the finite prime
\&\f(CW2\fR. Note that the ray class group modulo \f(CW2\fR is in fact the class
group, so \f(CW\*(C`bnrL1(bnr2,0)\*(C'\fR returns exactly the same answer as
\&\f(CW\*(C`bnrL1(bnr,0)\*(C'\fR.
.PP
The library syntax is \fBbnrL1\fR\f(CW\*(C`(\f(CIbnr\f(CW,\f(CIsubgroup\f(CW,\f(CIflag\f(CW,\f(CIprec\f(CW)\*(C'\fR, where an omitted
\&\fIsubgroup\fR is coded as \f(CW\*(C`NULL\*(C'\fR.
.IX Xref "bnrL1"
.ie n .SS "bnrclass""(\f(CIbnf\fP,\f(CIideal\fP,{\f(CIflag\fP = 0})"""
.el .SS "bnrclass\f(CW(\fP\f(CIbnf\fP\f(CW,\fP\f(CIideal\fP\f(CW,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "bnrclass"
.IX Subsection "bnrclass(bnf,ideal,{flag = 0})"
\&\eemph{this function
is \s-1DEPRECATED,\s0 use \f(CW\*(C`bnrinit\*(C'\fR}.
.PP
\&\f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR being as output by \f(CW\*(C`bnfinit\*(C'\fR (the units are mandatory unless
the ideal is trivial), and \fIideal\fR being a modulus, computes the ray
class group of the number field for the modulus \fIideal\fR, as a
finite abelian group.
.PP
The library syntax is \fBbnrclass0\fR\f(CW\*(C`(\f(CIbnf\f(CW,\f(CIideal\f(CW,\f(CIflag\f(CW)\*(C'\fR.
.IX Xref "bnrclass0"
.ie n .SS "bnrclassno""(\f(CIbnf\fP,I)"""
.el .SS "bnrclassno\f(CW(\fP\f(CIbnf\fP\f(CW,I)\fP"
.IX Xref "bnrclassno"
.IX Subsection "bnrclassno(bnf,I)"
\&\f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR being as output by
\&\f(CW\*(C`bnfinit\*(C'\fR (units are mandatory unless the ideal is trivial), and \f(CW\*(C`I\*(C'\fR
being a modulus, computes the ray class number of the number field for the
modulus \f(CW\*(C`I\*(C'\fR. This is faster than \f(CW\*(C`bnrinit\*(C'\fR and should be used if only the
ray class number is desired. See \f(CW\*(C`bnrclassnolist\*(C'\fR if you need ray class
numbers for all moduli less than some bound.
.IX Xref "bnrclassnolist"
.PP
The library syntax is \fBbnrclassno\fR\f(CW\*(C`(\f(CIbnf\f(CW,I)\*(C'\fR.
.IX Xref "bnrclassno"
.ie n .SS "bnrclassnolist""(\f(CIbnf\fP,\f(CIlist\fP)"""
.el .SS "bnrclassnolist\f(CW(\fP\f(CIbnf\fP\f(CW,\fP\f(CIlist\fP\f(CW)\fP"
.IX Xref "bnrclassnolist"
.IX Subsection "bnrclassnolist(bnf,list)"
\&\f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR being as
output by \f(CW\*(C`bnfinit\*(C'\fR, and \fIlist\fR being a list of moduli (with units) as
output by \f(CW\*(C`ideallist\*(C'\fR or \f(CW\*(C`ideallistarch\*(C'\fR, outputs the list of the
class numbers of the corresponding ray class groups. To compute a single
class number, \f(CW\*(C`bnrclassno\*(C'\fR is more efficient.
.IX Xref "bnrclassno"
.PP
.Vb 7
\&  ? bnf = bnfinit(x^2 \- 2);
\&  ? L = ideallist(bnf, 100, 2);
\&  ? H = bnrclassnolist(bnf, L);
\&  ? H[98]
\&  %4 = [1, 3, 1]
\&  ? l = L[1][98]; ids = vector(#l, i, l[i].mod[1])
\&  %5 = [[98, 88; 0, 1], [14, 0; 0, 7], [98, 10; 0, 1]]
.Ve
.PP
The weird \f(CW\*(C`l[i].mod[1]\*(C'\fR, is the first component of \f(CW\*(C`l[i].mod\*(C'\fR, i.e.
the finite part of the conductor. (This is cosmetic: since by construction
the archimedean part is trivial, I do not want to see it). This tells us that
the ray class groups modulo the ideals of norm 98 (printed as \f(CW%5\fR) have
respectively order \f(CW1\fR, \f(CW3\fR and \f(CW1\fR. Indeed, we may check directly :
.PP
.Vb 2
\&  ? bnrclassno(bnf, ids[2])
\&  %6 = 3
.Ve
.PP
The library syntax is \fBbnrclassnolist\fR\f(CW\*(C`(\f(CIbnf\f(CW,\f(CIlist\f(CW)\*(C'\fR.
.IX Xref "bnrclassnolist"
.ie n .SS "bnrconductor""(a_1,{a_2},{a_3}, {\f(CIflag\fP = 0})"""
.el .SS "bnrconductor\f(CW(a_1,{a_2},{a_3}, {\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "bnrconductor"
.IX Subsection "bnrconductor(a_1,{a_2},{a_3}, {flag = 0})"
conductor \f(CW\*(C`f\*(C'\fR of
the subfield of a ray class field as defined by \f(CW\*(C`[a_1,a_2,a_3]\*(C'\fR (see
\&\f(CW\*(C`bnr\*(C'\fR at the beginning of this section).
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR, returns \f(CW\*(C`f\*(C'\fR.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR, returns \f(CW\*(C`[f, Cl_f, H]\*(C'\fR, where \f(CW\*(C`Cl_f\*(C'\fR is the ray class group
modulo \f(CW\*(C`f\*(C'\fR, as a finite abelian group; finally \f(CW\*(C`H\*(C'\fR is the subgroup of \f(CW\*(C`Cl_f\*(C'\fR
defining the extension.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 2\*(C'\fR, returns \f(CW\*(C`[f, \f(CIbnr\f(CW(f), H]\*(C'\fR, as above except \f(CW\*(C`Cl_f\*(C'\fR is
replaced by a \f(CW\*(C`bnr\*(C'\fR structure, as output by \f(CW\*(C`bnrinit(,f,1)\*(C'\fR.
.IX Xref "bnrinit"
.PP
The library syntax is \fBconductor\fR\f(CW\*(C`(\f(CIbnr\f(CW, \f(CIsubgroup\f(CW, \f(CIflag\f(CW)\*(C'\fR, where an omitted subgroup
(trivial subgroup, i.e. ray class field) is input as \f(CW\*(C`NULL\*(C'\fR, and \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR is
a C long.
.IX Xref "conductor"
.ie n .SS "bnrconductorofchar""(\f(CIbnr\fP,\f(CIchi\fP)"""
.el .SS "bnrconductorofchar\f(CW(\fP\f(CIbnr\fP\f(CW,\fP\f(CIchi\fP\f(CW)\fP"
.IX Xref "bnrconductorofchar"
.IX Subsection "bnrconductorofchar(bnr,chi)"
\&\fIbnr\fR being a big
ray number field as output by \f(CW\*(C`bnrinit\*(C'\fR, and \fIchi\fR being a row vector
representing a character as expressed on the generators of the ray
class group, gives the conductor of this character as a modulus.
.IX Xref "character"
.PP
The library syntax is \fBbnrconductorofchar\fR\f(CW\*(C`(\f(CIbnr\f(CW,\f(CIchi\f(CW)\*(C'\fR.
.IX Xref "bnrconductorofchar"
.ie n .SS "bnrdisc""(a1,{a2},{a3},{\f(CIflag\fP = 0})"""
.el .SS "bnrdisc\f(CW(a1,{a2},{a3},{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "bnrdisc"
.IX Subsection "bnrdisc(a1,{a2},{a3},{flag = 0})"
\&\f(CW\*(C`a1\*(C'\fR, \f(CW\*(C`a2\*(C'\fR, \f(CW\*(C`a3\*(C'\fR
defining a big ray number field \f(CW\*(C`L\*(C'\fR over a ground field \f(CW\*(C`K\*(C'\fR (see \f(CW\*(C`bnr\*(C'\fR
at the beginning of this section for the
meaning of \f(CW\*(C`a1\*(C'\fR, \f(CW\*(C`a2\*(C'\fR, \f(CW\*(C`a3\*(C'\fR), outputs a 3\-component row vector \f(CW\*(C`[N,R_1,D]\*(C'\fR,
where \f(CW\*(C`N\*(C'\fR is the (absolute) degree of \f(CW\*(C`L\*(C'\fR, \f(CW\*(C`R_1\*(C'\fR the number of real places of
\&\f(CW\*(C`L\*(C'\fR, and \f(CW\*(C`D\*(C'\fR the discriminant of \f(CW\*(C`L/\f(CB\f(CBQ\f(CB\f(CW\*(C'\fR, including sign (if \f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR).
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR, as above but outputs relative data. \f(CW\*(C`N\*(C'\fR is now the degree of
\&\f(CW\*(C`L/K\*(C'\fR, \f(CW\*(C`R_1\*(C'\fR is the number of real places of \f(CW\*(C`K\*(C'\fR unramified in \f(CW\*(C`L\*(C'\fR (so that
the number of real places of \f(CW\*(C`L\*(C'\fR is equal to \f(CW\*(C`R_1\*(C'\fR times the relative degree
\&\f(CW\*(C`N\*(C'\fR), and \f(CW\*(C`D\*(C'\fR is the relative discriminant ideal of \f(CW\*(C`L/K\*(C'\fR.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 2\*(C'\fR, as the default case, except that if the modulus is not the
exact conductor corresponding to the \f(CW\*(C`L\*(C'\fR, no data is computed and the result
is \f(CW0\fR.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 3\*(C'\fR, as case 2, but output relative data.
.PP
The library syntax is \fBbnrdisc0\fR\f(CW\*(C`(a1,a2,a3,\f(CIflag\f(CW)\*(C'\fR.
.IX Xref "bnrdisc0"
.ie n .SS "bnrdisclist""(\f(CIbnf\fP,\f(CIbound\fP,{\f(CIarch\fP})"""
.el .SS "bnrdisclist\f(CW(\fP\f(CIbnf\fP\f(CW,\fP\f(CIbound\fP\f(CW,{\fP\f(CIarch\fP\f(CW})\fP"
.IX Xref "bnrdisclist"
.IX Subsection "bnrdisclist(bnf,bound,{arch})"
\&\f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR being as output by \f(CW\*(C`bnfinit\*(C'\fR (with units), computes a list of
discriminants of Abelian extensions of the number field by increasing modulus
norm up to bound \fIbound\fR. The ramified Archimedean places are given by
\&\fIarch\fR; all possible values are taken if \fIarch\fR is omitted.
.PP
The alternative syntax \f(CW\*(C`bnrdisclist(\f(CIbnf\f(CW,\f(CIlist\f(CW)\*(C'\fR is
supported, where \fIlist\fR is as output by \f(CW\*(C`ideallist\*(C'\fR or
\&\f(CW\*(C`ideallistarch\*(C'\fR (with units), in which case \fIarch\fR is disregarded.
.PP
The output \f(CW\*(C`v\*(C'\fR is a vector of vectors, where \f(CW\*(C`v[i][j]\*(C'\fR is understood to be in
fact \f(CW\*(C`V[2^{15}(i\-1)+j]\*(C'\fR of a unique big vector \f(CW\*(C`V\*(C'\fR. (This akward scheme
allows for larger vectors than could be otherwise represented.)
.PP
\&\f(CW\*(C`V[k]\*(C'\fR is itself a vector \f(CW\*(C`W\*(C'\fR, whose length is the number of ideals of norm
\&\f(CW\*(C`k\*(C'\fR. We consider first the case where \fIarch\fR was specified. Each
component of \f(CW\*(C`W\*(C'\fR corresponds to an ideal \f(CW\*(C`m\*(C'\fR of norm \f(CW\*(C`k\*(C'\fR, and
gives invariants associated to the ray class field \f(CW\*(C`L\*(C'\fR of \f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR of
conductor \f(CW\*(C`[m, \f(CIarch\f(CW]\*(C'\fR. Namely, each contains a vector \f(CW\*(C`[m,d,r,D]\*(C'\fR with
the following meaning: \f(CW\*(C`m\*(C'\fR is the prime ideal factorization of the modulus,
\&\f(CW\*(C`d = [L:\f(CB\f(CBQ\f(CB\f(CW]\*(C'\fR is the absolute degree of \f(CW\*(C`L\*(C'\fR, \f(CW\*(C`r\*(C'\fR is the number of real places
of \f(CW\*(C`L\*(C'\fR, and \f(CW\*(C`D\*(C'\fR is the factorization of its absolute discriminant. We set \f(CW\*(C`d
= r = D = 0\*(C'\fR if \f(CW\*(C`m\*(C'\fR is not the finite part of a conductor.
.PP
If \fIarch\fR was omitted, all \f(CW\*(C`t = 2^{r_1}\*(C'\fR possible values are taken and a
component of \f(CW\*(C`W\*(C'\fR has the form \f(CW\*(C`[m, [[d_1,r_1,D_1],..., [d_t,r_t,D_t]]]\*(C'\fR,
where \f(CW\*(C`m\*(C'\fR is the finite part of the conductor as above, and
\&\f(CW\*(C`[d_i,r_i,D_i]\*(C'\fR are the invariants of the ray class field of conductor
\&\f(CW\*(C`[m,v_i]\*(C'\fR, where \f(CW\*(C`v_i\*(C'\fR is the \f(CW\*(C`i\*(C'\fR\-th archimedean component, ordered by
inverse lexicographic order; so \f(CW\*(C`v_1 = [0,...,0]\*(C'\fR, \f(CW\*(C`v_2 = [1,0...,0]\*(C'\fR,
etc. Again, we set \f(CW\*(C`d_i = r_i = D_i = 0\*(C'\fR if \f(CW\*(C`[m,v_i]\*(C'\fR is not a conductor.
.PP
Finally, each prime ideal \f(CW\*(C`pr = [p,\f(CIalpha\f(CW,e,f,\f(CIbeta\f(CW]\*(C'\fR in the prime
factorization \f(CW\*(C`m\*(C'\fR is coded as the integer \f(CW\*(C`p.n^2+(f\-1).n+(j\-1)\*(C'\fR,
where \f(CW\*(C`n\*(C'\fR is the degree of the base field and \f(CW\*(C`j\*(C'\fR is such that
.PP
\&\f(CW\*(C`pr = idealprimedec(\f(CInf\f(CW,p)[j]\*(C'\fR.
.PP
\&\f(CW\*(C`m\*(C'\fR can be decoded using \f(CW\*(C`bnfdecodemodule\*(C'\fR.
.IX Xref "bnfdecodemodule"
.PP
Note that to compute such data for a single field, either \f(CW\*(C`bnrclassno\*(C'\fR
or \f(CW\*(C`bnrdisc\*(C'\fR is more efficient.
.IX Xref "bnrclassno bnrdisc"
.PP
The library syntax is \fBbnrdisclist0\fR\f(CW\*(C`(bnf,\f(CIbound\f(CW,\f(CIarch\f(CW)\*(C'\fR.
.IX Xref "bnrdisclist0"
.ie n .SS "bnrinit""(\f(CIbnf\fP,f,{\f(CIflag\fP = 0})"""
.el .SS "bnrinit\f(CW(\fP\f(CIbnf\fP\f(CW,f,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "bnrinit"
.IX Subsection "bnrinit(bnf,f,{flag = 0})"
\&\f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR is as
output by \f(CW\*(C`bnfinit\*(C'\fR, \f(CW\*(C`f\*(C'\fR is a modulus, initializes data linked to
the ray class group structure corresponding to this module, a so-called
\&\fIbnr\fR structure. The following member functions are available
on the result: \f(CW\*(C`.bnf\*(C'\fR is the underlying \fIbnf\fR,
\&\f(CW\*(C`.mod\*(C'\fR the modulus, \f(CW\*(C`.bid\*(C'\fR the \fIbid\fR structure associated to the
modulus; finally, \f(CW\*(C`.clgp\*(C'\fR, \f(CW\*(C`.no\*(C'\fR, \f(CW\*(C`.cyc\*(C'\fR, \f(CW\*(C`clgp\*(C'\fR refer to the
ray class group (as a finite abelian group), its cardinality, its elementary
divisors, its generators.
.PP
The last group of functions are different from the members of the underlying
\&\fIbnf\fR, which refer to the class group; use \f(CW\*(C`\f(CIbnr\f(CW.bnf.\f(CIxxx\f(CW\*(C'\fR
to access these, e.g. \f(CW\*(C`\f(CIbnr\f(CW.bnf.cyc\*(C'\fR to get the cyclic decomposition
of the class group.
.PP
They are also different from the members of the underlying \fIbid\fR, which
refer to \f(CW\*(C`(\eO_K/f)^*\*(C'\fR; use \f(CW\*(C`\f(CIbnr\f(CW.bid.\f(CIxxx\f(CW\*(C'\fR to access these,
e.g. \f(CW\*(C`\f(CIbnr\f(CW.bid.no\*(C'\fR to get \f(CW\*(C`\f(CIphi\f(CW(f)\*(C'\fR.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR (default), the generators of the ray class group are not computed,
which saves time. Hence \f(CW\*(C`\f(CIbnr\f(CW.gen\*(C'\fR would produce an error.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR, as the default, except that generators are computed.
.PP
The library syntax is \fBbnrinit0\fR\f(CW\*(C`(\f(CIbnf\f(CW,f,\f(CIflag\f(CW)\*(C'\fR.
.IX Xref "bnrinit0"
.ie n .SS "bnrisconductor""(a1,{a2},{a3})"""
.el .SS "bnrisconductor\f(CW(a1,{a2},{a3})\fP"
.IX Xref "bnrisconductor"
.IX Subsection "bnrisconductor(a1,{a2},{a3})"
\&\f(CW\*(C`a1\*(C'\fR, \f(CW\*(C`a2\*(C'\fR, \f(CW\*(C`a3\*(C'\fR represent
an extension of the base field, given by class field theory for some modulus
encoded in the parameters. Outputs 1 if this modulus is the conductor, and 0
otherwise. This is slightly faster than \f(CW\*(C`bnrconductor\*(C'\fR.
.PP
The library syntax is \fBbnrisconductor\fR\f(CW\*(C`(a1,a2,a3)\*(C'\fR and the result is a \f(CW\*(C`long\*(C'\fR.
.IX Xref "bnrisconductor"
.ie n .SS "bnrisprincipal""(\f(CIbnr\fP,x,{\f(CIflag\fP = 1})"""
.el .SS "bnrisprincipal\f(CW(\fP\f(CIbnr\fP\f(CW,x,{\fP\f(CIflag\fP\f(CW = 1})\fP"
.IX Xref "bnrisprincipal"
.IX Subsection "bnrisprincipal(bnr,x,{flag = 1})"
\&\fIbnr\fR being the
number field data which is output by \f(CW\*(C`bnrinit\*(C'\fR\f(CW\*(C`(,,1)\*(C'\fR and \f(CW\*(C`x\*(C'\fR being an
ideal in any form, outputs the components of \f(CW\*(C`x\*(C'\fR on the ray class group
generators in a way similar to \f(CW\*(C`bnfisprincipal\*(C'\fR. That is a 2\-component
vector \f(CW\*(C`v\*(C'\fR where \f(CW\*(C`v[1]\*(C'\fR is the vector of components of \f(CW\*(C`x\*(C'\fR on the ray class
group generators, \f(CW\*(C`v[2]\*(C'\fR gives on the integral basis an element \f(CW\*(C`\f(CIalpha\f(CW\*(C'\fR such
that \f(CW\*(C`x = \f(CIalpha\f(CW\f(CIprod\f(CW_ig_i^{x_i}\*(C'\fR.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR, outputs only \f(CW\*(C`v_1\*(C'\fR. In that case, \fIbnr\fR need not contain the
ray class group generators, i.e. it may be created with \f(CW\*(C`bnrinit\*(C'\fR\f(CW\*(C`(,,0)\*(C'\fR
.PP
The library syntax is \fBbnrisprincipal\fR\f(CW\*(C`(\f(CIbnr\f(CW,x,\f(CIflag\f(CW)\*(C'\fR.
.IX Xref "bnrisprincipal"
.ie n .SS "bnrrootnumber""(\f(CIbnr\fP,\f(CIchi\fP,{\f(CIflag\fP = 0})"""
.el .SS "bnrrootnumber\f(CW(\fP\f(CIbnr\fP\f(CW,\fP\f(CIchi\fP\f(CW,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "bnrrootnumber"
.IX Subsection "bnrrootnumber(bnr,chi,{flag = 0})"
if \f(CW\*(C`\f(CIchi\f(CW = \f(CIchi\f(CW\*(C'\fR is a (not necessarily primitive)
character over \fIbnr\fR, let
\&\f(CW\*(C`L(s,\f(CIchi\f(CW) = \f(CIsum\f(CW_{id} \f(CIchi\f(CW(id) N(id)^{\-s}\*(C'\fR be the associated
Artin L\-function. Returns the so-called Artin root number, i.e. the
complex number \f(CW\*(C`W(\f(CIchi\f(CW)\*(C'\fR of modulus 1 such that
.IX Xref "character Artin L-function Artin root number"
.PP
  \f(CW\*(C`\f(CILambda\f(CW(1\-s,\f(CIchi\f(CW) = W(\f(CIchi\f(CW) \f(CILambda\f(CW(s,\eoverline{\f(CIchi\f(CW})\*(C'\fR
.PP
where \f(CW\*(C`\f(CILambda\f(CW(s,\f(CIchi\f(CW) = A(\f(CIchi\f(CW)^{s/2}\f(CIgamma\f(CW_\f(CIchi\f(CW(s) L(s,\f(CIchi\f(CW)\*(C'\fR is
the enlarged L\-function associated to \f(CW\*(C`L\*(C'\fR.
.PP
The generators of the ray class group are needed, and you can set \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR if
the character is known to be primitive. Example:
.PP
.Vb 3
\&  bnf = bnfinit(x^2 \- 145);
\&  bnr = bnrinit(bnf,7,1);
\&  bnrrootnumber(bnr, [5])
.Ve
.PP
returns the root number of the character \f(CW\*(C`\f(CIchi\f(CW\*(C'\fR of \f(CW\*(C`\eCl_7(\f(CB\f(CBQ\f(CB\f(CW( \f(CIsqrt\f(CW {145}))\*(C'\fR
such that \f(CW\*(C`\f(CIchi\f(CW(g) = \f(CIzeta\f(CW^5\*(C'\fR, where \f(CW\*(C`g\*(C'\fR is the generator of the ray-class
field and \f(CW\*(C`\f(CIzeta\f(CW = e^{2i\f(CIPi\f(CW/N}\*(C'\fR where \f(CW\*(C`N\*(C'\fR is the order of \f(CW\*(C`g\*(C'\fR (\f(CW\*(C`N = 12\*(C'\fR as
\&\f(CW\*(C`bnr.cyc\*(C'\fR readily tells us).
.PP
The library syntax is \fBbnrrootnumber\fR\f(CW\*(C`(\f(CIbnf\f(CW,\f(CIchi\f(CW,\f(CIflag\f(CW)\*(C'\fR
.IX Xref "bnrrootnumber"
.ie n .SS "bnrstark""{(\f(CIbnr\fP,{\f(CIsubgroup\fP})}"""
.el .SS "bnrstark\f(CW{(\fP\f(CIbnr\fP\f(CW,{\fP\f(CIsubgroup\fP\f(CW})}\fP"
.IX Subsection "bnrstark{(bnr,{subgroup})}"
\&\fIbnr\fR
being as output by \f(CW\*(C`bnrinit(,,1)\*(C'\fR, finds a relative equation for the
class field corresponding to the modulus in \fIbnr\fR and the given
congruence subgroup (as usual, omit \f(CW\*(C`\f(CIsubgroup\f(CW\*(C'\fR if you want the whole
ray class group).
.PP
The routine uses Stark units and needs to find a suitable auxilliary
conductor, which may not exist when the class field is not cyclic over the
base. In this case \f(CW\*(C`bnrstark\*(C'\fR is allowed to return a vector of
polynomials defining \eemph{independent} relative extensions, whose compositum
is the requested class field. It was decided that it was more useful
to keep the extra information thus made available, hence the user has to take
the compositum herself.
.IX Xref "Stark units"
.PP
The main variable of \fIbnr\fR must not be \f(CW\*(C`x\*(C'\fR, and the ground field and the
class field must be totally real. When the base field is \fB\f(BIQ\fB\fR, the vastly
simpler \f(CW\*(C`galoissubcyclo\*(C'\fR is used instead. Here is an example:
.IX Xref "galoissubcyclo"
.PP
.Vb 3
\&  bnf = bnfinit(y^2 \- 3);
\&  bnr = bnrinit(bnf, 5, 1);
\&  pol = bnrstark(bnr)
.Ve
.PP
returns the ray class field of \f(CW\*(C`\f(CB\f(CBQ\f(CB\f(CW( \f(CIsqrt\f(CW {3})\*(C'\fR modulo \f(CW5\fR. Usually, one wants
to apply to the result one of
.PP
.Vb 2
\&  rnfpolredabs(bnf, pol, 16 + 2) \e\e compute a reduced relative polynomial
\&  rnfpolredabs(bnf, pol, 16 + 2) \e\e compute a reduced absolute polynomial
.Ve
.PP
The library syntax is \fBbnrstark\fR\f(CW\*(C`(\f(CIbnr\f(CW,\f(CIsubgroup\f(CW)\*(C'\fR, where an omitted \fIsubgroup\fR
is coded by \f(CW\*(C`NULL\*(C'\fR.
.IX Xref "bnrstark"
.ie n .SS "dirzetak""(\f(CInf\fP,b)"""
.el .SS "dirzetak\f(CW(\fP\f(CInf\fP\f(CW,b)\fP"
.IX Xref "dirzetak"
.IX Subsection "dirzetak(nf,b)"
gives as a vector the first \f(CW\*(C`b\*(C'\fR
coefficients of the Dedekind zeta function of the number field \f(CW\*(C`\f(CInf\f(CW\*(C'\fR
considered as a Dirichlet series.
.IX Xref "Dedekind Dirichlet series"
.PP
The library syntax is \fBdirzetak\fR\f(CW\*(C`(\f(CInf\f(CW,b)\*(C'\fR.
.IX Xref "dirzetak"
.ie n .SS "factornf""(x,t)"""
.el .SS "factornf\f(CW(x,t)\fP"
.IX Xref "factornf"
.IX Subsection "factornf(x,t)"
factorization of the univariate polynomial \f(CW\*(C`x\*(C'\fR
over the number field defined by the (univariate) polynomial \f(CW\*(C`t\*(C'\fR. \f(CW\*(C`x\*(C'\fR may
have coefficients in \fB\f(BIQ\fB\fR or in the number field. The algorithm reduces to
factorization over \fB\f(BIQ\fB\fR (Trager's trick). The direct approach of
\&\f(CW\*(C`nffactor\*(C'\fR, which uses van Hoeij's method in a relative setting, is
in general faster.
.IX Xref "Trager nffactor van Hoeij"
.PP
The main variable of \f(CW\*(C`t\*(C'\fR must be of \eemph{lower} priority than that of \f(CW\*(C`x\*(C'\fR
(see \*(L"Label se:priority\*(R"). However if non-rational number field elements
occur (as polmods or polynomials) as coefficients of \f(CW\*(C`x\*(C'\fR, the variable of
these polmods \eemph{must} be the same as the main variable of \f(CW\*(C`t\*(C'\fR. For
example
.PP
.Vb 6
\&  ? factornf(x^2 + Mod(y, y^2+1), y^2+1);
\&  ? factornf(x^2 + y, y^2+1); \e\e these two are OK
\&  ? factornf(x^2 + Mod(z,z^2+1), y^2+1)
\&    *** factornf: inconsistent data in rnf function.
\&  ? factornf(x^2 + z, y^2+1)
\&    *** factornf: incorrect variable in rnf function.
.Ve
.PP
The library syntax is \fBpolfnf\fR\f(CW\*(C`(x,t)\*(C'\fR.
.IX Xref "polfnf"
.ie n .SS "galoisexport""(\f(CIgal\fP,{\f(CIflag\fP = 0})"""
.el .SS "galoisexport\f(CW(\fP\f(CIgal\fP\f(CW,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "galoisexport"
.IX Subsection "galoisexport(gal,{flag = 0})"
\&\fIgal\fR being be a Galois field as output by \f(CW\*(C`galoisinit\*(C'\fR,
export the underlying permutation group as a string suitable
for (no flags or \f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR) \s-1GAP\s0 or (\f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR) Magma. The following example
compute the index of the underlying abstract group in the \s-1GAP\s0 library:
.IX Xref "galoisinit"
.PP
.Vb 7
\&  ? G = galoisinit(x^6+108);
\&  ? s = galoisexport(G)
\&  %2 = "Group((1, 2, 3)(4, 5, 6), (1, 4)(2, 6)(3, 5))"
\&  ? extern("echo \e"IdGroup("s");\e" | gap \-q")
\&  %3 = [6, 1]
\&  ? galoisidentify(G)
\&  %4 = [6, 1]
.Ve
.PP
This command also accepts subgroups returned by \f(CW\*(C`galoissubgroups\*(C'\fR.
.PP
The library syntax is \fBgaloisexport\fR\f(CW\*(C`(\f(CIgal\f(CW,\f(CIflag\f(CW)\*(C'\fR.
.IX Xref "galoisexport"
.ie n .SS "galoisfixedfield""(\f(CIgal\fP,\f(CIperm\fP,{\f(CIflag\fP = 0},{v = y}))"""
.el .SS "galoisfixedfield\f(CW(\fP\f(CIgal\fP\f(CW,\fP\f(CIperm\fP\f(CW,{\fP\f(CIflag\fP\f(CW = 0},{v = y}))\fP"
.IX Xref "galoisfixedfield"
.IX Subsection "galoisfixedfield(gal,perm,{flag = 0},{v = y}))"
\&\fIgal\fR being be a Galois field as output by \f(CW\*(C`galoisinit\*(C'\fR and
\&\fIperm\fR an element of \f(CW\*(C`\f(CIgal\f(CW.group\*(C'\fR or a vector of such elements,
computes the fixed field of \fIgal\fR by the automorphism defined by the
permutations \fIperm\fR of the roots \f(CW\*(C`\f(CIgal\f(CW.roots\*(C'\fR. \f(CW\*(C`P\*(C'\fR is guaranteed to
be squarefree modulo \f(CW\*(C`\f(CIgal\f(CW.p\*(C'\fR.
.IX Xref "galoisinit"
.PP
If no flags or \f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR, output format is the same as for \f(CW\*(C`nfsubfield\*(C'\fR,
returning \f(CW\*(C`[P,x]\*(C'\fR such that \f(CW\*(C`P\*(C'\fR is a polynomial defining the fixed field, and
\&\f(CW\*(C`x\*(C'\fR is a root of \f(CW\*(C`P\*(C'\fR expressed as a polmod in \f(CW\*(C`\f(CIgal\f(CW.pol\*(C'\fR.
.IX Xref "nfsubfield"
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR return only the polynomial \f(CW\*(C`P\*(C'\fR.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 2\*(C'\fR return \f(CW\*(C`[P,x,F]\*(C'\fR where \f(CW\*(C`P\*(C'\fR and \f(CW\*(C`x\*(C'\fR are as above and \f(CW\*(C`F\*(C'\fR is the
factorization of \f(CW\*(C`\f(CIgal\f(CW.pol\*(C'\fR over the field defined by \f(CW\*(C`P\*(C'\fR, where
variable \f(CW\*(C`v\*(C'\fR (\f(CW\*(C`y\*(C'\fR by default) stands for a root of \f(CW\*(C`P\*(C'\fR. The priority of \f(CW\*(C`v\*(C'\fR
must be less than the priority of the variable of \f(CW\*(C`\f(CIgal\f(CW.pol\*(C'\fR (see
\&\*(L"Label se:priority\*(R"). Example:
.PP
.Vb 3
\&  ? G = galoisinit(x^4+1);
\&  ? galoisfixedfield(G,G.group[2],2)
\&  %2 = [x^2 + 2, Mod(x^3 + x, x^4 + 1), [x^2 \- y*x \- 1, x^2 + y*x \- 1]]
.Ve
.PP
computes the factorization  \f(CW\*(C`x^4+1 = (x^2\- \f(CIsqrt\f(CW {\-2}x\-1)(x^2+ \f(CIsqrt\f(CW {\-2}x\-1)\*(C'\fR
.PP
The library syntax is \fBgaloisfixedfield\fR\f(CW\*(C`(\f(CIgal\f(CW,\f(CIperm\f(CW,\f(CIflag\f(CW,\f(CW\*(C`v\*(C'\f(CW)\*(C'\fR, where \f(CW\*(C`v\*(C'\fR is a variable number, an omitted \f(CW\*(C`v\*(C'\fR being coded by \f(CW\*(C`\-1\*(C'\fR.
.IX Xref "galoisfixedfield"
.ie n .SS "galoisidentify""(\f(CIgal\fP)"""
.el .SS "galoisidentify\f(CW(\fP\f(CIgal\fP\f(CW)\fP"
.IX Xref "galoisidentify"
.IX Subsection "galoisidentify(gal)"
\&\fIgal\fR being be a Galois field as output by \f(CW\*(C`galoisinit\*(C'\fR,
output the isomorphism class of the underlying abstract group as a
two-components vector \f(CW\*(C`[o,i]\*(C'\fR, where \f(CW\*(C`o\*(C'\fR is the group order, and \f(CW\*(C`i\*(C'\fR is the
group index in the \s-1GAP4\s0 Small Group library, by Hans Ulrich Besche, Bettina
Eick and Eamonn O'Brien.
.IX Xref "galoisinit"
.PP
This command also accepts subgroups returned by \f(CW\*(C`galoissubgroups\*(C'\fR.
.PP
The current implementation is limited to degree less or equal to \f(CW127\fR.
Some larger ``easy'' orders are also supported.
.PP
The output is similar to the output of the function \f(CW\*(C`IdGroup\*(C'\fR in \s-1GAP4.\s0
Note that \s-1GAP4\s0 \f(CW\*(C`IdGroup\*(C'\fR handles all groups of order less than \f(CW2000\fR
except \f(CW1024\fR, so you can use \f(CW\*(C`galoisexport\*(C'\fR and \s-1GAP4\s0 to identify large
Galois groups.
.IX Xref "galoisexport"
.PP
The library syntax is \fBgaloisidentify\fR\f(CW\*(C`(\f(CIgal\f(CW)\*(C'\fR.
.IX Xref "galoisidentify"
.ie n .SS "galoisinit""(\f(CIpol\fP,{den})"""
.el .SS "galoisinit\f(CW(\fP\f(CIpol\fP\f(CW,{den})\fP"
.IX Xref "galoisinit"
.IX Subsection "galoisinit(pol,{den})"
computes the Galois group
and all necessary information for computing the fixed fields of the
Galois extension \f(CW\*(C`K/\f(CB\f(CBQ\f(CB\f(CW\*(C'\fR where \f(CW\*(C`K\*(C'\fR is the number field defined by
\&\f(CW\*(C`\f(CIpol\f(CW\*(C'\fR (monic irreducible polynomial in \f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW[X]\*(C'\fR or
a number field as output by \f(CW\*(C`nfinit\*(C'\fR). The extension \f(CW\*(C`K/\f(CB\f(CBQ\f(CB\f(CW\*(C'\fR must be
Galois with Galois group ``weakly'' super-solvable (see \f(CW\*(C`nfgaloisconj\*(C'\fR)
.IX Xref "nfinit nfgaloisconj"
.PP
This is a prerequisite for most of the \f(CW\*(C`galois\*(C'\fR\f(CW\*(C`xxx\*(C'\fR routines. For
instance:
.PP
.Vb 5
\&    P = x^6 + 108;
\&    G = galoisinit(P);
\&    L = galoissubgroups(G);
\&    vector(#L, i, galoisisabelian(L[i],1))
\&    vector(#L, i, galoisidentify(L[i]))
.Ve
.PP
The output is an 8\-component vector \fIgal\fR.
.PP
\&\f(CW\*(C`\f(CIgal\f(CW[1]\*(C'\fR contains the polynomial \fIpol\fR
(\f(CW\*(C`\f(CIgal\f(CW.pol\*(C'\fR).
.PP
\&\f(CW\*(C`\f(CIgal\f(CW[2]\*(C'\fR is a three-components vector \f(CW\*(C`[p,e,q]\*(C'\fR where \f(CW\*(C`p\*(C'\fR is a
prime number (\f(CW\*(C`\f(CIgal\f(CW.p\*(C'\fR) such that \fIpol\fR totally split
modulo \f(CW\*(C`p\*(C'\fR , \f(CW\*(C`e\*(C'\fR is an integer and \f(CW\*(C`q = p^e\*(C'\fR (\f(CW\*(C`\f(CIgal\f(CW.mod\*(C'\fR) is the
modulus of the roots in \f(CW\*(C`\f(CIgal\f(CW.roots\*(C'\fR.
.PP
\&\f(CW\*(C`\f(CIgal\f(CW[3]\*(C'\fR is a vector \f(CW\*(C`L\*(C'\fR containing the \f(CW\*(C`p\*(C'\fR\-adic roots of
\&\fIpol\fR as integers implicitly modulo \f(CW\*(C`\f(CIgal\f(CW.mod\*(C'\fR.
(\f(CW\*(C`\f(CIgal\f(CW.roots\*(C'\fR).
.PP
\&\f(CW\*(C`\f(CIgal\f(CW[4]\*(C'\fR is the inverse of the Van der Monde matrix of the
\&\f(CW\*(C`p\*(C'\fR\-adic roots of \fIpol\fR, multiplied by \f(CW\*(C`\f(CIgal\f(CW[5]\*(C'\fR.
.PP
\&\f(CW\*(C`\f(CIgal\f(CW[5]\*(C'\fR is a multiple of the least common denominator of the
automorphisms expressed as polynomial in a root of \fIpol\fR.
.PP
\&\f(CW\*(C`\f(CIgal\f(CW[6]\*(C'\fR is the Galois group \f(CW\*(C`G\*(C'\fR expressed as a vector of
permutations of \f(CW\*(C`L\*(C'\fR (\f(CW\*(C`\f(CIgal\f(CW.group\*(C'\fR).
.PP
\&\f(CW\*(C`\f(CIgal\f(CW[7]\*(C'\fR is a generating subset \f(CW\*(C`S = [s_1,...,s_g]\*(C'\fR of \f(CW\*(C`G\*(C'\fR
expressed as a vector of permutations of \f(CW\*(C`L\*(C'\fR (\f(CW\*(C`\f(CIgal\f(CW.gen\*(C'\fR).
.PP
\&\f(CW\*(C`\f(CIgal\f(CW[8]\*(C'\fR contains the relative orders \f(CW\*(C`[o_1,...,o_g]\*(C'\fR of
the generators of \f(CW\*(C`S\*(C'\fR (\f(CW\*(C`\f(CIgal\f(CW.orders\*(C'\fR).
.PP
Let \f(CW\*(C`H\*(C'\fR be the maximal normal supersolvable subgroup of \f(CW\*(C`G\*(C'\fR, we have the
following properties:
.PP
  \eitem if \f(CW\*(C`G/H ~  A_4\*(C'\fR then \f(CW\*(C`[o_1,...,o_g]\*(C'\fR ends by
\&\f(CW\*(C`[2,2,3]\*(C'\fR.
.PP
  \eitem if \f(CW\*(C`G/H ~  S_4\*(C'\fR then \f(CW\*(C`[o_1,...,o_g]\*(C'\fR ends by
\&\f(CW\*(C`[2,2,3,2]\*(C'\fR.
.PP
  \eitem else \f(CW\*(C`G\*(C'\fR is super-solvable.
.PP
  \eitem for \f(CW\*(C`1 <= i <= g\*(C'\fR the subgroup of \f(CW\*(C`G\*(C'\fR generated by
\&\f(CW\*(C`[s_1,...,s_g]\*(C'\fR is normal, with the exception of \f(CW\*(C`i = g\-2\*(C'\fR in the
second case and of \f(CW\*(C`i = g\-3\*(C'\fR in the third.
.PP
  \eitem the relative order \f(CW\*(C`o_i\*(C'\fR of \f(CW\*(C`s_i\*(C'\fR is its order in the
quotient group \f(CW\*(C`G/<s_1,...,s_{i\-1}>\*(C'\fR, with the same
exceptions.
.PP
  \eitem for any \f(CW\*(C`x belongs to G\*(C'\fR there exists a unique family
\&\f(CW\*(C`[e_1,...,e_g]\*(C'\fR such that (no exceptions):
.PP
\&\-\- for \f(CW\*(C`1 <= i <= g\*(C'\fR we have \f(CW\*(C`0 <= e_i < o_i\*(C'\fR
.PP
\&\-\- \f(CW\*(C`x = g_1^{e_1}g_2^{e_2}...g_n^{e_n}\*(C'\fR
.PP
If present \f(CW\*(C`den\*(C'\fR must be a suitable value for \f(CW\*(C`\f(CIgal\f(CW[5]\*(C'\fR.
.PP
The library syntax is \fBgaloisinit\fR\f(CW\*(C`(\f(CIgal\f(CW,\f(CIden\f(CW)\*(C'\fR.
.IX Xref "galoisinit"
.ie n .SS "galoisisabelian""(\f(CIgal\fP,{fl = 0})"""
.el .SS "galoisisabelian\f(CW(\fP\f(CIgal\fP\f(CW,{fl = 0})\fP"
.IX Xref "galoisisabelian"
.IX Subsection "galoisisabelian(gal,{fl = 0})"
\&\fIgal\fR being as output by \f(CW\*(C`galoisinit\*(C'\fR, return \f(CW0\fR if
\&\fIgal\fR is not an abelian group, and the \s-1HNF\s0 matrix of \fIgal\fR over \f(CW\*(C`gal.gen\*(C'\fR if \f(CW\*(C`fl = 0\*(C'\fR, \f(CW1\fR if
\&\f(CW\*(C`fl = 1\*(C'\fR.
.PP
This command also accepts subgroups returned by \f(CW\*(C`galoissubgroups\*(C'\fR.
.PP
The library syntax is \fBgaloisisabelian\fR\f(CW\*(C`(\f(CIgal\f(CW,\f(CIfl\f(CW)\*(C'\fR where \fIfl\fR is a C long integer.
.IX Xref "galoisisabelian"
.ie n .SS "galoispermtopol""(\f(CIgal\fP,\f(CIperm\fP)"""
.el .SS "galoispermtopol\f(CW(\fP\f(CIgal\fP\f(CW,\fP\f(CIperm\fP\f(CW)\fP"
.IX Xref "galoispermtopol"
.IX Subsection "galoispermtopol(gal,perm)"
\&\fIgal\fR being a
Galois field as output by \f(CW\*(C`galoisinit\*(C'\fR and \fIperm\fR a element of
\&\f(CW\*(C`\f(CIgal\f(CW.group\*(C'\fR, return the polynomial defining the Galois
automorphism, as output by \f(CW\*(C`nfgaloisconj\*(C'\fR, associated with the
permutation \fIperm\fR of the roots \f(CW\*(C`\f(CIgal\f(CW.roots\*(C'\fR. \fIperm\fR can
also be a vector or matrix, in this case, \f(CW\*(C`galoispermtopol\*(C'\fR is
applied to all components recursively.
.PP
Note that
.PP
.Vb 2
\&  G = galoisinit(pol);
\&  galoispermtopol(G, G[6])~
.Ve
.PP
is equivalent to \f(CW\*(C`nfgaloisconj(pol)\*(C'\fR, if degree of \fIpol\fR is greater
or equal to \f(CW2\fR.
.PP
The library syntax is \fBgaloispermtopol\fR\f(CW\*(C`(\f(CIgal\f(CW,\f(CIperm\f(CW)\*(C'\fR.
.IX Xref "galoispermtopol"
.ie n .SS "galoissubcyclo""(N,H,{fl = 0},{v})"""
.el .SS "galoissubcyclo\f(CW(N,H,{fl = 0},{v})\fP"
.IX Xref "galoissubcyclo"
.IX Subsection "galoissubcyclo(N,H,{fl = 0},{v})"
computes the subextension
of \f(CW\*(C`\f(CB\f(CBQ\f(CB\f(CW(\f(CIzeta\f(CW_n)\*(C'\fR fixed by the subgroup \f(CW\*(C`H \esubset (\f(CB\f(CBZ\f(CB\f(CW/n\f(CB\f(CBZ\f(CB\f(CW)^*\*(C'\fR. By the
Kronecker-Weber theorem, all abelian number fields can be generated in this
way (uniquely if \f(CW\*(C`n\*(C'\fR is taken to be minimal).
.PP
The pair \f(CW\*(C`(n, H)\*(C'\fR is deduced from the parameters \f(CW\*(C`(N, H)\*(C'\fR as follows
.PP
\&\eitem \f(CW\*(C`N\*(C'\fR an integer: then \f(CW\*(C`n = N\*(C'\fR; \f(CW\*(C`H\*(C'\fR is a generator, i.e. an
integer or an integer modulo \f(CW\*(C`n\*(C'\fR; or a vector of generators.
.PP
\&\eitem \f(CW\*(C`N\*(C'\fR the output of \f(CWznstar(n)\fR. \f(CW\*(C`H\*(C'\fR as in the first case
above, or a matrix, taken to be a \s-1HNF\s0 left divisor of the \s-1SNF\s0 for \f(CW\*(C`(\f(CB\f(CBZ\f(CB\f(CW/n\f(CB\f(CBZ\f(CB\f(CW)^*\*(C'\fR
(of type \f(CW\*(C`N.cyc\*(C'\fR), giving the generators of \f(CW\*(C`H\*(C'\fR in terms of \f(CW\*(C`N.gen\*(C'\fR.
.PP
\&\eitem \f(CW\*(C`N\*(C'\fR the output of \f(CW\*(C`bnrinit(bnfinit(y), m, 1)\*(C'\fR where \f(CW\*(C`m\*(C'\fR is a
module. \f(CW\*(C`H\*(C'\fR as in the first case, or a matrix taken to be a \s-1HNF\s0 left
divisor of the \s-1SNF\s0 for the ray class group modulo \f(CW\*(C`m\*(C'\fR
(of type \f(CW\*(C`N.cyc\*(C'\fR), giving the generators of \f(CW\*(C`H\*(C'\fR in terms of \f(CW\*(C`N.gen\*(C'\fR.
.PP
In this last case, beware that \f(CW\*(C`H\*(C'\fR is understood relatively to \f(CW\*(C`N\*(C'\fR; in
particular, if the infinite place does not divide the module, e.g if \f(CW\*(C`m\*(C'\fR is
an integer, then it is not a subgroup of \f(CW\*(C`(\f(CB\f(CBZ\f(CB\f(CW/n\f(CB\f(CBZ\f(CB\f(CW)^*\*(C'\fR, but of its quotient by
\&\f(CW\*(C`{\f(CI+\-\f(CW 1}\*(C'\fR.
.PP
If \f(CW\*(C`fl = 0\*(C'\fR, compute a polynomial (in the variable \fIv\fR) defining the
the subfield of \f(CW\*(C`\f(CB\f(CBQ\f(CB\f(CW(\f(CIzeta\f(CW_n)\*(C'\fR fixed by the subgroup \fIH\fR of \f(CW\*(C`(\f(CB\f(CBZ\f(CB\f(CW/n\f(CB\f(CBZ\f(CB\f(CW)^*\*(C'\fR.
.PP
If \f(CW\*(C`fl = 1\*(C'\fR, compute only the conductor of the abelian extension, as a module.
.PP
If \f(CW\*(C`fl = 2\*(C'\fR, output \f(CW\*(C`[pol, N]\*(C'\fR, where \f(CW\*(C`pol\*(C'\fR is the polynomial as output when
\&\f(CW\*(C`fl = 0\*(C'\fR and \f(CW\*(C`N\*(C'\fR the conductor as output when \f(CW\*(C`fl = 1\*(C'\fR.
.PP
The following function can be used to compute all subfields of
\&\f(CW\*(C`\f(CB\f(CBQ\f(CB\f(CW(\f(CIzeta\f(CW_n)\*(C'\fR (of exact degree \f(CW\*(C`d\*(C'\fR, if \f(CW\*(C`d\*(C'\fR is set):
.PP
.Vb 8
\&  subcyclo(n, d = \-1)=
\&  {
\&    local(bnr,L,IndexBound);
\&    IndexBound = if (d < 0, n, [d]);
\&    bnr = bnrinit(bnfinit(y), [n,[1]], 1);
\&    L = subgrouplist(bnr, IndexBound, 1);
\&    vector(#L,i, galoissubcyclo(bnr,L[i]));
\&  }
.Ve
.PP
Setting \f(CW\*(C`L = subgrouplist(bnr, IndexBound)\*(C'\fR would produce subfields of exact
conductor \f(CW\*(C`n oo \*(C'\fR.
.PP
The library syntax is \fBgaloissubcyclo\fR\f(CW\*(C`(N,H,fl,v)\*(C'\fR where \fIfl\fR is a C long integer, and
\&\fIv\fR a variable number.
.IX Xref "galoissubcyclo"
.ie n .SS "galoissubfields""(G,{fl = 0},{v})"""
.el .SS "galoissubfields\f(CW(G,{fl = 0},{v})\fP"
.IX Xref "galoissubfields"
.IX Subsection "galoissubfields(G,{fl = 0},{v})"
Output all the subfields of
the Galois group \fIG\fR, as a vector.
This works by applying \f(CW\*(C`galoisfixedfield\*(C'\fR to all subgroups. The meaning of
the flag \fIfl\fR is the same as for \f(CW\*(C`galoisfixedfield\*(C'\fR.
.PP
The library syntax is \fBgaloissubfields\fR\f(CW\*(C`(\f(CIG\f(CW,fl,v)\*(C'\fR, where \fIfl\fR is a long and \fIv\fR a
variable number.
.IX Xref "galoissubfields"
.ie n .SS "galoissubgroups""(gal)"""
.el .SS "galoissubgroups\f(CW(gal)\fP"
.IX Xref "galoissubgroups"
.IX Subsection "galoissubgroups(gal)"
Output all the subgroups of the Galois
group \f(CW\*(C`gal\*(C'\fR. A subgroup is a vector [\fIgen\fR, \fIorders\fR], with the same meaning
as for \f(CW\*(C`\f(CIgal\f(CW.gen\*(C'\fR and \f(CW\*(C`\f(CIgal\f(CW.orders\*(C'\fR. Hence \fIgen\fR is a vector of
permutations generating the subgroup, and \fIorders\fR is the relatives
orders of the generators. The cardinal of a subgroup is the product of the
relative orders. Such subgroup can be used instead of a Galois group in the
following command: \f(CW\*(C`galoisisabelian\*(C'\fR, \f(CW\*(C`galoissubgroups\*(C'\fR, \f(CW\*(C`galoisexport\*(C'\fR and \f(CW\*(C`galoisidentify\*(C'\fR.
.PP
To get the subfield fixed by a subgroup \fIsub\fR of \fIgal\fR, use
.PP
.Vb 1
\&  galoisfixedfield(gal,sub[1])
.Ve
.PP
The library syntax is \fBgaloissubgroups\fR\f(CW\*(C`(\f(CIgal\f(CW)\*(C'\fR.
.IX Xref "galoissubgroups"
.ie n .SS "idealadd""(\f(CInf\fP,x,y)"""
.el .SS "idealadd\f(CW(\fP\f(CInf\fP\f(CW,x,y)\fP"
.IX Xref "idealadd"
.IX Subsection "idealadd(nf,x,y)"
sum of the two ideals \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR in the
number field \f(CW\*(C`\f(CInf\f(CW\*(C'\fR. When \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR are given by \fB\f(BIZ\fB\fR\-bases, this does
not depend on \f(CW\*(C`\f(CInf\f(CW\*(C'\fR and can be used to compute the sum of any two
\&\fB\f(BIZ\fB\fR\-modules. The result is given in \s-1HNF.\s0
.PP
The library syntax is \fBidealadd\fR\f(CW\*(C`(\f(CInf\f(CW,x,y)\*(C'\fR.
.IX Xref "idealadd"
.ie n .SS "idealaddtoone""(\f(CInf\fP,x,{y})"""
.el .SS "idealaddtoone\f(CW(\fP\f(CInf\fP\f(CW,x,{y})\fP"
.IX Xref "idealaddtoone"
.IX Subsection "idealaddtoone(nf,x,{y})"
\&\f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR being two co-prime
integral ideals (given in any form), this gives a two-component row vector
\&\f(CW\*(C`[a,b]\*(C'\fR such that \f(CW\*(C`a belongs to x\*(C'\fR, \f(CW\*(C`b belongs to y\*(C'\fR and \f(CW\*(C`a+b = 1\*(C'\fR.
.PP
The alternative syntax \f(CW\*(C`idealaddtoone(\f(CInf\f(CW,v)\*(C'\fR, is supported, where
\&\f(CW\*(C`v\*(C'\fR is a \f(CW\*(C`k\*(C'\fR\-component vector of ideals (given in any form) which sum to
\&\f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW_K\*(C'\fR. This outputs a \f(CW\*(C`k\*(C'\fR\-component vector \f(CW\*(C`e\*(C'\fR such that \f(CW\*(C`e[i] belongs to x[i]\*(C'\fR for
\&\f(CW\*(C`1 <= i <= k\*(C'\fR and \f(CW\*(C`\f(CIsum\f(CW_{1 <= i <= k}e[i] = 1\*(C'\fR.
.PP
The library syntax is \fBidealaddtoone0\fR\f(CW\*(C`(\f(CInf\f(CW,x,y)\*(C'\fR, where an omitted \f(CW\*(C`y\*(C'\fR is coded as
\&\f(CW\*(C`NULL\*(C'\fR.
.IX Xref "idealaddtoone0"
.ie n .SS "idealappr""(\f(CInf\fP,x,{\f(CIflag\fP = 0})"""
.el .SS "idealappr\f(CW(\fP\f(CInf\fP\f(CW,x,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "idealappr"
.IX Subsection "idealappr(nf,x,{flag = 0})"
if \f(CW\*(C`x\*(C'\fR is a fractional ideal
(given in any form), gives an element \f(CW\*(C`\f(CIalpha\f(CW\*(C'\fR in \f(CW\*(C`\f(CInf\f(CW\*(C'\fR such that for
all prime ideals \f(CW\*(C` \f(CIwp\f(CW \*(C'\fR such that the valuation of \f(CW\*(C`x\*(C'\fR at \f(CW\*(C` \f(CIwp\f(CW \*(C'\fR is non-zero, we
have \f(CW\*(C`v_{ \f(CIwp\f(CW }(\f(CIalpha\f(CW) = v_{ \f(CIwp\f(CW }(x)\*(C'\fR, and. \f(CW\*(C`v_{ \f(CIwp\f(CW }(\f(CIalpha\f(CW) >= 0\*(C'\fR for all other
\&\f(CW\*(C`{ \f(CIwp\f(CW }\*(C'\fR.
.PP
If \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR is non-zero, \f(CW\*(C`x\*(C'\fR must be given as a prime ideal factorization, as
output by \f(CW\*(C`idealfactor\*(C'\fR, but possibly with zero or negative exponents.
This yields an element \f(CW\*(C`\f(CIalpha\f(CW\*(C'\fR such that for all prime ideals \f(CW\*(C` \f(CIwp\f(CW \*(C'\fR occurring
in \f(CW\*(C`x\*(C'\fR, \f(CW\*(C`v_{ \f(CIwp\f(CW }(\f(CIalpha\f(CW)\*(C'\fR is equal to the exponent of \f(CW\*(C` \f(CIwp\f(CW \*(C'\fR in \f(CW\*(C`x\*(C'\fR, and for all
other prime ideals, \f(CW\*(C`v_{ \f(CIwp\f(CW }(\f(CIalpha\f(CW) >= 0\*(C'\fR. This generalizes
\&\f(CW\*(C`idealappr(\f(CInf\f(CW,x,0)\*(C'\fR since zero exponents are allowed. Note that
the algorithm used is slightly different, so that
\&\f(CW\*(C`idealappr(\f(CInf\f(CW,idealfactor(\f(CInf\f(CW,x))\*(C'\fR may not be the same as
\&\f(CW\*(C`idealappr(\f(CInf\f(CW,x,1)\*(C'\fR.
.PP
The library syntax is \fBidealappr0\fR\f(CW\*(C`(\f(CInf\f(CW,x,\f(CIflag\f(CW)\*(C'\fR.
.IX Xref "idealappr0"
.ie n .SS "idealchinese""(\f(CInf\fP,x,y)"""
.el .SS "idealchinese\f(CW(\fP\f(CInf\fP\f(CW,x,y)\fP"
.IX Xref "idealchinese"
.IX Subsection "idealchinese(nf,x,y)"
\&\f(CW\*(C`x\*(C'\fR being a prime ideal factorization
(i.e. a 2 by 2 matrix whose first column contain prime ideals, and the second
column integral exponents), \f(CW\*(C`y\*(C'\fR a vector of elements in \f(CW\*(C`\f(CInf\f(CW\*(C'\fR indexed by
the ideals in \f(CW\*(C`x\*(C'\fR, computes an element \f(CW\*(C`b\*(C'\fR such that
.PP
\&\f(CW\*(C`v_ \f(CIwp\f(CW (b \- y_ \f(CIwp\f(CW ) >= v_ \f(CIwp\f(CW (x)\*(C'\fR for all prime ideals in \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`v_ \f(CIwp\f(CW (b) >= 0\*(C'\fR
for all other \f(CW\*(C` \f(CIwp\f(CW \*(C'\fR.
.PP
The library syntax is \fBidealchinese\fR\f(CW\*(C`(\f(CInf\f(CW,x,y)\*(C'\fR.
.IX Xref "idealchinese"
.ie n .SS "idealcoprime""(\f(CInf\fP,x,y)"""
.el .SS "idealcoprime\f(CW(\fP\f(CInf\fP\f(CW,x,y)\fP"
.IX Xref "idealcoprime"
.IX Subsection "idealcoprime(nf,x,y)"
given two integral ideals \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR
in the number field \f(CW\*(C`\f(CInf\f(CW\*(C'\fR, finds a \f(CW\*(C`\f(CIbeta\f(CW\*(C'\fR in the field, expressed on the
integral basis \f(CW\*(C`\f(CInf\f(CW[7]\*(C'\fR, such that \f(CW\*(C`\f(CIbeta\f(CW.x\*(C'\fR is an integral ideal
coprime to \f(CW\*(C`y\*(C'\fR.
.PP
The library syntax is \fBidealcoprime\fR\f(CW\*(C`(\f(CInf\f(CW,x,y)\*(C'\fR.
.IX Xref "idealcoprime"
.ie n .SS "idealdiv""(\f(CInf\fP,x,y,{\f(CIflag\fP = 0})"""
.el .SS "idealdiv\f(CW(\fP\f(CInf\fP\f(CW,x,y,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "idealdiv"
.IX Subsection "idealdiv(nf,x,y,{flag = 0})"
quotient \f(CW\*(C`x.y^{\-1}\*(C'\fR of the
two ideals \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR in the number field \f(CW\*(C`\f(CInf\f(CW\*(C'\fR. The result is given in
\&\s-1HNF.\s0
.PP
If \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR is non-zero, the quotient \f(CW\*(C`x.y^{\-1}\*(C'\fR is assumed to be an
integral ideal. This can be much faster when the norm of the quotient is
small even though the norms of \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR are large.
.PP
The library syntax is \fBidealdiv0\fR\f(CW\*(C`(\f(CInf\f(CW,x,y,\f(CIflag\f(CW)\*(C'\fR. Also available
are \f(CW\*(C` \f(CBidealdiv\f(CW(\f(CInf\f(CW,x,y)\*(C'\fR (\f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR) and
\&\f(CW\*(C` \f(CBidealdivexact\f(CW(\f(CInf\f(CW,x,y)\*(C'\fR (\f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR).
.IX Xref "idealdiv0 idealdiv idealdivexact"
.ie n .SS "idealfactor""(\f(CInf\fP,x)"""
.el .SS "idealfactor\f(CW(\fP\f(CInf\fP\f(CW,x)\fP"
.IX Xref "idealfactor"
.IX Subsection "idealfactor(nf,x)"
factors into prime ideal powers the
ideal \f(CW\*(C`x\*(C'\fR in the number field \f(CW\*(C`\f(CInf\f(CW\*(C'\fR. The output format is similar to the
\&\f(CW\*(C`factor\*(C'\fR function, and the prime ideals are represented in the form
output by the \f(CW\*(C`idealprimedec\*(C'\fR function, i.e. as 5\-element vectors.
.PP
The library syntax is \fBidealfactor\fR\f(CW\*(C`(\f(CInf\f(CW,x)\*(C'\fR.
.IX Xref "idealfactor"
.ie n .SS "idealhnf""(\f(CInf\fP,a,{b})"""
.el .SS "idealhnf\f(CW(\fP\f(CInf\fP\f(CW,a,{b})\fP"
.IX Xref "idealhnf"
.IX Subsection "idealhnf(nf,a,{b})"
gives the Hermite normal form
matrix of the ideal \f(CW\*(C`a\*(C'\fR. The ideal can be given in any form whatsoever
(typically by an algebraic number if it is principal, by a \f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW_K\*(C'\fR\-system of
generators, as a prime ideal as given by \f(CW\*(C`idealprimedec\*(C'\fR, or by a
\&\fB\f(BIZ\fB\fR\-basis).
.IX Xref "Hermite normal form"
.PP
If \f(CW\*(C`b\*(C'\fR is not omitted, assume the ideal given was \f(CW\*(C`a\f(CB\f(CBZ\f(CB\f(CW_K+b\f(CB\f(CBZ\f(CB\f(CW_K\*(C'\fR, where \f(CW\*(C`a\*(C'\fR
and \f(CW\*(C`b\*(C'\fR are elements of \f(CW\*(C`K\*(C'\fR given either as vectors on the integral basis
\&\f(CW\*(C`\f(CInf\f(CW[7]\*(C'\fR or as algebraic numbers.
.PP
The library syntax is \fBidealhnf0\fR\f(CW\*(C`(\f(CInf\f(CW,a,b)\*(C'\fR where an omitted \f(CW\*(C`b\*(C'\fR is coded as \f(CW\*(C`NULL\*(C'\fR.
Also available is \f(CW\*(C` \f(CBidealhermite\f(CW(\f(CInf\f(CW,a)\*(C'\fR (\f(CW\*(C`b\*(C'\fR omitted).
.IX Xref "idealhnf0 idealhermite"
.ie n .SS "idealintersect""(\f(CInf\fP,A,B)"""
.el .SS "idealintersect\f(CW(\fP\f(CInf\fP\f(CW,A,B)\fP"
.IX Xref "idealintersect"
.IX Subsection "idealintersect(nf,A,B)"
intersection of the two ideals
\&\f(CW\*(C`A\*(C'\fR and \f(CW\*(C`B\*(C'\fR in the number field \f(CW\*(C`\f(CInf\f(CW\*(C'\fR. The result is given in \s-1HNF.\s0
.PP
.Vb 4
\&      ? nf = nfinit(x^2+1);
\&      ? idealintersect(nf, 2, x+1)
\&      %2 = 
\&      [2 0]
\&
\&      [0 2]
.Ve
.PP
This function does not apply to general \fB\f(BIZ\fB\fR\-modules, e.g. orders, since its
arguments are replaced by the ideals they generate. The following script
intersects \fB\f(BIZ\fB\fR\-modules \f(CW\*(C`A\*(C'\fR and \f(CW\*(C`B\*(C'\fR given by matrices of compatible
dimensions with integer coefficients:
.PP
.Vb 4
\&      ZM_intersect(A,B) =
\&      { local( Ker = matkerint(concat(A,B)) );
\&        mathnf(A * vecextract(Ker, Str("..", #A), ".."))
\&      }
.Ve
.PP
The library syntax is \fBidealintersect\fR\f(CW\*(C`(\f(CInf\f(CW,A,B)\*(C'\fR.
.IX Xref "idealintersect"
.ie n .SS "idealinv""(\f(CInf\fP,x)"""
.el .SS "idealinv\f(CW(\fP\f(CInf\fP\f(CW,x)\fP"
.IX Xref "idealinv"
.IX Subsection "idealinv(nf,x)"
inverse of the ideal \f(CW\*(C`x\*(C'\fR in the
number field \f(CW\*(C`\f(CInf\f(CW\*(C'\fR. The result is the Hermite normal form of the
inverse of the ideal, together with the opposite of the Archimedean
information if it is given.
.PP
The library syntax is \fBidealinv\fR\f(CW\*(C`(\f(CInf\f(CW,x)\*(C'\fR.
.IX Xref "idealinv"
.ie n .SS "ideallist""(\f(CInf\fP,\f(CIbound\fP,{\f(CIflag\fP = 4})"""
.el .SS "ideallist\f(CW(\fP\f(CInf\fP\f(CW,\fP\f(CIbound\fP\f(CW,{\fP\f(CIflag\fP\f(CW = 4})\fP"
.IX Xref "ideallist"
.IX Subsection "ideallist(nf,bound,{flag = 4})"
computes the list
of all ideals of norm less or equal to \fIbound\fR in the number field
\&\fInf\fR. The result is a row vector with exactly \fIbound\fR components.
Each component is itself a row vector containing the information about
ideals of a given norm, in no specific order, depending on the value of
\&\f(CW\*(C`\f(CIflag\f(CW\*(C'\fR:
.PP
The possible values of \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR are:
.PP
  0: give the \fIbid\fR associated to the ideals, without generators.
.PP
  1: as 0, but include the generators in the \fIbid\fR.
.PP
  2: in this case, \fInf\fR must be a \fIbnf\fR with units. Each
component is of the form \f(CW\*(C`[\f(CIbid\f(CW,U]\*(C'\fR, where \fIbid\fR is as case 0
and \f(CW\*(C`U\*(C'\fR is a vector of discrete logarithms of the units. More precisely, it
gives the \f(CW\*(C`ideallog\*(C'\fRs with respect to \fIbid\fR of \f(CW\*(C`bnf.tufu\*(C'\fR.
This structure is technical, and only meant to be used in conjunction with
\&\f(CW\*(C`bnrclassnolist\*(C'\fR or \f(CW\*(C`bnrdisclist\*(C'\fR.
.IX Xref "bnrclassnolist bnrdisclist"
.PP
  3: as 2, but include the generators in the \fIbid\fR.
.PP
  4: give only the \s-1HNF\s0 of the ideal.
.PP
.Vb 4
\&  ? #L[65]
\&  %4 = 4               \e\e A single ideal of norm 1
\&  ? #L[65]
\&  %4 = 4               \e\e There are 4 ideals of norm 4 in Z[i]
.Ve
.PP
If one wants more information, one could do instead:
.PP
.Vb 10
\&  ? nf = nfinit(x^2+1);
\&  ? L = ideallist(nf, 100, 0);
\&  ? l = L[25]; vector(#l, i, l[i].clgp)
\&  %3 = [[20, [20]], [16, [4, 4]], [20, [20]]]
\&  ? l[1].mod
\&  %4 = [[25, 18; 0, 1], []]
\&  ? l[2].mod
\&  %5 = [[5, 0; 0, 5], []]
\&  ? l[3].mod
\&  %6 = [[25, 7; 0, 1], []]
.Ve
.PP
where we ask for the structures of the \f(CW\*(C`(\f(CB\f(CBZ\f(CB\f(CW[i]/I)^*\*(C'\fR for all
three ideals of norm \f(CW25\fR. In fact, for all moduli with finite part of norm
\&\f(CW25\fR and trivial archimedean part, as the last 3 commands show. See
\&\f(CW\*(C`ideallistarch\*(C'\fR to treat general moduli.
.IX Xref "ideallistarch"
.PP
The library syntax is \fBideallist0\fR\f(CW\*(C`(\f(CInf\f(CW,\f(CIbound\f(CW,\f(CIflag\f(CW)\*(C'\fR, where \fIbound\fR must
be a C long integer. Also available is \f(CW\*(C` \f(CBideallist\f(CW(\f(CInf\f(CW,\f(CIbound\f(CW)\*(C'\fR,
corresponding to the case \f(CW\*(C`\f(CIflag\f(CW = 4\*(C'\fR.
.IX Xref "ideallist0 ideallist"
.ie n .SS "ideallistarch""(\f(CInf\fP,\f(CIlist\fP,\f(CIarch\fP)"""
.el .SS "ideallistarch\f(CW(\fP\f(CInf\fP\f(CW,\fP\f(CIlist\fP\f(CW,\fP\f(CIarch\fP\f(CW)\fP"
.IX Xref "ideallistarch"
.IX Subsection "ideallistarch(nf,list,arch)"
\&\fIlist\fR is a vector of vectors of bid's, as output by \f(CW\*(C`ideallist\*(C'\fR with
flag \f(CW0\fR to \f(CW3\fR. Return a vector of vectors with the same number of
components as the original \fIlist\fR. The leaves give information about
moduli whose finite part is as in original list, in the same order, and
archimedean part is now \fIarch\fR (it was originally trivial). The
information contained is of the same kind as was present in the input; see
\&\f(CW\*(C`ideallist\*(C'\fR, in particular the meaning of \fIflag\fR.
.IX Xref "ideallist ideallist"
.PP
.Vb 10
\&  ? L = ideallist(bnf, 100, 0);
\&  ? l = L[98]; vector(#l, i, l[i].clgp)
\&  %4 = [[42, [42]], [36, [6, 6]], [42, [42]]]
\&  ? La = ideallistarch(bnf, L, [1,1]); \e\e two places at infinity
\&  ? L = ideallist(bnf, 100, 0);
\&  ? l = L[98]; vector(#l, i, l[i].clgp)
\&  %4 = [[42, [42]], [36, [6, 6]], [42, [42]]]
\&  ? La = ideallistarch(bnf, L, [1,1]); \e\e add them to the modulus
\&  ? l = La[98]; vector(#l, i, l[i].clgp)
\&  %6 = [[168, [42, 2, 2]], [144, [6, 6, 2, 2]], [168, [42, 2, 2]]]
.Ve
.PP
Of course, the results above are obvious: adding \f(CW\*(C`t\*(C'\fR places at infinity will
add \f(CW\*(C`t\*(C'\fR copies of \f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW/2\f(CB\f(CBZ\f(CB\f(CW\*(C'\fR to the ray class group. The following application
is more typical:
.PP
.Vb 5
\&  ? L = ideallist(bnf, 100, 2);        \e\e units are required now
\&  ? La = ideallistarch(bnf, L, [1,1]);
\&  ? H = bnrclassnolist(bnf, La);
\&  ? H[98];
\&  %6 = [2, 12, 2]
.Ve
.PP
The library syntax is \fBideallistarch\fR\f(CW\*(C`(\f(CInf\f(CW,\f(CIlist\f(CW,\f(CIarch\f(CW)\*(C'\fR.
.IX Xref "ideallistarch"
.ie n .SS "ideallog""(\f(CInf\fP,x,\f(CIbid\fP)"""
.el .SS "ideallog\f(CW(\fP\f(CInf\fP\f(CW,x,\fP\f(CIbid\fP\f(CW)\fP"
.IX Xref "ideallog"
.IX Subsection "ideallog(nf,x,bid)"
\&\f(CW\*(C`\f(CInf\f(CW\*(C'\fR is a number field,
\&\fIbid\fR a ``big ideal'' as output by \f(CW\*(C`idealstar\*(C'\fR and \f(CW\*(C`x\*(C'\fR a
non-necessarily integral element of \fInf\fR which must have valuation
equal to 0 at all prime ideals dividing \f(CW\*(C`I = \f(CIbid\f(CW[1]\*(C'\fR. This function
computes the ``discrete logarithm'' of \f(CW\*(C`x\*(C'\fR on the generators given in
\&\f(CW\*(C`\f(CIbid\f(CW[2]\*(C'\fR. In other words, if \f(CW\*(C`g_i\*(C'\fR are these generators, of orders
\&\f(CW\*(C`d_i\*(C'\fR respectively, the result is a column vector of integers \f(CW\*(C`(x_i)\*(C'\fR such
that \f(CW\*(C`0 <= x_i < d_i\*(C'\fR and
.PP
  \f(CW\*(C`x = \f(CIprod\f(CW_ig_i^{x_i} (mod ^*I) .\*(C'\fR
.PP
Note that when \f(CW\*(C`I\*(C'\fR is a module, this implies also sign conditions on the
embeddings.
.PP
The library syntax is \fBzideallog\fR\f(CW\*(C`(\f(CInf\f(CW,x,\f(CIbid\f(CW)\*(C'\fR.
.IX Xref "zideallog"
.ie n .SS "idealmin""(\f(CInf\fP,x,{\f(CIvdir\fP})"""
.el .SS "idealmin\f(CW(\fP\f(CInf\fP\f(CW,x,{\fP\f(CIvdir\fP\f(CW})\fP"
.IX Xref "idealmin"
.IX Subsection "idealmin(nf,x,{vdir})"
computes a minimum of
the ideal \f(CW\*(C`x\*(C'\fR in the direction \fIvdir\fR in the number field \fInf\fR.
.PP
The library syntax is \fBminideal\fR\f(CW\*(C`(\f(CInf\f(CW,x,\f(CIvdir\f(CW,\f(CIprec\f(CW)\*(C'\fR, where an omitted
\&\fIvdir\fR is coded as \f(CW\*(C`NULL\*(C'\fR.
.IX Xref "minideal"
.ie n .SS "idealmul""(\f(CInf\fP,x,y,{\f(CIflag\fP = 0})"""
.el .SS "idealmul\f(CW(\fP\f(CInf\fP\f(CW,x,y,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "idealmul"
.IX Subsection "idealmul(nf,x,y,{flag = 0})"
ideal multiplication of the
ideals \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR in the number field \fInf\fR. The result is a generating
set for the ideal product with at most \f(CW\*(C`n\*(C'\fR elements, and is in Hermite normal
form if either \f(CW\*(C`x\*(C'\fR or \f(CW\*(C`y\*(C'\fR is in \s-1HNF\s0 or is a prime ideal as output by
\&\f(CW\*(C`idealprimedec\*(C'\fR, and this is given together with the sum of the
Archimedean information in \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR if both are given.
.PP
If \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR is non-zero, reduce the result using \f(CW\*(C`idealred\*(C'\fR.
.PP
The library syntax is \fBidealmul\fR\f(CW\*(C`(\f(CInf\f(CW,x,y)\*(C'\fR (\f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR) or
\&\f(CW\*(C` \f(CBidealmulred\f(CW(\f(CInf\f(CW,x,y,\f(CIprec\f(CW)\*(C'\fR (\f(CW\*(C`\f(CIflag\f(CW ! = 0\*(C'\fR), where as usual,
\&\f(CW\*(C`\f(CIprec\f(CW\*(C'\fR is a C long integer representing the precision.
.IX Xref "idealmul idealmulred"
.ie n .SS "idealnorm""(\f(CInf\fP,x)"""
.el .SS "idealnorm\f(CW(\fP\f(CInf\fP\f(CW,x)\fP"
.IX Xref "idealnorm"
.IX Subsection "idealnorm(nf,x)"
computes the norm of the ideal \f(CW\*(C`x\*(C'\fR
in the number field \f(CW\*(C`\f(CInf\f(CW\*(C'\fR.
.PP
The library syntax is \fBidealnorm\fR\f(CW\*(C`(\f(CInf\f(CW, x)\*(C'\fR.
.IX Xref "idealnorm"
.ie n .SS "idealpow""(\f(CInf\fP,x,k,{\f(CIflag\fP = 0})"""
.el .SS "idealpow\f(CW(\fP\f(CInf\fP\f(CW,x,k,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "idealpow"
.IX Subsection "idealpow(nf,x,k,{flag = 0})"
computes the \f(CW\*(C`k\*(C'\fR\-th power of
the ideal \f(CW\*(C`x\*(C'\fR in the number field \f(CW\*(C`\f(CInf\f(CW\*(C'\fR. \f(CW\*(C`k\*(C'\fR can be positive, negative
or zero. The result is \s-1NOT\s0 reduced, it is really the \f(CW\*(C`k\*(C'\fR\-th ideal power, and
is given in \s-1HNF.\s0
.PP
If \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR is non-zero, reduce the result using \f(CW\*(C`idealred\*(C'\fR. Note however
that this is \s-1NOT\s0 the same as as \f(CW\*(C`idealpow(\f(CInf\f(CW,x,k)\*(C'\fR followed by
reduction, since the reduction is performed throughout the powering process.
.PP
The library syntax corresponding to \f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR is
\&\f(CW\*(C` \f(CBidealpow\f(CW(\f(CInf\f(CW,x,k)\*(C'\fR. If \f(CW\*(C`k\*(C'\fR is a \f(CW\*(C`long\*(C'\fR, you can use
\&\f(CW\*(C` \f(CBidealpows\f(CW(\f(CInf\f(CW,x,k)\*(C'\fR. Corresponding to \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR is
\&\f(CW\*(C` \f(CBidealpowred\f(CW(\f(CInf\f(CW,vp,k,\f(CIprec\f(CW)\*(C'\fR, where \f(CW\*(C`\f(CIprec\f(CW\*(C'\fR is a
\&\f(CW\*(C`long\*(C'\fR.
.IX Xref "idealpow idealpows idealpowred"
.ie n .SS "idealprimedec""(\f(CInf\fP,p)"""
.el .SS "idealprimedec\f(CW(\fP\f(CInf\fP\f(CW,p)\fP"
.IX Xref "idealprimedec"
.IX Subsection "idealprimedec(nf,p)"
computes the prime ideal
decomposition of the prime number \f(CW\*(C`p\*(C'\fR in the number field \f(CW\*(C`\f(CInf\f(CW\*(C'\fR. \f(CW\*(C`p\*(C'\fR
must be a (positive) prime number. Note that the fact that \f(CW\*(C`p\*(C'\fR is prime is
not checked, so if a non-prime \f(CW\*(C`p\*(C'\fR is given the result is undefined.
.PP
The result is a vector of \fIpr\fR structures, each representing one of the
prime ideals above \f(CW\*(C`p\*(C'\fR in the number field \f(CW\*(C`\f(CInf\f(CW\*(C'\fR. The representation
\&\f(CW\*(C`P = [p,a,e,f,b]\*(C'\fR of a prime ideal means the following. The prime ideal is
equal to \f(CW\*(C`p\f(CB\f(CBZ\f(CB\f(CW_K+\f(CIalpha\f(CW\f(CB\f(CBZ\f(CB\f(CW_K\*(C'\fR where \f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW_K\*(C'\fR is the ring of integers of the field
and \f(CW\*(C`\f(CIalpha\f(CW = \f(CIsum\f(CW_i a_i\f(CIomega\f(CW_i\*(C'\fR where the \f(CW\*(C`\f(CIomega\f(CW_i\*(C'\fR form the integral basis
\&\f(CW\*(C`\f(CInf\f(CW.zk\*(C'\fR, \f(CW\*(C`e\*(C'\fR is the ramification index, \f(CW\*(C`f\*(C'\fR is the residual index,
and \f(CW\*(C`b\*(C'\fR represents a \f(CW\*(C`\f(CIbeta\f(CW belongs to \f(CB\f(CBZ\f(CB\f(CW_K\*(C'\fR such that \f(CW\*(C`P^{\-1} = \f(CB\f(CBZ\f(CB\f(CW_K+\f(CIbeta\f(CW/p\f(CB\f(CBZ\f(CB\f(CW_K\*(C'\fR which
will be useful for computing valuations, but which the user can ignore. The
number \f(CW\*(C`\f(CIalpha\f(CW\*(C'\fR is guaranteed to have a valuation equal to 1 at the prime
ideal (this is automatic if \f(CW\*(C`e > 1\*(C'\fR).
.IX Xref "pr"
.PP
The components of \f(CW\*(C`P\*(C'\fR should be accessed by member functions: \f(CW\*(C`P.p\*(C'\fR,
\&\f(CW\*(C`P.e\*(C'\fR, \f(CW\*(C`P.f\*(C'\fR, and \f(CW\*(C`P.gen\*(C'\fR (returns the vector \f(CW\*(C`[p,a]\*(C'\fR).
.PP
The library syntax is \fBprimedec\fR\f(CW\*(C`(\f(CInf\f(CW,p)\*(C'\fR.
.IX Xref "primedec"
.ie n .SS "idealprincipal""(\f(CInf\fP,x)"""
.el .SS "idealprincipal\f(CW(\fP\f(CInf\fP\f(CW,x)\fP"
.IX Xref "idealprincipal"
.IX Subsection "idealprincipal(nf,x)"
creates the principal ideal
generated by the algebraic number \f(CW\*(C`x\*(C'\fR (which must be of type integer,
rational or polmod) in the number field \f(CW\*(C`\f(CInf\f(CW\*(C'\fR. The result is a
one-column matrix.
.PP
The library syntax is \fBprincipalideal\fR\f(CW\*(C`(\f(CInf\f(CW,x)\*(C'\fR.
.IX Xref "principalideal"
.ie n .SS "idealred""(\f(CInf\fP,I,{\f(CIvdir\fP = 0})"""
.el .SS "idealred\f(CW(\fP\f(CInf\fP\f(CW,I,{\fP\f(CIvdir\fP\f(CW = 0})\fP"
.IX Xref "idealred"
.IX Subsection "idealred(nf,I,{vdir = 0})"
\&\s-1LLL\s0 reduction of
the ideal \f(CW\*(C`I\*(C'\fR in the number field \fInf\fR, along the direction \fIvdir\fR.
If \fIvdir\fR is present, it must be an \f(CW\*(C`r1+r2\*(C'\fR\-component vector (\f(CW\*(C`r1\*(C'\fR and
\&\f(CW\*(C`r2\*(C'\fR number of real and complex places of \fInf\fR as usual).
.IX Xref "LLL"
.PP
This function finds a ``small'' \f(CW\*(C`a\*(C'\fR in \f(CW\*(C`I\*(C'\fR (it is an \s-1LLL\s0 pseudo-minimum
along direction \fIvdir\fR). The result is the Hermite normal form of
the LLL-reduced ideal \f(CW\*(C`r I/a\*(C'\fR, where \f(CW\*(C`r\*(C'\fR is a rational number such that the
resulting ideal is integral and primitive. This is often, but not always, a
reduced ideal in the sense of Buchmann. If \f(CW\*(C`I\*(C'\fR is an idele, the
logarithmic embeddings of \f(CW\*(C`a\*(C'\fR are subtracted to the Archimedean part.
.IX Xref "Buchmann"
.PP
More often than not, a principal ideal will yield the identity
matrix. This is a quick and dirty way to check if ideals are principal
without computing a full \f(CW\*(C`bnf\*(C'\fR structure, but it's not a necessary
condition; hence, a non-trivial result doesn't prove the ideal is
non-trivial in the class group.
.IX Xref "principal ideal"
.PP
Note that this is \eemph{not} the same as the \s-1LLL\s0 reduction of the lattice
\&\f(CW\*(C`I\*(C'\fR since ideal operations are involved.
.PP
The library syntax is \fBideallllred\fR\f(CW\*(C`(\f(CInf\f(CW,x,\f(CIvdir\f(CW,\f(CIprec\f(CW)\*(C'\fR, where an omitted
\&\fIvdir\fR is coded as \f(CW\*(C`NULL\*(C'\fR.
.IX Xref "ideallllred"
.ie n .SS "idealstar""(\f(CInf\fP,I,{\f(CIflag\fP = 1})"""
.el .SS "idealstar\f(CW(\fP\f(CInf\fP\f(CW,I,{\fP\f(CIflag\fP\f(CW = 1})\fP"
.IX Xref "idealstar"
.IX Subsection "idealstar(nf,I,{flag = 1})"
outputs a \fIbid\fR structure,
necessary for computing in the finite abelian group \f(CW\*(C`G = (\f(CB\f(CBZ\f(CB\f(CW_K/I)^*\*(C'\fR. Here,
\&\fInf\fR is a number field and \f(CW\*(C`I\*(C'\fR is a \fImodulus\fR: either an ideal in any
form, or a row vector whose first component is an ideal and whose second
component is a row vector of \f(CW\*(C`r_1\*(C'\fR 0 or 1.
.PP
This \fIbid\fR is used in \f(CW\*(C`ideallog\*(C'\fR to compute discrete logarithms. It
also contains useful information which can be conveniently retrieved as
\&\f(CW\*(C`\f(CIbid\f(CW.mod\*(C'\fR (the modulus),
\&\f(CW\*(C`\f(CIbid\f(CW.clgp\*(C'\fR (\f(CW\*(C`G\*(C'\fR as a finite abelian group),
\&\f(CW\*(C`\f(CIbid\f(CW.no\*(C'\fR (the cardinality of \f(CW\*(C`G\*(C'\fR),
\&\f(CW\*(C`\f(CIbid\f(CW.cyc\*(C'\fR (elementary divisors) and
\&\f(CW\*(C`\f(CIbid\f(CW.gen\*(C'\fR (generators).
.IX Xref "ideallog"
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR (default), the result is a \fIbid\fR structure without
generators.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 2\*(C'\fR, as \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR, but including generators, which wastes some time.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR, \eemph{deprecated}. Only outputs \f(CW\*(C`(\f(CB\f(CBZ\f(CB\f(CW_K/I)^*\*(C'\fR as an abelian group,
i.e as a 3\-component vector \f(CW\*(C`[h,d,g]\*(C'\fR: \f(CW\*(C`h\*(C'\fR is the order, \f(CW\*(C`d\*(C'\fR is the vector of
\&\s-1SNF\s0 cyclic components and \f(CW\*(C`g\*(C'\fR the corresponding
generators. This flag is deprecated: it is in fact slightly faster
to compute a true \fIbid\fR structure, which contains much more information.
.IX Xref "Smith normal form"
.PP
The library syntax is \fBidealstar0\fR\f(CW\*(C`(\f(CInf\f(CW,I,\f(CIflag\f(CW)\*(C'\fR.
.IX Xref "idealstar0"
.ie n .SS "idealtwoelt""(\f(CInf\fP,x,{a})"""
.el .SS "idealtwoelt\f(CW(\fP\f(CInf\fP\f(CW,x,{a})\fP"
.IX Xref "idealtwoelt"
.IX Subsection "idealtwoelt(nf,x,{a})"
computes a two-element
representation of the ideal \f(CW\*(C`x\*(C'\fR in the number field \f(CW\*(C`\f(CInf\f(CW\*(C'\fR, using a
straightforward (exponential time) search. \f(CW\*(C`x\*(C'\fR can be an ideal in any form,
(including perhaps an Archimedean part, which is ignored) and the result is a
row vector \f(CW\*(C`[a,\f(CIalpha\f(CW]\*(C'\fR with two components such that \f(CW\*(C`x = a\f(CB\f(CBZ\f(CB\f(CW_K+\f(CIalpha\f(CW\f(CB\f(CBZ\f(CB\f(CW_K\*(C'\fR
and \f(CW\*(C`a belongs to \f(CB\f(CBZ\f(CB\f(CW\*(C'\fR, where \f(CW\*(C`a\*(C'\fR is the one passed as argument if any. If \f(CW\*(C`x\*(C'\fR is given
by at least two generators, \f(CW\*(C`a\*(C'\fR is chosen to be the positive generator of
\&\f(CW\*(C`x \f(CIcap\f(CW \f(CB\f(CBZ\f(CB\f(CW\*(C'\fR.
.PP
Note that when an explicit \f(CW\*(C`a\*(C'\fR is given, we use an asymptotically faster
method, however in practice it is usually slower.
.PP
The library syntax is \fBideal_two_elt0\fR\f(CW\*(C`(\f(CInf\f(CW,x,a)\*(C'\fR, where an omitted \f(CW\*(C`a\*(C'\fR is entered as
\&\f(CW\*(C`NULL\*(C'\fR.
.IX Xref "ideal_two_elt0"
.ie n .SS "idealval""(\f(CInf\fP,x,\f(CIvp\fP)"""
.el .SS "idealval\f(CW(\fP\f(CInf\fP\f(CW,x,\fP\f(CIvp\fP\f(CW)\fP"
.IX Xref "idealval"
.IX Subsection "idealval(nf,x,vp)"
gives the valuation of the
ideal \f(CW\*(C`x\*(C'\fR at the prime ideal \fIvp\fR in the number field \f(CW\*(C`\f(CInf\f(CW\*(C'\fR,
where \fIvp\fR must be a
5\-component vector as given by \f(CW\*(C`idealprimedec\*(C'\fR.
.PP
The library syntax is \fBidealval\fR\f(CW\*(C`(\f(CInf\f(CW,x,\f(CIvp\f(CW)\*(C'\fR, and the result is a \f(CW\*(C`long\*(C'\fR
integer.
.IX Xref "idealval"
.ie n .SS "ideleprincipal""(\f(CInf\fP,x)"""
.el .SS "ideleprincipal\f(CW(\fP\f(CInf\fP\f(CW,x)\fP"
.IX Xref "ideleprincipal"
.IX Subsection "ideleprincipal(nf,x)"
creates the principal idele
generated by the algebraic number \f(CW\*(C`x\*(C'\fR (which must be of type integer,
rational or polmod) in the number field \f(CW\*(C`\f(CInf\f(CW\*(C'\fR. The result is a
two-component vector, the first being a one-column matrix representing the
corresponding principal ideal, and the second being the vector with \f(CW\*(C`r_1+r_2\*(C'\fR
components giving the complex logarithmic embedding of \f(CW\*(C`x\*(C'\fR.
.PP
The library syntax is \fBprincipalidele\fR\f(CW\*(C`(\f(CInf\f(CW,x)\*(C'\fR.
.IX Xref "principalidele"
.ie n .SS "matalgtobasis""(\f(CInf\fP,x)"""
.el .SS "matalgtobasis\f(CW(\fP\f(CInf\fP\f(CW,x)\fP"
.IX Xref "matalgtobasis"
.IX Subsection "matalgtobasis(nf,x)"
\&\f(CW\*(C`\f(CInf\f(CW\*(C'\fR being a number field in
\&\f(CW\*(C`nfinit\*(C'\fR format, and \f(CW\*(C`x\*(C'\fR a matrix whose coefficients are expressed as
polmods in \f(CW\*(C`\f(CInf\f(CW\*(C'\fR, transforms this matrix into a matrix whose
coefficients are expressed on the integral basis of \f(CW\*(C`\f(CInf\f(CW\*(C'\fR. This is the
same as applying \f(CW\*(C`nfalgtobasis\*(C'\fR to each entry, but it would be dangerous
to use the same name.
.PP
The library syntax is \fBmatalgtobasis\fR\f(CW\*(C`(\f(CInf\f(CW,x)\*(C'\fR.
.IX Xref "matalgtobasis"
.ie n .SS "matbasistoalg""(\f(CInf\fP,x)"""
.el .SS "matbasistoalg\f(CW(\fP\f(CInf\fP\f(CW,x)\fP"
.IX Xref "matbasistoalg"
.IX Subsection "matbasistoalg(nf,x)"
\&\f(CW\*(C`\f(CInf\f(CW\*(C'\fR being a number field in
\&\f(CW\*(C`nfinit\*(C'\fR format, and \f(CW\*(C`x\*(C'\fR a matrix whose coefficients are expressed as
column vectors on the integral basis of \f(CW\*(C`\f(CInf\f(CW\*(C'\fR, transforms this matrix
into a matrix whose coefficients are algebraic numbers expressed as
polmods. This is the same as applying \f(CW\*(C`nfbasistoalg\*(C'\fR to each entry, but
it would be dangerous to use the same name.
.PP
The library syntax is \fBmatbasistoalg\fR\f(CW\*(C`(\f(CInf\f(CW,x)\*(C'\fR.
.IX Xref "matbasistoalg"
.ie n .SS "modreverse""(a)"""
.el .SS "modreverse\f(CW(a)\fP"
.IX Xref "modreverse"
.IX Subsection "modreverse(a)"
\&\f(CW\*(C`a\*(C'\fR being a polmod \f(CWA(X)\fR modulo \f(CWT(X)\fR, finds
the ``reverse polmod'' \f(CWB(X)\fR modulo \f(CWQ(X)\fR, where \f(CW\*(C`Q\*(C'\fR is the minimal
polynomial of \f(CW\*(C`a\*(C'\fR, which must be equal to the degree of \f(CW\*(C`T\*(C'\fR, and such that if
\&\f(CW\*(C`\f(CItheta\f(CW\*(C'\fR is a root of \f(CW\*(C`T\*(C'\fR then \f(CW\*(C`\f(CItheta\f(CW = B(\f(CIalpha\f(CW)\*(C'\fR for a certain root \f(CW\*(C`\f(CIalpha\f(CW\*(C'\fR
of \f(CW\*(C`Q\*(C'\fR.
.PP
This is very useful when one changes the generating element in algebraic
extensions.
.PP
The library syntax is \fBpolmodrecip\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "polmodrecip"
.ie n .SS "newtonpoly""(x,p)"""
.el .SS "newtonpoly\f(CW(x,p)\fP"
.IX Xref "newtonpoly"
.IX Subsection "newtonpoly(x,p)"
gives the vector of the slopes of the Newton
polygon of the polynomial \f(CW\*(C`x\*(C'\fR with respect to the prime number \f(CW\*(C`p\*(C'\fR. The \f(CW\*(C`n\*(C'\fR
components of the vector are in decreasing order, where \f(CW\*(C`n\*(C'\fR is equal to the
degree of \f(CW\*(C`x\*(C'\fR. Vertical slopes occur iff the constant coefficient of \f(CW\*(C`x\*(C'\fR is
zero and are denoted by \f(CW\*(C`VERYBIGINT\*(C'\fR, the biggest single precision
integer representable on the machine (\f(CW\*(C`2^{31}\-1\*(C'\fR (resp. \f(CW\*(C`2^{63}\-1\*(C'\fR) on 32\-bit
(resp. 64\-bit) machines), see \*(L"Label se:valuation\*(R".
.PP
The library syntax is \fBnewtonpoly\fR\f(CW\*(C`(x,p)\*(C'\fR.
.IX Xref "newtonpoly"
.ie n .SS "nfalgtobasis""(\f(CInf\fP,x)"""
.el .SS "nfalgtobasis\f(CW(\fP\f(CInf\fP\f(CW,x)\fP"
.IX Xref "nfalgtobasis"
.IX Subsection "nfalgtobasis(nf,x)"
this is the inverse function of
\&\f(CW\*(C`nfbasistoalg\*(C'\fR. Given an object \f(CW\*(C`x\*(C'\fR whose entries are expressed as
algebraic numbers in the number field \f(CW\*(C`\f(CInf\f(CW\*(C'\fR, transforms it so that the
entries are expressed as a column vector on the integral basis
\&\f(CW\*(C`\f(CInf\f(CW.zk\*(C'\fR.
.PP
The library syntax is \fBalgtobasis\fR\f(CW\*(C`(\f(CInf\f(CW,x)\*(C'\fR.
.IX Xref "algtobasis"
.ie n .SS "nfbasis""(x,{\f(CIflag\fP = 0},{\f(CIfa\fP})"""
.el .SS "nfbasis\f(CW(x,{\fP\f(CIflag\fP\f(CW = 0},{\fP\f(CIfa\fP\f(CW})\fP"
.IX Xref "nfbasis"
.IX Subsection "nfbasis(x,{flag = 0},{fa})"
integral basis of the number
field defined by the irreducible, preferably monic, polynomial \f(CW\*(C`x\*(C'\fR, using a
modified version of the round 4 algorithm by default, due to David
Ford, Sebastian Pauli and Xavier Roblot. The binary digits
of \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR have the following meaning:
.IX Xref "integral basis round 4 Ford Pauli Roblot"
.PP
1: assume that no square of a prime greater than the default \f(CW\*(C`primelimit\*(C'\fR
divides the discriminant of \f(CW\*(C`x\*(C'\fR, i.e. that the index of \f(CW\*(C`x\*(C'\fR has only small
prime divisors.
.PP
2: use round 2 algorithm. For small degrees and coefficient size, this
is sometimes a little faster. (This program is the translation into C of a
program written by David Ford in Algeb.)
.IX Xref "round 2 Ford"
.PP
Thus for instance, if \f(CW\*(C`\f(CIflag\f(CW = 3\*(C'\fR, this uses the round 2 algorithm and outputs
an order which will be maximal at all the small primes.
.PP
If \fIfa\fR is present, we assume (without checking!) that it is the two-column
matrix of the factorization of the discriminant of the polynomial \f(CW\*(C`x\*(C'\fR. Note
that it does \eemph{not} have to be a complete factorization. This is
especially useful if only a local integral basis for some small set of places
is desired: only factors with exponents greater or equal to 2 will be
considered.
.PP
The library syntax is \fBnfbasis0\fR\f(CW\*(C`(x,\f(CIflag\f(CW,\f(CIfa\f(CW)\*(C'\fR. An extended version is
\&\f(CW\*(C` \f(CBnfbasis\f(CW(x,&d,\f(CIflag\f(CW,\f(CIfa\f(CW)\*(C'\fR, where \f(CW\*(C`d\*(C'\fR receives the discriminant of the
number field (\eemph{not} of the polynomial \f(CW\*(C`x\*(C'\fR), and an omitted \fIfa\fR is input
as \f(CW\*(C`NULL\*(C'\fR. Also available are \f(CW\*(C` \f(CBbase\f(CW(x,&d)\*(C'\fR (\f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR),
\&\f(CW\*(C` \f(CBbase2\f(CW(x,&d)\*(C'\fR (\f(CW\*(C`\f(CIflag\f(CW = 2\*(C'\fR) and \f(CW\*(C` \f(CBfactoredbase\f(CW(x,\f(CIfa\f(CW,&d)\*(C'\fR.
.IX Xref "nfbasis0 nfbasis base base2 factoredbase"
.ie n .SS "nfbasistoalg""(\f(CInf\fP,x)"""
.el .SS "nfbasistoalg\f(CW(\fP\f(CInf\fP\f(CW,x)\fP"
.IX Xref "nfbasistoalg"
.IX Subsection "nfbasistoalg(nf,x)"
this is the inverse function of
\&\f(CW\*(C`nfalgtobasis\*(C'\fR. Given an object \f(CW\*(C`x\*(C'\fR whose entries are expressed on the
integral basis \f(CW\*(C`\f(CInf\f(CW.zk\*(C'\fR, transforms it into an object whose entries
are algebraic numbers (i.e. polmods).
.PP
The library syntax is \fBbasistoalg\fR\f(CW\*(C`(\f(CInf\f(CW,x)\*(C'\fR.
.IX Xref "basistoalg"
.ie n .SS "nfdetint""(\f(CInf\fP,x)"""
.el .SS "nfdetint\f(CW(\fP\f(CInf\fP\f(CW,x)\fP"
.IX Xref "nfdetint"
.IX Subsection "nfdetint(nf,x)"
given a pseudo-matrix \f(CW\*(C`x\*(C'\fR, computes a
non-zero ideal contained in (i.e. multiple of) the determinant of \f(CW\*(C`x\*(C'\fR. This
is particularly useful in conjunction with \f(CW\*(C`nfhnfmod\*(C'\fR.
.PP
The library syntax is \fBnfdetint\fR\f(CW\*(C`(\f(CInf\f(CW,x)\*(C'\fR.
.IX Xref "nfdetint"
.ie n .SS "nfdisc""(x,{\f(CIflag\fP = 0},{fa})"""
.el .SS "nfdisc\f(CW(x,{\fP\f(CIflag\fP\f(CW = 0},{fa})\fP"
.IX Xref "nfdisc"
.IX Subsection "nfdisc(x,{flag = 0},{fa})"
field discriminant of the
number field defined by the integral, preferably monic, irreducible
polynomial \f(CW\*(C`x\*(C'\fR. \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR and \f(CW\*(C`fa\*(C'\fR are exactly as in \f(CW\*(C`nfbasis\*(C'\fR. That is, \f(CW\*(C`fa\*(C'\fR
provides the matrix of a partial factorization of the discriminant of \f(CW\*(C`x\*(C'\fR,
and binary digits of \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR are as follows:
.IX Xref "field discriminant"
.PP
1: assume that no square of a prime greater than \f(CW\*(C`primelimit\*(C'\fR
divides the discriminant.
.PP
2: use the round 2 algorithm, instead of the default round 4. This
should be slower except maybe for polynomials of small degree and
coefficients.
.IX Xref "round 4"
.PP
The library syntax is \fBnfdiscf0\fR\f(CW\*(C`(x,\f(CIflag\f(CW,fa)\*(C'\fR where an omitted \f(CW\*(C`fa\*(C'\fR is input as \f(CW\*(C`NULL\*(C'\fR. You
can also use \f(CW\*(C` \f(CBdiscf\f(CW(x)\*(C'\fR (\f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR).
.IX Xref "nfdiscf0 discf"
.ie n .SS "nfeltdiv""(\f(CInf\fP,x,y)"""
.el .SS "nfeltdiv\f(CW(\fP\f(CInf\fP\f(CW,x,y)\fP"
.IX Xref "nfeltdiv"
.IX Subsection "nfeltdiv(nf,x,y)"
given two elements \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR in
\&\fInf\fR, computes their quotient \f(CW\*(C`x/y\*(C'\fR in the number field \f(CW\*(C`\f(CInf\f(CW\*(C'\fR.
.PP
The library syntax is \fBelement_div\fR\f(CW\*(C`(\f(CInf\f(CW,x,y)\*(C'\fR.
.IX Xref "element_div"
.ie n .SS "nfeltdiveuc""(\f(CInf\fP,x,y)"""
.el .SS "nfeltdiveuc\f(CW(\fP\f(CInf\fP\f(CW,x,y)\fP"
.IX Xref "nfeltdiveuc"
.IX Subsection "nfeltdiveuc(nf,x,y)"
given two elements \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR in
\&\fInf\fR, computes an algebraic integer \f(CW\*(C`q\*(C'\fR in the number field \f(CW\*(C`\f(CInf\f(CW\*(C'\fR
such that the components of \f(CW\*(C`x\-qy\*(C'\fR are reasonably small. In fact, this is
functionally identical to \f(CW\*(C`round(nfeltdiv(\f(CInf\f(CW,x,y))\*(C'\fR.
.PP
The library syntax is \fBnfdiveuc\fR\f(CW\*(C`(\f(CInf\f(CW,x,y)\*(C'\fR.
.IX Xref "nfdiveuc"
.ie n .SS "nfeltdivmodpr""(\f(CInf\fP,x,y,\f(CIpr\fP)"""
.el .SS "nfeltdivmodpr\f(CW(\fP\f(CInf\fP\f(CW,x,y,\fP\f(CIpr\fP\f(CW)\fP"
.IX Xref "nfeltdivmodpr"
.IX Subsection "nfeltdivmodpr(nf,x,y,pr)"
given two elements \f(CW\*(C`x\*(C'\fR
and \f(CW\*(C`y\*(C'\fR in \fInf\fR and \fIpr\fR a prime ideal in \f(CW\*(C`modpr\*(C'\fR format (see
\&\f(CW\*(C`nfmodprinit\*(C'\fR), computes their quotient \f(CW\*(C`x / y\*(C'\fR modulo the prime ideal
\&\fIpr\fR.
.IX Xref "nfmodprinit"
.PP
The library syntax is \fBelement_divmodpr\fR\f(CW\*(C`(\f(CInf\f(CW,x,y,\f(CIpr\f(CW)\*(C'\fR.
.IX Xref "element_divmodpr"
.ie n .SS "nfeltdivrem""(\f(CInf\fP,x,y)"""
.el .SS "nfeltdivrem\f(CW(\fP\f(CInf\fP\f(CW,x,y)\fP"
.IX Xref "nfeltdivrem"
.IX Subsection "nfeltdivrem(nf,x,y)"
given two elements \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR in
\&\fInf\fR, gives a two-element row vector \f(CW\*(C`[q,r]\*(C'\fR such that \f(CW\*(C`x = qy+r\*(C'\fR, \f(CW\*(C`q\*(C'\fR is
an algebraic integer in \f(CW\*(C`\f(CInf\f(CW\*(C'\fR, and the components of \f(CW\*(C`r\*(C'\fR are
reasonably small.
.PP
The library syntax is \fBnfdivrem\fR\f(CW\*(C`(\f(CInf\f(CW,x,y)\*(C'\fR.
.IX Xref "nfdivrem"
.ie n .SS "nfeltmod""(\f(CInf\fP,x,y)"""
.el .SS "nfeltmod\f(CW(\fP\f(CInf\fP\f(CW,x,y)\fP"
.IX Xref "nfeltmod"
.IX Subsection "nfeltmod(nf,x,y)"
given two elements \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR in
\&\fInf\fR, computes an element \f(CW\*(C`r\*(C'\fR of \f(CW\*(C`\f(CInf\f(CW\*(C'\fR of the form \f(CW\*(C`r = x\-qy\*(C'\fR with
\&\f(CW\*(C`q\*(C'\fR and algebraic integer, and such that \f(CW\*(C`r\*(C'\fR is small. This is functionally
identical to
.PP
  \f(CW\*(C`x \- nfeltmul(\f(CInf\f(CW,round(nfeltdiv(\f(CInf\f(CW,x,y)),y).\*(C'\fR
.PP
The library syntax is \fBnfmod\fR\f(CW\*(C`(\f(CInf\f(CW,x,y)\*(C'\fR.
.IX Xref "nfmod"
.ie n .SS "nfeltmul""(\f(CInf\fP,x,y)"""
.el .SS "nfeltmul\f(CW(\fP\f(CInf\fP\f(CW,x,y)\fP"
.IX Xref "nfeltmul"
.IX Subsection "nfeltmul(nf,x,y)"
given two elements \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR in
\&\fInf\fR, computes their product \f(CW\*(C`x*y\*(C'\fR in the number field \f(CW\*(C`\f(CInf\f(CW\*(C'\fR.
.PP
The library syntax is \fBelement_mul\fR\f(CW\*(C`(\f(CInf\f(CW,x,y)\*(C'\fR.
.IX Xref "element_mul"
.ie n .SS "nfeltmulmodpr""(\f(CInf\fP,x,y,\f(CIpr\fP)"""
.el .SS "nfeltmulmodpr\f(CW(\fP\f(CInf\fP\f(CW,x,y,\fP\f(CIpr\fP\f(CW)\fP"
.IX Xref "nfeltmulmodpr"
.IX Subsection "nfeltmulmodpr(nf,x,y,pr)"
given two elements \f(CW\*(C`x\*(C'\fR and
\&\f(CW\*(C`y\*(C'\fR in \fInf\fR and \fIpr\fR a prime ideal in \f(CW\*(C`modpr\*(C'\fR format (see
\&\f(CW\*(C`nfmodprinit\*(C'\fR), computes their product \f(CW\*(C`x*y\*(C'\fR modulo the prime ideal
\&\fIpr\fR.
.IX Xref "nfmodprinit"
.PP
The library syntax is \fBelement_mulmodpr\fR\f(CW\*(C`(\f(CInf\f(CW,x,y,\f(CIpr\f(CW)\*(C'\fR.
.IX Xref "element_mulmodpr"
.ie n .SS "nfeltpow""(\f(CInf\fP,x,k)"""
.el .SS "nfeltpow\f(CW(\fP\f(CInf\fP\f(CW,x,k)\fP"
.IX Xref "nfeltpow"
.IX Subsection "nfeltpow(nf,x,k)"
given an element \f(CW\*(C`x\*(C'\fR in \fInf\fR,
and a positive or negative integer \f(CW\*(C`k\*(C'\fR, computes \f(CW\*(C`x^k\*(C'\fR in the number field
\&\f(CW\*(C`\f(CInf\f(CW\*(C'\fR.
.PP
The library syntax is \fBelement_pow\fR\f(CW\*(C`(\f(CInf\f(CW,x,k)\*(C'\fR.
.IX Xref "element_pow"
.ie n .SS "nfeltpowmodpr""(\f(CInf\fP,x,k,\f(CIpr\fP)"""
.el .SS "nfeltpowmodpr\f(CW(\fP\f(CInf\fP\f(CW,x,k,\fP\f(CIpr\fP\f(CW)\fP"
.IX Xref "nfeltpowmodpr"
.IX Subsection "nfeltpowmodpr(nf,x,k,pr)"
given an element \f(CW\*(C`x\*(C'\fR in
\&\fInf\fR, an integer \f(CW\*(C`k\*(C'\fR and a prime ideal \fIpr\fR in \f(CW\*(C`modpr\*(C'\fR format
(see \f(CW\*(C`nfmodprinit\*(C'\fR), computes \f(CW\*(C`x^k\*(C'\fR modulo the prime ideal \fIpr\fR.
.IX Xref "nfmodprinit"
.PP
The library syntax is \fBelement_powmodpr\fR\f(CW\*(C`(\f(CInf\f(CW,x,k,\f(CIpr\f(CW)\*(C'\fR.
.IX Xref "element_powmodpr"
.ie n .SS "nfeltreduce""(\f(CInf\fP,x,\f(CIideal\fP)"""
.el .SS "nfeltreduce\f(CW(\fP\f(CInf\fP\f(CW,x,\fP\f(CIideal\fP\f(CW)\fP"
.IX Xref "nfeltreduce"
.IX Subsection "nfeltreduce(nf,x,ideal)"
given an ideal in
Hermite normal form and an element \f(CW\*(C`x\*(C'\fR of the number field \f(CW\*(C`\f(CInf\f(CW\*(C'\fR,
finds an element \f(CW\*(C`r\*(C'\fR in \f(CW\*(C`\f(CInf\f(CW\*(C'\fR such that \f(CW\*(C`x\-r\*(C'\fR belongs to the ideal
and \f(CW\*(C`r\*(C'\fR is small.
.PP
The library syntax is \fBelement_reduce\fR\f(CW\*(C`(\f(CInf\f(CW,x,\f(CIideal\f(CW)\*(C'\fR.
.IX Xref "element_reduce"
.ie n .SS "nfeltreducemodpr""(\f(CInf\fP,x,\f(CIpr\fP)"""
.el .SS "nfeltreducemodpr\f(CW(\fP\f(CInf\fP\f(CW,x,\fP\f(CIpr\fP\f(CW)\fP"
.IX Xref "nfeltreducemodpr"
.IX Subsection "nfeltreducemodpr(nf,x,pr)"
given
an element \f(CW\*(C`x\*(C'\fR of the number field \f(CW\*(C`\f(CInf\f(CW\*(C'\fR and a prime ideal \fIpr\fR in
\&\f(CW\*(C`modpr\*(C'\fR format compute a canonical representative for the class of \f(CW\*(C`x\*(C'\fR
modulo \fIpr\fR.
.PP
The library syntax is \fBnfreducemodpr\fR\f(CW\*(C`(\f(CInf\f(CW,x,\f(CIpr\f(CW)\*(C'\fR.
.IX Xref "nfreducemodpr"
.ie n .SS "nfeltval""(\f(CInf\fP,x,\f(CIpr\fP)"""
.el .SS "nfeltval\f(CW(\fP\f(CInf\fP\f(CW,x,\fP\f(CIpr\fP\f(CW)\fP"
.IX Xref "nfeltval"
.IX Subsection "nfeltval(nf,x,pr)"
given an element \f(CW\*(C`x\*(C'\fR in
\&\fInf\fR and a prime ideal \fIpr\fR in the format output by
\&\f(CW\*(C`idealprimedec\*(C'\fR, computes their the valuation at \fIpr\fR of the
element \f(CW\*(C`x\*(C'\fR. The same result could be obtained using
\&\f(CW\*(C`idealval(\f(CInf\f(CW,x,\f(CIpr\f(CW)\*(C'\fR (since \f(CW\*(C`x\*(C'\fR would then be converted to a
principal ideal), but it would be less efficient.
.PP
The library syntax is \fBelement_val\fR\f(CW\*(C`(\f(CInf\f(CW,x,\f(CIpr\f(CW)\*(C'\fR, and the result is a \f(CW\*(C`long\*(C'\fR.
.IX Xref "element_val"
.ie n .SS "nffactor""(\f(CInf\fP,x)"""
.el .SS "nffactor\f(CW(\fP\f(CInf\fP\f(CW,x)\fP"
.IX Xref "nffactor"
.IX Subsection "nffactor(nf,x)"
factorization of the univariate
polynomial \f(CW\*(C`x\*(C'\fR over the number field \f(CW\*(C`\f(CInf\f(CW\*(C'\fR given by \f(CW\*(C`nfinit\*(C'\fR. \f(CW\*(C`x\*(C'\fR
has coefficients in \f(CW\*(C`\f(CInf\f(CW\*(C'\fR (i.e. either scalar, polmod, polynomial or
column vector). The main variable of \f(CW\*(C`\f(CInf\f(CW\*(C'\fR must be of \eemph{lower}
priority than that of \f(CW\*(C`x\*(C'\fR (see \*(L"Label se:priority\*(R"). However if
the polynomial defining the number field occurs explicitly  in the
coefficients of \f(CW\*(C`x\*(C'\fR (as modulus of a \f(CW\*(C`t_POLMOD\*(C'\fR), its main variable must be
\&\eemph{the same} as the main variable of \f(CW\*(C`x\*(C'\fR. For example,
.PP
.Vb 3
\&  ? nffactor(nf, x^2 + Mod(z, z^2+1)); \e\e  OK
\&  ? nffactor(nf, x^2 + Mod(z, z^2+1)); \e\e  OK
\&  ? nffactor(nf, x^2 + Mod(z, z^2+1)); \e\e  WRONG
.Ve
.PP
The library syntax is \fBnffactor\fR\f(CW\*(C`(\f(CInf\f(CW,x)\*(C'\fR.
.IX Xref "nffactor"
.ie n .SS "nffactormod""(\f(CInf\fP,x,\f(CIpr\fP)"""
.el .SS "nffactormod\f(CW(\fP\f(CInf\fP\f(CW,x,\fP\f(CIpr\fP\f(CW)\fP"
.IX Xref "nffactormod"
.IX Subsection "nffactormod(nf,x,pr)"
factorization of the
univariate polynomial \f(CW\*(C`x\*(C'\fR modulo the prime ideal \fIpr\fR in the number
field \f(CW\*(C`\f(CInf\f(CW\*(C'\fR. \f(CW\*(C`x\*(C'\fR can have coefficients in the number field (scalar,
polmod, polynomial, column vector) or modulo the prime ideal (intmod
modulo the rational prime under \fIpr\fR, polmod or polynomial with
intmod coefficients, column vector of intmod). The prime ideal
\&\fIpr\fR \eemph{must} be in the format output by \f(CW\*(C`idealprimedec\*(C'\fR. The
main variable of \f(CW\*(C`\f(CInf\f(CW\*(C'\fR must be of lower priority than that of \f(CW\*(C`x\*(C'\fR
(see \*(L"Label se:priority\*(R"). However if the coefficients of the number
field occur explicitly (as polmods) as coefficients of \f(CW\*(C`x\*(C'\fR, the variable of
these polmods \eemph{must} be the same as the main variable of \f(CW\*(C`t\*(C'\fR (see
\&\f(CW\*(C`nffactor\*(C'\fR).
.PP
The library syntax is \fBnffactormod\fR\f(CW\*(C`(\f(CInf\f(CW,x,\f(CIpr\f(CW)\*(C'\fR.
.IX Xref "nffactormod"
.ie n .SS "nfgaloisapply""(\f(CInf\fP,\f(CIaut\fP,x)"""
.el .SS "nfgaloisapply\f(CW(\fP\f(CInf\fP\f(CW,\fP\f(CIaut\fP\f(CW,x)\fP"
.IX Xref "nfgaloisapply"
.IX Subsection "nfgaloisapply(nf,aut,x)"
\&\f(CW\*(C`\f(CInf\f(CW\*(C'\fR being a
number field as output by \f(CW\*(C`nfinit\*(C'\fR, and \fIaut\fR being a Galois
automorphism of \f(CW\*(C`\f(CInf\f(CW\*(C'\fR expressed either as a polynomial or a polmod
(such automorphisms being found using for example one of the variants of
\&\f(CW\*(C`nfgaloisconj\*(C'\fR), computes the action of the automorphism \fIaut\fR on
the object \f(CW\*(C`x\*(C'\fR in the number field. \f(CW\*(C`x\*(C'\fR can be an element (scalar, polmod,
polynomial or column vector) of the number field, an ideal (either given by
\&\f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW_K\*(C'\fR\-generators or by a \fB\f(BIZ\fB\fR\-basis), a prime ideal (given as a 5\-element
row vector) or an idele (given as a 2\-element row vector). Because of
possible confusion with elements and ideals, other vector or matrix
arguments are forbidden.
.IX Xref "Galois"
.PP
The library syntax is \fBgaloisapply\fR\f(CW\*(C`(\f(CInf\f(CW,\f(CIaut\f(CW,x)\*(C'\fR.
.IX Xref "galoisapply"
.ie n .SS "nfgaloisconj""(\f(CInf\fP,{\f(CIflag\fP = 0},{d})"""
.el .SS "nfgaloisconj\f(CW(\fP\f(CInf\fP\f(CW,{\fP\f(CIflag\fP\f(CW = 0},{d})\fP"
.IX Xref "nfgaloisconj"
.IX Subsection "nfgaloisconj(nf,{flag = 0},{d})"
\&\f(CW\*(C`\f(CInf\f(CW\*(C'\fR being a
number field as output by \f(CW\*(C`nfinit\*(C'\fR, computes the conjugates of a root
\&\f(CW\*(C`r\*(C'\fR of the non-constant polynomial \f(CW\*(C`x = \f(CInf\f(CW[1]\*(C'\fR expressed as
polynomials in \f(CW\*(C`r\*(C'\fR. This can be used even if the number field \f(CW\*(C`\f(CInf\f(CW\*(C'\fR is
not Galois since some conjugates may lie in the field.
.IX Xref "Galois"
.PP
\&\f(CW\*(C`\f(CInf\f(CW\*(C'\fR can simply be a polynomial if \f(CW\*(C`\f(CIflag\f(CW ! = 1\*(C'\fR.
.PP
If no flags or \f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR, if \f(CW\*(C`\f(CInf\f(CW\*(C'\fR is a number field use a
combination of flag \f(CW4\fR and \f(CW1\fR and the result is always complete,
else use a combination of flag \f(CW4\fR and \f(CW2\fR and the result is subject
to the restriction of \f(CW\*(C`\f(CIflag\f(CW = 2\*(C'\fR, but a warning is issued when it is not
proven complete.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR, use \f(CW\*(C`nfroots\*(C'\fR (require a number field).
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 2\*(C'\fR, use complex approximations to the roots and an integral
\&\s-1LLL.\s0 The result is not guaranteed to be complete: some
conjugates may be missing (no warning issued), especially so if the
corresponding polynomial has a huge index. In that case, increasing
the default precision may help.
.IX Xref "LLL"
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 4\*(C'\fR, use Allombert's algorithm and permutation testing. If the
field is Galois with ``weakly'' super solvable Galois group, return
the complete list of automorphisms, else only the identity element. If
present, \f(CW\*(C`d\*(C'\fR is assumed to be a multiple of the least common
denominator of the conjugates expressed as polynomial in a root of
\&\fIpol\fR.
.PP
A group G is ``weakly'' super solvable (\s-1WKSS\s0) if it contains a super solvable
normal subgroup \f(CW\*(C`H\*(C'\fR such that \f(CW\*(C`G = H\*(C'\fR , or \f(CW\*(C`G/H  ~  A_4\*(C'\fR , or \f(CW\*(C`G/H  ~ 
S_4\*(C'\fR. Abelian and nilpotent groups are \s-1WKSS.\s0 In practice, almost all groups
of small order are \s-1WKSS,\s0 the exceptions having order 36(1 exception), 48(2),
56(1), 60(1), 72(5), 75(1), 80(1), 96(10) and \f(CW\*(C` >= 108\*(C'\fR.
.PP
Hence \f(CW\*(C`\f(CIflag\f(CW = 4\*(C'\fR permits to quickly check whether a polynomial of order
strictly less than \f(CW36\fR is Galois or not. This method is much faster than
\&\f(CW\*(C`nfroots\*(C'\fR and can be applied to polynomials of degree larger than \f(CW50\fR.
.PP
This routine can only compute \fB\f(BIQ\fB\fR\-automorphisms, but it may be used to get
\&\f(CW\*(C`K\*(C'\fR\-automorphism for any base field \f(CW\*(C`K\*(C'\fR as follows:
.PP
.Vb 10
\&    rnfgaloisconj(nfK, R) = \e\e K\-automorphisms of L = K[X] / (R)
\&    { local(polabs, N, H);
\&      R *= Mod(1, nfK.pol);             \e\e convert coeffs to polmod elts of K
\&      polabs = rnfequation(nfK, R);
\&      N = nfgaloisconj(polabs) % R;     \e\e Q\-automorphisms of L
\&      H = [];
\&      for(i=1, #N,                      \e\e select the ones that fix K
\&        if (subst(R, variable(R), Mod(N[i],R)) == 0,
\&          H = concat(H,N[i])
\&        )
\&      ); H
\&    }
\&    K  = nfinit(y^2 + 7);
\&    polL = x^4 \- y*x^3 \- 3*x^2 + y*x + 1;
\&    rnfgaloisconj(K, polL)             \e\e K\-automorphisms of L
.Ve
.PP
The library syntax is \fBgaloisconj0\fR\f(CW\*(C`(\f(CInf\f(CW,\f(CIflag\f(CW,d,\f(CIprec\f(CW)\*(C'\fR. Also available are
\&\f(CW\*(C` \f(CBgaloisconj\f(CW(\f(CInf\f(CW)\*(C'\fR for \f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR,
\&\f(CW\*(C` \f(CBgaloisconj2\f(CW(\f(CInf\f(CW,n,\f(CIprec\f(CW)\*(C'\fR for \f(CW\*(C`\f(CIflag\f(CW = 2\*(C'\fR where \f(CW\*(C`n\*(C'\fR is a bound
on the number of conjugates, and  \f(CW\*(C` \f(CBgaloisconj4\f(CW(\f(CInf\f(CW,d)\*(C'\fR
corresponding to \f(CW\*(C`\f(CIflag\f(CW = 4\*(C'\fR.
.IX Xref "galoisconj0 galoisconj galoisconj2 galoisconj4"
.ie n .SS "nfhilbert""(\f(CInf\fP,a,b,{\f(CIpr\fP})"""
.el .SS "nfhilbert\f(CW(\fP\f(CInf\fP\f(CW,a,b,{\fP\f(CIpr\fP\f(CW})\fP"
.IX Xref "nfhilbert"
.IX Subsection "nfhilbert(nf,a,b,{pr})"
if \fIpr\fR is omitted,
compute the global Hilbert symbol \f(CW\*(C`(a,b)\*(C'\fR in \f(CW\*(C`\f(CInf\f(CW\*(C'\fR, that is \f(CW1\fR
if \f(CW\*(C`x^2 \- a y^2 \- b z^2\*(C'\fR has a non trivial solution \f(CW\*(C`(x,y,z)\*(C'\fR in \f(CW\*(C`\f(CInf\f(CW\*(C'\fR,
and \f(CW\*(C`\-1\*(C'\fR otherwise. Otherwise compute the local symbol modulo the prime ideal
\&\fIpr\fR (as output by \f(CW\*(C`idealprimedec\*(C'\fR).
.IX Xref "Hilbert symbol"
.PP
The library syntax is \fBnfhilbert\fR\f(CW\*(C`(\f(CInf\f(CW,a,b,\f(CIpr\f(CW)\*(C'\fR, where an omitted \fIpr\fR is coded
as \f(CW\*(C`NULL\*(C'\fR.
.IX Xref "nfhilbert"
.ie n .SS "nfhnf""(\f(CInf\fP,x)"""
.el .SS "nfhnf\f(CW(\fP\f(CInf\fP\f(CW,x)\fP"
.IX Xref "nfhnf"
.IX Subsection "nfhnf(nf,x)"
given a pseudo-matrix \f(CW\*(C`(A,I)\*(C'\fR, finds a
pseudo-basis in Hermite normal form of the module it generates.
.IX Xref "Hermite normal form"
.PP
The library syntax is \fBnfhermite\fR\f(CW\*(C`(\f(CInf\f(CW,x)\*(C'\fR.
.IX Xref "nfhermite"
.ie n .SS "nfhnfmod""(\f(CInf\fP,x,\f(CIdetx\fP)"""
.el .SS "nfhnfmod\f(CW(\fP\f(CInf\fP\f(CW,x,\fP\f(CIdetx\fP\f(CW)\fP"
.IX Xref "nfhnfmod"
.IX Subsection "nfhnfmod(nf,x,detx)"
given a pseudo-matrix \f(CW\*(C`(A,I)\*(C'\fR
and an ideal \fIdetx\fR which is contained in (read integral multiple of) the
determinant of \f(CW\*(C`(A,I)\*(C'\fR, finds a pseudo-basis in Hermite normal form
of the module generated by \f(CW\*(C`(A,I)\*(C'\fR. This avoids coefficient explosion.
\&\fIdetx\fR can be computed using the function \f(CW\*(C`nfdetint\*(C'\fR.
.IX Xref "Hermite normal form"
.PP
The library syntax is \fBnfhermitemod\fR\f(CW\*(C`(\f(CInf\f(CW,x,\f(CIdetx\f(CW)\*(C'\fR.
.IX Xref "nfhermitemod"
.ie n .SS "nfinit""(\f(CIpol\fP,{\f(CIflag\fP = 0})"""
.el .SS "nfinit\f(CW(\fP\f(CIpol\fP\f(CW,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "nfinit"
.IX Subsection "nfinit(pol,{flag = 0})"
\&\fIpol\fR being a non-constant,
preferably monic, irreducible polynomial in \f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW[X]\*(C'\fR, initializes a
\&\eemph{number field} structure (\f(CW\*(C`nf\*(C'\fR) associated to the field \f(CW\*(C`K\*(C'\fR defined
by \fIpol\fR. As such, it's a technical object passed as the first argument
to most \f(CW\*(C`nf\*(C'\fR\fIxxx\fR functions, but it contains some information which
may be directly useful. Access to this information via \eemph{member
functions} is preferred since the specific data organization specified below
may change in the future. Currently, \f(CW\*(C`nf\*(C'\fR is a row vector with 9
components:
.PP
\&\f(CW\*(C`\f(CInf\f(CW[1]\*(C'\fR contains the polynomial \fIpol\fR (\f(CW\*(C`\f(CInf\f(CW.pol\*(C'\fR).
.PP
\&\f(CW\*(C`\f(CInf\f(CW[2]\*(C'\fR contains \f(CW\*(C`[r1,r2]\*(C'\fR (\f(CW\*(C`\f(CInf\f(CW.sign\*(C'\fR, \f(CW\*(C`\f(CInf\f(CW.r1\*(C'\fR,
\&\f(CW\*(C`\f(CInf\f(CW.r2\*(C'\fR), the number of real and complex places of \f(CW\*(C`K\*(C'\fR.
.PP
\&\f(CW\*(C`\f(CInf\f(CW[3]\*(C'\fR contains the discriminant \f(CWd(K)\fR (\f(CW\*(C`\f(CInf\f(CW.disc\*(C'\fR) of \f(CW\*(C`K\*(C'\fR.
.PP
\&\f(CW\*(C`\f(CInf\f(CW[4]\*(C'\fR contains the index of \f(CW\*(C`\f(CInf\f(CW[1]\*(C'\fR (\f(CW\*(C`\f(CInf\f(CW.index\*(C'\fR),
i.e. \f(CW\*(C`[\f(CB\f(CBZ\f(CB\f(CW_K : \f(CB\f(CBZ\f(CB\f(CW[\f(CItheta\f(CW]]\*(C'\fR, where \f(CW\*(C`\f(CItheta\f(CW\*(C'\fR is any root of \f(CW\*(C`\f(CInf\f(CW[1]\*(C'\fR.
.PP
\&\f(CW\*(C`\f(CInf\f(CW[5]\*(C'\fR is a vector containing 7 matrices \f(CW\*(C`M\*(C'\fR, \f(CW\*(C`G\*(C'\fR, \f(CW\*(C`T2\*(C'\fR, \f(CW\*(C`T\*(C'\fR,
\&\f(CW\*(C`MD\*(C'\fR, \f(CW\*(C`TI\*(C'\fR, \f(CW\*(C`MDI\*(C'\fR useful for certain computations in the number field \f(CW\*(C`K\*(C'\fR.
.PP
  \eitem \f(CW\*(C`M\*(C'\fR is the \f(CW\*(C`(r1+r2) x n\*(C'\fR matrix whose columns represent
the numerical values of the conjugates of the elements of the integral
basis.
.PP
  \eitem \f(CW\*(C`G\*(C'\fR is such that \f(CW\*(C`T2 = ^t G G\*(C'\fR, where \f(CW\*(C`T2\*(C'\fR is the quadratic
form \f(CW\*(C`T_2(x) = \f(CIsum\f(CW |\f(CIsigma\f(CW(x)|^2\*(C'\fR, \f(CW\*(C`\f(CIsigma\f(CW\*(C'\fR running over the embeddings of
\&\f(CW\*(C`K\*(C'\fR into \fB\f(BIC\fB\fR.
.PP
  \eitem The \f(CW\*(C`T2\*(C'\fR component is deprecated and currently unused.
.PP
  \eitem \f(CW\*(C`T\*(C'\fR is the \f(CW\*(C`n x n\*(C'\fR matrix whose coefficients are
\&\f(CW\*(C`Tr(\f(CIomega\f(CW_i\f(CIomega\f(CW_j)\*(C'\fR where the \f(CW\*(C`\f(CIomega\f(CW_i\*(C'\fR are the elements of the
integral basis. Note also that \f(CW\*(C` \f(CIdet\f(CW (T)\*(C'\fR is equal to the discriminant of the
field \f(CW\*(C`K\*(C'\fR.
.PP
  \eitem The columns of \f(CW\*(C`MD\*(C'\fR (\f(CW\*(C`\f(CInf\f(CW.diff\*(C'\fR) express a \fB\f(BIZ\fB\fR\-basis
of the different of \f(CW\*(C`K\*(C'\fR on the integral basis.
.PP
  \eitem \f(CW\*(C`TI\*(C'\fR is equal to \f(CW\*(C`d(K)T^{\-1}\*(C'\fR, which has integral
coefficients. Note that, understood as as ideal, the matrix \f(CW\*(C`T^{\-1}\*(C'\fR
generates the codifferent ideal.
.PP
  \eitem Finally, \f(CW\*(C`MDI\*(C'\fR is a two-element representation (for faster
ideal product) of \f(CWd(K)\fR times the codifferent ideal
(\f(CW\*(C`\f(CInf\f(CW.disc*\f(CInf\f(CW.codiff\*(C'\fR, which is an integral ideal). \f(CW\*(C`MDI\*(C'\fR
is only used in \f(CW\*(C`idealinv\*(C'\fR.
.IX Xref "idealinv"
.PP
\&\f(CW\*(C`\f(CInf\f(CW[6]\*(C'\fR is the vector containing the \f(CW\*(C`r1+r2\*(C'\fR roots
(\f(CW\*(C`\f(CInf\f(CW.roots\*(C'\fR) of \f(CW\*(C`\f(CInf\f(CW[1]\*(C'\fR corresponding to the \f(CW\*(C`r1+r2\*(C'\fR
embeddings of the number field into \fB\f(BIC\fB\fR (the first \f(CW\*(C`r1\*(C'\fR components are real,
the next \f(CW\*(C`r2\*(C'\fR have positive imaginary part).
.PP
\&\f(CW\*(C`\f(CInf\f(CW[7]\*(C'\fR is an integral basis for \f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW_K\*(C'\fR (\f(CW\*(C`\f(CInf\f(CW.zk\*(C'\fR) expressed
on the powers of \f(CW\*(C`\f(CItheta\f(CW\*(C'\fR. Its first element is guaranteed to be \f(CW1\fR. This
basis is LLL-reduced with respect to \f(CW\*(C`T_2\*(C'\fR (strictly speaking, it is a
permutation of such a basis, due to the condition that the first element be
\&\f(CW1\fR).
.PP
\&\f(CW\*(C`\f(CInf\f(CW[8]\*(C'\fR is the \f(CW\*(C`n x n\*(C'\fR integral matrix expressing the power
basis in terms of the integral basis, and finally
.PP
\&\f(CW\*(C`\f(CInf\f(CW[9]\*(C'\fR is the \f(CW\*(C`n x n^2\*(C'\fR matrix giving the multiplication table
of the integral basis.
.PP
If a non monic polynomial is input, \f(CW\*(C`nfinit\*(C'\fR will transform it into a
monic one, then reduce it (see \f(CW\*(C`\f(CIflag\f(CW = 3\*(C'\fR). It is allowed, though not very
useful given the existence of \f(CW\*(C`nfnewprec\*(C'\fR, to input a \f(CW\*(C`nf\*(C'\fR or a
\&\f(CW\*(C`bnf\*(C'\fR instead of a polynomial.
.IX Xref "nfnewprec"
.PP
.Vb 10
\&    ? nf = nfinit(x^3 \- 12); \e\e initialize number field Q[X] / (X^3 \- 12)
\&    ? nf.pol   \e\e defining polynomial
\&    %2 = x^3 \- 12
\&    ? nf.disc  \e\e field discriminant
\&    %3 = \-972
\&    ? nf.index \e\e index of power basis order in maximal order
\&    %4 = 2
\&    ? nf.zk    \e\e integer basis, lifted to Q[X]
\&    %5 = [1, x, 1/2*x^2]
\&    ? nf.sign  \e\e signature
\&    %6 = [1, 1]
\&    ? factor(abs(nf.disc ))  \e\e determines ramified primes
\&    %7 =
\&    [2 2]
\&
\&    [3 5]
\&    ? idealfactor(nf, 2)
\&    %8 =
\&    [[2, [0, 0, \-1]~, 3, 1, [0, 1, 0]~] 3]  \e\e  \egoth{P}_2^3
.Ve
.PP
In case \fIpol\fR has a huge discriminant which is difficult to factor,
the special input format \f(CW\*(C`[\f(CIpol\f(CW,B]\*(C'\fR is also accepted where \fIpol\fR is a
polynomial as above and \f(CW\*(C`B\*(C'\fR is the integer basis, as would be computed by
\&\f(CW\*(C`nfbasis\*(C'\fR. This is useful if the integer basis is known in advance,
or was computed conditionnally.
.IX Xref "nfbasis"
.PP
.Vb 5
\&    ? pol = polcompositum(x^5 \- 101, polcyclo(7))[1];
\&    ? B = nfbasis(pol, 1);   \e\e faster than nfbasis(pol), but conditional
\&    ? nf = nfinit( [pol, B] );
\&    ? factor( abs(nf.disc) )
\&    [5 18]
\&
\&    [7 25]
\&
\&    [101 24]
.Ve
.PP
\&\f(CW\*(C`B\*(C'\fR is conditional when its discriminant, which is \f(CW\*(C`nf.disc\*(C'\fR, can't be
factored. In this example, the above factorization proves the correctness of
the computation.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 2\*(C'\fR: \fIpol\fR is changed into another polynomial \f(CW\*(C`P\*(C'\fR defining the same
number field, which is as simple as can easily be found using the \f(CW\*(C`polred\*(C'\fR
algorithm, and all the subsequent computations are done using this new
polynomial. In particular, the first component of the result is the modified
polynomial.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 3\*(C'\fR, does a \f(CW\*(C`polred\*(C'\fR as in case 2, but outputs
\&\f(CW\*(C`[\f(CInf\f(CW,Mod(a,P)]\*(C'\fR, where \f(CW\*(C`\f(CInf\f(CW\*(C'\fR is as before and
\&\f(CW\*(C`Mod(a,P) = Mod(x,\f(CIpol\f(CW)\*(C'\fR gives the change of
variables. This is implicit when \fIpol\fR is not monic: first a linear change
of variables is performed, to get a monic polynomial, then a \f(CW\*(C`polred\*(C'\fR
reduction.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 4\*(C'\fR, as \f(CW2\fR but uses a partial \f(CW\*(C`polred\*(C'\fR.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 5\*(C'\fR, as \f(CW3\fR using a partial \f(CW\*(C`polred\*(C'\fR.
.PP
The library syntax is \fBnfinit0\fR\f(CW\*(C`(x,\f(CIflag\f(CW,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "nfinit0"
.ie n .SS "nfisideal""(\f(CInf\fP,x)"""
.el .SS "nfisideal\f(CW(\fP\f(CInf\fP\f(CW,x)\fP"
.IX Xref "nfisideal"
.IX Subsection "nfisideal(nf,x)"
returns 1 if \f(CW\*(C`x\*(C'\fR is an ideal in
the number field \f(CW\*(C`\f(CInf\f(CW\*(C'\fR, 0 otherwise.
.PP
The library syntax is \fBisideal\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "isideal"
.ie n .SS "nfisincl""(x,y)"""
.el .SS "nfisincl\f(CW(x,y)\fP"
.IX Xref "nfisincl"
.IX Subsection "nfisincl(x,y)"
tests whether the number field \f(CW\*(C`K\*(C'\fR defined
by the polynomial \f(CW\*(C`x\*(C'\fR is conjugate to a subfield of the field \f(CW\*(C`L\*(C'\fR defined
by \f(CW\*(C`y\*(C'\fR (where \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR must be in \f(CW\*(C`\f(CB\f(CBQ\f(CB\f(CW[X]\*(C'\fR). If they are not, the output
is the number 0. If they are, the output is a vector of polynomials, each
polynomial \f(CW\*(C`a\*(C'\fR representing an embedding of \f(CW\*(C`K\*(C'\fR into \f(CW\*(C`L\*(C'\fR, i.e. being such
that \f(CW\*(C`y | x o a\*(C'\fR.
.PP
If \f(CW\*(C`y\*(C'\fR is a number field (\fInf\fR), a much faster algorithm is used
(factoring \f(CW\*(C`x\*(C'\fR over \f(CW\*(C`y\*(C'\fR using \f(CW\*(C`nffactor\*(C'\fR). Before version 2.0.14, this
wasn't guaranteed to return all the embeddings, hence was triggered by a
special flag. This is no more the case.
.IX Xref "nffactor"
.PP
The library syntax is \fBnfisincl\fR\f(CW\*(C`(x,y,\f(CIflag\f(CW)\*(C'\fR.
.IX Xref "nfisincl"
.ie n .SS "nfisisom""(x,y)"""
.el .SS "nfisisom\f(CW(x,y)\fP"
.IX Xref "nfisisom"
.IX Subsection "nfisisom(x,y)"
as \f(CW\*(C`nfisincl\*(C'\fR, but tests
for isomorphism. If either \f(CW\*(C`x\*(C'\fR or \f(CW\*(C`y\*(C'\fR is a number field, a much faster
algorithm will be used.
.IX Xref "nfisincl"
.PP
The library syntax is \fBnfisisom\fR\f(CW\*(C`(x,y,\f(CIflag\f(CW)\*(C'\fR.
.IX Xref "nfisisom"
.ie n .SS "nfnewprec""(\f(CInf\fP)"""
.el .SS "nfnewprec\f(CW(\fP\f(CInf\fP\f(CW)\fP"
.IX Xref "nfnewprec"
.IX Subsection "nfnewprec(nf)"
transforms the number field \f(CW\*(C`\f(CInf\f(CW\*(C'\fR
into the corresponding data using current (usually larger) precision. This
function works as expected if \f(CW\*(C`\f(CInf\f(CW\*(C'\fR is in fact a \f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR (update
\&\f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR to current precision) but may be quite slow (many generators of
principal ideals have to be computed).
.PP
The library syntax is \fBnfnewprec\fR\f(CW\*(C`(\f(CInf\f(CW,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "nfnewprec"
.ie n .SS "nfkermodpr""(\f(CInf\fP,a,\f(CIpr\fP)"""
.el .SS "nfkermodpr\f(CW(\fP\f(CInf\fP\f(CW,a,\fP\f(CIpr\fP\f(CW)\fP"
.IX Xref "nfkermodpr"
.IX Subsection "nfkermodpr(nf,a,pr)"
kernel of the matrix \f(CW\*(C`a\*(C'\fR in
\&\f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW_K/\f(CIpr\f(CW\*(C'\fR, where \fIpr\fR is in \fBmodpr\fR format
(see \f(CW\*(C`nfmodprinit\*(C'\fR).
.PP
The library syntax is \fBnfkermodpr\fR\f(CW\*(C`(\f(CInf\f(CW,a,\f(CIpr\f(CW)\*(C'\fR.
.IX Xref "nfkermodpr"
.ie n .SS "nfmodprinit""(\f(CInf\fP,\f(CIpr\fP)"""
.el .SS "nfmodprinit\f(CW(\fP\f(CInf\fP\f(CW,\fP\f(CIpr\fP\f(CW)\fP"
.IX Xref "nfmodprinit"
.IX Subsection "nfmodprinit(nf,pr)"
transforms the prime ideal
\&\fIpr\fR into \f(CW\*(C`modpr\*(C'\fR format necessary for all operations modulo
\&\fIpr\fR in the number field \fInf\fR.
.IX Xref "modpr Label se:nfmodprinit"
.PP
The library syntax is \fBnfmodprinit\fR\f(CW\*(C`(\f(CInf\f(CW,\f(CIpr\f(CW)\*(C'\fR.
.IX Xref "nfmodprinit"
.ie n .SS "nfsubfields""(\f(CIpol\fP,{d = 0})"""
.el .SS "nfsubfields\f(CW(\fP\f(CIpol\fP\f(CW,{d = 0})\fP"
.IX Xref "nfsubfields"
.IX Subsection "nfsubfields(pol,{d = 0})"
finds all subfields of degree
\&\f(CW\*(C`d\*(C'\fR of the number field defined by the (monic, integral) polynomial
\&\fIpol\fR (all subfields if \f(CW\*(C`d\*(C'\fR is null or omitted). The result is a vector
of subfields, each being given by \f(CW\*(C`[g,h]\*(C'\fR, where \f(CW\*(C`g\*(C'\fR is an absolute equation
and \f(CW\*(C`h\*(C'\fR expresses one of the roots of \f(CW\*(C`g\*(C'\fR in terms of the root \f(CW\*(C`x\*(C'\fR of the
polynomial defining \f(CW\*(C`\f(CInf\f(CW\*(C'\fR. This routine uses J. Klüners's algorithm
in the general case, and B. Allombert's \f(CW\*(C`galoissubfields\*(C'\fR when \fInf\fR
is Galois (with weakly supersolvable Galois group).
.IX Xref "galoissubfields Galois subfield"
.PP
The library syntax is \fBsubfields\fR\f(CW\*(C`(\f(CInf\f(CW,d)\*(C'\fR.
.IX Xref "subfields"
.ie n .SS "nfroots""({\f(CInf\fP},x)"""
.el .SS "nfroots\f(CW({\fP\f(CInf\fP\f(CW},x)\fP"
.IX Xref "nfroots"
.IX Subsection "nfroots({nf},x)"
roots of the polynomial \f(CW\*(C`x\*(C'\fR in the
number field \f(CW\*(C`\f(CInf\f(CW\*(C'\fR given by \f(CW\*(C`nfinit\*(C'\fR without multiplicity (in \fB\f(BIQ\fB\fR
if \f(CW\*(C`\f(CInf\f(CW\*(C'\fR is omitted). \f(CW\*(C`x\*(C'\fR has coefficients in the number field (scalar,
polmod, polynomial, column vector). The main variable of \f(CW\*(C`\f(CInf\f(CW\*(C'\fR must be
of lower priority than that of \f(CW\*(C`x\*(C'\fR (see \*(L"Label se:priority\*(R"). However if the
coefficients of the number field occur explicitly (as polmods) as
coefficients of \f(CW\*(C`x\*(C'\fR, the variable of these polmods \eemph{must} be the same as
the main variable of \f(CW\*(C`t\*(C'\fR (see \f(CW\*(C`nffactor\*(C'\fR).
.PP
The library syntax is \fBnfroots\fR\f(CW\*(C`(\f(CInf\f(CW,x)\*(C'\fR.
.IX Xref "nfroots"
.ie n .SS "nfrootsof1""(\f(CInf\fP)"""
.el .SS "nfrootsof1\f(CW(\fP\f(CInf\fP\f(CW)\fP"
.IX Xref "nfrootsof1"
.IX Subsection "nfrootsof1(nf)"
computes the number of roots of unity
\&\f(CW\*(C`w\*(C'\fR and a primitive \f(CW\*(C`w\*(C'\fR\-th root of unity (expressed on the integral basis)
belonging to the number field \f(CW\*(C`\f(CInf\f(CW\*(C'\fR. The result is a two-component
vector \f(CW\*(C`[w,z]\*(C'\fR where \f(CW\*(C`z\*(C'\fR is a column vector expressing a primitive \f(CW\*(C`w\*(C'\fR\-th
root of unity on the integral basis \f(CW\*(C`\f(CInf\f(CW.zk\*(C'\fR.
.PP
The library syntax is \fBrootsof1\fR\f(CW\*(C`(\f(CInf\f(CW)\*(C'\fR.
.IX Xref "rootsof1"
.ie n .SS "nfsnf""(\f(CInf\fP,x)"""
.el .SS "nfsnf\f(CW(\fP\f(CInf\fP\f(CW,x)\fP"
.IX Xref "nfsnf"
.IX Subsection "nfsnf(nf,x)"
given a torsion module \f(CW\*(C`x\*(C'\fR as a 3\-component
row
vector \f(CW\*(C`[A,I,J]\*(C'\fR where \f(CW\*(C`A\*(C'\fR is a square invertible \f(CW\*(C`n x n\*(C'\fR matrix, \f(CW\*(C`I\*(C'\fR and
\&\f(CW\*(C`J\*(C'\fR are two ideal lists, outputs an ideal list \f(CW\*(C`d_1,...,d_n\*(C'\fR which is the
Smith normal form of \f(CW\*(C`x\*(C'\fR. In other words, \f(CW\*(C`x\*(C'\fR is isomorphic to
\&\f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW_K/d_1 \f(CIoplus\f(CW ... \f(CIoplus\f(CW \f(CB\f(CBZ\f(CB\f(CW_K/d_n\*(C'\fR and \f(CW\*(C`d_i\*(C'\fR divides \f(CW\*(C`d_{i\-1}\*(C'\fR for \f(CW\*(C`i >= 2\*(C'\fR.
The link between \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`[A,I,J]\*(C'\fR is as follows: if \f(CW\*(C`e_i\*(C'\fR is the canonical
basis of \f(CW\*(C`K^n\*(C'\fR, \f(CW\*(C`I = [b_1,...,b_n]\*(C'\fR and \f(CW\*(C`J = [a_1,...,a_n]\*(C'\fR, then \f(CW\*(C`x\*(C'\fR is
isomorphic to
.IX Xref "Smith normal form"
.PP
  \f(CW\*(C` (b_1e_1 \f(CIoplus\f(CW ... \f(CIoplus\f(CW  b_ne_n) / (a_1A_1 \f(CIoplus\f(CW ... \f(CIoplus\f(CW  a_nA_n)
 , \*(C'\fR
.PP
where the \f(CW\*(C`A_j\*(C'\fR are the columns of the matrix \f(CW\*(C`A\*(C'\fR. Note that every finitely
generated torsion module can be given in this way, and even with \f(CW\*(C`b_i = Z_K\*(C'\fR
for all \f(CW\*(C`i\*(C'\fR.
.PP
The library syntax is \fBnfsmith\fR\f(CW\*(C`(\f(CInf\f(CW,x)\*(C'\fR.
.IX Xref "nfsmith"
.ie n .SS "nfsolvemodpr""(\f(CInf\fP,a,b,\f(CIpr\fP)"""
.el .SS "nfsolvemodpr\f(CW(\fP\f(CInf\fP\f(CW,a,b,\fP\f(CIpr\fP\f(CW)\fP"
.IX Xref "nfsolvemodpr"
.IX Subsection "nfsolvemodpr(nf,a,b,pr)"
solution of \f(CW\*(C`a.x = b\*(C'\fR
in \f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW_K/\f(CIpr\f(CW\*(C'\fR, where \f(CW\*(C`a\*(C'\fR is a matrix and \f(CW\*(C`b\*(C'\fR a column vector, and where
\&\fIpr\fR is in \fBmodpr\fR format (see \f(CW\*(C`nfmodprinit\*(C'\fR).
.PP
The library syntax is \fBnfsolvemodpr\fR\f(CW\*(C`(\f(CInf\f(CW,a,b,\f(CIpr\f(CW)\*(C'\fR.
.IX Xref "nfsolvemodpr"
.ie n .SS "polcompositum""(P,Q,{\f(CIflag\fP = 0})"""
.el .SS "polcompositum\f(CW(P,Q,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "polcompositum"
.IX Subsection "polcompositum(P,Q,{flag = 0})"
\&\f(CW\*(C`P\*(C'\fR and \f(CW\*(C`Q\*(C'\fR
being squarefree polynomials in \f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW[X]\*(C'\fR in the same variable, outputs
the simple factors of the étale \fB\f(BIQ\fB\fR\-algebra \f(CW\*(C`A = \f(CB\f(CBQ\f(CB\f(CW(X, Y) / (P(X), Q(Y))\*(C'\fR.
The factors are given by a list of polynomials \f(CW\*(C`R\*(C'\fR in \f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW[X]\*(C'\fR, associated to
the number field \f(CW\*(C`\f(CB\f(CBQ\f(CB\f(CW(X)/ (R)\*(C'\fR, and sorted by increasing degree (with respect
to lexicographic ordering for factors of equal degrees). Returns an error if
one of the polynomials is not squarefree.
.IX Xref "compositum"
.PP
Note that it is more efficient to reduce to the case where \f(CW\*(C`P\*(C'\fR and \f(CW\*(C`Q\*(C'\fR are
irreducible first. The routine will not perform this for you, since it may be
expensive, and the inputs are irreducible in most applications anyway.
Assuming \f(CW\*(C`P\*(C'\fR is irreducible (of smaller degree than \f(CW\*(C`Q\*(C'\fR for efficiency), it
is in general \eemph{much} faster to proceed as follows
.PP
.Vb 2
\&     nf = nfinit(P); L = nffactor(nf, Q)[,1];
\&     vector(#L, i, rnfequation(nf, L[i]))
.Ve
.PP
to obtain the same result. If you are only interested in the degrees of the
simple factors, the \f(CW\*(C`rnfequation\*(C'\fR instruction can be replaced by a
trivial \f(CW\*(C`poldegree(P) * poldegree(L[i])\*(C'\fR.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR, outputs a vector of 4\-component vectors \f(CW\*(C`[R,a,b,k]\*(C'\fR, where \f(CW\*(C`R\*(C'\fR
ranges through the list of all possible compositums as above, and \f(CW\*(C`a\*(C'\fR
(resp. \f(CW\*(C`b\*(C'\fR) expresses the root of \f(CW\*(C`P\*(C'\fR (resp. \f(CW\*(C`Q\*(C'\fR) as an element of
\&\f(CW\*(C`\f(CB\f(CBQ\f(CB\f(CW(X)/(R)\*(C'\fR. Finally, \f(CW\*(C`k\*(C'\fR is a small integer such that \f(CW\*(C`b + ka = X\*(C'\fR modulo
\&\f(CW\*(C`R\*(C'\fR.
.PP
A compositum is quite often defined by a complicated polynomial, which it is
advisable to reduce before further work. Here is a simple example involving
the field \f(CW\*(C`\f(CB\f(CBQ\f(CB\f(CW(\f(CIzeta\f(CW_5, 5^{1/5})\*(C'\fR:
.PP
.Vb 10
\&  ? pol = z[1]
\&  %5 = x^20 + 25*x^10 + 5
\&  ? a = subst(a.pol, x, z[2])  \e\e pol defines the compositum
\&  ? pol = z[1]
\&  %5 = x^20 + 25*x^10 + 5
\&  ? a = subst(a.pol, x, z[2])  \e\e a is a fifth root of 5
\&  ? pol = z[1]
\&  %5 = x^20 + 25*x^10 + 5
\&  ? a = subst(a.pol, x, z[2])  \e\e look for a simpler polynomial
\&  ? pol = z[1]
\&  %5 = x^20 + 25*x^10 + 5
\&  ? a = subst(a.pol, x, z[2])  \e\e a in the new coordinates
\&  %6 = Mod(\-5/22*x^19 + 1/22*x^14 \- 123/22*x^9 + 9/11*x^4, x^20 + 25*x^10 + 5)
.Ve
.PP
The library syntax is \fBpolcompositum0\fR\f(CW\*(C`(P,Q,\f(CIflag\f(CW)\*(C'\fR.
.IX Xref "polcompositum0"
.ie n .SS "polgalois""(x)"""
.el .SS "polgalois\f(CW(x)\fP"
.IX Xref "polgalois"
.IX Subsection "polgalois(x)"
Galois group of the non-constant
polynomial \f(CW\*(C`x belongs to \f(CB\f(CBQ\f(CB\f(CW[X]\*(C'\fR. In the present version \fB2.3.5\fR, \f(CW\*(C`x\*(C'\fR must be irreducible
and the degree of \f(CW\*(C`x\*(C'\fR must be less than or equal to 7. On certain versions for
which the data file of Galois resolvents has been installed (available in the
Unix distribution as a separate package), degrees 8, 9, 10 and 11 are also
implemented.
.IX Xref "Galois"
.PP
The output is a 4\-component vector \f(CW\*(C`[n,s,k,name]\*(C'\fR with the
following meaning: \f(CW\*(C`n\*(C'\fR is the cardinality of the group, \f(CW\*(C`s\*(C'\fR is its signature
(\f(CW\*(C`s = 1\*(C'\fR if the group is a subgroup of the alternating group \f(CW\*(C`A_n\*(C'\fR, \f(CW\*(C`s = \-1\*(C'\fR
otherwise) and name is a character string containing name of the transitive
group according to the \s-1GAP 4\s0 transitive groups library by Alexander Hulpke.
.PP
\&\f(CW\*(C`k\*(C'\fR is more arbitrary and the choice made up to version 2.2.3 of \s-1PARI\s0 is rather
unfortunate: for \f(CW\*(C`n > 7\*(C'\fR, \f(CW\*(C`k\*(C'\fR is the numbering of the group among all
transitive subgroups of \f(CW\*(C`S_n\*(C'\fR, as given in ``The transitive groups of degree up
to eleven'', G. Butler and J. McKay, \eemph{Communications in Algebra}, vol. 11,
1983,
pp. 863\-\-911 (group \f(CW\*(C`k\*(C'\fR is denoted \f(CW\*(C`T_k\*(C'\fR there). And for \f(CW\*(C`n <= 7\*(C'\fR, it was ad
hoc, so as to ensure that a given triple would design a unique group.
Specifically, for polynomials of degree \f(CW\*(C` <= 7\*(C'\fR, the groups are coded as
follows, using standard notations
.PP
In degree 1: \f(CW\*(C`S_1 = [1,1,1]\*(C'\fR.
.PP
In degree 2: \f(CW\*(C`S_2 = [2,\-1,1]\*(C'\fR.
.PP
In degree 3: \f(CW\*(C`A_3 = C_3 = [3,1,1]\*(C'\fR, \f(CW\*(C`S_3 = [6,\-1,1]\*(C'\fR.
.PP
In degree 4: \f(CW\*(C`C_4 = [4,\-1,1]\*(C'\fR, \f(CW\*(C`V_4 = [4,1,1]\*(C'\fR, \f(CW\*(C`D_4 = [8,\-1,1]\*(C'\fR, \f(CW\*(C`A_4 = [12,1,1]\*(C'\fR,
\&\f(CW\*(C`S_4 = [24,\-1,1]\*(C'\fR.
.PP
In degree 5: \f(CW\*(C`C_5 = [5,1,1]\*(C'\fR, \f(CW\*(C`D_5 = [10,1,1]\*(C'\fR, \f(CW\*(C`M_{20} = [20,\-1,1]\*(C'\fR,
\&\f(CW\*(C`A_5 = [60,1,1]\*(C'\fR, \f(CW\*(C`S_5 = [120,\-1,1]\*(C'\fR.
.PP
In degree 6: \f(CW\*(C`C_6 = [6,\-1,1]\*(C'\fR, \f(CW\*(C`S_3 = [6,\-1,2]\*(C'\fR, \f(CW\*(C`D_6 = [12,\-1,1]\*(C'\fR, \f(CW\*(C`A_4 = [12,1,1]\*(C'\fR,
\&\f(CW\*(C`G_{18} = [18,\-1,1]\*(C'\fR, \f(CW\*(C`S_4^ \-= [24,\-1,1]\*(C'\fR, \f(CW\*(C`A_4 x C_2 = [24,\-1,2]\*(C'\fR,
\&\f(CW\*(C`S_4^ += [24,1,1]\*(C'\fR, \f(CW\*(C`G_{36}^ \-= [36,\-1,1]\*(C'\fR, \f(CW\*(C`G_{36}^ += [36,1,1]\*(C'\fR,
\&\f(CW\*(C`S_4 x C_2 = [48,\-1,1]\*(C'\fR, \f(CW\*(C`A_5 = PSL_2(5) = [60,1,1]\*(C'\fR, \f(CW\*(C`G_{72} = [72,\-1,1]\*(C'\fR,
\&\f(CW\*(C`S_5 = PGL_2(5) = [120,\-1,1]\*(C'\fR, \f(CW\*(C`A_6 = [360,1,1]\*(C'\fR, \f(CW\*(C`S_6 = [720,\-1,1]\*(C'\fR.
.PP
In degree 7: \f(CW\*(C`C_7 = [7,1,1]\*(C'\fR, \f(CW\*(C`D_7 = [14,\-1,1]\*(C'\fR, \f(CW\*(C`M_{21} = [21,1,1]\*(C'\fR,
\&\f(CW\*(C`M_{42} = [42,\-1,1]\*(C'\fR, \f(CW\*(C`PSL_2(7) = PSL_3(2) = [168,1,1]\*(C'\fR, \f(CW\*(C`A_7 = [2520,1,1]\*(C'\fR,
\&\f(CW\*(C`S_7 = [5040,\-1,1]\*(C'\fR.
.PP
This is deprecated and obsolete, but for reasons of backward compatibility,
we cannot change this behaviour yet. So you can use the default
\&\f(CW\*(C`new_galois_format\*(C'\fR to switch to a consistent naming scheme, namely \f(CW\*(C`k\*(C'\fR is
always the standard numbering of the group among all transitive subgroups of
\&\f(CW\*(C`S_n\*(C'\fR. If this default is in effect, the above groups will be coded as:
.IX Xref "new_galois_format"
.PP
In degree 1: \f(CW\*(C`S_1 = [1,1,1]\*(C'\fR.
.PP
In degree 2: \f(CW\*(C`S_2 = [2,\-1,1]\*(C'\fR.
.PP
In degree 3: \f(CW\*(C`A_3 = C_3 = [3,1,1]\*(C'\fR, \f(CW\*(C`S_3 = [6,\-1,2]\*(C'\fR.
.PP
In degree 4: \f(CW\*(C`C_4 = [4,\-1,1]\*(C'\fR, \f(CW\*(C`V_4 = [4,1,2]\*(C'\fR, \f(CW\*(C`D_4 = [8,\-1,3]\*(C'\fR, \f(CW\*(C`A_4 = [12,1,4]\*(C'\fR,
\&\f(CW\*(C`S_4 = [24,\-1,5]\*(C'\fR.
.PP
In degree 5: \f(CW\*(C`C_5 = [5,1,1]\*(C'\fR, \f(CW\*(C`D_5 = [10,1,2]\*(C'\fR, \f(CW\*(C`M_{20} = [20,\-1,3]\*(C'\fR,
\&\f(CW\*(C`A_5 = [60,1,4]\*(C'\fR, \f(CW\*(C`S_5 = [120,\-1,5]\*(C'\fR.
.PP
In degree 6: \f(CW\*(C`C_6 = [6,\-1,1]\*(C'\fR, \f(CW\*(C`S_3 = [6,\-1,2]\*(C'\fR, \f(CW\*(C`D_6 = [12,\-1,3]\*(C'\fR, \f(CW\*(C`A_4 = [12,1,4]\*(C'\fR,
\&\f(CW\*(C`G_{18} = [18,\-1,5]\*(C'\fR, \f(CW\*(C`A_4 x C_2 = [24,\-1,6]\*(C'\fR, \f(CW\*(C`S_4^ += [24,1,7]\*(C'\fR,
\&\f(CW\*(C`S_4^ \-= [24,\-1,8]\*(C'\fR, \f(CW\*(C`G_{36}^ \-= [36,\-1,9]\*(C'\fR, \f(CW\*(C`G_{36}^ += [36,1,10]\*(C'\fR,
\&\f(CW\*(C`S_4 x C_2 = [48,\-1,11]\*(C'\fR, \f(CW\*(C`A_5 = PSL_2(5) = [60,1,12]\*(C'\fR, \f(CW\*(C`G_{72} = [72,\-1,13]\*(C'\fR,
\&\f(CW\*(C`S_5 = PGL_2(5) = [120,\-1,14]\*(C'\fR, \f(CW\*(C`A_6 = [360,1,15]\*(C'\fR, \f(CW\*(C`S_6 = [720,\-1,16]\*(C'\fR.
.PP
In degree 7: \f(CW\*(C`C_7 = [7,1,1]\*(C'\fR, \f(CW\*(C`D_7 = [14,\-1,2]\*(C'\fR, \f(CW\*(C`M_{21} = [21,1,3]\*(C'\fR,
\&\f(CW\*(C`M_{42} = [42,\-1,4]\*(C'\fR, \f(CW\*(C`PSL_2(7) = PSL_3(2) = [168,1,5]\*(C'\fR, \f(CW\*(C`A_7 = [2520,1,6]\*(C'\fR,
\&\f(CW\*(C`S_7 = [5040,\-1,7]\*(C'\fR.
.PP
\&\fBWarning:\fR The method used is that of resolvent polynomials and is
sensitive to the current precision. The precision is updated internally but,
in very rare cases, a wrong result may be returned if the initial precision
was not sufficient.
.PP
The library syntax is \fBpolgalois\fR\f(CW\*(C`(x,\f(CIprec\f(CW)\*(C'\fR. To enable the new format in library mode,
set the global variable \f(CW\*(C`new_galois_format\*(C'\fR to \f(CW1\fR.
.IX Xref "polgalois new_galois_format"
.ie n .SS "polred""(x,{\f(CIflag\fP = 0},{fa})"""
.el .SS "polred\f(CW(x,{\fP\f(CIflag\fP\f(CW = 0},{fa})\fP"
.IX Xref "polred"
.IX Subsection "polred(x,{flag = 0},{fa})"
finds polynomials with reasonably
small coefficients defining subfields of the number field defined by \f(CW\*(C`x\*(C'\fR.
One of the polynomials always defines \fB\f(BIQ\fB\fR (hence is equal to \f(CW\*(C`x\-1\*(C'\fR),
and another always defines the same number field as \f(CW\*(C`x\*(C'\fR if \f(CW\*(C`x\*(C'\fR is irreducible.
All \f(CW\*(C`x\*(C'\fR accepted by \f(CW\*(C`nfinit\*(C'\fR are also allowed here (e.g. non-monic
polynomials, \f(CW\*(C`nf\*(C'\fR, \f(CW\*(C`bnf\*(C'\fR, \f(CW\*(C`[x,Z_K_basis]\*(C'\fR).
.IX Xref "nfinit"
.PP
The following binary digits of \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR are significant:
.PP
1: possibly use a suborder of the maximal order. The primes dividing the
index of the order chosen are larger than \f(CW\*(C`primelimit\*(C'\fR or divide integers
stored in the \f(CW\*(C`addprimes\*(C'\fR table.
.IX Xref "primelimit addprimes"
.PP
2: gives also elements. The result is a two-column matrix, the first column
giving the elements defining these subfields, the second giving the
corresponding minimal polynomials.
.PP
If \f(CW\*(C`fa\*(C'\fR is given, it is assumed that it is the two-column matrix of the
factorization of the discriminant of the polynomial \f(CW\*(C`x\*(C'\fR.
.PP
The library syntax is \fBpolred0\fR\f(CW\*(C`(x,\f(CIflag\f(CW,fa)\*(C'\fR, where an omitted \f(CW\*(C`fa\*(C'\fR is coded by \f(CW\*(C`NULL\*(C'\fR. Also
available are \f(CW\*(C` \f(CBpolred\f(CW(x)\*(C'\fR and \f(CW\*(C` \f(CBfactoredpolred\f(CW(x,fa)\*(C'\fR, both
corresponding to \f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR.
.IX Xref "polred0 polred factoredpolred"
.ie n .SS "polredabs""(x,{\f(CIflag\fP = 0})"""
.el .SS "polredabs\f(CW(x,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "polredabs"
.IX Subsection "polredabs(x,{flag = 0})"
finds one of the polynomial defining
the same number field as the one defined by \f(CW\*(C`x\*(C'\fR, and such that the sum of the
squares of the modulus of the roots (i.e. the \f(CW\*(C`T_2\*(C'\fR\-norm) is minimal.
All \f(CW\*(C`x\*(C'\fR accepted by \f(CW\*(C`nfinit\*(C'\fR are also allowed here (e.g. non-monic
polynomials, \f(CW\*(C`nf\*(C'\fR, \f(CW\*(C`bnf\*(C'\fR, \f(CW\*(C`[x,Z_K_basis]\*(C'\fR).
.IX Xref "nfinit"
.PP
\&\fBWarning:\fR this routine uses an exponential-time algorithm to
enumerate all potential generators, and may be exceedingly slow when the
number field has many subfields, hence a lot of elements of small \f(CW\*(C`T_2\*(C'\fR\-norm.
E.g. do not try it on the compositum of many quadratic fields, use
\&\f(CW\*(C`polred\*(C'\fR instead.
.IX Xref "polred"
.PP
The binary digits of \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR mean
.PP
1: outputs a two-component row vector \f(CW\*(C`[P,a]\*(C'\fR, where \f(CW\*(C`P\*(C'\fR is the default
output and \f(CW\*(C`a\*(C'\fR is an element expressed on a root of the polynomial \f(CW\*(C`P\*(C'\fR,
whose minimal polynomial is equal to \f(CW\*(C`x\*(C'\fR.
.PP
4: gives \eemph{all} polynomials of minimal \f(CW\*(C`T_2\*(C'\fR norm (of the two polynomials
\&\f(CWP(x)\fR and \f(CW\*(C`P(\-x)\*(C'\fR, only one is given).
.PP
16: possibly use a suborder of the maximal order. The primes dividing the
index of the order chosen are larger than \f(CW\*(C`primelimit\*(C'\fR or divide integers
stored in the \f(CW\*(C`addprimes\*(C'\fR table. In that case it may happen that the
output polynomial does not have minimal \f(CW\*(C`T_2\*(C'\fR norm.
.IX Xref "primelimit addprimes Label se:polredabs"
.PP
The library syntax is \fBpolredabs0\fR\f(CW\*(C`(x,\f(CIflag\f(CW)\*(C'\fR.
.IX Xref "polredabs0"
.ie n .SS "polredord""(x)"""
.el .SS "polredord\f(CW(x)\fP"
.IX Xref "polredord"
.IX Subsection "polredord(x)"
finds polynomials with reasonably small
coefficients and of the same degree as that of \f(CW\*(C`x\*(C'\fR defining suborders of the
order defined by \f(CW\*(C`x\*(C'\fR. One of the polynomials always defines \fB\f(BIQ\fB\fR (hence
is equal to \f(CW\*(C`(x\-1)^n\*(C'\fR, where \f(CW\*(C`n\*(C'\fR is the degree), and another always defines
the same order as \f(CW\*(C`x\*(C'\fR if \f(CW\*(C`x\*(C'\fR is irreducible.
.PP
The library syntax is \fBordred\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "ordred"
.ie n .SS "poltschirnhaus""(x)"""
.el .SS "poltschirnhaus\f(CW(x)\fP"
.IX Xref "poltschirnhaus"
.IX Subsection "poltschirnhaus(x)"
applies a random Tschirnhausen
transformation to the polynomial \f(CW\*(C`x\*(C'\fR, which is assumed to be non-constant
and separable, so as to obtain a new equation for the étale algebra
defined by \f(CW\*(C`x\*(C'\fR. This is for instance useful when computing resolvents,
hence is used by the \f(CW\*(C`polgalois\*(C'\fR function.
.PP
The library syntax is \fBtschirnhaus\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "tschirnhaus"
.ie n .SS "rnfalgtobasis""(\f(CIrnf\fP,x)"""
.el .SS "rnfalgtobasis\f(CW(\fP\f(CIrnf\fP\f(CW,x)\fP"
.IX Xref "rnfalgtobasis"
.IX Subsection "rnfalgtobasis(rnf,x)"
expresses \f(CW\*(C`x\*(C'\fR on the relative
integral basis. Here, \f(CW\*(C`\f(CIrnf\f(CW\*(C'\fR is a relative number field extension \f(CW\*(C`L/K\*(C'\fR
as output by \f(CW\*(C`rnfinit\*(C'\fR, and \f(CW\*(C`x\*(C'\fR an element of \f(CW\*(C`L\*(C'\fR in absolute form, i.e.
expressed as a polynomial or polmod with polmod coefficients, \eemph{not} on
the relative integral basis.
.PP
The library syntax is \fBrnfalgtobasis\fR\f(CW\*(C`(\f(CIrnf\f(CW,x)\*(C'\fR.
.IX Xref "rnfalgtobasis"
.ie n .SS "rnfbasis""(\f(CIbnf\fP, M)"""
.el .SS "rnfbasis\f(CW(\fP\f(CIbnf\fP\f(CW, M)\fP"
.IX Xref "rnfbasis"
.IX Subsection "rnfbasis(bnf, M)"
let \f(CW\*(C`K\*(C'\fR the field represented by
\&\fIbnf\fR, as output by \f(CW\*(C`bnfinit\*(C'\fR. \f(CW\*(C`M\*(C'\fR is a projective \f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW_K\*(C'\fR\-module
given by a pseudo-basis, as output by \f(CW\*(C`rnfhnfbasis\*(C'\fR. The routine returns
either a true \f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW_K\*(C'\fR\-basis of \f(CW\*(C`M\*(C'\fR if it exists, or an \f(CW\*(C`n+1\*(C'\fR\-element
generating set of \f(CW\*(C`M\*(C'\fR if not, where \f(CW\*(C`n\*(C'\fR is the rank of \f(CW\*(C`M\*(C'\fR over \f(CW\*(C`\f(CIK\f(CW\*(C'\fR.
(Note that \f(CW\*(C`n\*(C'\fR is the size of the pseudo-basis.)
.PP
It is allowed to use a polynomial \f(CW\*(C`P\*(C'\fR with coefficients in \f(CW\*(C`K\*(C'\fR instead of \f(CW\*(C`M\*(C'\fR,
in which case, \f(CW\*(C`M\*(C'\fR is defined as the ring of integers of \f(CW\*(C`K[X]/(P)\*(C'\fR
(\f(CW\*(C`P\*(C'\fR is assumed irreducible over \f(CW\*(C`K\*(C'\fR), viewed as a \f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW_K\*(C'\fR\-module.
.PP
The library syntax is \fBrnfbasis\fR\f(CW\*(C`(\f(CIbnf\f(CW,x)\*(C'\fR.
.IX Xref "rnfbasis"
.ie n .SS "rnfbasistoalg""(\f(CIrnf\fP,x)"""
.el .SS "rnfbasistoalg\f(CW(\fP\f(CIrnf\fP\f(CW,x)\fP"
.IX Xref "rnfbasistoalg"
.IX Subsection "rnfbasistoalg(rnf,x)"
computes the representation of \f(CW\*(C`x\*(C'\fR
as a polmod with polmods coefficients. Here, \f(CW\*(C`\f(CIrnf\f(CW\*(C'\fR is a relative number
field extension \f(CW\*(C`L/K\*(C'\fR as output by \f(CW\*(C`rnfinit\*(C'\fR, and \f(CW\*(C`x\*(C'\fR an element of
\&\f(CW\*(C`L\*(C'\fR expressed on the relative integral basis.
.PP
The library syntax is \fBrnfbasistoalg\fR\f(CW\*(C`(\f(CIrnf\f(CW,x)\*(C'\fR.
.IX Xref "rnfbasistoalg"
.ie n .SS "rnfcharpoly""(\f(CInf\fP,T,a,{v = x})"""
.el .SS "rnfcharpoly\f(CW(\fP\f(CInf\fP\f(CW,T,a,{v = x})\fP"
.IX Xref "rnfcharpoly"
.IX Subsection "rnfcharpoly(nf,T,a,{v = x})"
characteristic polynomial of
\&\f(CW\*(C`a\*(C'\fR over \f(CW\*(C`\f(CInf\f(CW\*(C'\fR, where \f(CW\*(C`a\*(C'\fR belongs to the algebra defined by \f(CW\*(C`T\*(C'\fR over
\&\f(CW\*(C`\f(CInf\f(CW\*(C'\fR, i.e. \f(CW\*(C`\f(CInf\f(CW[X]/(T)\*(C'\fR. Returns a polynomial in variable \f(CW\*(C`v\*(C'\fR
(\f(CW\*(C`x\*(C'\fR by default).
.PP
The library syntax is \fBrnfcharpoly\fR\f(CW\*(C`(\f(CInf\f(CW,T,a,v)\*(C'\fR, where \f(CW\*(C`v\*(C'\fR is a variable number.
.IX Xref "rnfcharpoly"
.ie n .SS "rnfconductor""(\f(CIbnf\fP,\f(CIpol\fP,{\f(CIflag\fP = 0})"""
.el .SS "rnfconductor\f(CW(\fP\f(CIbnf\fP\f(CW,\fP\f(CIpol\fP\f(CW,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "rnfconductor"
.IX Subsection "rnfconductor(bnf,pol,{flag = 0})"
given \f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR
as output by \f(CW\*(C`bnfinit\*(C'\fR, and \fIpol\fR a relative polynomial defining an
Abelian extension, computes the class field theory conductor of this
Abelian extension. The result is a 3\-component vector
\&\f(CW\*(C`[\f(CIconductor\f(CW,\f(CIrayclgp\f(CW,\f(CIsubgroup\f(CW]\*(C'\fR, where \fIconductor\fR is
the conductor of the extension given as a 2\-component row vector
\&\f(CW\*(C`[f_0,f_ oo ]\*(C'\fR, \fIrayclgp\fR is the full ray class group corresponding to
the conductor given as a 3\-component vector [h,cyc,gen] as usual for a group,
and \fIsubgroup\fR is a matrix in \s-1HNF\s0 defining the subgroup of the ray class
group on the given generators gen. If \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR is non-zero, check that \fIpol\fR
indeed defines an Abelian extension, return 0 if it does not.
.IX Xref "Abelian extension"
.PP
The library syntax is \fBrnfconductor\fR\f(CW\*(C`(\f(CIrnf\f(CW,\f(CIpol\f(CW,\f(CIflag\f(CW)\*(C'\fR.
.IX Xref "rnfconductor"
.ie n .SS "rnfdedekind""(\f(CInf\fP,\f(CIpol\fP,\f(CIpr\fP)"""
.el .SS "rnfdedekind\f(CW(\fP\f(CInf\fP\f(CW,\fP\f(CIpol\fP\f(CW,\fP\f(CIpr\fP\f(CW)\fP"
.IX Xref "rnfdedekind"
.IX Subsection "rnfdedekind(nf,pol,pr)"
given a number field
\&\f(CW\*(C`\f(CInf\f(CW\*(C'\fR as output by \f(CW\*(C`nfinit\*(C'\fR and a polynomial \fIpol\fR with
coefficients in \f(CW\*(C`\f(CInf\f(CW\*(C'\fR defining a relative extension \f(CW\*(C`L\*(C'\fR of \f(CW\*(C`\f(CInf\f(CW\*(C'\fR,
evaluates the relative Dedekind criterion over the order defined by a
root of \fIpol\fR for the prime ideal \fIpr\fR and outputs a 3\-component
vector as the result. The first component is a flag equal to 1 if the
enlarged order could be proven to be \fIpr\fR\-maximal and to 0 otherwise (it
may be maximal in the latter case if \fIpr\fR is ramified in \f(CW\*(C`L\*(C'\fR), the second
component is a pseudo-basis of the enlarged order and the third component is
the valuation at \fIpr\fR of the order discriminant.
.IX Xref "Dedekind"
.PP
The library syntax is \fBrnfdedekind\fR\f(CW\*(C`(\f(CInf\f(CW,\f(CIpol\f(CW,\f(CIpr\f(CW)\*(C'\fR.
.IX Xref "rnfdedekind"
.ie n .SS "rnfdet""(\f(CInf\fP,M)"""
.el .SS "rnfdet\f(CW(\fP\f(CInf\fP\f(CW,M)\fP"
.IX Xref "rnfdet"
.IX Subsection "rnfdet(nf,M)"
given a pseudo-matrix \f(CW\*(C`M\*(C'\fR over the maximal
order of \f(CW\*(C`\f(CInf\f(CW\*(C'\fR, computes its determinant.
.PP
The library syntax is \fBrnfdet\fR\f(CW\*(C`(\f(CInf\f(CW,M)\*(C'\fR.
.IX Xref "rnfdet"
.ie n .SS "rnfdisc""(\f(CInf\fP,\f(CIpol\fP)"""
.el .SS "rnfdisc\f(CW(\fP\f(CInf\fP\f(CW,\fP\f(CIpol\fP\f(CW)\fP"
.IX Xref "rnfdisc"
.IX Subsection "rnfdisc(nf,pol)"
given a number field \f(CW\*(C`\f(CInf\f(CW\*(C'\fR as
output by \f(CW\*(C`nfinit\*(C'\fR and a polynomial \fIpol\fR with coefficients in
\&\f(CW\*(C`\f(CInf\f(CW\*(C'\fR defining a relative extension \f(CW\*(C`L\*(C'\fR of \f(CW\*(C`\f(CInf\f(CW\*(C'\fR, computes the
relative discriminant of \f(CW\*(C`L\*(C'\fR. This is a two-element row vector \f(CW\*(C`[D,d]\*(C'\fR, where
\&\f(CW\*(C`D\*(C'\fR is the relative ideal discriminant and \f(CW\*(C`d\*(C'\fR is the relative discriminant
considered as an element of \f(CW\*(C`\f(CInf\f(CW^*/{\f(CInf\f(CW^*}^2\*(C'\fR. The main variable of
\&\f(CW\*(C`\f(CInf\f(CW\*(C'\fR \eemph{must} be of lower priority than that of \fIpol\fR, see
\&\*(L"Label se:priority\*(R".
.PP
The library syntax is \fBrnfdiscf\fR\f(CW\*(C`(\f(CIbnf\f(CW,\f(CIpol\f(CW)\*(C'\fR.
.IX Xref "rnfdiscf"
.ie n .SS "rnfeltabstorel""(\f(CIrnf\fP,x)"""
.el .SS "rnfeltabstorel\f(CW(\fP\f(CIrnf\fP\f(CW,x)\fP"
.IX Xref "rnfeltabstorel"
.IX Subsection "rnfeltabstorel(rnf,x)"
\&\f(CW\*(C`\f(CIrnf\f(CW\*(C'\fR being a relative
number field extension \f(CW\*(C`L/K\*(C'\fR as output by \f(CW\*(C`rnfinit\*(C'\fR and \f(CW\*(C`x\*(C'\fR being an
element of \f(CW\*(C`L\*(C'\fR expressed as a polynomial modulo the absolute equation
\&\f(CW\*(C`\f(CIrnf\f(CW.pol\*(C'\fR, computes \f(CW\*(C`x\*(C'\fR as an element of the relative extension
\&\f(CW\*(C`L/K\*(C'\fR as a polmod with polmod coefficients.
.PP
The library syntax is \fBrnfelementabstorel\fR\f(CW\*(C`(\f(CIrnf\f(CW,x)\*(C'\fR.
.IX Xref "rnfelementabstorel"
.ie n .SS "rnfeltdown""(\f(CIrnf\fP,x)"""
.el .SS "rnfeltdown\f(CW(\fP\f(CIrnf\fP\f(CW,x)\fP"
.IX Xref "rnfeltdown"
.IX Subsection "rnfeltdown(rnf,x)"
\&\f(CW\*(C`\f(CIrnf\f(CW\*(C'\fR being a relative number
field extension \f(CW\*(C`L/K\*(C'\fR as output by \f(CW\*(C`rnfinit\*(C'\fR and \f(CW\*(C`x\*(C'\fR being an element of
\&\f(CW\*(C`L\*(C'\fR expressed as a polynomial or polmod with polmod coefficients, computes
\&\f(CW\*(C`x\*(C'\fR as an element of \f(CW\*(C`K\*(C'\fR as a polmod, assuming \f(CW\*(C`x\*(C'\fR is in \f(CW\*(C`K\*(C'\fR (otherwise an
error will occur). If \f(CW\*(C`x\*(C'\fR is given on the relative integral basis, apply
\&\f(CW\*(C`rnfbasistoalg\*(C'\fR first, otherwise \s-1PARI\s0 will believe you are dealing with a
vector.
.PP
The library syntax is \fBrnfelementdown\fR\f(CW\*(C`(\f(CIrnf\f(CW,x)\*(C'\fR.
.IX Xref "rnfelementdown"
.ie n .SS "rnfeltreltoabs""(\f(CIrnf\fP,x)"""
.el .SS "rnfeltreltoabs\f(CW(\fP\f(CIrnf\fP\f(CW,x)\fP"
.IX Xref "rnfeltreltoabs"
.IX Subsection "rnfeltreltoabs(rnf,x)"
\&\f(CW\*(C`\f(CIrnf\f(CW\*(C'\fR being a relative
number field extension \f(CW\*(C`L/K\*(C'\fR as output by \f(CW\*(C`rnfinit\*(C'\fR and \f(CW\*(C`x\*(C'\fR being an
element of \f(CW\*(C`L\*(C'\fR expressed as a polynomial or polmod with polmod
coefficients, computes \f(CW\*(C`x\*(C'\fR as an element of the absolute extension \f(CW\*(C`L/\f(CB\f(CBQ\f(CB\f(CW\*(C'\fR as
a polynomial modulo the absolute equation \f(CW\*(C`\f(CIrnf\f(CW.pol\*(C'\fR. If \f(CW\*(C`x\*(C'\fR is
given on the relative integral basis, apply \f(CW\*(C`rnfbasistoalg\*(C'\fR first,
otherwise \s-1PARI\s0 will believe you are dealing with a vector.
.PP
The library syntax is \fBrnfelementreltoabs\fR\f(CW\*(C`(\f(CIrnf\f(CW,x)\*(C'\fR.
.IX Xref "rnfelementreltoabs"
.ie n .SS "rnfeltup""(\f(CIrnf\fP,x)"""
.el .SS "rnfeltup\f(CW(\fP\f(CIrnf\fP\f(CW,x)\fP"
.IX Xref "rnfeltup"
.IX Subsection "rnfeltup(rnf,x)"
\&\f(CW\*(C`\f(CIrnf\f(CW\*(C'\fR being a relative number
field extension \f(CW\*(C`L/K\*(C'\fR as output by \f(CW\*(C`rnfinit\*(C'\fR and \f(CW\*(C`x\*(C'\fR being an element of
\&\f(CW\*(C`K\*(C'\fR expressed as a polynomial or polmod, computes \f(CW\*(C`x\*(C'\fR as an element of the
absolute extension \f(CW\*(C`L/\f(CB\f(CBQ\f(CB\f(CW\*(C'\fR as a polynomial modulo the absolute equation
\&\f(CW\*(C`\f(CIrnf\f(CW.pol\*(C'\fR. If \f(CW\*(C`x\*(C'\fR is given on the integral basis of \f(CW\*(C`K\*(C'\fR, apply
\&\f(CW\*(C`nfbasistoalg\*(C'\fR first, otherwise \s-1PARI\s0 will believe you are dealing with a
vector.
.PP
The library syntax is \fBrnfelementup\fR\f(CW\*(C`(\f(CIrnf\f(CW,x)\*(C'\fR.
.IX Xref "rnfelementup"
.ie n .SS "rnfequation""(\f(CInf\fP,\f(CIpol\fP,{\f(CIflag\fP = 0})"""
.el .SS "rnfequation\f(CW(\fP\f(CInf\fP\f(CW,\fP\f(CIpol\fP\f(CW,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "rnfequation"
.IX Subsection "rnfequation(nf,pol,{flag = 0})"
given a number field
\&\f(CW\*(C`\f(CInf\f(CW\*(C'\fR as output by \f(CW\*(C`nfinit\*(C'\fR (or simply a polynomial) and a
polynomial \fIpol\fR with coefficients in \f(CW\*(C`\f(CInf\f(CW\*(C'\fR defining a relative
extension \f(CW\*(C`L\*(C'\fR of \f(CW\*(C`\f(CInf\f(CW\*(C'\fR, computes the absolute equation of \f(CW\*(C`L\*(C'\fR over
\&\fB\f(BIQ\fB\fR.
.PP
If \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR is non-zero, outputs a 3\-component row vector \f(CW\*(C`[z,a,k]\*(C'\fR, where
\&\f(CW\*(C`z\*(C'\fR is the absolute equation of \f(CW\*(C`L\*(C'\fR over \fB\f(BIQ\fB\fR, as in the default behaviour,
\&\f(CW\*(C`a\*(C'\fR expresses as an element of \f(CW\*(C`L\*(C'\fR a root \f(CW\*(C`\f(CIalpha\f(CW\*(C'\fR of the polynomial
defining the base field \f(CW\*(C`\f(CInf\f(CW\*(C'\fR, and \f(CW\*(C`k\*(C'\fR is a small integer such that
\&\f(CW\*(C`\f(CItheta\f(CW = \f(CIbeta\f(CW+k\f(CIalpha\f(CW\*(C'\fR where \f(CW\*(C`\f(CItheta\f(CW\*(C'\fR is a root of \f(CW\*(C`z\*(C'\fR and \f(CW\*(C`\f(CIbeta\f(CW\*(C'\fR a root
of \f(CW\*(C`\f(CIpol\f(CW\*(C'\fR.
.PP
The main variable of \f(CW\*(C`\f(CInf\f(CW\*(C'\fR \eemph{must} be of lower priority than that
of \fIpol\fR (see \*(L"Label se:priority\*(R"). Note that for efficiency, this does
not check whether the relative equation is irreducible over \f(CW\*(C`\f(CInf\f(CW\*(C'\fR, but
only if it is squarefree. If it is reducible but squarefree, the result will
be the absolute equation of the étale algebra defined by \fIpol\fR. If
\&\fIpol\fR is not squarefree, an error message will be issued.
.PP
The library syntax is \fBrnfequation0\fR\f(CW\*(C`(\f(CInf\f(CW,\f(CIpol\f(CW,\f(CIflag\f(CW)\*(C'\fR.
.IX Xref "rnfequation0"
.ie n .SS "rnfhnfbasis""(\f(CIbnf\fP,x)"""
.el .SS "rnfhnfbasis\f(CW(\fP\f(CIbnf\fP\f(CW,x)\fP"
.IX Xref "rnfhnfbasis"
.IX Subsection "rnfhnfbasis(bnf,x)"
given \f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR as output by
\&\f(CW\*(C`bnfinit\*(C'\fR, and either a polynomial \f(CW\*(C`x\*(C'\fR with coefficients in \f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR
defining a relative extension \f(CW\*(C`L\*(C'\fR of \f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR, or a pseudo-basis \f(CW\*(C`x\*(C'\fR of
such an extension, gives either a true \f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR\-basis of \f(CW\*(C`L\*(C'\fR in upper
triangular Hermite normal form, if it exists, and returns \f(CW0\fR otherwise.
.PP
The library syntax is \fBrnfhnfbasis\fR\f(CW\*(C`(\f(CInf\f(CW,x)\*(C'\fR.
.IX Xref "rnfhnfbasis"
.ie n .SS "rnfidealabstorel""(\f(CIrnf\fP,x)"""
.el .SS "rnfidealabstorel\f(CW(\fP\f(CIrnf\fP\f(CW,x)\fP"
.IX Xref "rnfidealabstorel"
.IX Subsection "rnfidealabstorel(rnf,x)"
let \f(CW\*(C`\f(CIrnf\f(CW\*(C'\fR be a relative
number field extension \f(CW\*(C`L/K\*(C'\fR as output by \f(CW\*(C`rnfinit\*(C'\fR, and \f(CW\*(C`x\*(C'\fR an ideal of
the absolute extension \f(CW\*(C`L/\f(CB\f(CBQ\f(CB\f(CW\*(C'\fR given by a \fB\f(BIZ\fB\fR\-basis of elements of \f(CW\*(C`L\*(C'\fR.
Returns the relative pseudo-matrix in \s-1HNF\s0 giving the ideal \f(CW\*(C`x\*(C'\fR considered as
an ideal of the relative extension \f(CW\*(C`L/K\*(C'\fR.
.PP
If \f(CW\*(C`x\*(C'\fR is an ideal in \s-1HNF\s0 form, associated to an \fInf\fR structure, for
instance as output by \f(CW\*(C`idealhnf(\f(CInf\f(CW,...)\*(C'\fR,
use \f(CW\*(C`rnfidealabstorel(rnf, nf.zk * x)\*(C'\fR to convert it to a relative ideal.
.IX Xref "idealhnf"
.PP
The library syntax is \fBrnfidealabstorel\fR\f(CW\*(C`(\f(CIrnf\f(CW,x)\*(C'\fR.
.IX Xref "rnfidealabstorel Label se:rnfidealabstorel"
.ie n .SS "rnfidealdown""(\f(CIrnf\fP,x)"""
.el .SS "rnfidealdown\f(CW(\fP\f(CIrnf\fP\f(CW,x)\fP"
.IX Xref "rnfidealdown"
.IX Subsection "rnfidealdown(rnf,x)"
let \f(CW\*(C`\f(CIrnf\f(CW\*(C'\fR be a relative number
field extension \f(CW\*(C`L/K\*(C'\fR as output by \f(CW\*(C`rnfinit\*(C'\fR, and \f(CW\*(C`x\*(C'\fR an ideal of
\&\f(CW\*(C`L\*(C'\fR, given either in relative form or by a \fB\f(BIZ\fB\fR\-basis of elements of \f(CW\*(C`L\*(C'\fR
(see \*(L"Label se:rnfidealabstorel\*(R"), returns the ideal of \f(CW\*(C`K\*(C'\fR below \f(CW\*(C`x\*(C'\fR,
i.e. the intersection of \f(CW\*(C`x\*(C'\fR with \f(CW\*(C`K\*(C'\fR.
.PP
The library syntax is \fBrnfidealdown\fR\f(CW\*(C`(\f(CIrnf\f(CW,x)\*(C'\fR.
.IX Xref "rnfidealdown"
.ie n .SS "rnfidealhnf""(\f(CIrnf\fP,x)"""
.el .SS "rnfidealhnf\f(CW(\fP\f(CIrnf\fP\f(CW,x)\fP"
.IX Xref "rnfidealhnf"
.IX Subsection "rnfidealhnf(rnf,x)"
\&\f(CW\*(C`\f(CIrnf\f(CW\*(C'\fR being a relative number
field extension \f(CW\*(C`L/K\*(C'\fR as output by \f(CW\*(C`rnfinit\*(C'\fR and \f(CW\*(C`x\*(C'\fR being a relative
ideal (which can be, as in the absolute case, of many different types,
including of course elements), computes the \s-1HNF\s0 pseudo-matrix associated to
\&\f(CW\*(C`x\*(C'\fR, viewed as a \f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW_K\*(C'\fR\-module.
.PP
The library syntax is \fBrnfidealhermite\fR\f(CW\*(C`(\f(CIrnf\f(CW,x)\*(C'\fR.
.IX Xref "rnfidealhermite"
.ie n .SS "rnfidealmul""(\f(CIrnf\fP,x,y)"""
.el .SS "rnfidealmul\f(CW(\fP\f(CIrnf\fP\f(CW,x,y)\fP"
.IX Xref "rnfidealmul"
.IX Subsection "rnfidealmul(rnf,x,y)"
\&\f(CW\*(C`\f(CIrnf\f(CW\*(C'\fR being a relative number
field extension \f(CW\*(C`L/K\*(C'\fR as output by \f(CW\*(C`rnfinit\*(C'\fR and \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR being ideals
of the relative extension \f(CW\*(C`L/K\*(C'\fR given by pseudo-matrices, outputs the ideal
product, again as a relative ideal.
.PP
The library syntax is \fBrnfidealmul\fR\f(CW\*(C`(\f(CIrnf\f(CW,x,y)\*(C'\fR.
.IX Xref "rnfidealmul"
.ie n .SS "rnfidealnormabs""(\f(CIrnf\fP,x)"""
.el .SS "rnfidealnormabs\f(CW(\fP\f(CIrnf\fP\f(CW,x)\fP"
.IX Xref "rnfidealnormabs"
.IX Subsection "rnfidealnormabs(rnf,x)"
\&\f(CW\*(C`\f(CIrnf\f(CW\*(C'\fR being a relative
number field extension \f(CW\*(C`L/K\*(C'\fR as output by \f(CW\*(C`rnfinit\*(C'\fR and \f(CW\*(C`x\*(C'\fR being a
relative ideal (which can be, as in the absolute case, of many different
types, including of course elements), computes the norm of the ideal \f(CW\*(C`x\*(C'\fR
considered as an ideal of the absolute extension \f(CW\*(C`L/\f(CB\f(CBQ\f(CB\f(CW\*(C'\fR. This is identical to
\&\f(CW\*(C`idealnorm(rnfidealnormrel(\f(CIrnf\f(CW,x))\*(C'\fR, but faster.
.PP
The library syntax is \fBrnfidealnormabs\fR\f(CW\*(C`(\f(CIrnf\f(CW,x)\*(C'\fR.
.IX Xref "rnfidealnormabs"
.ie n .SS "rnfidealnormrel""(\f(CIrnf\fP,x)"""
.el .SS "rnfidealnormrel\f(CW(\fP\f(CIrnf\fP\f(CW,x)\fP"
.IX Xref "rnfidealnormrel"
.IX Subsection "rnfidealnormrel(rnf,x)"
\&\f(CW\*(C`\f(CIrnf\f(CW\*(C'\fR being a relative
number field extension \f(CW\*(C`L/K\*(C'\fR as output by \f(CW\*(C`rnfinit\*(C'\fR and \f(CW\*(C`x\*(C'\fR being a
relative ideal (which can be, as in the absolute case, of many different
types, including of course elements), computes the relative norm of \f(CW\*(C`x\*(C'\fR as a
ideal of \f(CW\*(C`K\*(C'\fR in \s-1HNF.\s0
.PP
The library syntax is \fBrnfidealnormrel\fR\f(CW\*(C`(\f(CIrnf\f(CW,x)\*(C'\fR.
.IX Xref "rnfidealnormrel"
.ie n .SS "rnfidealreltoabs""(\f(CIrnf\fP,x)"""
.el .SS "rnfidealreltoabs\f(CW(\fP\f(CIrnf\fP\f(CW,x)\fP"
.IX Xref "rnfidealreltoabs"
.IX Subsection "rnfidealreltoabs(rnf,x)"
\&\f(CW\*(C`\f(CIrnf\f(CW\*(C'\fR being a relative
number field extension \f(CW\*(C`L/K\*(C'\fR as output by \f(CW\*(C`rnfinit\*(C'\fR and \f(CW\*(C`x\*(C'\fR being a
relative ideal, gives the ideal \f(CW\*(C`x\f(CB\f(CBZ\f(CB\f(CW_L\*(C'\fR as an absolute ideal of \f(CW\*(C`L/\f(CB\f(CBQ\f(CB\f(CW\*(C'\fR, in
the form of a \fB\f(BIZ\fB\fR\-basis, given by a vector of polynomials (modulo
\&\f(CW\*(C`rnf.pol\*(C'\fR).
The following routine might be useful:
.PP
.Vb 3
\&      \e\e return y = rnfidealreltoabs(rnf,...) as an ideal in HNF form
\&      \e\e associated to nf = nfinit( rnf.pol );
\&      idealgentoHNF(nf, y) = mathnf( Mat( nfalgtobasis(nf, y) ) );
.Ve
.PP
The library syntax is \fBrnfidealreltoabs\fR\f(CW\*(C`(\f(CIrnf\f(CW,x)\*(C'\fR.
.IX Xref "rnfidealreltoabs"
.ie n .SS "rnfidealtwoelt""(\f(CIrnf\fP,x)"""
.el .SS "rnfidealtwoelt\f(CW(\fP\f(CIrnf\fP\f(CW,x)\fP"
.IX Xref "rnfidealtwoelt"
.IX Subsection "rnfidealtwoelt(rnf,x)"
\&\f(CW\*(C`\f(CIrnf\f(CW\*(C'\fR being a relative
number field extension \f(CW\*(C`L/K\*(C'\fR as output by \f(CW\*(C`rnfinit\*(C'\fR and \f(CW\*(C`x\*(C'\fR being an
ideal of the relative extension \f(CW\*(C`L/K\*(C'\fR given by a pseudo-matrix, gives a
vector of two generators of \f(CW\*(C`x\*(C'\fR over \f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW_L\*(C'\fR expressed as polmods with polmod
coefficients.
.PP
The library syntax is \fBrnfidealtwoelement\fR\f(CW\*(C`(\f(CIrnf\f(CW,x)\*(C'\fR.
.IX Xref "rnfidealtwoelement"
.ie n .SS "rnfidealup""(\f(CIrnf\fP,x)"""
.el .SS "rnfidealup\f(CW(\fP\f(CIrnf\fP\f(CW,x)\fP"
.IX Xref "rnfidealup"
.IX Subsection "rnfidealup(rnf,x)"
\&\f(CW\*(C`\f(CIrnf\f(CW\*(C'\fR being a relative number
field extension \f(CW\*(C`L/K\*(C'\fR as output by \f(CW\*(C`rnfinit\*(C'\fR and \f(CW\*(C`x\*(C'\fR being an ideal of
\&\f(CW\*(C`K\*(C'\fR, gives the ideal \f(CW\*(C`x\f(CB\f(CBZ\f(CB\f(CW_L\*(C'\fR as an absolute ideal of \f(CW\*(C`L/\f(CB\f(CBQ\f(CB\f(CW\*(C'\fR, in the form of a
\&\fB\f(BIZ\fB\fR\-basis, given by a vector of polynomials (modulo \f(CW\*(C`rnf.pol\*(C'\fR).
The following routine might be useful:
.PP
.Vb 3
\&      \e\e return y = rnfidealup(rnf,...) as an ideal in HNF form
\&      \e\e associated to nf = nfinit( rnf.pol );
\&      idealgentoHNF(nf, y) = mathnf( Mat( nfalgtobasis(nf, y) ) );
.Ve
.PP
The library syntax is \fBrnfidealup\fR\f(CW\*(C`(\f(CIrnf\f(CW,x)\*(C'\fR.
.IX Xref "rnfidealup"
.ie n .SS "rnfinit""(\f(CInf\fP,\f(CIpol\fP)"""
.el .SS "rnfinit\f(CW(\fP\f(CInf\fP\f(CW,\fP\f(CIpol\fP\f(CW)\fP"
.IX Xref "rnfinit"
.IX Subsection "rnfinit(nf,pol)"
\&\f(CW\*(C`\f(CInf\f(CW\*(C'\fR being a number field in
\&\f(CW\*(C`nfinit\*(C'\fR
format considered as base field, and \fIpol\fR a polynomial defining a relative
extension over \f(CW\*(C`\f(CInf\f(CW\*(C'\fR, this computes all the necessary data to work in the
relative extension. The main variable of \fIpol\fR must be of higher priority
(see \*(L"Label se:priority\*(R") than that of \f(CW\*(C`\f(CInf\f(CW\*(C'\fR, and the coefficients of
\&\fIpol\fR must be in \f(CW\*(C`\f(CInf\f(CW\*(C'\fR.
.PP
The result is a row vector, whose components are technical. In the following
description, we let \f(CW\*(C`K\*(C'\fR be the base field defined by \f(CW\*(C`\f(CInf\f(CW\*(C'\fR, \f(CW\*(C`m\*(C'\fR the
degree of the base field, \f(CW\*(C`n\*(C'\fR the relative degree, \f(CW\*(C`L\*(C'\fR the large field (of
relative degree \f(CW\*(C`n\*(C'\fR or absolute degree \f(CW\*(C`nm\*(C'\fR), \f(CW\*(C`r_1\*(C'\fR and \f(CW\*(C`r_2\*(C'\fR the number of
real and complex places of \f(CW\*(C`K\*(C'\fR.
.PP
\&\f(CW\*(C`\f(CIrnf\f(CW[1]\*(C'\fR contains the relative polynomial \fIpol\fR.
.PP
\&\f(CW\*(C`\f(CIrnf\f(CW[2]\*(C'\fR is currently unused.
.PP
\&\f(CW\*(C`\f(CIrnf\f(CW[3]\*(C'\fR is a two-component row vector \f(CW\*(C`[\egoth{d}(L/K),s]\*(C'\fR where
\&\f(CW\*(C`\egoth{d}(L/K)\*(C'\fR is the relative ideal discriminant of \f(CW\*(C`L/K\*(C'\fR and \f(CW\*(C`s\*(C'\fR is the
discriminant of \f(CW\*(C`L/K\*(C'\fR viewed as an element of \f(CW\*(C`K^*/(K^*)^2\*(C'\fR, in other words
it is the output of \f(CW\*(C`rnfdisc\*(C'\fR.
.PP
\&\f(CW\*(C`\f(CIrnf\f(CW[4]\*(C'\fR is the ideal index \f(CW\*(C`\egoth{f}\*(C'\fR, i.e. such that
\&\f(CW\*(C`d(pol)\f(CB\f(CBZ\f(CB\f(CW_K = \egoth{f}^2\egoth{d}(L/K)\*(C'\fR.
.PP
\&\f(CW\*(C`\f(CIrnf\f(CW[5]\*(C'\fR is currently unused.
.PP
\&\f(CW\*(C`\f(CIrnf\f(CW[6]\*(C'\fR is currently unused.
.PP
\&\f(CW\*(C`\f(CIrnf\f(CW[7]\*(C'\fR is a two-component row vector, where the first component is
the relative integral pseudo basis expressed as polynomials (in the variable of
\&\f(CW\*(C`pol\*(C'\fR) with polmod coefficients in \f(CW\*(C`\f(CInf\f(CW\*(C'\fR, and the second component is the
ideal list of the pseudobasis in \s-1HNF.\s0
.PP
\&\f(CW\*(C`\f(CIrnf\f(CW[8]\*(C'\fR is the inverse matrix of the integral basis matrix, with
coefficients polmods in \f(CW\*(C`\f(CInf\f(CW\*(C'\fR.
.PP
\&\f(CW\*(C`\f(CIrnf\f(CW[9]\*(C'\fR is currently unused.
.PP
\&\f(CW\*(C`\f(CIrnf\f(CW[10]\*(C'\fR is \f(CW\*(C`\f(CInf\f(CW\*(C'\fR.
.PP
\&\f(CW\*(C`\f(CIrnf\f(CW[11]\*(C'\fR is the output of \f(CW\*(C`rnfequation(nf, pol, 1)\*(C'\fR. Namely, a
vector \fIvabs\fR with 3 entries describing the \eemph{absolute} extension
\&\f(CW\*(C`L/\f(CB\f(CBQ\f(CB\f(CW\*(C'\fR. \f(CW\*(C`\f(CIvabs\f(CW[1]\*(C'\fR is an absolute equation, more conveniently obtained
as \f(CW\*(C`rnf.pol\*(C'\fR. \f(CW\*(C`\f(CIvabs\f(CW[2]\*(C'\fR expresses the generator \f(CW\*(C`\f(CIalpha\f(CW\*(C'\fR of the
number field \f(CW\*(C`\f(CInf\f(CW\*(C'\fR as a polynomial modulo the absolute equation
\&\f(CW\*(C`\f(CIvabs\f(CW[1]\*(C'\fR. \f(CW\*(C`\f(CIvabs\f(CW[3]\*(C'\fR is a small integer \f(CW\*(C`k\*(C'\fR such that, if \f(CW\*(C`\f(CIbeta\f(CW\*(C'\fR
is an abstract root of \fIpol\fR and \f(CW\*(C`\f(CIalpha\f(CW\*(C'\fR the generator of \f(CW\*(C`\f(CInf\f(CW\*(C'\fR,
the generator whose root is \fIvabs\fR will be
\&\f(CW\*(C`\f(CIbeta\f(CW + k \f(CIalpha\f(CW\*(C'\fR. Note that one must be very careful if \f(CW\*(C`k ! = 0\*(C'\fR when
dealing simultaneously with absolute and relative quantities since the
generator chosen for the absolute extension is not the same as for the
relative one. If this happens, one can of course go on working, but we
strongly advise to change the relative polynomial so that its root will be
\&\f(CW\*(C`\f(CIbeta\f(CW + k \f(CIalpha\f(CW\*(C'\fR. Typically, the \s-1GP\s0 instruction would be
.PP
\&\f(CW\*(C`pol = subst(pol, x, x \- k*Mod(y,\f(CInf\f(CW.pol))\*(C'\fR
.PP
\&\f(CW\*(C`\f(CIrnf\f(CW[12]\*(C'\fR is by default unused and set equal to 0. This
field is used to store further information about the field as it becomes
available (which is rarely needed, hence would be too expensive to compute
during the initial \f(CW\*(C`rnfinit\*(C'\fR call).
.PP
The library syntax is \fBrnfinitalg\fR\f(CW\*(C`(\f(CInf\f(CW,\f(CIpol\f(CW,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "rnfinitalg"
.ie n .SS "rnfisfree""(\f(CIbnf\fP,x)"""
.el .SS "rnfisfree\f(CW(\fP\f(CIbnf\fP\f(CW,x)\fP"
.IX Xref "rnfisfree"
.IX Subsection "rnfisfree(bnf,x)"
given \f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR as output by
\&\f(CW\*(C`bnfinit\*(C'\fR, and either a polynomial \f(CW\*(C`x\*(C'\fR with coefficients in \f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR
defining a relative extension \f(CW\*(C`L\*(C'\fR of \f(CW\*(C`\f(CIbnf\f(CW\*(C'\fR, or a pseudo-basis \f(CW\*(C`x\*(C'\fR of
such an extension, returns true (1) if \f(CW\*(C`L/\f(CIbnf\f(CW\*(C'\fR is free, false (0) if
not.
.PP
The library syntax is \fBrnfisfree\fR\f(CW\*(C`(\f(CIbnf\f(CW,x)\*(C'\fR, and the result is a \f(CW\*(C`long\*(C'\fR.
.IX Xref "rnfisfree"
.ie n .SS "rnfisnorm""(T,a,{\f(CIflag\fP = 0})"""
.el .SS "rnfisnorm\f(CW(T,a,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "rnfisnorm"
.IX Subsection "rnfisnorm(T,a,{flag = 0})"
similar to
\&\f(CW\*(C`bnfisnorm\*(C'\fR but in the relative case. \f(CW\*(C`T\*(C'\fR is as output by
\&\f(CW\*(C`rnfisnorminit\*(C'\fR applied to the extension \f(CW\*(C`L/K\*(C'\fR. This tries to decide
whether the element \f(CW\*(C`a\*(C'\fR in \f(CW\*(C`K\*(C'\fR is the norm of some \f(CW\*(C`x\*(C'\fR in the extension
\&\f(CW\*(C`L/K\*(C'\fR.
.IX Xref "rnfisnorminit"
.PP
The output is a vector \f(CW\*(C`[x,q]\*(C'\fR, where \f(CW\*(C`a = \eNorm(x)*q\*(C'\fR. The
algorithm looks for a solution \f(CW\*(C`x\*(C'\fR which is an \f(CW\*(C`S\*(C'\fR\-integer, with \f(CW\*(C`S\*(C'\fR a list
of places of \f(CW\*(C`K\*(C'\fR containing at least the ramified primes, the generators of
the class group of \f(CW\*(C`L\*(C'\fR, as well as those primes dividing \f(CW\*(C`a\*(C'\fR. If \f(CW\*(C`L/K\*(C'\fR is
Galois, then this is enough; otherwise, \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR is used to add more primes to
\&\f(CW\*(C`S\*(C'\fR: all the places above the primes \f(CW\*(C`p <= \f(CIflag\f(CW\*(C'\fR (resp. \f(CW\*(C`p|\f(CIflag\f(CW\*(C'\fR) if \f(CW\*(C`\f(CIflag\f(CW > 0\*(C'\fR
(resp. \f(CW\*(C`\f(CIflag\f(CW < 0\*(C'\fR).
.PP
The answer is guaranteed (i.e. \f(CW\*(C`a\*(C'\fR is a norm iff \f(CW\*(C`q = 1\*(C'\fR) if the field is
Galois, or, under \s-1GRH,\s0 if \f(CW\*(C`S\*(C'\fR contains all primes less than
\&\f(CW\*(C`12 \f(CIlog\f(CW ^2|\edisc(M)|\*(C'\fR, where \f(CW\*(C`M\*(C'\fR is the normal
closure of \f(CW\*(C`L/K\*(C'\fR.
.IX Xref "GRH"
.PP
If \f(CW\*(C`rnfisnorminit\*(C'\fR has determined (or was told) that \f(CW\*(C`L/K\*(C'\fR is
Galois, and \f(CW\*(C`\f(CIflag\f(CW  ! = 0\*(C'\fR, a Warning is issued (so that you can set
\&\f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR to check whether \f(CW\*(C`L/K\*(C'\fR is known to be Galois, according to \f(CW\*(C`T\*(C'\fR).
Example:
.IX Xref "rnfisnorminit Galois"
.PP
.Vb 4
\&  bnf = bnfinit(y^3 + y^2 \- 2*y \- 1);
\&  p = x^2 + Mod(y^2 + 2*y + 1, bnf.pol);
\&  T = rnfisnorminit(bnf, p);
\&  rnfisnorm(T, 17)
.Ve
.PP
checks whether \f(CW17\fR is a norm in the Galois extension \f(CW\*(C`\f(CB\f(CBQ\f(CB\f(CW(\f(CIbeta\f(CW) /
\&\f(CB\f(CBQ\f(CB\f(CW(\f(CIalpha\f(CW)\*(C'\fR, where \f(CW\*(C`\f(CIalpha\f(CW^3 + \f(CIalpha\f(CW^2 \- 2\f(CIalpha\f(CW \- 1 = 0\*(C'\fR and \f(CW\*(C`\f(CIbeta\f(CW^2 +
\&\f(CIalpha\f(CW^2 + 2\f(CIalpha\f(CW + 1 = 0\*(C'\fR (it is).
.PP
The library syntax is \fBrnfisnorm\fR\f(CW\*(C`(\f(CIT\f(CW,x,\f(CIflag\f(CW)\*(C'\fR.
.IX Xref "rnfisnorm"
.ie n .SS "rnfisnorminit""(\f(CIpol\fP,\f(CIpolrel\fP,{\f(CIflag\fP = 2})"""
.el .SS "rnfisnorminit\f(CW(\fP\f(CIpol\fP\f(CW,\fP\f(CIpolrel\fP\f(CW,{\fP\f(CIflag\fP\f(CW = 2})\fP"
.IX Xref "rnfisnorminit"
.IX Subsection "rnfisnorminit(pol,polrel,{flag = 2})"
let \f(CW\*(C`K\*(C'\fR be defined by a root of \fIpol\fR, and \f(CW\*(C`L/K\*(C'\fR the extension defined by
the polynomial \fIpolrel\fR. As usual, \fIpol\fR can in fact be an \fInf\fR,
or \fIbnf\fR, etc; if \fIpol\fR has degree \f(CW1\fR (the base field is \fB\f(BIQ\fB\fR),
polrel is also allowed to be an \fInf\fR, etc. Computes technical data needed
by \f(CW\*(C`rnfisnorm\*(C'\fR to solve norm equations \f(CW\*(C`Nx = a\*(C'\fR, for \f(CW\*(C`x\*(C'\fR in \f(CW\*(C`L\*(C'\fR, and \f(CW\*(C`a\*(C'\fR
in \f(CW\*(C`K\*(C'\fR.
.IX Xref "rnfisnorm"
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR, do not care whether \f(CW\*(C`L/K\*(C'\fR is Galois or not.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR, \f(CW\*(C`L/K\*(C'\fR is assumed to be Galois (unchecked), which speeds up
\&\f(CW\*(C`rnfisnorm\*(C'\fR.
.IX Xref "rnfisnorm"
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 2\*(C'\fR, let the routine determine whether \f(CW\*(C`L/K\*(C'\fR is Galois.
.PP
The library syntax is \fBrnfisnorminit\fR\f(CW\*(C`(\f(CIpol\f(CW,\f(CIpolrel\f(CW,\f(CIflag\f(CW)\*(C'\fR.
.IX Xref "rnfisnorminit"
.ie n .SS "rnfkummer""(\f(CIbnr\fP,{\f(CIsubgroup\fP},{deg = 0})"""
.el .SS "rnfkummer\f(CW(\fP\f(CIbnr\fP\f(CW,{\fP\f(CIsubgroup\fP\f(CW},{deg = 0})\fP"
.IX Xref "rnfkummer"
.IX Subsection "rnfkummer(bnr,{subgroup},{deg = 0})"
\&\fIbnr\fR
being as output by \f(CW\*(C`bnrinit\*(C'\fR, finds a relative equation for the
class field corresponding to the module in \fIbnr\fR and the given
congruence subgroup (the full ray class field if \fIsubgroup\fR is omitted).
If \fIdeg\fR is positive, outputs the list of all relative equations of
degree \fIdeg\fR contained in the ray class field defined by \fIbnr\fR, with
the \eemph{same} conductor as \f(CW\*(C`(\f(CIbnr\f(CW, \f(CIsubgroup\f(CW)\*(C'\fR.
.PP
\&\fBWarning:\fR this routine only works for subgroups of prime index. It
uses Kummer theory, adjoining necessary roots of unity (it needs to compute a
tough \f(CW\*(C`bnfinit\*(C'\fR here), and finds a generator via Hecke's characterization
of ramification in Kummer extensions of prime degree. If your extension does
not have prime degree, for the time being, you have to split it by hand as a
tower / compositum of such extensions.
.PP
The library syntax is \fBrnfkummer\fR\f(CW\*(C`(\f(CIbnr\f(CW,\f(CIsubgroup\f(CW,\f(CIdeg\f(CW,\f(CIprec\f(CW)\*(C'\fR, where
\&\fIdeg\fR is a \f(CW\*(C`long\*(C'\fR and an omitted \fIsubgroup\fR is coded as
\&\f(CW\*(C`NULL\*(C'\fR
.IX Xref "rnfkummer"
.ie n .SS "rnflllgram""(\f(CInf\fP,\f(CIpol\fP,\f(CIorder\fP)"""
.el .SS "rnflllgram\f(CW(\fP\f(CInf\fP\f(CW,\fP\f(CIpol\fP\f(CW,\fP\f(CIorder\fP\f(CW)\fP"
.IX Xref "rnflllgram"
.IX Subsection "rnflllgram(nf,pol,order)"
given a polynomial
\&\fIpol\fR with coefficients in \fInf\fR defining a relative extension \f(CW\*(C`L\*(C'\fR and
a suborder \fIorder\fR of \f(CW\*(C`L\*(C'\fR (of maximal rank), as output by
\&\f(CW\*(C`rnfpseudobasis\*(C'\fR\f(CW\*(C`(\f(CInf\f(CW,\f(CIpol\f(CW)\*(C'\fR or similar, gives
\&\f(CW\*(C`[[\f(CIneworder\f(CW],U]\*(C'\fR, where \fIneworder\fR is a reduced order and \f(CW\*(C`U\*(C'\fR is
the unimodular transformation matrix.
.PP
The library syntax is \fBrnflllgram\fR\f(CW\*(C`(\f(CInf\f(CW,\f(CIpol\f(CW,\f(CIorder\f(CW,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "rnflllgram"
.ie n .SS "rnfnormgroup""(\f(CIbnr\fP,\f(CIpol\fP)"""
.el .SS "rnfnormgroup\f(CW(\fP\f(CIbnr\fP\f(CW,\fP\f(CIpol\fP\f(CW)\fP"
.IX Xref "rnfnormgroup"
.IX Subsection "rnfnormgroup(bnr,pol)"
\&\fIbnr\fR being a big ray
class field as output by \f(CW\*(C`bnrinit\*(C'\fR and \fIpol\fR a relative polynomial
defining an Abelian extension, computes the norm group (alias Artin
or Takagi group) corresponding to the Abelian extension of \f(CW\*(C`\f(CIbnf\f(CW = bnr[1]\*(C'\fR
defined by \fIpol\fR, where the module corresponding to \fIbnr\fR is assumed
to be a multiple of the conductor (i.e. \fIpol\fR defines a subextension of
bnr). The result is the \s-1HNF\s0 defining the norm group on the given generators
of \f(CW\*(C`\f(CIbnr\f(CW[5][3]\*(C'\fR. Note that neither the fact that \fIpol\fR defines an
Abelian extension nor the fact that the module is a multiple of the conductor
is checked. The result is undefined if the assumption is not correct.
.IX Xref "Abelian extension"
.PP
The library syntax is \fBrnfnormgroup\fR\f(CW\*(C`(\f(CIbnr\f(CW,\f(CIpol\f(CW)\*(C'\fR.
.IX Xref "rnfnormgroup"
.ie n .SS "rnfpolred""(\f(CInf\fP,\f(CIpol\fP)"""
.el .SS "rnfpolred\f(CW(\fP\f(CInf\fP\f(CW,\fP\f(CIpol\fP\f(CW)\fP"
.IX Xref "rnfpolred"
.IX Subsection "rnfpolred(nf,pol)"
relative version of \f(CW\*(C`polred\*(C'\fR.
Given a monic polynomial \fIpol\fR with coefficients in \f(CW\*(C`\f(CInf\f(CW\*(C'\fR, finds a
list of relative polynomials defining some subfields, hopefully simpler and
containing the original field. In the present version \fB2.3.5\fR, this is slower
and less efficient than \f(CW\*(C`rnfpolredabs\*(C'\fR.
.PP
The library syntax is \fBrnfpolred\fR\f(CW\*(C`(\f(CInf\f(CW,\f(CIpol\f(CW,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "rnfpolred"
.ie n .SS "rnfpolredabs""(\f(CInf\fP,\f(CIpol\fP,{\f(CIflag\fP = 0})"""
.el .SS "rnfpolredabs\f(CW(\fP\f(CInf\fP\f(CW,\fP\f(CIpol\fP\f(CW,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "rnfpolredabs"
.IX Subsection "rnfpolredabs(nf,pol,{flag = 0})"
relative version of
\&\f(CW\*(C`polredabs\*(C'\fR. Given a monic polynomial \fIpol\fR with coefficients in
\&\f(CW\*(C`\f(CInf\f(CW\*(C'\fR, finds a simpler relative polynomial defining the same field. The
binary digits of \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR mean
.PP
1: returns \f(CW\*(C`[P,a]\*(C'\fR where \f(CW\*(C`P\*(C'\fR is the default output and \f(CW\*(C`a\*(C'\fR is an
element expressed on a root of \f(CW\*(C`P\*(C'\fR whose characteristic polynomial is
\&\fIpol\fR
.PP
2: returns an absolute polynomial (same as
\&\f(CW\*(C`rnfequation(\f(CInf\f(CW,rnfpolredabs(\f(CInf\f(CW,\f(CIpol\f(CW))\*(C'\fR
but faster).
.PP
16: possibly use a suborder of the maximal order. This is slower than the
default when the relative discriminant is smooth, and much faster otherwise.
See \*(L"Label se:polredabs\*(R".
.PP
\&\fBRemark.\fR In the present implementation, this is both faster and
much more efficient than \f(CW\*(C`rnfpolred\*(C'\fR, the difference being more
dramatic than in the absolute case. This is because the implementation of
\&\f(CW\*(C`rnfpolred\*(C'\fR is based on (a partial implementation of) an incomplete
reduction theory of lattices over number fields, the function
\&\f(CW\*(C`rnflllgram\*(C'\fR, which deserves to be improved.
.PP
The library syntax is \fBrnfpolredabs\fR\f(CW\*(C`(\f(CInf\f(CW,\f(CIpol\f(CW,\f(CIflag\f(CW,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "rnfpolredabs"
.ie n .SS "rnfpseudobasis""(\f(CInf\fP,\f(CIpol\fP)"""
.el .SS "rnfpseudobasis\f(CW(\fP\f(CInf\fP\f(CW,\fP\f(CIpol\fP\f(CW)\fP"
.IX Xref "rnfpseudobasis"
.IX Subsection "rnfpseudobasis(nf,pol)"
given a number field
\&\f(CW\*(C`\f(CInf\f(CW\*(C'\fR as output by \f(CW\*(C`nfinit\*(C'\fR and a polynomial \fIpol\fR with
coefficients in \f(CW\*(C`\f(CInf\f(CW\*(C'\fR defining a relative extension \f(CW\*(C`L\*(C'\fR of \f(CW\*(C`\f(CInf\f(CW\*(C'\fR,
computes a pseudo-basis \f(CW\*(C`(A,I)\*(C'\fR for the maximal order \f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW_L\*(C'\fR viewed as a
\&\f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW_K\*(C'\fR\-module, and the relative discriminant of \f(CW\*(C`L\*(C'\fR. This is output as a
four-element row vector \f(CW\*(C`[A,I,D,d]\*(C'\fR, where \f(CW\*(C`D\*(C'\fR is the relative ideal
discriminant and \f(CW\*(C`d\*(C'\fR is the relative discriminant considered as an element of
\&\f(CW\*(C`\f(CInf\f(CW^*/{\f(CInf\f(CW^*}^2\*(C'\fR.
.PP
The library syntax is \fBrnfpseudobasis\fR\f(CW\*(C`(\f(CInf\f(CW,\f(CIpol\f(CW)\*(C'\fR.
.IX Xref "rnfpseudobasis"
.ie n .SS "rnfsteinitz""(\f(CInf\fP,x)"""
.el .SS "rnfsteinitz\f(CW(\fP\f(CInf\fP\f(CW,x)\fP"
.IX Xref "rnfsteinitz"
.IX Subsection "rnfsteinitz(nf,x)"
given a number field \f(CW\*(C`\f(CInf\f(CW\*(C'\fR as
output by \f(CW\*(C`nfinit\*(C'\fR and either a polynomial \f(CW\*(C`x\*(C'\fR with coefficients in
\&\f(CW\*(C`\f(CInf\f(CW\*(C'\fR defining a relative extension \f(CW\*(C`L\*(C'\fR of \f(CW\*(C`\f(CInf\f(CW\*(C'\fR, or a pseudo-basis
\&\f(CW\*(C`x\*(C'\fR of such an extension as output for example by \f(CW\*(C`rnfpseudobasis\*(C'\fR,
computes another pseudo-basis \f(CW\*(C`(A,I)\*(C'\fR (not in \s-1HNF\s0 in general) such that all
the ideals of \f(CW\*(C`I\*(C'\fR except perhaps the last one are equal to the ring of
integers of \f(CW\*(C`\f(CInf\f(CW\*(C'\fR, and outputs the four-component row vector \f(CW\*(C`[A,I,D,d]\*(C'\fR
as in \f(CW\*(C`rnfpseudobasis\*(C'\fR. The name of this function comes from the fact
that the ideal class of the last ideal of \f(CW\*(C`I\*(C'\fR, which is well defined, is the
Steinitz class of the \f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW_K\*(C'\fR\-module \f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW_L\*(C'\fR (its image in \f(CW\*(C`SK_0(\f(CB\f(CBZ\f(CB\f(CW_K)\*(C'\fR).
.IX Xref "Steinitz class"
.PP
The library syntax is \fBrnfsteinitz\fR\f(CW\*(C`(\f(CInf\f(CW,x)\*(C'\fR.
.IX Xref "rnfsteinitz"
.ie n .SS "subgrouplist""(\f(CIbnr\fP,{\f(CIbound\fP},{\f(CIflag\fP = 0})"""
.el .SS "subgrouplist\f(CW(\fP\f(CIbnr\fP\f(CW,{\fP\f(CIbound\fP\f(CW},{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "subgrouplist"
.IX Subsection "subgrouplist(bnr,{bound},{flag = 0})"
\&\fIbnr\fR being as output by \f(CW\*(C`bnrinit\*(C'\fR or a list of cyclic components
of a finite Abelian group \f(CW\*(C`G\*(C'\fR, outputs the list of subgroups of \f(CW\*(C`G\*(C'\fR. Subgroups
are given as \s-1HNF\s0 left divisors of the \s-1SNF\s0 matrix corresponding to \f(CW\*(C`G\*(C'\fR.
.PP
\&\fBWarning:\fR the present implementation cannot treat a group \f(CW\*(C`G\*(C'\fR
where any cyclic factor has more than \f(CW\*(C`2^{31}\*(C'\fR, resp. \f(CW\*(C`2^{63}\*(C'\fR elements on a
\&\f(CW32\fR\-bit, resp. \f(CW64\fR\-bit architecture. \f(CW\*(C`forsubgroup\*(C'\fR is a bit more
general and can handle \f(CW\*(C`G\*(C'\fR if all \f(CW\*(C`p\*(C'\fR\-Sylow subgroups of \f(CW\*(C`G\*(C'\fR satisfy the
condition above.
.IX Xref "forsubgroup"
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR (default) and \fIbnr\fR is as output by \f(CW\*(C`bnrinit\*(C'\fR, gives
only the subgroups whose modulus is the conductor. Otherwise, the modulus is
not taken into account.
.PP
If \fIbound\fR is present, and is a positive integer, restrict the output to
subgroups of index less than \fIbound\fR. If \fIbound\fR is a vector
containing a single positive integer \f(CW\*(C`B\*(C'\fR, then only subgroups of index
exactly equal to \f(CW\*(C`B\*(C'\fR are computed. For instance
.PP
.Vb 7
\&  %2 = [[2, 1; 0, 1], [1, 0; 0, 2], [2, 0; 0, 1], [3, 0; 0, 1], [1, 0; 0, 1]]
\&  ? subgrouplist([6,2],[3])  \e\e index less than 3
\&  %2 = [[2, 1; 0, 1], [1, 0; 0, 2], [2, 0; 0, 1], [3, 0; 0, 1], [1, 0; 0, 1]]
\&  ? subgrouplist([6,2],[3])  \e\e index 3
\&  %3 = [[3, 0; 0, 1]]
\&  ? bnr = bnrinit(bnfinit(x), [120,[1]], 1);
\&  ? L = subgrouplist(bnr, [8]);
.Ve
.PP
In the last example, \f(CW\*(C`L\*(C'\fR corresponds to the 24 subfields of
\&\f(CW\*(C`\f(CB\f(CBQ\f(CB\f(CW(\f(CIzeta\f(CW_{120})\*(C'\fR, of degree \f(CW8\fR and conductor \f(CW\*(C`120 oo \*(C'\fR (by setting \fIflag\fR,
we see there are a total of \f(CW43\fR subgroups of degree \f(CW8\fR).
.PP
.Vb 1
\&  ? vector(#L, i, galoissubcyclo(bnr, L[i]))
.Ve
.PP
will produce their equations. (For a general base field, you would
have to rely on \f(CW\*(C`bnrstark\*(C'\fR, or \f(CW\*(C`rnfkummer\*(C'\fR.)
.IX Xref "bnrstark rnfkummer"
.PP
The library syntax is \fBsubgrouplist0\fR\f(CW\*(C`(\f(CIbnr\f(CW,\f(CIbound\f(CW,\f(CIflag\f(CW)\*(C'\fR, where \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR
is a long integer, and an omitted \fIbound\fR is coded by \f(CW\*(C`NULL\*(C'\fR.
.IX Xref "subgrouplist0"
.ie n .SS "zetak""(\f(CIznf\fP,x,{\f(CIflag\fP = 0})"""
.el .SS "zetak\f(CW(\fP\f(CIznf\fP\f(CW,x,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "zetak"
.IX Subsection "zetak(znf,x,{flag = 0})"
\&\fIznf\fR being a number
field initialized by \f(CW\*(C`zetakinit\*(C'\fR (\eemph{not} by \f(CW\*(C`nfinit\*(C'\fR),
computes the value of the Dedekind zeta function of the number
field at the complex number \f(CW\*(C`x\*(C'\fR. If \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR computes Dedekind \f(CW\*(C`\f(CILambda\f(CW\*(C'\fR
function instead (i.e. the product of the Dedekind zeta function by its gamma
and exponential factors).
.IX Xref "Dedekind"
.PP
\&\fB\s-1CAVEAT.\s0\fR This implementation is not satisfactory and must be
rewritten. In particular
.PP
\&\f(CW\*(C`\f(CB*\f(CW\*(C'\fR The accuracy of the result depends in an essential way on the
accuracy of both the \f(CW\*(C`zetakinit\*(C'\fR program and the current accuracy.
Be wary in particular that \f(CW\*(C`x\*(C'\fR of large imaginary part or, on the
contrary, very close to an ordinary integer will suffer from precision
loss, yielding fewer significant digits than expected. Computing with 28
eight digits of relative accuracy, we have
.PP
.Vb 8
\&  ? zeta(3)
\&      %1 = 1.202056903159594285399738161
\&      ? zeta(3\-1e\-20)
\&      %2 = 1.202056903159594285401719424
\&      ? zetak(zetakinit(x), 3\-1e\-20)
\&      %3 = 1.2020569031595952919  \e\e 5 digits are wrong
\&      ? zetak(zetakinit(x), 3\-1e\-28)
\&      %4 = \-25.33411749           \e\e junk
.Ve
.PP
\&\f(CW\*(C`\f(CB*\f(CW\*(C'\fR As the precision increases, results become unexpectedly
completely wrong:
.PP
.Vb 12
\&      ? \ep100
\&      ? zetak(zetakinit(x^2\-5), \-1) \- 1/30 
\&      %1 = 7.26691813 E\-108    \e\e perfect
\&      ? \ep150
\&      ? zetak(zetakinit(x^2\-5), \-1) \- 1/30 
\&      %2 = \-2.486113578 E\-156  \e\e perfect
\&      ? \ep200
\&      ? zetak(zetakinit(x^2\-5), \-1) \- 1/30
\&      %3 = 4.47... E\-75        \e\e more than half of the digits are wrong
\&      ? \ep250
\&      ? zetak(zetakinit(x^2\-5), \-1) \- 1/30
\&      %4 = 1.6 E43             \e\e junk
.Ve
.PP
The library syntax is \fBglambdak\fR\f(CW\*(C`(\f(CIznf\f(CW,x,\f(CIprec\f(CW)\*(C'\fR or
\&\f(CW\*(C` \f(CBgzetak\f(CW(\f(CIznf\f(CW,x,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "glambdak gzetak"
.ie n .SS "zetakinit""(x)"""
.el .SS "zetakinit\f(CW(x)\fP"
.IX Xref "zetakinit"
.IX Subsection "zetakinit(x)"
computes a number of initialization data
concerning the number field defined by the polynomial \f(CW\*(C`x\*(C'\fR so as to be able
to compute the Dedekind zeta and lambda functions (respectively
\&\f(CWzetak(x)\fR and \f(CW\*(C`zetak(x,1)\*(C'\fR). This function calls in particular
the \f(CW\*(C`bnfinit\*(C'\fR program. The result is a 9\-component vector \f(CW\*(C`v\*(C'\fR whose
components are very technical and cannot really be used by the user except
through the \f(CW\*(C`zetak\*(C'\fR function. The only component which can be used if
it has not been computed already is \f(CW\*(C`v[1][4]\*(C'\fR which is the result of the
\&\f(CW\*(C`bnfinit\*(C'\fR call.
.IX Xref "Dedekind"
.PP
This function is very inefficient and should be rewritten. It needs to
computes millions of coefficients of the corresponding Dirichlet series if
the precision is big. Unless the discriminant is small it will not be able
to handle more than 9 digits of relative precision. For instance,
\&\f(CW\*(C`zetakinit(x^8 \- 2)\*(C'\fR needs 440MB of memory at default precision.
.PP
The library syntax is \fBinitzeta\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "initzeta"
.SH "Polynomials and power series"
.IX Header "Polynomials and power series"
We group here all functions which are specific to polynomials or power
series. Many other functions which can be applied on these objects are
described in the other sections. Also, some of the functions described here
can be applied to other types.
.ie n .SS "O""(p^e)"""
.el .SS "O\f(CW(p^e)\fP"
.IX Xref "O"
.IX Subsection "O(p^e)"
if \f(CW\*(C`p\*(C'\fR is an integer
greater than \f(CW2\fR, returns a \f(CW\*(C`p\*(C'\fR\-adic \f(CW0\fR of precision \f(CW\*(C`e\*(C'\fR. In all other
cases, returns a power series zero with precision given by \f(CW\*(C`e v\*(C'\fR, where \f(CW\*(C`v\*(C'\fR
is the \f(CW\*(C`X\*(C'\fR\-adic valuation of \f(CW\*(C`p\*(C'\fR with respect to its main variable.
.PP
The library syntax is \fBzeropadic\fR\f(CW\*(C`(p,e)\*(C'\fR for a \f(CW\*(C`p\*(C'\fR\-adic and \f(CW\*(C` \f(CBzeroser\f(CW(v,e)\*(C'\fR for a
power series zero in variable \f(CW\*(C`v\*(C'\fR, which is a \f(CW\*(C`long\*(C'\fR. The precision \f(CW\*(C`e\*(C'\fR
is a \f(CW\*(C`long\*(C'\fR.
.IX Xref "zeropadic zeroser"
.ie n .SS "deriv""(x,{v})"""
.el .SS "deriv\f(CW(x,{v})\fP"
.IX Xref "deriv"
.IX Subsection "deriv(x,{v})"
derivative of \f(CW\*(C`x\*(C'\fR with respect to the main
variable if \f(CW\*(C`v\*(C'\fR is omitted, and with respect to \f(CW\*(C`v\*(C'\fR otherwise. The derivative
of a scalar type is zero, and the derivative of a vector or matrix is done
componentwise. One can use \f(CW\*(C`x\*(Aq\*(C'\fR as a shortcut if the derivative is with
respect to the main variable of \f(CW\*(C`x\*(C'\fR.
.PP
By definition, the main variable of a \f(CW\*(C`t_POLMOD\*(C'\fR is the main variable among
the coefficients from its two polynomial components (representative and
modulus); in other words, assuming a polmod represents an element of
\&\f(CW\*(C`R[X]/(T(X))\*(C'\fR, the variable \f(CW\*(C`X\*(C'\fR is a mute variable and the derivative is
taken with respect to the main variable used in the base ring \f(CW\*(C`R\*(C'\fR.
.PP
The library syntax is \fBderiv\fR\f(CW\*(C`(x,v)\*(C'\fR, where \f(CW\*(C`v\*(C'\fR is a \f(CW\*(C`long\*(C'\fR, and an omitted \f(CW\*(C`v\*(C'\fR is coded as
\&\f(CW\*(C`\-1\*(C'\fR. When \f(CW\*(C`x\*(C'\fR is a \f(CW\*(C`t_POL\*(C'\fR, \f(CWderivpol(x)\fR is a shortcut for
\&\f(CW\*(C`deriv(x, \-1)\*(C'\fR.
.IX Xref "deriv derivpol"
.ie n .SS "eval""(x)"""
.el .SS "eval\f(CW(x)\fP"
.IX Xref "eval"
.IX Subsection "eval(x)"
replaces in \f(CW\*(C`x\*(C'\fR the formal variables by the values that
have been assigned to them after the creation of \f(CW\*(C`x\*(C'\fR. This is mainly useful
in \s-1GP,\s0 and not in library mode. Do not confuse this with substitution (see
\&\f(CW\*(C`subst\*(C'\fR).
.PP
If \f(CW\*(C`x\*(C'\fR is a character string, \f(CWeval(x)\fR executes \f(CW\*(C`x\*(C'\fR as a \s-1GP\s0
command, as if directly input from the keyboard, and returns its
output. For convenience, \f(CW\*(C`x\*(C'\fR is evaluated as if
\&\f(CW\*(C`strictmatch\*(C'\fR was off. In particular, unused characters at the end of
\&\f(CW\*(C`x\*(C'\fR do not prevent its evaluation:
.IX Xref "Label se:eval"
.PP
.Vb 2
\&      ? eval("1a")
\&      % 1 = 1
.Ve
.PP
The library syntax is \fBgeval\fR\f(CW\*(C`(x)\*(C'\fR. The more basic functions \f(CW\*(C` \f(CBpoleval\f(CW(q,x)\*(C'\fR,
\&\f(CW\*(C` \f(CBqfeval\f(CW(q,x)\*(C'\fR, and \f(CW\*(C` \f(CBhqfeval\f(CW(q,x)\*(C'\fR evaluate \f(CW\*(C`q\*(C'\fR at \f(CW\*(C`x\*(C'\fR, where \f(CW\*(C`q\*(C'\fR
is respectively assumed to be a polynomial, a quadratic form (a symmetric
matrix), or an Hermitian form (an Hermitian complex matrix).
.IX Xref "geval poleval qfeval hqfeval"
.ie n .SS "factorpadic""(\f(CIpol\fP,p,r,{\f(CIflag\fP = 0})"""
.el .SS "factorpadic\f(CW(\fP\f(CIpol\fP\f(CW,p,r,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "factorpadic"
.IX Subsection "factorpadic(pol,p,r,{flag = 0})"
\&\f(CW\*(C`p\*(C'\fR\-adic factorization
of the polynomial \fIpol\fR to precision \f(CW\*(C`r\*(C'\fR, the result being a
two-column matrix as in \f(CW\*(C`factor\*(C'\fR. The factors are normalized so that
their leading coefficient is a power of \f(CW\*(C`p\*(C'\fR. \f(CW\*(C`r\*(C'\fR must be strictly larger than
the \f(CW\*(C`p\*(C'\fR\-adic valuation of the discriminant of \fIpol\fR for the result to
make any sense. The method used is a modified version of the round 4
algorithm of Zassenhaus.
.IX Xref "round 4 Zassenhaus"
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR, use an algorithm due to Buchmann and Lenstra, which is
usually less efficient.
.IX Xref "Buchmann Lenstra"
.PP
The library syntax is \fBfactorpadic4\fR\f(CW\*(C`(\f(CIpol\f(CW,p,r)\*(C'\fR, where \f(CW\*(C`r\*(C'\fR is a \f(CW\*(C`long\*(C'\fR integer.
.IX Xref "factorpadic4"
.ie n .SS "intformal""(x,{v})"""
.el .SS "intformal\f(CW(x,{v})\fP"
.IX Xref "intformal"
.IX Subsection "intformal(x,{v})"
formal integration of \f(CW\*(C`x\*(C'\fR with
respect to the main variable if \f(CW\*(C`v\*(C'\fR is omitted, with respect to the variable
\&\f(CW\*(C`v\*(C'\fR otherwise. Since \s-1PARI\s0 does not know about ``abstract'' logarithms (they
are immediately evaluated, if only to a power series), logarithmic terms in
the result will yield an error. \f(CW\*(C`x\*(C'\fR can be of any type. When \f(CW\*(C`x\*(C'\fR is a
rational function, it is assumed that the base ring is an integral domain of
characteristic zero.
.IX Xref "formal integration"
.PP
The library syntax is \fBinteg\fR\f(CW\*(C`(x,v)\*(C'\fR, where \f(CW\*(C`v\*(C'\fR is a \f(CW\*(C`long\*(C'\fR and an omitted \f(CW\*(C`v\*(C'\fR is coded
as \f(CW\*(C`\-1\*(C'\fR.
.IX Xref "integ"
.ie n .SS "padicappr""(\f(CIpol\fP,a)"""
.el .SS "padicappr\f(CW(\fP\f(CIpol\fP\f(CW,a)\fP"
.IX Xref "padicappr"
.IX Subsection "padicappr(pol,a)"
vector of \f(CW\*(C`p\*(C'\fR\-adic roots of the
polynomial \f(CW\*(C`pol\*(C'\fR congruent to the \f(CW\*(C`p\*(C'\fR\-adic number \f(CW\*(C`a\*(C'\fR modulo \f(CW\*(C`p\*(C'\fR, and with
the same \f(CW\*(C`p\*(C'\fR\-adic precision as \f(CW\*(C`a\*(C'\fR. The number \f(CW\*(C`a\*(C'\fR can be an ordinary
\&\f(CW\*(C`p\*(C'\fR\-adic number (type \f(CW\*(C`t_PADIC\*(C'\fR, i.e. an element of \f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW_p\*(C'\fR) or can be an
integral element of a finite extension of \f(CW\*(C`\f(CB\f(CBQ\f(CB\f(CW_p\*(C'\fR, given as a \f(CW\*(C`t_POLMOD\*(C'\fR
at least one of whose coefficients is a \f(CW\*(C`t_PADIC\*(C'\fR. In this case, the result
is the vector of roots belonging to the same extension of \f(CW\*(C`\f(CB\f(CBQ\f(CB\f(CW_p\*(C'\fR as \f(CW\*(C`a\*(C'\fR.
.PP
The library syntax is \fBpadicappr\fR\f(CW\*(C`(\f(CIpol\f(CW,a)\*(C'\fR.
.IX Xref "padicappr"
.ie n .SS "polcoeff""(x,s,{v})"""
.el .SS "polcoeff\f(CW(x,s,{v})\fP"
.IX Xref "polcoeff"
.IX Subsection "polcoeff(x,s,{v})"
coefficient of degree \f(CW\*(C`s\*(C'\fR of the
polynomial \f(CW\*(C`x\*(C'\fR, with respect to the main variable if \f(CW\*(C`v\*(C'\fR is omitted, with
respect to \f(CW\*(C`v\*(C'\fR otherwise. Also applies to power series, scalars (polynomial
of degree \f(CW0\fR), and to rational functions provided the denominator is a
monomial.
.PP
The library syntax is \fBpolcoeff0\fR\f(CW\*(C`(x,s,v)\*(C'\fR, where \f(CW\*(C`v\*(C'\fR is a \f(CW\*(C`long\*(C'\fR and an omitted \f(CW\*(C`v\*(C'\fR is coded
as \f(CW\*(C`\-1\*(C'\fR. Also available is \f(CW\*(C` \f(CBtruecoeff\f(CW(x,v)\*(C'\fR.
.IX Xref "polcoeff0 truecoeff"
.ie n .SS "poldegree""(x,{v})"""
.el .SS "poldegree\f(CW(x,{v})\fP"
.IX Xref "poldegree"
.IX Subsection "poldegree(x,{v})"
degree of the polynomial \f(CW\*(C`x\*(C'\fR in the main
variable if \f(CW\*(C`v\*(C'\fR is omitted, in the variable \f(CW\*(C`v\*(C'\fR otherwise.
.PP
The degree of \f(CW0\fR is a fixed negative number, whose exact value should
not be used. The degree of a non-zero scalar is \f(CW0\fR. Finally, when \f(CW\*(C`x\*(C'\fR is
a non-zero polynomial or rational function, returns the ordinary degree
of \f(CW\*(C`x\*(C'\fR. Raise an error otherwise.
.PP
The library syntax is \fBpoldegree\fR\f(CW\*(C`(x,v)\*(C'\fR, where \f(CW\*(C`v\*(C'\fR and the result are \f(CW\*(C`long\*(C'\fRs (and an
omitted \f(CW\*(C`v\*(C'\fR is coded as \f(CW\*(C`\-1\*(C'\fR). Also available is \f(CW\*(C` \f(CBdegree\f(CW(x)\*(C'\fR, which is
equivalent to \f(CW\*(C`poldegree(x,\-1)\*(C'\fR.
.IX Xref "poldegree degree"
.ie n .SS "polcyclo""(n,{v = x})"""
.el .SS "polcyclo\f(CW(n,{v = x})\fP"
.IX Xref "polcyclo"
.IX Subsection "polcyclo(n,{v = x})"
\&\f(CW\*(C`n\*(C'\fR\-th cyclotomic polynomial, in variable
\&\f(CW\*(C`v\*(C'\fR (\f(CW\*(C`x\*(C'\fR by default). The integer \f(CW\*(C`n\*(C'\fR must be positive.
.PP
The library syntax is \fBcyclo\fR\f(CW\*(C`(n,v)\*(C'\fR, where \f(CW\*(C`n\*(C'\fR and \f(CW\*(C`v\*(C'\fR are \f(CW\*(C`long\*(C'\fR
integers (\f(CW\*(C`v\*(C'\fR is a variable number, usually obtained through \f(CW\*(C`varn\*(C'\fR).
.IX Xref "cyclo"
.ie n .SS "poldisc""(\f(CIpol\fP,{v})"""
.el .SS "poldisc\f(CW(\fP\f(CIpol\fP\f(CW,{v})\fP"
.IX Xref "poldisc"
.IX Subsection "poldisc(pol,{v})"
discriminant of the polynomial
\&\fIpol\fR in the main variable is \f(CW\*(C`v\*(C'\fR is omitted, in \f(CW\*(C`v\*(C'\fR otherwise. The
algorithm used is the subresultant algorithm.
.IX Xref "subresultant algorithm"
.PP
The library syntax is \fBpoldisc0\fR\f(CW\*(C`(x,v)\*(C'\fR. Also available is \f(CW\*(C` \f(CBdiscsr\f(CW(x)\*(C'\fR, equivalent
to \f(CW\*(C`poldisc0(x,\-1)\*(C'\fR.
.IX Xref "poldisc0 discsr"
.ie n .SS "poldiscreduced""(f)"""
.el .SS "poldiscreduced\f(CW(f)\fP"
.IX Xref "poldiscreduced"
.IX Subsection "poldiscreduced(f)"
reduced discriminant vector of the
(integral, monic) polynomial \f(CW\*(C`f\*(C'\fR. This is the vector of elementary divisors
of \f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW[\f(CIalpha\f(CW]/f\*(Aq(\f(CIalpha\f(CW)\f(CB\f(CBZ\f(CB\f(CW[\f(CIalpha\f(CW]\*(C'\fR, where \f(CW\*(C`\f(CIalpha\f(CW\*(C'\fR is a root of the
polynomial \f(CW\*(C`f\*(C'\fR. The components of the result are all positive, and their
product is equal to the absolute value of the discriminant of \f(CW\*(C`f\*(C'\fR.
.PP
The library syntax is \fBreduceddiscsmith\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "reduceddiscsmith"
.ie n .SS "polhensellift""(x, y, p, e)"""
.el .SS "polhensellift\f(CW(x, y, p, e)\fP"
.IX Xref "polhensellift"
.IX Subsection "polhensellift(x, y, p, e)"
given a prime \f(CW\*(C`p\*(C'\fR, an integral
polynomial \f(CW\*(C`x\*(C'\fR whose leading coefficient is a \f(CW\*(C`p\*(C'\fR\-unit, a vector \f(CW\*(C`y\*(C'\fR of
integral polynomials that are pairwise relatively prime modulo \f(CW\*(C`p\*(C'\fR, and whose
product is congruent to \f(CW\*(C`x\*(C'\fR modulo \f(CW\*(C`p\*(C'\fR, lift the elements of \f(CW\*(C`y\*(C'\fR to
polynomials whose product is congruent to \f(CW\*(C`x\*(C'\fR modulo \f(CW\*(C`p^e\*(C'\fR.
.PP
The library syntax is \fBpolhensellift\fR\f(CW\*(C`(x,y,p,e)\*(C'\fR where \f(CW\*(C`e\*(C'\fR must be a \f(CW\*(C`long\*(C'\fR.
.IX Xref "polhensellift"
.ie n .SS "polinterpolate""(xa,{ya},{v = x},{&e})"""
.el .SS "polinterpolate\f(CW(xa,{ya},{v = x},{&e})\fP"
.IX Xref "polinterpolate"
.IX Subsection "polinterpolate(xa,{ya},{v = x},{&e})"
given the data vectors
\&\f(CW\*(C`xa\*(C'\fR and \f(CW\*(C`ya\*(C'\fR of the same length \f(CW\*(C`n\*(C'\fR (\f(CW\*(C`xa\*(C'\fR containing the \f(CW\*(C`x\*(C'\fR\-coordinates,
and \f(CW\*(C`ya\*(C'\fR the corresponding \f(CW\*(C`y\*(C'\fR\-coordinates), this function finds the
interpolating polynomial passing through these points and evaluates it
at \f(CW\*(C`v\*(C'\fR. If \f(CW\*(C`ya\*(C'\fR is omitted, return the polynomial interpolating the
\&\f(CW\*(C`(i,xa[i])\*(C'\fR. If present, \f(CW\*(C`e\*(C'\fR will contain an error estimate on the returned
value.
.IX Xref "interpolating polynomial"
.PP
The library syntax is \fBpolint\fR\f(CW\*(C`(xa,ya,v,&e)\*(C'\fR, where \f(CW\*(C`e\*(C'\fR will contain an error estimate on the
returned value.
.IX Xref "polint"
.ie n .SS "polisirreducible""(\f(CIpol\fP)"""
.el .SS "polisirreducible\f(CW(\fP\f(CIpol\fP\f(CW)\fP"
.IX Xref "polisirreducible"
.IX Subsection "polisirreducible(pol)"
\&\fIpol\fR being a polynomial
(univariate in the present version \fB2.3.5\fR), returns 1 if \fIpol\fR is
non-constant and irreducible, 0 otherwise. Irreducibility is checked over
the smallest base field over which \fIpol\fR seems to be defined.
.PP
The library syntax is \fBgisirreducible\fR\f(CW\*(C`(\f(CIpol\f(CW)\*(C'\fR.
.IX Xref "gisirreducible"
.ie n .SS "pollead""(x,{v})"""
.el .SS "pollead\f(CW(x,{v})\fP"
.IX Xref "pollead"
.IX Subsection "pollead(x,{v})"
leading coefficient of the polynomial or
power series \f(CW\*(C`x\*(C'\fR. This is computed with respect to the main variable of \f(CW\*(C`x\*(C'\fR
if \f(CW\*(C`v\*(C'\fR is omitted, with respect to the variable \f(CW\*(C`v\*(C'\fR otherwise.
.PP
The library syntax is \fBpollead\fR\f(CW\*(C`(x,v)\*(C'\fR, where \f(CW\*(C`v\*(C'\fR is a \f(CW\*(C`long\*(C'\fR and an omitted \f(CW\*(C`v\*(C'\fR is coded as
\&\f(CW\*(C`\-1\*(C'\fR. Also available is \f(CW\*(C` \f(CBleading_term\f(CW(x)\*(C'\fR.
.IX Xref "pollead leading_term"
.ie n .SS "pollegendre""(n,{v = x})"""
.el .SS "pollegendre\f(CW(n,{v = x})\fP"
.IX Xref "pollegendre"
.IX Subsection "pollegendre(n,{v = x})"
creates the \f(CW\*(C`n^{th}\*(C'\fR
Legendre polynomial, in variable \f(CW\*(C`v\*(C'\fR.
.IX Xref "Legendre polynomial"
.PP
The library syntax is \fBlegendre\fR\f(CW\*(C`(n)\*(C'\fR, where \f(CW\*(C`x\*(C'\fR is a \f(CW\*(C`long\*(C'\fR.
.IX Xref "legendre"
.ie n .SS "polrecip""(\f(CIpol\fP)"""
.el .SS "polrecip\f(CW(\fP\f(CIpol\fP\f(CW)\fP"
.IX Xref "polrecip"
.IX Subsection "polrecip(pol)"
reciprocal polynomial of \fIpol\fR,
i.e. the coefficients are in reverse order. \fIpol\fR must be a polynomial.
.PP
The library syntax is \fBpolrecip\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "polrecip"
.ie n .SS "polresultant""(x,y,{v},{\f(CIflag\fP = 0})"""
.el .SS "polresultant\f(CW(x,y,{v},{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "polresultant"
.IX Subsection "polresultant(x,y,{v},{flag = 0})"
resultant of the two
polynomials \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR with exact entries, with respect to the main
variables of \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR if \f(CW\*(C`v\*(C'\fR is omitted, with respect to the variable \f(CW\*(C`v\*(C'\fR
otherwise. The algorithm assumes the base ring is a domain.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR, uses the subresultant algorithm.
.IX Xref "subresultant algorithm"
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR, uses the determinant of Sylvester's matrix instead (here \f(CW\*(C`x\*(C'\fR and
\&\f(CW\*(C`y\*(C'\fR may have non-exact coefficients).
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 2\*(C'\fR, uses Ducos's modified subresultant algorithm. It should be much
faster than the default if the coefficient ring is complicated (e.g
multivariate polynomials or huge coefficients), and slightly slower
otherwise.
.PP
The library syntax is \fBpolresultant0\fR\f(CW\*(C`(x,y,v,\f(CIflag\f(CW)\*(C'\fR, where \f(CW\*(C`v\*(C'\fR is a \f(CW\*(C`long\*(C'\fR and an omitted \f(CW\*(C`v\*(C'\fR
is coded as \f(CW\*(C`\-1\*(C'\fR. Also available are \f(CW\*(C` \f(CBsubres\f(CW(x,y)\*(C'\fR (\f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR) and
\&\f(CW\*(C` \f(CBresultant2\f(CW(x,y)\*(C'\fR (\f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR).
.IX Xref "polresultant0 subres resultant2"
.ie n .SS "polroots""(\f(CIpol\fP,{\f(CIflag\fP = 0})"""
.el .SS "polroots\f(CW(\fP\f(CIpol\fP\f(CW,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "polroots"
.IX Subsection "polroots(pol,{flag = 0})"
complex roots of the polynomial
\&\fIpol\fR, given as a column vector where each root is repeated according to
its multiplicity. The precision is given as for transcendental functions: in
\&\s-1GP\s0 it is kept in the variable \f(CW\*(C`realprecision\*(C'\fR and is transparent to the
user, but it must be explicitly given as a second argument in library mode.
.PP
The algorithm used is a modification of A. Schönhage's
root-finding algorithm, due to and implemented by X. Gourdon. Barring bugs, it
is guaranteed to converge and to give the roots to the required accuracy.
.IX Xref "Schönage"
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR, use a variant of the Newton-Raphson method, which is \eemph{not}
guaranteed to converge, but is rather fast. If you get the messages ``too
many iterations in roots'' or ``\s-1INTERNAL ERROR:\s0 incorrect result in roots'',
use the default algorithm. This used to be the default root-finding function in
\&\s-1PARI\s0 until version 1.39.06.
.PP
The library syntax is \fBroots\fR\f(CW\*(C`(\f(CIpol\f(CW,\f(CIprec\f(CW)\*(C'\fR or \f(CW\*(C` \f(CBrootsold\f(CW(\f(CIpol\f(CW,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "roots rootsold"
.ie n .SS "polrootsmod""(\f(CIpol\fP,p,{\f(CIflag\fP = 0})"""
.el .SS "polrootsmod\f(CW(\fP\f(CIpol\fP\f(CW,p,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "polrootsmod"
.IX Subsection "polrootsmod(pol,p,{flag = 0})"
row vector of roots modulo
\&\f(CW\*(C`p\*(C'\fR of the polynomial \fIpol\fR. The particular non-prime value \f(CW\*(C`p = 4\*(C'\fR is
accepted, mainly for \f(CW2\fR\-adic computations. Multiple roots are \eemph{not}
repeated.
.PP
If \f(CW\*(C`p\*(C'\fR is very small, you may try setting \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR, which uses a naive search.
.PP
The library syntax is \fBrootmod\fR\f(CW\*(C`(\f(CIpol\f(CW,p)\*(C'\fR (\f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR) or
\&\f(CW\*(C` \f(CBrootmod2\f(CW(\f(CIpol\f(CW,p)\*(C'\fR (\f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR).
.IX Xref "rootmod rootmod2"
.ie n .SS "polrootspadic""(\f(CIpol\fP,p,r)"""
.el .SS "polrootspadic\f(CW(\fP\f(CIpol\fP\f(CW,p,r)\fP"
.IX Xref "polrootspadic"
.IX Subsection "polrootspadic(pol,p,r)"
row vector of \f(CW\*(C`p\*(C'\fR\-adic roots of
the polynomial \fIpol\fR, given to \f(CW\*(C`p\*(C'\fR\-adic precision \f(CW\*(C`r\*(C'\fR. Multiple roots are
\&\eemph{not} repeated. \f(CW\*(C`p\*(C'\fR is assumed to be a prime, and \fIpol\fR to be
non-zero modulo \f(CW\*(C`p\*(C'\fR. Note that this is not the same as the roots in
\&\f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW/p^r\f(CB\f(CBZ\f(CB\f(CW\*(C'\fR, rather it gives approximations in \f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW/p^r\f(CB\f(CBZ\f(CB\f(CW\*(C'\fR of the true
roots living in \f(CW\*(C`\f(CB\f(CBQ\f(CB\f(CW_p\*(C'\fR.
.PP
If \fIpol\fR has inexact \f(CW\*(C`t_PADIC\*(C'\fR coefficients, this is not always
well-defined; in this case, the equation is first made integral, then lifted
to \fB\f(BIZ\fB\fR. Hence the roots given are approximations of the roots of a
polynomial which is \f(CW\*(C`p\*(C'\fR\-adically close to the input.
.PP
The library syntax is \fBrootpadic\fR\f(CW\*(C`(\f(CIpol\f(CW,p,r)\*(C'\fR, where \f(CW\*(C`r\*(C'\fR is a \f(CW\*(C`long\*(C'\fR.
.IX Xref "rootpadic"
.ie n .SS "polsturm""(\f(CIpol\fP,{a},{b})"""
.el .SS "polsturm\f(CW(\fP\f(CIpol\fP\f(CW,{a},{b})\fP"
.IX Xref "polsturm"
.IX Subsection "polsturm(pol,{a},{b})"
number of real roots of the real
polynomial \fIpol\fR in the interval \f(CW\*(C`]a,b]\*(C'\fR, using Sturm's algorithm. \f(CW\*(C`a\*(C'\fR
(resp. \f(CW\*(C`b\*(C'\fR) is taken to be \f(CW\*(C`\- oo \*(C'\fR (resp. \f(CW\*(C`+ oo \*(C'\fR) if omitted.
.PP
The library syntax is \fBsturmpart\fR\f(CW\*(C`(\f(CIpol\f(CW,a,b)\*(C'\fR. Use \f(CW\*(C`NULL\*(C'\fR to omit an argument.
\&\f(CW\*(C` \f(CBsturm\f(CW(\f(CIpol\f(CW)\*(C'\fR is equivalent to
\&\f(CW\*(C` \f(CBsturmpart\f(CW(\f(CIpol\f(CW,NULL,NULL)\*(C'\fR. The result is a
\&\f(CW\*(C`long\*(C'\fR.
.IX Xref "sturmpart sturm sturmpart"
.ie n .SS "polsubcyclo""(n,d,{v = x})"""
.el .SS "polsubcyclo\f(CW(n,d,{v = x})\fP"
.IX Xref "polsubcyclo"
.IX Subsection "polsubcyclo(n,d,{v = x})"
gives polynomials (in variable
\&\f(CW\*(C`v\*(C'\fR) defining the sub-Abelian extensions of degree \f(CW\*(C`d\*(C'\fR of the cyclotomic
field \f(CW\*(C`\f(CB\f(CBQ\f(CB\f(CW(\f(CIzeta\f(CW_n)\*(C'\fR, where \f(CW\*(C`d | \f(CIphi\f(CW(n)\*(C'\fR.
.PP
If there is exactly one such extension the output is a polynomial, else it is
a vector of polynomials, eventually empty.
.PP
To be sure to get a vector, you can use \f(CW\*(C`concat([],polsubcyclo(n,d))\*(C'\fR
.PP
The function \f(CW\*(C`galoissubcyclo\*(C'\fR allows to specify more closely which sub-Abelian extension should be computed.
.IX Xref "galoissubcyclo"
.PP
The library syntax is \fBpolsubcyclo\fR\f(CW\*(C`(n,d,v)\*(C'\fR, where \f(CW\*(C`n\*(C'\fR, \f(CW\*(C`d\*(C'\fR and \f(CW\*(C`v\*(C'\fR are \f(CW\*(C`long\*(C'\fR and \f(CW\*(C`v\*(C'\fR is a
variable number. When \f(CW\*(C`(\f(CB\f(CBZ\f(CB\f(CW/n\f(CB\f(CBZ\f(CB\f(CW)^*\*(C'\fR is cyclic, you can use
\&\f(CW\*(C` \f(CBsubcyclo\f(CW(n,d,v)\*(C'\fR, where \f(CW\*(C`n\*(C'\fR, \f(CW\*(C`d\*(C'\fR and \f(CW\*(C`v\*(C'\fR are \f(CW\*(C`long\*(C'\fR and \f(CW\*(C`v\*(C'\fR is a
variable number.
.IX Xref "polsubcyclo subcyclo"
.ie n .SS "polsylvestermatrix""(x,y)"""
.el .SS "polsylvestermatrix\f(CW(x,y)\fP"
.IX Xref "polsylvestermatrix"
.IX Subsection "polsylvestermatrix(x,y)"
forms the Sylvester matrix
corresponding to the two polynomials \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR, where the coefficients of
the polynomials are put in the columns of the matrix (which is the natural
direction for solving equations afterwards). The use of this matrix can be
essential when dealing with polynomials with inexact entries, since
polynomial Euclidean division doesn't make much sense in this case.
.PP
The library syntax is \fBsylvestermatrix\fR\f(CW\*(C`(x,y)\*(C'\fR.
.IX Xref "sylvestermatrix"
.ie n .SS "polsym""(x,n)"""
.el .SS "polsym\f(CW(x,n)\fP"
.IX Xref "polsym"
.IX Subsection "polsym(x,n)"
creates the vector of the symmetric powers
of the roots of the polynomial \f(CW\*(C`x\*(C'\fR up to power \f(CW\*(C`n\*(C'\fR, using Newton's
formula.
.IX Xref "symmetric powers"
.PP
The library syntax is \fBpolsym\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "polsym"
.ie n .SS "poltchebi""(n,{v = x})"""
.el .SS "poltchebi\f(CW(n,{v = x})\fP"
.IX Xref "poltchebi"
.IX Subsection "poltchebi(n,{v = x})"
creates the \f(CW\*(C`n^{th}\*(C'\fR
Chebyshev polynomial \f(CW\*(C`T_n\*(C'\fR of the first kind in variable \f(CW\*(C`v\*(C'\fR.
.IX Xref "Chebyshev"
.PP
The library syntax is \fBtchebi\fR\f(CW\*(C`(n,v)\*(C'\fR, where \f(CW\*(C`n\*(C'\fR and \f(CW\*(C`v\*(C'\fR are \f(CW\*(C`long\*(C'\fR
integers (\f(CW\*(C`v\*(C'\fR is a variable number).
.IX Xref "tchebi"
.ie n .SS "polzagier""(n,m)"""
.el .SS "polzagier\f(CW(n,m)\fP"
.IX Xref "polzagier"
.IX Subsection "polzagier(n,m)"
creates Zagier's polynomial \f(CW\*(C`P_n^{(m)}\*(C'\fR used in
the functions \f(CW\*(C`sumalt\*(C'\fR and \f(CW\*(C`sumpos\*(C'\fR (with \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR). One must have \f(CW\*(C`m <= 
n\*(C'\fR. The exact definition can be found in ``Convergence acceleration of
alternating series'', Cohen et al., Experiment. Math., vol. 9, 2000, pp. 3\-\-12.
.PP
The library syntax is \fBpolzagreel\fR\f(CW\*(C`(n,m,\f(CIprec\f(CW)\*(C'\fR if the result is only wanted as a polynomial
with real coefficients to the precision \f(CW\*(C`\f(CIprec\f(CW\*(C'\fR, or \f(CW\*(C` \f(CBpolzag\f(CW(n,m)\*(C'\fR
if the result is wanted exactly, where \f(CW\*(C`n\*(C'\fR and \f(CW\*(C`m\*(C'\fR are \f(CW\*(C`long\*(C'\fRs.
.IX Xref "polzagreel polzag"
.ie n .SS "serconvol""(x,y)"""
.el .SS "serconvol\f(CW(x,y)\fP"
.IX Xref "serconvol"
.IX Subsection "serconvol(x,y)"
convolution (or Hadamard product) of the
two power series \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR; in other words if \f(CW\*(C`x = \f(CIsum\f(CW a_k*X^k\*(C'\fR and \f(CW\*(C`y = \f(CIsum\f(CW
b_k*X^k\*(C'\fR then \f(CW\*(C`serconvol(x,y) = \f(CIsum\f(CW a_k*b_k*X^k\*(C'\fR.
.IX Xref "Hadamard product"
.PP
The library syntax is \fBconvol\fR\f(CW\*(C`(x,y)\*(C'\fR.
.IX Xref "convol"
.ie n .SS "serlaplace""(x)"""
.el .SS "serlaplace\f(CW(x)\fP"
.IX Xref "serlaplace"
.IX Subsection "serlaplace(x)"
\&\f(CW\*(C`x\*(C'\fR must be a power series with non-negative
exponents. If \f(CW\*(C`x = \f(CIsum\f(CW (a_k/k!)*X^k\*(C'\fR then the result is \f(CW\*(C`\f(CIsum\f(CW a_k*X^k\*(C'\fR.
.PP
The library syntax is \fBlaplace\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "laplace"
.ie n .SS "serreverse""(x)"""
.el .SS "serreverse\f(CW(x)\fP"
.IX Xref "serreverse"
.IX Subsection "serreverse(x)"
reverse power series (i.e. \f(CW\*(C`x^{\-1}\*(C'\fR, not \f(CW\*(C`1/x\*(C'\fR)
of \f(CW\*(C`x\*(C'\fR. \f(CW\*(C`x\*(C'\fR must be a power series whose valuation is exactly equal to one.
.PP
The library syntax is \fBrecip\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "recip"
.ie n .SS "subst""(x,y,z)"""
.el .SS "subst\f(CW(x,y,z)\fP"
.IX Xref "subst"
.IX Subsection "subst(x,y,z)"
replace the simple variable \f(CW\*(C`y\*(C'\fR by the argument \f(CW\*(C`z\*(C'\fR in the ``polynomial''
expression \f(CW\*(C`x\*(C'\fR. Every type is allowed for \f(CW\*(C`x\*(C'\fR, but if it is not a genuine
polynomial (or power series, or rational function), the substitution will be
done as if the scalar components were polynomials of degree zero. In
particular, beware that:
.PP
.Vb 3
\&  ? subst(1, x, [1,2; 3,4])
\&  %1 =
\&  [1 0]
\&
\&  [0 1]
\&
\&  ? subst(1, x, Mat([0,1]))
\&    ***   forbidden substitution by a non square matrix
.Ve
.PP
If \f(CW\*(C`x\*(C'\fR is a power series, \f(CW\*(C`z\*(C'\fR must be either a polynomial, a power
series, or a rational function.
.PP
The library syntax is \fBgsubst\fR\f(CW\*(C`(x,y,z)\*(C'\fR, where \f(CW\*(C`y\*(C'\fR is the variable number.
.IX Xref "gsubst"
.ie n .SS "substpol""(x,y,z)"""
.el .SS "substpol\f(CW(x,y,z)\fP"
.IX Xref "substpol"
.IX Subsection "substpol(x,y,z)"
replace the ``variable'' \f(CW\*(C`y\*(C'\fR by the argument \f(CW\*(C`z\*(C'\fR in the ``polynomial''
expression \f(CW\*(C`x\*(C'\fR. Every type is allowed for \f(CW\*(C`x\*(C'\fR, but the same behaviour
as \f(CW\*(C`subst\*(C'\fR above apply.
.PP
The difference with \f(CW\*(C`subst\*(C'\fR is that \f(CW\*(C`y\*(C'\fR is allowed to be any polynomial
here. The substitution is done as per the following script:
.PP
.Vb 2
\&     subst_poly(pol, from, to) =
\&     { local(t = \*(Aqsubst_poly_t, M = from \- t);
\&
\&       subst(lift(Mod(pol,M), variable(M)), t, to)
\&     }
.Ve
.PP
For instance
.PP
.Vb 6
\&  ? substpol(x^4 + x^2 + 1, x^2, y)
\&  %1 = y^2 + y + 1
\&  ? substpol(x^4 + x^2 + 1, x^3, y)
\&  %2 = x^2 + y*x + 1
\&  ? substpol(x^4 + x^2 + 1, (x+1)^2, y)
\&  %3 = (\-4*y \- 6)*x + (y^2 + 3*y \- 3)
.Ve
.PP
The library syntax is \fBgsubstpol\fR\f(CW\*(C`(x,y,z)\*(C'\fR.
.IX Xref "gsubstpol"
.ie n .SS "substvec""(x,v,w)"""
.el .SS "substvec\f(CW(x,v,w)\fP"
.IX Xref "substvec"
.IX Subsection "substvec(x,v,w)"
\&\f(CW\*(C`v\*(C'\fR being a vector of monomials (variables),
\&\f(CW\*(C`w\*(C'\fR a vector of expressions of the same length, replace in the expression
\&\f(CW\*(C`x\*(C'\fR all occurences of \f(CW\*(C`v_i\*(C'\fR by \f(CW\*(C`w_i\*(C'\fR. The substitutions are done
simultaneously; more precisely, the \f(CW\*(C`v_i\*(C'\fR are first replaced by new
variables in \f(CW\*(C`x\*(C'\fR, then these are replaced by the \f(CW\*(C`w_i\*(C'\fR:
.PP
.Vb 4
\&  ? substvec([x,y], [x,y], [y,x])
\&  %1 = [y, x]
\&  ? substvec([x,y], [x,y], [y,x+y])
\&  %2 = [y, x + y]     \e\e not [y, 2*y]
.Ve
.PP
The library syntax is \fBgsubstvec\fR\f(CW\*(C`(x,v,w)\*(C'\fR.
.IX Xref "gsubstvec"
.ie n .SS "taylor""(x,y)"""
.el .SS "taylor\f(CW(x,y)\fP"
.IX Xref "taylor"
.IX Subsection "taylor(x,y)"
Taylor expansion around \f(CW0\fR of \f(CW\*(C`x\*(C'\fR with respect
to
the simple variable \f(CW\*(C`y\*(C'\fR. \f(CW\*(C`x\*(C'\fR can be of any reasonable type, for example a
rational function. The number of terms of the expansion is transparent to the
user in \s-1GP,\s0 but must be given as a second argument in library mode.
.IX Xref "Label se:taylor"
.PP
The library syntax is \fBtayl\fR\f(CW\*(C`(x,y,n)\*(C'\fR, where the \f(CW\*(C`long\*(C'\fR integer \f(CW\*(C`n\*(C'\fR is the desired number of
terms in the expansion.
.IX Xref "tayl"
.ie n .SS "thue""(\f(CItnf\fP,a,{\f(CIsol\fP})"""
.el .SS "thue\f(CW(\fP\f(CItnf\fP\f(CW,a,{\fP\f(CIsol\fP\f(CW})\fP"
.IX Xref "thue"
.IX Subsection "thue(tnf,a,{sol})"
solves the equation
\&\f(CW\*(C`P(x,y) = a\*(C'\fR in integers \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR, where \fItnf\fR was created with
\&\f(CWthueinit(P)\fR. \fIsol\fR, if present, contains the solutions of
\&\f(CW\*(C`\eNorm(x) = a\*(C'\fR modulo units of positive norm in the number field
defined by \f(CW\*(C`P\*(C'\fR (as computed by \f(CW\*(C`bnfisintnorm\*(C'\fR). If the
result is conditional (on the \s-1GRH\s0 or some heuristic strenghtening),
a Warning is printed. Otherwise, the result is unconditional, barring bugs.
For instance, here's how to solve the Thue equation \f(CW\*(C`x^{13} \- 5y^{13} = \- 4\*(C'\fR:
.PP
.Vb 3
\&  ? tnf = thueinit(x^13 \- 5);
\&  ? thue(tnf, \-4)
\&  %1 = [[1, 1]]
.Ve
.PP
Hence, the only solution is \f(CW\*(C`x = 1\*(C'\fR, \f(CW\*(C`y = 1\*(C'\fR and the result is
unconditional. On the other hand:
.PP
.Vb 5
\&  ? tnf = thueinit(x^3\-2*x^2+3*x\-17);
\&  ? thue(tnf, \-15)
\&    *** thue: Warning: Non trivial conditional class group.
\&    *** May miss solutions of the norm equation.
\&  %2 = [[1, 1]]
.Ve
.PP
This time the result is conditional. All results computed using this tnf
are likewise conditional, \eemph{except} for a right-hand side of \f(CW\*(C`\f(CI+\-\f(CW 1\*(C'\fR.
.PP
The library syntax is \fBthue\fR\f(CW\*(C`(\f(CItnf\f(CW,a,\f(CIsol\f(CW)\*(C'\fR, where an omitted \fIsol\fR is coded
as \f(CW\*(C`NULL\*(C'\fR.
.IX Xref "thue"
.ie n .SS "thueinit""(P,{\f(CIflag\fP = 0})"""
.el .SS "thueinit\f(CW(P,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "thueinit"
.IX Subsection "thueinit(P,{flag = 0})"
initializes the \fItnf\fR
corresponding to \f(CW\*(C`P\*(C'\fR. It is meant to be used in conjunction with \f(CW\*(C`thue\*(C'\fR
to solve Thue equations \f(CW\*(C`P(x,y) = a\*(C'\fR, where \f(CW\*(C`a\*(C'\fR is an integer. If \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR is
non-zero, certify the result unconditionnally. Otherwise, assume \s-1GRH,\s0
this being much faster of course.
.IX Xref "thue GRH"
.PP
\&\eemph{If} the conditional computed class group is trivial \eemph{or} you are
only interested in the case \f(CW\*(C`a = \f(CI+\-\f(CW1\*(C'\fR, then results are unconditional
anyway. So one should only use the flag is \f(CW\*(C`thue\*(C'\fR prints a Warning (see
the example there).
.PP
The library syntax is \fBthueinit\fR\f(CW\*(C`(P,\f(CIflag\f(CW,\f(CIprec\f(CW)\*(C'\fR.
.IX Xref "thueinit"
.SH "Vectors, matrices, linear algebra and sets"
.IX Header "Vectors, matrices, linear algebra and sets"

Note that most linear algebra functions operating on subspaces defined by
generating sets (such as \f(CW\*(C`mathnf\*(C'\fR, \f(CW\*(C`qflll\*(C'\fR, etc.) take matrices as
arguments. As usual, the generating vectors are taken to be the
\&\eemph{columns} of the given matrix.
.IX Xref "Label se:linear_algebra mathnf qflll"
.PP
Since \s-1PARI\s0 does not have a strong typing system, scalars live in
unspecified commutative base rings. It is very difficult to write
robust linear algebra routines in such a general setting. The
developpers's choice has been to assume the base ring is a domain
and work over its field of fractions. If the base ring is \eemph{not}
a domain, one gets an error as soon as a non-zero pivot turns out to be
non-invertible. Some functions, e.g. \f(CW\*(C`mathnf\*(C'\fR or \f(CW\*(C`mathnfmod\*(C'\fR,
specifically assume the base ring is \fB\f(BIZ\fB\fR.
.ie n .SS "algdep""(x,k,{\f(CIflag\fP = 0})"""
.el .SS "algdep\f(CW(x,k,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "algdep"
.IX Subsection "algdep(x,k,{flag = 0})"

 \f(CW\*(C`x\*(C'\fR being real/complex, or \f(CW\*(C`p\*(C'\fR\-adic, finds a polynomial of
degree at most \f(CW\*(C`k\*(C'\fR with integer coefficients having \f(CW\*(C`x\*(C'\fR as approximate root.
Note that the polynomial which is obtained is not necessarily the ``correct''
one. In fact it is not even guaranteed to be irreducible. One can check the
closeness either by a polynomial evaluation (use \f(CW\*(C`subst\*(C'\fR), or by
computing the roots of the polynomial given by \f(CW\*(C`algdep\*(C'\fR (use 
\&\f(CW\*(C`polroots\*(C'\fR).
.IX Xref "algebraic dependence Label se:algdep subst polroots"
.PP
Internally, \f(CW\*(C`lindep\*(C'\fR\f(CW\*(C`([1,x,...,x^k], \f(CIflag\f(CW)\*(C'\fR is used. If
\&\f(CW\*(C`lindep\*(C'\fR is not able to find a relation and returns a lower bound for the
sup norm of the smallest relation, \f(CW\*(C`algdep\*(C'\fR returns that bound instead.
A suitable non-zero value of \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR may improve on the default behaviour:
.IX Xref "lindep lindep algdep"
.PP
.Vb 10
\&  \e\e\e\e\e\e\e\e\e LLL
\&  ? \ep200
\&  ? algdep(2^(1/6)+3^(1/5), 30);      \e\e wrong in 3.8s
\&  ? algdep(2^(1/6)+3^(1/5), 30, 100); \e\e wrong in 1s
\&  ? algdep(2^(1/6)+3^(1/5), 30, 170); \e\e right in 3.3s
\&  ? algdep(2^(1/6)+3^(1/5), 30, 200); \e\e wrong in 2.9s
\&  ? \ep250
\&  ? algdep(2^(1/6)+3^(1/5), 30);      \e\e right in 2.8s
\&  ? algdep(2^(1/6)+3^(1/5), 30, 200); \e\e right in 3.4s
\&  \e\e\e\e\e\e\e\e\e PSLQ
\&  ? \ep200
\&  ? algdep(2^(1/6)+3^(1/5), 30, \-3);  \e\e failure in 14s.
\&  ? \ep250
\&  ? algdep(2^(1/6)+3^(1/5), 30, \-3);  \e\e right in 18s
.Ve
.PP
Proceeding by increments of 5 digits of accuracy, \f(CW\*(C`algdep\*(C'\fR with default
flag produces its first correct result at 205 digits, and from then on a
steady stream of correct results. Interestingly enough, our \s-1PSLQ\s0 also
reliably succeeds from 205 digits on (and is 5 times slower at that
accuracy).
.PP
The above example is the testcase studied in a 2000 paper by Borwein and
Lisonek, Applications of integer relation algorithms, \eemph{Discrete Math.},
\&\fB217\fR, p. 65\-\-82. The paper conludes in the superiority of the \s-1PSLQ\s0
algorithm, which either shows that \s-1PARI\s0's implementation of \s-1PSLQ\s0 is lacking,
or that its \s-1LLL\s0 is extremely good. The version of \s-1PARI\s0 tested there was
1.39, which succeeded reliably from precision 265 on, in about 60 as much
time as the current version.
.PP
The library syntax is \fBalgdep0\fR\f(CW\*(C`(x,k,\f(CIflag\f(CW,\f(CIprec\f(CW)\*(C'\fR, where \f(CW\*(C`k\*(C'\fR and \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR are \f(CW\*(C`long\*(C'\fRs.
Also available is \f(CW\*(C` \f(CBalgdep\f(CW(x,k,\f(CIprec\f(CW)\*(C'\fR (\f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR).
.IX Xref "algdep0 algdep"
.ie n .SS "charpoly""(A,{v = x},{\f(CIflag\fP = 0})"""
.el .SS "charpoly\f(CW(A,{v = x},{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "charpoly"
.IX Subsection "charpoly(A,{v = x},{flag = 0})"
characteristic polynomial
of \f(CW\*(C`A\*(C'\fR with respect to the variable \f(CW\*(C`v\*(C'\fR, i.e. determinant of \f(CW\*(C`v*I\-A\*(C'\fR if \f(CW\*(C`A\*(C'\fR
is a square matrix. If \f(CW\*(C`A\*(C'\fR is not a square matrix, it returns the characteristic polynomial of the map ``multiplication by \f(CW\*(C`A\*(C'\fR'' if \f(CW\*(C`A\*(C'\fR
is a scalar, in particular a polmod. E.g. \f(CW\*(C`charpoly(I) = x^2+1\*(C'\fR.
.IX Xref "characteristic polynomial"
.PP
The value of \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR is only significant for matrices.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR, the method used is essentially the same as for computing the
adjoint matrix, i.e. computing the traces of the powers of \f(CW\*(C`A\*(C'\fR.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR, uses Lagrange interpolation which is almost always slower.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 2\*(C'\fR, uses the Hessenberg form. This is faster than the default when
the coefficients are intmod a prime or real numbers, but is usually
slower in other base rings.
.PP
The library syntax is \fBcharpoly0\fR\f(CW\*(C`(A,v,\f(CIflag\f(CW)\*(C'\fR, where \f(CW\*(C`v\*(C'\fR is the variable number. Also available
are the functions \f(CW\*(C` \f(CBcaract\f(CW(A,v)\*(C'\fR (\f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR), \f(CW\*(C` \f(CBcarhess\f(CW(A,v)\*(C'\fR
(\f(CW\*(C`\f(CIflag\f(CW = 2\*(C'\fR), and \f(CW\*(C` \f(CBcaradj\f(CW(A,v,\f(CIpt\f(CW)\*(C'\fR where, in this last case,
\&\fIpt\fR is a \f(CW\*(C`GEN*\*(C'\fR which, if not equal to \f(CW\*(C`NULL\*(C'\fR, will receive
the address of the adjoint matrix of \f(CW\*(C`A\*(C'\fR (see \f(CW\*(C`matadjoint\*(C'\fR), so both
can be obtained at once.
.IX Xref "charpoly0 caract carhess caradj"
.ie n .SS "concat""(x,{y})"""
.el .SS "concat\f(CW(x,{y})\fP"
.IX Xref "concat"
.IX Subsection "concat(x,{y})"
concatenation of \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR. If \f(CW\*(C`x\*(C'\fR or \f(CW\*(C`y\*(C'\fR is
not a vector or matrix, it is considered as a one-dimensional vector. All
types are allowed for \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR, but the sizes must be compatible. Note
that matrices are concatenated horizontally, i.e. the number of rows stays
the same. Using transpositions, it is easy to concatenate them vertically.
.PP
To concatenate vectors sideways (i.e. to obtain a two-row or two-column
matrix), use \f(CW\*(C`Mat\*(C'\fR instead (see the example there). Concatenating a row
vector to a matrix having the same number of columns will add the row to the
matrix (top row if the vector is \f(CW\*(C`x\*(C'\fR, i.e. comes first, and bottom row
otherwise).
.IX Xref "Mat"
.PP
The empty matrix \f(CW\*(C`[;]\*(C'\fR is considered to have a number of rows compatible
with any operation, in particular concatenation. (Note that this is
definitely \eemph{not} the case for empty vectors \f(CW\*(C`[ ]\*(C'\fR or \f(CW\*(C`[ ]~\*(C'\fR.)
.PP
If \f(CW\*(C`y\*(C'\fR is omitted, \f(CW\*(C`x\*(C'\fR has to be a row vector or a list, in which case its
elements are concatenated, from left to right, using the above rules.
.PP
.Vb 5
\&  ? concat([1,2], [3,4])
\&  %1 = [1, 2, 3, 4]
\&  ? a = [[1,2]~, [3,4]~]; concat(a)
\&  %2 =
\&  [1 3]
\&
\&  [2 4]
\&
\&  ? concat([1,2; 3,4], [5,6]~)
\&  %3 =
\&  [1 2 5]
\&
\&  [3 4 6]
\&  ? concat([%, [7,8]~, [1,2,3,4]])
\&  %5 =
\&  [1 2 5 7]
\&
\&  [3 4 6 8]
\&
\&  [1 2 3 4]
.Ve
.PP
The library syntax is \fBconcat\fR\f(CW\*(C`(x,y)\*(C'\fR.
.IX Xref "concat"
.ie n .SS "lindep""(x,{\f(CIflag\fP = 0})"""
.el .SS "lindep\f(CW(x,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "lindep"
.IX Subsection "lindep(x,{flag = 0})"
\&\f(CW\*(C`x\*(C'\fR being a
vector with \f(CW\*(C`p\*(C'\fR\-adic or real/complex coefficients, finds a small integral
linear combination among these coefficients.
.IX Xref "linear dependence"
.PP
If \f(CW\*(C`x\*(C'\fR is \f(CW\*(C`p\*(C'\fR\-adic, \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR is meaningless and the algorithm LLL-reduces a
suitable (dual) lattice.
.PP
Otherwise, the value of \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR determines the algorithm used; in the current
version of \s-1PARI,\s0 we suggest to use \eemph{non\-negative} values, since it is by
far the fastest and most robust implementation. See the detailed example in
\&\*(L"Label se:algdep\*(R" (\f(CW\*(C`algdep\*(C'\fR).
.PP
If \f(CW\*(C`\f(CIflag\f(CW >= 0\*(C'\fR, uses a floating point (variable precision) \s-1LLL\s0 algorithm.
This is in general much faster than the other variants. 
If \f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR the accuracy is chosen internally using a crude heuristic.
If \f(CW\*(C`\f(CIflag\f(CW > 0\*(C'\fR the computation is done with an accuracy of \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR decimal digits.
In that case, the parameter \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR should be between 0.6 and 0.9 times the
number of correct decimal digits in the input.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = \-1\*(C'\fR, uses a variant of the \s-1LLL\s0 algorithm due to Hastad,
Lagarias and Schnorr (\s-1STACS 1986\s0). If the precision is too low, the routine
may enter an infinite loop.
.IX Xref "LLL"
.PP
If \f(CW\*(C`\f(CIflag\f(CW = \-2\*(C'\fR, \f(CW\*(C`x\*(C'\fR is allowed to be (and in any case interpreted as) a matrix.
Returns a non trivial element of the kernel of \f(CW\*(C`x\*(C'\fR, or \f(CW0\fR if \f(CW\*(C`x\*(C'\fR has trivial
kernel. The element is defined over the field of coefficients of \f(CW\*(C`x\*(C'\fR, and is
in general not integral.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = \-3\*(C'\fR, uses the \s-1PSLQ\s0 algorithm. This may return a real number \f(CW\*(C`B\*(C'\fR,
indicating that the input accuracy was exhausted and that no relation exist
whose sup norm is less than \f(CW\*(C`B\*(C'\fR.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = \-4\*(C'\fR, uses an experimental 2\-level \s-1PSLQ,\s0 which does not work at all.
(Should be rewritten.)
.PP
The library syntax is \fBlindep0\fR\f(CW\*(C`(x,\f(CIflag\f(CW,\f(CIprec\f(CW)\*(C'\fR. Also available is
\&\f(CW\*(C` \f(CBlindep\f(CW(x,\f(CIprec\f(CW)\*(C'\fR (\f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR).
.IX Xref "lindep0 lindep"
.ie n .SS "listcreate""(n)"""
.el .SS "listcreate\f(CW(n)\fP"
.IX Xref "listcreate"
.IX Subsection "listcreate(n)"
creates an empty list of maximal length \f(CW\*(C`n\*(C'\fR.
.PP
This function is useless in library mode.
.ie n .SS "listinsert""(\f(CIlist\fP,x,n)"""
.el .SS "listinsert\f(CW(\fP\f(CIlist\fP\f(CW,x,n)\fP"
.IX Xref "listinsert"
.IX Subsection "listinsert(list,x,n)"
inserts the object \f(CW\*(C`x\*(C'\fR at
position \f(CW\*(C`n\*(C'\fR in \fIlist\fR (which must be of type \f(CW\*(C`t_LIST\*(C'\fR). All the
remaining elements of \fIlist\fR (from position \f(CW\*(C`n+1\*(C'\fR onwards) are shifted
to the right. This and \f(CW\*(C`listput\*(C'\fR are the only commands which enable
you to increase a list's effective length (as long as it remains under
the maximal length specified at the time of the \f(CW\*(C`listcreate\*(C'\fR).
.PP
This function is useless in library mode.
.ie n .SS "listkill""(\f(CIlist\fP)"""
.el .SS "listkill\f(CW(\fP\f(CIlist\fP\f(CW)\fP"
.IX Xref "listkill"
.IX Subsection "listkill(list)"
kill \fIlist\fR. This deletes all
elements from \fIlist\fR and sets its effective length to \f(CW0\fR. The maximal
length is not affected.
.PP
This function is useless in library mode.
.ie n .SS "listput""(\f(CIlist\fP,x,{n})"""
.el .SS "listput\f(CW(\fP\f(CIlist\fP\f(CW,x,{n})\fP"
.IX Xref "listput"
.IX Subsection "listput(list,x,{n})"
sets the \f(CW\*(C`n\*(C'\fR\-th element of the list
\&\fIlist\fR (which must be of type \f(CW\*(C`t_LIST\*(C'\fR) equal to \f(CW\*(C`x\*(C'\fR. If \f(CW\*(C`n\*(C'\fR is omitted,
or greater than the list current effective length, just appends \f(CW\*(C`x\*(C'\fR. This and
\&\f(CW\*(C`listinsert\*(C'\fR are the only commands which enable you to increase a list's
effective length (as long as it remains under the maximal length specified at
the time of the \f(CW\*(C`listcreate\*(C'\fR).
.PP
If you want to put an element into an occupied cell, i.e. if you don't want to
change the effective length, you can consider the list as a vector and use
the usual \f(CW\*(C`list[n] = x\*(C'\fR construct.
.PP
This function is useless in library mode.
.ie n .SS "listsort""(\f(CIlist\fP,{\f(CIflag\fP = 0})"""
.el .SS "listsort\f(CW(\fP\f(CIlist\fP\f(CW,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "listsort"
.IX Subsection "listsort(list,{flag = 0})"
sorts \fIlist\fR (which must
be of type \f(CW\*(C`t_LIST\*(C'\fR) in place. If \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR is non-zero, suppresses all repeated
coefficients. This is much faster than the \f(CW\*(C`vecsort\*(C'\fR command since no
copy has to be made.
.PP
This function is useless in library mode.
.ie n .SS "matadjoint""(x)"""
.el .SS "matadjoint\f(CW(x)\fP"
.IX Xref "matadjoint"
.IX Subsection "matadjoint(x)"
adjoint matrix of \f(CW\*(C`x\*(C'\fR, i.e. the matrix \f(CW\*(C`y\*(C'\fR
of cofactors of \f(CW\*(C`x\*(C'\fR, satisfying \f(CW\*(C`x*y =  \f(CIdet\f(CW (x)*\eId\*(C'\fR. \f(CW\*(C`x\*(C'\fR must be a
(non-necessarily invertible) square matrix.
.IX Xref "adjoint matrix"
.PP
The library syntax is \fBadj\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "adj"
.ie n .SS "matcompanion""(x)"""
.el .SS "matcompanion\f(CW(x)\fP"
.IX Xref "matcompanion"
.IX Subsection "matcompanion(x)"
the left companion matrix to the polynomial \f(CW\*(C`x\*(C'\fR.
.PP
The library syntax is \fBassmat\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "assmat"
.ie n .SS "matdet""(x,{\f(CIflag\fP = 0})"""
.el .SS "matdet\f(CW(x,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "matdet"
.IX Subsection "matdet(x,{flag = 0})"
determinant of \f(CW\*(C`x\*(C'\fR. \f(CW\*(C`x\*(C'\fR must be a
square matrix.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR, uses Gauss-Bareiss.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR, uses classical Gaussian elimination, which is better when the
entries of the matrix are reals or integers for example, but usually much
worse for more complicated entries like multivariate polynomials.
.PP
The library syntax is \fBdet\fR\f(CW\*(C`(x)\*(C'\fR (\f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR) and \f(CW\*(C` \f(CBdet2\f(CW(x)\*(C'\fR (\f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR).
.IX Xref "det det2"
.ie n .SS "matdetint""(x)"""
.el .SS "matdetint\f(CW(x)\fP"
.IX Xref "matdetint"
.IX Subsection "matdetint(x)"
\&\f(CW\*(C`x\*(C'\fR being an \f(CW\*(C`m x n\*(C'\fR matrix with integer
coefficients, this function computes a \eemph{multiple} of the determinant of the
lattice generated by the columns of \f(CW\*(C`x\*(C'\fR if it is of rank \f(CW\*(C`m\*(C'\fR, and returns
zero otherwise. This function can be useful in conjunction with the function
\&\f(CW\*(C`mathnfmod\*(C'\fR which needs to know such a multiple. To obtain the
exact determinant (assuming the rank is maximal), you can compute
\&\f(CW\*(C`matdet(mathnfmod(x, matdetint(x)))\*(C'\fR.
.PP
Note that as soon as one of the dimensions gets large (\f(CW\*(C`m\*(C'\fR or \f(CW\*(C`n\*(C'\fR is larger
than 20, say), it will often be much faster to use \f(CW\*(C`mathnf(x, 1)\*(C'\fR or
\&\f(CW\*(C`mathnf(x, 4)\*(C'\fR directly.
.PP
The library syntax is \fBdetint\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "detint"
.ie n .SS "matdiagonal""(x)"""
.el .SS "matdiagonal\f(CW(x)\fP"
.IX Xref "matdiagonal"
.IX Subsection "matdiagonal(x)"
\&\f(CW\*(C`x\*(C'\fR being a vector, creates the diagonal matrix
whose diagonal entries are those of \f(CW\*(C`x\*(C'\fR.
.PP
The library syntax is \fBdiagonal\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "diagonal"
.ie n .SS "mateigen""(x)"""
.el .SS "mateigen\f(CW(x)\fP"
.IX Xref "mateigen"
.IX Subsection "mateigen(x)"
gives the eigenvectors of \f(CW\*(C`x\*(C'\fR as columns of a
matrix.
.PP
The library syntax is \fBeigen\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "eigen"
.ie n .SS "matfrobenius""(M,{\f(CIflag\fP = 0},{v = x})"""
.el .SS "matfrobenius\f(CW(M,{\fP\f(CIflag\fP\f(CW = 0},{v = x})\fP"
.IX Xref "matfrobenius"
.IX Subsection "matfrobenius(M,{flag = 0},{v = x})"
returns the Frobenius form of
the square matrix \f(CW\*(C`M\*(C'\fR. If \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR, returns only the elementary divisors as
a vectr of polynomials in the variable \f(CW\*(C`v\*(C'\fR.  If \f(CW\*(C`\f(CIflag\f(CW = 2\*(C'\fR, returns a
two-components vector [F,B] where \f(CW\*(C`F\*(C'\fR is the Frobenius form and \f(CW\*(C`B\*(C'\fR is
the basis change so that \f(CW\*(C`M = B^{\-1}FB\*(C'\fR.
.PP
The library syntax is \fBmatfrobenius\fR\f(CW\*(C`(M,\f(CIflag\f(CW,v)\*(C'\fR, where \f(CW\*(C`v\*(C'\fR is the variable number.
.IX Xref "matfrobenius"
.ie n .SS "mathess""(x)"""
.el .SS "mathess\f(CW(x)\fP"
.IX Xref "mathess"
.IX Subsection "mathess(x)"
Hessenberg form of the square matrix \f(CW\*(C`x\*(C'\fR.
.PP
The library syntax is \fBhess\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "hess"
.ie n .SS "mathilbert""(x)"""
.el .SS "mathilbert\f(CW(x)\fP"
.IX Xref "mathilbert"
.IX Subsection "mathilbert(x)"
\&\f(CW\*(C`x\*(C'\fR being a \f(CW\*(C`long\*(C'\fR, creates the
Hilbert matrixof order \f(CW\*(C`x\*(C'\fR, i.e. the matrix whose coefficient
(\f(CW\*(C`i\*(C'\fR,\f(CW\*(C`j\*(C'\fR) is \f(CW\*(C`1/ (i+j\-1)\*(C'\fR.
.IX Xref "Hilbert matrix"
.PP
The library syntax is \fBmathilbert\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "mathilbert"
.ie n .SS "mathnf""(x,{\f(CIflag\fP = 0})"""
.el .SS "mathnf\f(CW(x,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "mathnf"
.IX Subsection "mathnf(x,{flag = 0})"
if \f(CW\*(C`x\*(C'\fR is a (not necessarily square)
matrix with integer entries, finds the \eemph{upper triangular}
Hermite normal form of \f(CW\*(C`x\*(C'\fR. If the rank of \f(CW\*(C`x\*(C'\fR is equal to its number
of rows, the result is a square matrix. In general, the columns of the result
form a basis of the lattice spanned by the columns of \f(CW\*(C`x\*(C'\fR.
.IX Xref "Hermite normal form"
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR, uses the naive algorithm. This should never be used if the
dimension is at all large (larger than 10, say). It is recommanded to use
either \f(CW\*(C`mathnfmod(x, matdetint(x))\*(C'\fR (when \f(CW\*(C`x\*(C'\fR has maximal rank) or
\&\f(CW\*(C`mathnf(x, 1)\*(C'\fR. Note that the latter is in general faster than
\&\f(CW\*(C`mathnfmod\*(C'\fR, and also provides a base change matrix.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR, uses Batut's algorithm, which is much faster than the default.
Outputs a two-component row vector \f(CW\*(C`[H,U]\*(C'\fR, where \f(CW\*(C`H\*(C'\fR is the \eemph{upper
triangular} Hermite normal form of \f(CW\*(C`x\*(C'\fR defined as above,  and \f(CW\*(C`U\*(C'\fR is the
unimodular transformation matrix such that \f(CW\*(C`xU = [0|H]\*(C'\fR. \f(CW\*(C`U\*(C'\fR has in general
huge coefficients, in particular when the kernel is large.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 3\*(C'\fR, uses Batut's algorithm, but outputs \f(CW\*(C`[H,U,P]\*(C'\fR, such that \f(CW\*(C`H\*(C'\fR and
\&\f(CW\*(C`U\*(C'\fR are as before and \f(CW\*(C`P\*(C'\fR is a permutation of the rows such that \f(CW\*(C`P\*(C'\fR applied
to \f(CW\*(C`xU\*(C'\fR gives \f(CW\*(C`H\*(C'\fR. The matrix \f(CW\*(C`U\*(C'\fR is smaller than with \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR, but may still
be large.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 4\*(C'\fR, as in case 1 above, but uses a heuristic variant of \s-1LLL\s0
reduction along the way. The matrix \f(CW\*(C`U\*(C'\fR is in general close to optimal (in
terms of smallest \f(CW\*(C`L_2\*(C'\fR norm), but the reduction is slower than in case \f(CW1\fR.
.IX Xref "LLL"
.PP
The library syntax is \fBmathnf0\fR\f(CW\*(C`(x,\f(CIflag\f(CW)\*(C'\fR. Also available are \f(CW\*(C` \f(CBhnf\f(CW(x)\*(C'\fR (\f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR) and
\&\f(CW\*(C` \f(CBhnfall\f(CW(x)\*(C'\fR (\f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR). To reduce \eemph{huge} (say \f(CW\*(C`400  x 400\*(C'\fR and
more) relation matrices (sparse with small entries), you can use the pair
\&\f(CW\*(C`hnfspec\*(C'\fR / \f(CW\*(C`hnfadd\*(C'\fR. Since this is rather technical and the
calling interface may change, they are not documented yet. Look at the code
in \f(CW\*(C`basemath/alglin1.c\*(C'\fR.
.IX Xref "mathnf0 hnf hnfall"
.ie n .SS "mathnfmod""(x,d)"""
.el .SS "mathnfmod\f(CW(x,d)\fP"
.IX Xref "mathnfmod"
.IX Subsection "mathnfmod(x,d)"
if \f(CW\*(C`x\*(C'\fR is a (not necessarily square) matrix of
maximal rank with integer entries, and \f(CW\*(C`d\*(C'\fR is a multiple of the (non-zero)
determinant of the lattice spanned by the columns of \f(CW\*(C`x\*(C'\fR, finds the
\&\eemph{upper triangular} Hermite normal form of \f(CW\*(C`x\*(C'\fR.
.IX Xref "Hermite normal form"
.PP
If the rank of \f(CW\*(C`x\*(C'\fR is equal to its number of rows, the result is a square
matrix. In general, the columns of the result form a basis of the lattice
spanned by the columns of \f(CW\*(C`x\*(C'\fR. This is much faster than \f(CW\*(C`mathnf\*(C'\fR when \f(CW\*(C`d\*(C'\fR
is known.
.PP
The library syntax is \fBhnfmod\fR\f(CW\*(C`(x,d)\*(C'\fR.
.IX Xref "hnfmod"
.ie n .SS "mathnfmodid""(x,d)"""
.el .SS "mathnfmodid\f(CW(x,d)\fP"
.IX Xref "mathnfmodid"
.IX Subsection "mathnfmodid(x,d)"
outputs the (upper triangular)
Hermite normal form of \f(CW\*(C`x\*(C'\fR concatenated with \f(CW\*(C`d\*(C'\fR times
the identity matrix. Assumes that \f(CW\*(C`x\*(C'\fR has integer entries.
.IX Xref "Hermite normal form"
.PP
The library syntax is \fBhnfmodid\fR\f(CW\*(C`(x,d)\*(C'\fR.
.IX Xref "hnfmodid"
.ie n .SS "matid""(n)"""
.el .SS "matid\f(CW(n)\fP"
.IX Xref "matid"
.IX Subsection "matid(n)"
creates the \f(CW\*(C`n x n\*(C'\fR identity matrix.
.PP
The library syntax is \fBmatid\fR\f(CW\*(C`(n)\*(C'\fR where \f(CW\*(C`n\*(C'\fR is a \f(CW\*(C`long\*(C'\fR.
.IX Xref "matid"
.PP
Related functions are \f(CW\*(C` \f(CBgscalmat\f(CW(x,n)\*(C'\fR, which creates \f(CW\*(C`x\*(C'\fR times the
identity matrix (\f(CW\*(C`x\*(C'\fR being a \f(CW\*(C`GEN\*(C'\fR and \f(CW\*(C`n\*(C'\fR a \f(CW\*(C`long\*(C'\fR), and
\&\f(CW\*(C` \f(CBgscalsmat\f(CW(x,n)\*(C'\fR which is the same when \f(CW\*(C`x\*(C'\fR is a \f(CW\*(C`long\*(C'\fR.
.IX Xref "gscalmat gscalsmat"
.ie n .SS "matimage""(x,{\f(CIflag\fP = 0})"""
.el .SS "matimage\f(CW(x,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "matimage"
.IX Subsection "matimage(x,{flag = 0})"
gives a basis for the image of the
matrix \f(CW\*(C`x\*(C'\fR as columns of a matrix. A priori the matrix can have entries of
any type. If \f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR, use standard Gauss pivot. If \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR, use
\&\f(CW\*(C`matsupplement\*(C'\fR.
.PP
The library syntax is \fBmatimage0\fR\f(CW\*(C`(x,\f(CIflag\f(CW)\*(C'\fR. Also available is \f(CW\*(C` \f(CBimage\f(CW(x)\*(C'\fR (\f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR).
.IX Xref "matimage0 image"
.ie n .SS "matimagecompl""(x)"""
.el .SS "matimagecompl\f(CW(x)\fP"
.IX Xref "matimagecompl"
.IX Subsection "matimagecompl(x)"
gives the vector of the column indices which
are not extracted by the function \f(CW\*(C`matimage\*(C'\fR. Hence the number of
components of \f(CWmatimagecompl(x)\fR plus the number of columns of
\&\f(CWmatimage(x)\fR is equal to the number of columns of the matrix \f(CW\*(C`x\*(C'\fR.
.PP
The library syntax is \fBimagecompl\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "imagecompl"
.ie n .SS "matindexrank""(x)"""
.el .SS "matindexrank\f(CW(x)\fP"
.IX Xref "matindexrank"
.IX Subsection "matindexrank(x)"
\&\f(CW\*(C`x\*(C'\fR being a matrix of rank \f(CW\*(C`r\*(C'\fR, gives two
vectors \f(CW\*(C`y\*(C'\fR and \f(CW\*(C`z\*(C'\fR of length \f(CW\*(C`r\*(C'\fR giving a list of rows and columns
respectively (starting from 1) such that the extracted matrix obtained from
these two vectors using \f(CW\*(C`vecextract(x,y,z)\*(C'\fR is invertible.
.IX Xref "vecextract"
.PP
The library syntax is \fBindexrank\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "indexrank"
.ie n .SS "matintersect""(x,y)"""
.el .SS "matintersect\f(CW(x,y)\fP"
.IX Xref "matintersect"
.IX Subsection "matintersect(x,y)"
\&\f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR being two matrices with the same
number of rows each of whose columns are independent, finds a basis of the
\&\fB\f(BIQ\fB\fR\-vector space equal to the intersection of the spaces spanned by the
columns of \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR respectively. See also the function
\&\f(CW\*(C`idealintersect\*(C'\fR, which does the same for free \fB\f(BIZ\fB\fR\-modules.
.IX Xref "idealintersect"
.PP
The library syntax is \fBintersect\fR\f(CW\*(C`(x,y)\*(C'\fR.
.IX Xref "intersect"
.ie n .SS "matinverseimage""(M,y)"""
.el .SS "matinverseimage\f(CW(M,y)\fP"
.IX Xref "matinverseimage"
.IX Subsection "matinverseimage(M,y)"
gives a column vector belonging to the
inverse image \f(CW\*(C`z\*(C'\fR of the column vector or matrix \f(CW\*(C`y\*(C'\fR by the matrix \f(CW\*(C`M\*(C'\fR if one
exists (i.e such that \f(CW\*(C`Mz = y\*(C'\fR), the empty vector otherwise. To get the
complete inverse image, it suffices to add to the result any element of the
kernel of \f(CW\*(C`x\*(C'\fR obtained for example by \f(CW\*(C`matker\*(C'\fR.
.PP
The library syntax is \fBinverseimage\fR\f(CW\*(C`(x,y)\*(C'\fR.
.IX Xref "inverseimage"
.ie n .SS "matisdiagonal""(x)"""
.el .SS "matisdiagonal\f(CW(x)\fP"
.IX Xref "matisdiagonal"
.IX Subsection "matisdiagonal(x)"
returns true (1) if \f(CW\*(C`x\*(C'\fR is a diagonal matrix,
false (0) if not.
.PP
The library syntax is \fBisdiagonal\fR\f(CW\*(C`(x)\*(C'\fR, and this returns a \f(CW\*(C`long\*(C'\fR
integer.
.IX Xref "isdiagonal"
.ie n .SS "matker""(x,{\f(CIflag\fP = 0})"""
.el .SS "matker\f(CW(x,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "matker"
.IX Subsection "matker(x,{flag = 0})"
gives a basis for the kernel of the
matrix \f(CW\*(C`x\*(C'\fR as columns of a matrix. A priori the matrix can have entries of
any type.
.PP
If \f(CW\*(C`x\*(C'\fR is known to have integral entries, set \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR.
.PP
\&\fBNote:\fR The library function \f(CW\*(C`FpM_ker(x, p)\*(C'\fR, where \f(CW\*(C`x\*(C'\fR has
integer entries \eemph{reduced mod p} and \f(CW\*(C`p\*(C'\fR is prime, is equivalent to, but
orders of magnitude faster than, \f(CW\*(C`matker(x*Mod(1,p))\*(C'\fR and needs much
less stack space. To use it under \f(CW\*(C`gp\*(C'\fR, type \f(CW\*(C`install(FpM_ker, GG)\*(C'\fR first.
.IX Xref "FpM_ker"
.PP
The library syntax is \fBmatker0\fR\f(CW\*(C`(x,\f(CIflag\f(CW)\*(C'\fR. Also available are \f(CW\*(C` \f(CBker\f(CW(x)\*(C'\fR (\f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR),
\&\f(CW\*(C` \f(CBkeri\f(CW(x)\*(C'\fR (\f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR).
.IX Xref "matker0 ker keri"
.ie n .SS "matkerint""(x,{\f(CIflag\fP = 0})"""
.el .SS "matkerint\f(CW(x,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "matkerint"
.IX Subsection "matkerint(x,{flag = 0})"
gives an LLL-reduced \fB\f(BIZ\fB\fR\-basis
for the lattice equal to the kernel of the matrix \f(CW\*(C`x\*(C'\fR as columns of the
matrix \f(CW\*(C`x\*(C'\fR with integer entries (rational entries are not permitted).
.IX Xref "LLL"
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR, uses a modified integer \s-1LLL\s0 algorithm.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR, uses \f(CW\*(C`matrixqz(x,\-2)\*(C'\fR. If \s-1LLL\s0 reduction of the final result
is not desired, you can save time using \f(CW\*(C`matrixqz(matker(x),\-2)\*(C'\fR instead.
.PP
The library syntax is \fBmatkerint0\fR\f(CW\*(C`(x,\f(CIflag\f(CW)\*(C'\fR. Also available is
\&\f(CW\*(C` \f(CBkerint\f(CW(x)\*(C'\fR (\f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR).
.IX Xref "matkerint0 kerint"
.ie n .SS "matmuldiagonal""(x,d)"""
.el .SS "matmuldiagonal\f(CW(x,d)\fP"
.IX Xref "matmuldiagonal"
.IX Subsection "matmuldiagonal(x,d)"
product of the matrix \f(CW\*(C`x\*(C'\fR by the diagonal
matrix whose diagonal entries are those of the vector \f(CW\*(C`d\*(C'\fR. Equivalent to,
but much faster than \f(CW\*(C`x*matdiagonal(d)\*(C'\fR.
.PP
The library syntax is \fBmatmuldiagonal\fR\f(CW\*(C`(x,d)\*(C'\fR.
.IX Xref "matmuldiagonal"
.ie n .SS "matmultodiagonal""(x,y)"""
.el .SS "matmultodiagonal\f(CW(x,y)\fP"
.IX Xref "matmultodiagonal"
.IX Subsection "matmultodiagonal(x,y)"
product of the matrices \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR
assuming that the result is a diagonal matrix. Much faster than \f(CW\*(C`x*y\*(C'\fR in
that case. The result is undefined if \f(CW\*(C`x*y\*(C'\fR is not diagonal.
.PP
The library syntax is \fBmatmultodiagonal\fR\f(CW\*(C`(x,y)\*(C'\fR.
.IX Xref "matmultodiagonal"
.ie n .SS "matpascal""(x,{q})"""
.el .SS "matpascal\f(CW(x,{q})\fP"
.IX Xref "matpascal"
.IX Subsection "matpascal(x,{q})"
creates as a matrix the lower triangular
Pascal triangle of order \f(CW\*(C`x+1\*(C'\fR (i.e. with binomial coefficients
up to \f(CW\*(C`x\*(C'\fR). If \f(CW\*(C`q\*(C'\fR is given, compute the \f(CW\*(C`q\*(C'\fR\-Pascal triangle (i.e. using
\&\f(CW\*(C`q\*(C'\fR\-binomial coefficients).
.IX Xref "Pascal triangle"
.PP
The library syntax is \fBmatqpascal\fR\f(CW\*(C`(x,q)\*(C'\fR, where \f(CW\*(C`x\*(C'\fR is a \f(CW\*(C`long\*(C'\fR and \f(CW\*(C`q = NULL\*(C'\fR is used
to omit \f(CW\*(C`q\*(C'\fR. Also available is \f(CW\*(C` \f(CBmatpascal\f(CW(x)\*(C'\fR.
.IX Xref "matqpascal matpascal"
.ie n .SS "matrank""(x)"""
.el .SS "matrank\f(CW(x)\fP"
.IX Xref "matrank"
.IX Subsection "matrank(x)"
rank of the matrix \f(CW\*(C`x\*(C'\fR.
.PP
The library syntax is \fBrank\fR\f(CW\*(C`(x)\*(C'\fR, and the result is a \f(CW\*(C`long\*(C'\fR.
.IX Xref "rank"
.ie n .SS "matrix""(m,n,{X},{Y},{\f(CIexpr\fP = 0})"""
.el .SS "matrix\f(CW(m,n,{X},{Y},{\fP\f(CIexpr\fP\f(CW = 0})\fP"
.IX Xref "matrix"
.IX Subsection "matrix(m,n,{X},{Y},{expr = 0})"
creation of the
\&\f(CW\*(C`m x n\*(C'\fR matrix whose coefficients are given by the expression
\&\fIexpr\fR. There are two formal parameters in \fIexpr\fR, the first one
(\f(CW\*(C`X\*(C'\fR) corresponding to the rows, the second (\f(CW\*(C`Y\*(C'\fR) to the columns, and \f(CW\*(C`X\*(C'\fR
goes from 1 to \f(CW\*(C`m\*(C'\fR, \f(CW\*(C`Y\*(C'\fR goes from 1 to \f(CW\*(C`n\*(C'\fR. If one of the last 3 parameters
is omitted, fill the matrix with zeroes.
.PP
The library syntax is \fBmatrice\fR\f(CW\*(C`(GEN nlig,GEN ncol,entree *e1,entree *e2,char *expr)\*(C'\fR.
.IX Xref "matrice"
.ie n .SS "matrixqz""(x,p)"""
.el .SS "matrixqz\f(CW(x,p)\fP"
.IX Xref "matrixqz"
.IX Subsection "matrixqz(x,p)"
\&\f(CW\*(C`x\*(C'\fR being an \f(CW\*(C`m x n\*(C'\fR matrix with \f(CW\*(C`m >= n\*(C'\fR
with rational or integer entries, this function has varying behaviour
depending on the sign of \f(CW\*(C`p\*(C'\fR:
.PP
If \f(CW\*(C`p >= 0\*(C'\fR, \f(CW\*(C`x\*(C'\fR is assumed to be of maximal rank. This function returns a
matrix having only integral entries, having the same image as \f(CW\*(C`x\*(C'\fR, such that
the \s-1GCD\s0 of all its \f(CW\*(C`n x n\*(C'\fR subdeterminants is equal to 1 when \f(CW\*(C`p\*(C'\fR is
equal to 0, or not divisible by \f(CW\*(C`p\*(C'\fR otherwise. Here \f(CW\*(C`p\*(C'\fR must be a prime
number (when it is non-zero). However, if the function is used when \f(CW\*(C`p\*(C'\fR has
no small prime factors, it will either work or give the message ``impossible
inverse modulo'' and a non-trivial divisor of \f(CW\*(C`p\*(C'\fR.
.PP
If \f(CW\*(C`p = \-1\*(C'\fR, this function returns a matrix whose columns form a basis of the
lattice equal to \f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW^n\*(C'\fR intersected with the lattice generated by the
columns of \f(CW\*(C`x\*(C'\fR.
.PP
If \f(CW\*(C`p = \-2\*(C'\fR, returns a matrix whose columns form a basis of the lattice equal
to \f(CW\*(C`\f(CB\f(CBZ\f(CB\f(CW^n\*(C'\fR intersected with the \fB\f(BIQ\fB\fR\-vector space generated by the
columns of \f(CW\*(C`x\*(C'\fR.
.PP
The library syntax is \fBmatrixqz0\fR\f(CW\*(C`(x,p)\*(C'\fR.
.IX Xref "matrixqz0"
.ie n .SS "matsize""(x)"""
.el .SS "matsize\f(CW(x)\fP"
.IX Xref "matsize"
.IX Subsection "matsize(x)"
\&\f(CW\*(C`x\*(C'\fR being a vector or matrix, returns a row vector
with two components, the first being the number of rows (1 for a row vector),
the second the number of columns (1 for a column vector).
.PP
The library syntax is \fBmatsize\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "matsize"
.ie n .SS "matsnf""(X,{\f(CIflag\fP = 0})"""
.el .SS "matsnf\f(CW(X,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "matsnf"
.IX Subsection "matsnf(X,{flag = 0})"
if \f(CW\*(C`X\*(C'\fR is a (singular or non-singular)
matrix outputs the vector of elementary divisors of \f(CW\*(C`X\*(C'\fR (i.e. the diagonal of
the Smith normal form of \f(CW\*(C`X\*(C'\fR).
.IX Xref "Smith normal form"
.PP
The binary digits of \fIflag\fR mean:
.PP
1 (complete output): if set, outputs \f(CW\*(C`[U,V,D]\*(C'\fR, where \f(CW\*(C`U\*(C'\fR and \f(CW\*(C`V\*(C'\fR are two
unimodular matrices such that \f(CW\*(C`UXV\*(C'\fR is the diagonal matrix \f(CW\*(C`D\*(C'\fR. Otherwise
output only the diagonal of \f(CW\*(C`D\*(C'\fR.
.PP
2 (generic input): if set, allows polynomial entries, in which case the
input matrix must be square. Otherwise, assume that \f(CW\*(C`X\*(C'\fR has integer
coefficients with arbitrary shape.
.PP
4 (cleanup): if set, cleans up the output. This means that elementary
divisors equal to \f(CW1\fR will be deleted, i.e. outputs a shortened vector \f(CW\*(C`D\*(Aq\*(C'\fR
instead of \f(CW\*(C`D\*(C'\fR. If complete output was required, returns \f(CW\*(C`[U\*(Aq,V\*(Aq,D\*(Aq]\*(C'\fR so
that \f(CW\*(C`U\*(AqXV\*(Aq = D\*(Aq\*(C'\fR holds. If this flag is set, \f(CW\*(C`X\*(C'\fR is allowed to be of the
form \f(CW\*(C`D\*(C'\fR or \f(CW\*(C`[U,V,D]\*(C'\fR as would normally be output with the cleanup flag
unset.
.PP
The library syntax is \fBmatsnf0\fR\f(CW\*(C`(X,\f(CIflag\f(CW)\*(C'\fR. Also available is \f(CW\*(C` \f(CBsmith\f(CW(X)\*(C'\fR (\f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR).
.IX Xref "matsnf0 smith"
.ie n .SS "matsolve""(x,y)"""
.el .SS "matsolve\f(CW(x,y)\fP"
.IX Xref "matsolve"
.IX Subsection "matsolve(x,y)"
\&\f(CW\*(C`x\*(C'\fR being an invertible matrix and \f(CW\*(C`y\*(C'\fR a column
vector, finds the solution \f(CW\*(C`u\*(C'\fR of \f(CW\*(C`x*u = y\*(C'\fR, using Gaussian elimination. This
has the same effect as, but is a bit faster, than \f(CW\*(C`x^{\-1}*y\*(C'\fR.
.PP
The library syntax is \fBgauss\fR\f(CW\*(C`(x,y)\*(C'\fR.
.IX Xref "gauss"
.ie n .SS "matsolvemod""(m,d,y,{\f(CIflag\fP = 0})"""
.el .SS "matsolvemod\f(CW(m,d,y,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "matsolvemod"
.IX Subsection "matsolvemod(m,d,y,{flag = 0})"
\&\f(CW\*(C`m\*(C'\fR being any integral matrix,
\&\f(CW\*(C`d\*(C'\fR a vector of positive integer moduli, and \f(CW\*(C`y\*(C'\fR an integral
column vector, gives a small integer solution to the system of congruences
\&\f(CW\*(C`\f(CIsum\f(CW_i m_{i,j}x_j = y_i (mod d_i)\*(C'\fR if one exists, otherwise returns
zero. Shorthand notation: \f(CW\*(C`y\*(C'\fR (resp. \f(CW\*(C`d\*(C'\fR) can be given as a single integer,
in which case all the \f(CW\*(C`y_i\*(C'\fR (resp. \f(CW\*(C`d_i\*(C'\fR) above are taken to be equal to \f(CW\*(C`y\*(C'\fR
(resp. \f(CW\*(C`d\*(C'\fR).
.PP
.Vb 5
\&    ? m = [1,2;3,4];
\&    ? matsolvemod(m, [3,4], [1,2]~)
\&    %2 = [\-2, 0]~
\&    ? matsolvemod(m, 3, 1) \e\e m X = [1,1]~ over F_3
\&    %3 = [\-1, 1]~
.Ve
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR, all solutions are returned in the form of a two-component row
vector \f(CW\*(C`[x,u]\*(C'\fR, where \f(CW\*(C`x\*(C'\fR is a small integer solution to the system of
congruences and \f(CW\*(C`u\*(C'\fR is a matrix whose columns give a basis of the homogeneous
system (so that all solutions can be obtained by adding \f(CW\*(C`x\*(C'\fR to any linear
combination of columns of \f(CW\*(C`u\*(C'\fR). If no solution exists, returns zero.
.PP
The library syntax is \fBmatsolvemod0\fR\f(CW\*(C`(m,d,y,\f(CIflag\f(CW)\*(C'\fR. Also available
are \f(CW\*(C` \f(CBgaussmodulo\f(CW(m,d,y)\*(C'\fR (\f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR)
and \f(CW\*(C` \f(CBgaussmodulo2\f(CW(m,d,y)\*(C'\fR (\f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR).
.IX Xref "matsolvemod0 gaussmodulo gaussmodulo2"
.ie n .SS "matsupplement""(x)"""
.el .SS "matsupplement\f(CW(x)\fP"
.IX Xref "matsupplement"
.IX Subsection "matsupplement(x)"
assuming that the columns of the matrix \f(CW\*(C`x\*(C'\fR
are linearly independent (if they are not, an error message is issued), finds
a square invertible matrix whose first columns are the columns of \f(CW\*(C`x\*(C'\fR,
i.e. supplement the columns of \f(CW\*(C`x\*(C'\fR to a basis of the whole space.
.PP
The library syntax is \fBsuppl\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "suppl"
.ie n .SS "mattranspose""(x)"" or ""x~"""
.el .SS "mattranspose\f(CW(x)\fP or \f(CWx~\fP"
.IX Xref "mattranspose"
.IX Subsection "mattranspose(x) or x~"
transpose of \f(CW\*(C`x\*(C'\fR.
This has an effect only on vectors and matrices.
.PP
The library syntax is \fBgtrans\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "gtrans"
.ie n .SS "minpoly""(A,{v = x},{\f(CIflag\fP = 0})"""
.el .SS "minpoly\f(CW(A,{v = x},{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "minpoly"
.IX Subsection "minpoly(A,{v = x},{flag = 0})"
minimal polynomial
of \f(CW\*(C`A\*(C'\fR with respect to the variable \f(CW\*(C`v\*(C'\fR., i.e. the monic polynomial \f(CW\*(C`P\*(C'\fR
of minimal degree (in the variable \f(CW\*(C`v\*(C'\fR) such that \f(CW\*(C`P(A) = 0\*(C'\fR.
.IX Xref "minimal polynomial"
.PP
The library syntax is \fBminpoly\fR\f(CW\*(C`(A,v)\*(C'\fR, where \f(CW\*(C`v\*(C'\fR is the variable number.
.IX Xref "minpoly"
.ie n .SS "qfgaussred""(q)"""
.el .SS "qfgaussred\f(CW(q)\fP"
.IX Xref "qfgaussred"
.IX Subsection "qfgaussred(q)"
decomposition into squares of the
quadratic form represented by the symmetric matrix \f(CW\*(C`q\*(C'\fR. The result is a
matrix whose diagonal entries are the coefficients of the squares, and the
non-diagonal entries represent the bilinear forms. More precisely, if
\&\f(CW\*(C`(a_{ij})\*(C'\fR denotes the output, one has
.IX Xref "decomposition into squares"
.PP
  \f(CW\*(C` q(x) = \f(CIsum\f(CW_i a_{ii} (x_i + \f(CIsum\f(CW_{j > i} a_{ij} x_j)^2 \*(C'\fR
.PP
The library syntax is \fBsqred\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "sqred"
.ie n .SS "qfjacobi""(x)"""
.el .SS "qfjacobi\f(CW(x)\fP"
.IX Xref "qfjacobi"
.IX Subsection "qfjacobi(x)"
\&\f(CW\*(C`x\*(C'\fR being a real symmetric matrix, this gives a
vector having two components: the first one is the vector of eigenvalues of
\&\f(CW\*(C`x\*(C'\fR, the second is the corresponding orthogonal matrix of eigenvectors of
\&\f(CW\*(C`x\*(C'\fR. The method used is Jacobi's method for symmetric matrices.
.PP
The library syntax is \fBjacobi\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "jacobi"
.ie n .SS "qflll""(x,{\f(CIflag\fP = 0})"""
.el .SS "qflll\f(CW(x,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "qflll"
.IX Subsection "qflll(x,{flag = 0})"
\&\s-1LLL\s0 algorithm applied to the
\&\eemph{columns} of the matrix \f(CW\*(C`x\*(C'\fR. The columns of \f(CW\*(C`x\*(C'\fR must be linearly
independent, unless specified otherwise below. The result is a unimodular
transformation matrix \f(CW\*(C`T\*(C'\fR such that \f(CW\*(C`x.T\*(C'\fR is an LLL-reduced basis of
the lattice generated by the column vectors of \f(CW\*(C`x\*(C'\fR.
.IX Xref "LLL"
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR (default), the computations are done with floating point numbers,
using Householder matrices for orthogonalization. If \f(CW\*(C`x\*(C'\fR has integral
entries, then computations are nonetheless approximate, with precision
varying as needed (Lehmer's trick, as generalized by Schnorr).
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR, it is assumed that \f(CW\*(C`x\*(C'\fR is integral. The computation is done
entirely with integers. In this case, \f(CW\*(C`x\*(C'\fR needs not be of maximal rank, but
if it is not, \f(CW\*(C`T\*(C'\fR will not be square. This is slower and no more
accurate than \f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR above if \f(CW\*(C`x\*(C'\fR has small dimension (say \f(CW100\fR or less).
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 2\*(C'\fR, \f(CW\*(C`x\*(C'\fR should be an integer matrix whose columns are linearly
independent. Returns a partially reduced basis for \f(CW\*(C`x\*(C'\fR, using an unpublished
algorithm by Peter Montgomery: a basis is said to be \eemph{partially reduced}
if \f(CW\*(C`|v_i \f(CI+\-\f(CW v_j| >= |v_i|\*(C'\fR for any two distinct basis vectors \f(CW\*(C`v_i, 
v_j\*(C'\fR.
.PP
This is significantly faster than \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR, esp. when one row is huge compared
to the other rows. Note that the resulting basis is \eemph{not} LLL-reduced in
general.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 4\*(C'\fR, \f(CW\*(C`x\*(C'\fR is assumed to have integral entries, but needs not be of
maximal rank. The result is a two-component vector of matrices: the
columns of the first matrix represent a basis of the integer kernel of \f(CW\*(C`x\*(C'\fR
(not necessarily LLL-reduced) and the second matrix is the transformation
matrix \f(CW\*(C`T\*(C'\fR such that \f(CW\*(C`x.T\*(C'\fR is an LLL-reduced \fB\f(BIZ\fB\fR\-basis of the image
of the matrix \f(CW\*(C`x\*(C'\fR.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 5\*(C'\fR, case as case \f(CW4\fR, but \f(CW\*(C`x\*(C'\fR may have polynomial coefficients.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 8\*(C'\fR, same as case \f(CW0\fR, but \f(CW\*(C`x\*(C'\fR may have polynomial coefficients.
.PP
The library syntax is \fBqflll0\fR\f(CW\*(C`(x,\f(CIflag\f(CW,\f(CIprec\f(CW)\*(C'\fR. Also available are
\&\f(CW\*(C` \f(CBlll\f(CW(x,\f(CIprec\f(CW)\*(C'\fR (\f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR), \f(CW\*(C` \f(CBlllint\f(CW(x)\*(C'\fR (\f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR), and
\&\f(CW\*(C` \f(CBlllkerim\f(CW(x)\*(C'\fR (\f(CW\*(C`\f(CIflag\f(CW = 4\*(C'\fR).
.IX Xref "qflll0 lll lllint lllkerim"
.ie n .SS "qflllgram""(G,{\f(CIflag\fP = 0})"""
.el .SS "qflllgram\f(CW(G,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "qflllgram"
.IX Subsection "qflllgram(G,{flag = 0})"
same as \f(CW\*(C`qflll\*(C'\fR, except that the
matrix \f(CW\*(C`G = x~ * x\*(C'\fR is the Gram matrix of some lattice vectors \f(CW\*(C`x\*(C'\fR,
and not the coordinates of the vectors themselves. In particular, \f(CW\*(C`G\*(C'\fR must
now be a square symmetric real matrix, corresponding to a positive definite
quadratic form. The result is a unimodular transformation matrix \f(CW\*(C`T\*(C'\fR such
that \f(CW\*(C`x.T\*(C'\fR is an LLL-reduced basis of the lattice generated by the
column vectors of \f(CW\*(C`x\*(C'\fR.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR (default): the computations are done with floating point numbers,
using Householder matrices for orthogonalization. If \f(CW\*(C`G\*(C'\fR has integral
entries, then computations are nonetheless approximate, with precision
varying as needed (Lehmer's trick, as generalized by Schnorr).
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR: \f(CW\*(C`G\*(C'\fR has integer entries, still positive but not necessarily
definite (i.e \f(CW\*(C`x\*(C'\fR needs not have maximal rank). The computations are all
done in integers and should be slower than the default, unless the latter
triggers accuracy problems.
.PP
\&\f(CW\*(C`\f(CIflag\f(CW = 4\*(C'\fR: \f(CW\*(C`G\*(C'\fR has integer entries, gives the kernel and reduced image of \f(CW\*(C`x\*(C'\fR.
.PP
\&\f(CW\*(C`\f(CIflag\f(CW = 5\*(C'\fR: same as case \f(CW4\fR, but \f(CW\*(C`G\*(C'\fR may have polynomial coefficients.
.PP
The library syntax is \fBqflllgram0\fR\f(CW\*(C`(G,\f(CIflag\f(CW,\f(CIprec\f(CW)\*(C'\fR. Also available are
\&\f(CW\*(C` \f(CBlllgram\f(CW(G,\f(CIprec\f(CW)\*(C'\fR (\f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR), \f(CW\*(C` \f(CBlllgramint\f(CW(G)\*(C'\fR (\f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR), and
\&\f(CW\*(C` \f(CBlllgramkerim\f(CW(G)\*(C'\fR (\f(CW\*(C`\f(CIflag\f(CW = 4\*(C'\fR).
.IX Xref "qflllgram0 lllgram lllgramint lllgramkerim"
.ie n .SS "qfminim""(x,{b},{m},{\f(CIflag\fP = 0})"""
.el .SS "qfminim\f(CW(x,{b},{m},{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "qfminim"
.IX Subsection "qfminim(x,{b},{m},{flag = 0})"
\&\f(CW\*(C`x\*(C'\fR being a square and symmetric
matrix representing a positive definite quadratic form, this function
deals with the vectors of \f(CW\*(C`x\*(C'\fR whose norm is less than or equal to \f(CW\*(C`b\*(C'\fR,
enumerated using the Fincke-Pohst algorithm. The function searches for
the minimal non-zero vectors if \f(CW\*(C`b\*(C'\fR is omitted. The precise behaviour
depends on \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR (default), seeks at most \f(CW\*(C`2m\*(C'\fR vectors. The result is a
three-component vector, the first component being the number of vectors
found, the second being the maximum norm found, and the last vector is a
matrix whose columns are the vectors found, only one being given for each
pair \f(CW\*(C`\f(CI+\-\f(CW v\*(C'\fR (at most \f(CW\*(C`m\*(C'\fR such pairs). The vectors are returned in no
particular order. In this variant, an explicit \f(CW\*(C`m\*(C'\fR must be provided.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR, ignores \f(CW\*(C`m\*(C'\fR and returns the first vector whose norm is less
than \f(CW\*(C`b\*(C'\fR. In this variant, an explicit \f(CW\*(C`b\*(C'\fR must be provided.
.PP
In both these cases, \f(CW\*(C`x\*(C'\fR is assumed to have integral entries. The
implementation uses low precision floating point computations for maximal
speed, which gives incorrect result when \f(CW\*(C`x\*(C'\fR has large entries. (The
condition is checked in the code and the routine will raise an error if
large rounding errors occur.) A more robust, but much slower,
implementation is chosen if the following flag is used:
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 2\*(C'\fR, \f(CW\*(C`x\*(C'\fR can have non integral real entries. In this case, if \f(CW\*(C`b\*(C'\fR
is omitted, the ``minimal'' vectors only have approximately the same norm.
If \f(CW\*(C`b\*(C'\fR is omitted, \f(CW\*(C`m\*(C'\fR is an upper bound for the number of vectors that
will be stored and returned, but all minimal vectors are nevertheless
enumerated. If \f(CW\*(C`m\*(C'\fR is omitted, all vectors found are stored and returned;
note that this may be a huge vector!
.PP
The library syntax is \fBqfminim0\fR\f(CW\*(C`(x,b,m,\f(CIflag\f(CW,\f(CIprec\f(CW)\*(C'\fR, also available are \f(CW\*(C` \f(CBminim\f(CW(x,b,m)\*(C'\fR
(\f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR), \f(CW\*(C` \f(CBminim2\f(CW(x,b,m)\*(C'\fR (\f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR). In all cases, an omitted \f(CW\*(C`b\*(C'\fR
or \f(CW\*(C`m\*(C'\fR is coded as \f(CW\*(C`NULL\*(C'\fR.
.IX Xref "qfminim0 minim minim2"
.ie n .SS "qfperfection""(x)"""
.el .SS "qfperfection\f(CW(x)\fP"
.IX Xref "qfperfection"
.IX Subsection "qfperfection(x)"
\&\f(CW\*(C`x\*(C'\fR being a square and symmetric matrix with
integer entries representing a positive definite quadratic form, outputs the
perfection rank of the form. That is, gives the rank of the family of the \f(CW\*(C`s\*(C'\fR
symmetric matrices \f(CW\*(C`v_iv_i^t\*(C'\fR, where \f(CW\*(C`s\*(C'\fR is half the number of minimal
vectors and the \f(CW\*(C`v_i\*(C'\fR (\f(CW\*(C`1 <= i <= s\*(C'\fR) are the minimal vectors.
.PP
As a side note to old-timers, this used to fail bluntly when \f(CW\*(C`x\*(C'\fR had more
than \f(CW5000\fR minimal vectors. Beware that the computations can now be very
lengthy when \f(CW\*(C`x\*(C'\fR has many minimal vectors.
.PP
The library syntax is \fBperf\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "perf"
.ie n .SS "qfrep""(q, B, {\f(CIflag\fP = 0})"""
.el .SS "qfrep\f(CW(q, B, {\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "qfrep"
.IX Subsection "qfrep(q, B, {flag = 0})"
\&\f(CW\*(C`q\*(C'\fR being a square and symmetric
matrix with integer entries representing a positive definite quadratic form,
outputs the vector whose \f(CW\*(C`i\*(C'\fR\-th entry, \f(CW\*(C`1 <= i <= B\*(C'\fR is half the number
of vectors \f(CW\*(C`v\*(C'\fR such that \f(CW\*(C`q(v) = i\*(C'\fR. This routine uses a naive algorithm
based on \f(CW\*(C`qfminim\*(C'\fR, and will fail if any entry becomes larger than
\&\f(CW\*(C`2^{31}\*(C'\fR.
.IX Xref "qfminim"
.PP
The binary digits of \fIflag\fR mean:
.PP
\&\eitem 1: count vectors of even norm from \f(CW1\fR to \f(CW\*(C`2B\*(C'\fR.
.PP
\&\eitem 2: return a \f(CW\*(C`t_VECSMALL\*(C'\fR instead of a \f(CW\*(C`t_GEN\*(C'\fR
.PP
The library syntax is \fBqfrep0\fR\f(CW\*(C`(q, B, \f(CIflag\f(CW)\*(C'\fR.
.IX Xref "qfrep0"
.ie n .SS "qfsign""(x)"""
.el .SS "qfsign\f(CW(x)\fP"
.IX Xref "qfsign"
.IX Subsection "qfsign(x)"
signature of the quadratic form represented by the
symmetric matrix \f(CW\*(C`x\*(C'\fR. The result is a two-component vector.
.PP
The library syntax is \fBsignat\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "signat"
.ie n .SS "setintersect""(x,y)"""
.el .SS "setintersect\f(CW(x,y)\fP"
.IX Xref "setintersect"
.IX Subsection "setintersect(x,y)"
intersection of the two sets \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR.
.PP
The library syntax is \fBsetintersect\fR\f(CW\*(C`(x,y)\*(C'\fR.
.IX Xref "setintersect"
.ie n .SS "setisset""(x)"""
.el .SS "setisset\f(CW(x)\fP"
.IX Xref "setisset"
.IX Subsection "setisset(x)"
returns true (1) if \f(CW\*(C`x\*(C'\fR is a set, false (0) if
not. In \s-1PARI,\s0 a set is simply a row vector whose entries are strictly
increasing. To convert any vector (and other objects) into a set, use the
function \f(CW\*(C`Set\*(C'\fR.
.PP
The library syntax is \fBsetisset\fR\f(CW\*(C`(x)\*(C'\fR, and this returns a \f(CW\*(C`long\*(C'\fR.
.IX Xref "setisset"
.ie n .SS "setminus""(x,y)"""
.el .SS "setminus\f(CW(x,y)\fP"
.IX Xref "setminus"
.IX Subsection "setminus(x,y)"
difference of the two sets \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR,
i.e. set of elements of \f(CW\*(C`x\*(C'\fR which do not belong to \f(CW\*(C`y\*(C'\fR.
.PP
The library syntax is \fBsetminus\fR\f(CW\*(C`(x,y)\*(C'\fR.
.IX Xref "setminus"
.ie n .SS "setsearch""(x,y,{\f(CIflag\fP = 0})"""
.el .SS "setsearch\f(CW(x,y,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "setsearch"
.IX Subsection "setsearch(x,y,{flag = 0})"
searches if \f(CW\*(C`y\*(C'\fR belongs to the set
\&\f(CW\*(C`x\*(C'\fR. If it does and \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR is zero or omitted, returns the index \f(CW\*(C`j\*(C'\fR such that
\&\f(CW\*(C`x[j] = y\*(C'\fR, otherwise returns 0. If \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR is non-zero returns the index \f(CW\*(C`j\*(C'\fR
where \f(CW\*(C`y\*(C'\fR should be inserted, and \f(CW0\fR if it already belongs to \f(CW\*(C`x\*(C'\fR (this is
meant to be used in conjunction with \f(CW\*(C`listinsert\*(C'\fR).
.PP
This function works also if \f(CW\*(C`x\*(C'\fR is a \eemph{sorted} list (see \f(CW\*(C`listsort\*(C'\fR).
.PP
The library syntax is \fBsetsearch\fR\f(CW\*(C`(x,y,\f(CIflag\f(CW)\*(C'\fR which returns a \f(CW\*(C`long\*(C'\fR
integer.
.IX Xref "setsearch"
.ie n .SS "setunion""(x,y)"""
.el .SS "setunion\f(CW(x,y)\fP"
.IX Xref "setunion"
.IX Subsection "setunion(x,y)"
union of the two sets \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR.
.PP
The library syntax is \fBsetunion\fR\f(CW\*(C`(x,y)\*(C'\fR.
.IX Xref "setunion"
.ie n .SS "trace""(x)"""
.el .SS "trace\f(CW(x)\fP"
.IX Xref "trace"
.IX Subsection "trace(x)"
this applies to quite general \f(CW\*(C`x\*(C'\fR. If \f(CW\*(C`x\*(C'\fR is not a
matrix, it is equal to the sum of \f(CW\*(C`x\*(C'\fR and its conjugate, except for polmods
where it is the trace as an algebraic number.
.PP
For \f(CW\*(C`x\*(C'\fR a square matrix, it is the ordinary trace. If \f(CW\*(C`x\*(C'\fR is a
non-square matrix (but not a vector), an error occurs.
.PP
The library syntax is \fBgtrace\fR\f(CW\*(C`(x)\*(C'\fR.
.IX Xref "gtrace"
.ie n .SS "vecextract""(x,y,{z})"""
.el .SS "vecextract\f(CW(x,y,{z})\fP"
.IX Xref "vecextract"
.IX Subsection "vecextract(x,y,{z})"
extraction of components of the
vector or matrix \f(CW\*(C`x\*(C'\fR according to \f(CW\*(C`y\*(C'\fR. In case \f(CW\*(C`x\*(C'\fR is a matrix, its
components are as usual the \eemph{columns} of \f(CW\*(C`x\*(C'\fR. The parameter \f(CW\*(C`y\*(C'\fR is a
component specifier, which is either an integer, a string describing a
range, or a vector.
.PP
If \f(CW\*(C`y\*(C'\fR is an integer, it is considered as a mask: the binary bits of \f(CW\*(C`y\*(C'\fR are
read from right to left, but correspond to taking the components from left to
right. For example, if \f(CW\*(C`y = 13 = (1101)_2\*(C'\fR then the components 1,3 and 4 are
extracted.
.PP
If \f(CW\*(C`y\*(C'\fR is a vector, which must have integer entries, these entries correspond
to the component numbers to be extracted, in the order specified.
.PP
If \f(CW\*(C`y\*(C'\fR is a string, it can be
.PP
\&\eitem a single (non-zero) index giving a component number (a negative
index means we start counting from the end).
.PP
\&\eitem a range of the form \f(CW"a..b"\fR, where \f(CW\*(C`a\*(C'\fR and \f(CW\*(C`b\*(C'\fR are
indexes as above. Any of \f(CW\*(C`a\*(C'\fR and \f(CW\*(C`b\*(C'\fR can be omitted; in this case, we take
as default values \f(CW\*(C`a = 1\*(C'\fR and \f(CW\*(C`b = \-1\*(C'\fR, i.e. the first and last components
respectively. We then extract all components in the interval \f(CW\*(C`[a,b]\*(C'\fR, in
reverse order if \f(CW\*(C`b < a\*(C'\fR.
.PP
In addition, if the first character in the string is \f(CW\*(C`^\*(C'\fR, the
complement of the given set of indices is taken.
.PP
If \f(CW\*(C`z\*(C'\fR is not omitted, \f(CW\*(C`x\*(C'\fR must be a matrix. \f(CW\*(C`y\*(C'\fR is then the \eemph{line}
specifier, and \f(CW\*(C`z\*(C'\fR the \eemph{column} specifier, where the component specifier
is as explained above.
.PP
.Vb 10
\&  %4 = [e, d, c]
\&  ? vecextract(v, "^2")       \e\e mask
\&  %4 = [e, d, c]
\&  ? vecextract(v, "^2")       \e\e component list
\&  %4 = [e, d, c]
\&  ? vecextract(v, "^2")       \e\e interval
\&  %4 = [e, d, c]
\&  ? vecextract(v, "^2")       \e\e interval + reverse order
\&  %4 = [e, d, c]
\&  ? vecextract(v, "^2")       \e\e complement
\&  %5 = [a, c, d, e]
\&  ? vecextract(matid(3), "2..", "..")
\&  %6 =
\&  [0 1 0]
\&
\&  [0 0 1]
.Ve
.PP
The library syntax is \fBextract\fR\f(CW\*(C`(x,y)\*(C'\fR or \f(CW\*(C` \f(CBmatextract\f(CW(x,y,z)\*(C'\fR.
.IX Xref "extract matextract"
.ie n .SS "vecsort""(x,{k},{\f(CIflag\fP = 0})"""
.el .SS "vecsort\f(CW(x,{k},{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "vecsort"
.IX Subsection "vecsort(x,{k},{flag = 0})"
sorts the vector \f(CW\*(C`x\*(C'\fR in ascending
order, using a mergesort method. \f(CW\*(C`x\*(C'\fR must be a vector, and its components
integers, reals, or fractions.
.PP
If \f(CW\*(C`k\*(C'\fR is present and is an integer, sorts according to the value of the
\&\f(CW\*(C`k\*(C'\fR\-th subcomponents of the components of \f(CW\*(C`x\*(C'\fR. Note that mergesort is
stable, hence is the initial ordering of \*(L"equal\*(R" entries (with respect to
the sorting criterion) is not changed.
.PP
\&\f(CW\*(C`k\*(C'\fR can also be a vector, in which case the sorting is done lexicographically
according to the components listed in the vector \f(CW\*(C`k\*(C'\fR. For example, if
\&\f(CW\*(C`k = [2,1,3]\*(C'\fR, sorting will be done with respect to the second component, and
when these are equal, with respect to the first, and when these are equal,
with respect to the third.
.PP
The binary digits of \fIflag\fR mean:
.PP
\&\eitem 1: indirect sorting of the vector \f(CW\*(C`x\*(C'\fR, i.e. if \f(CW\*(C`x\*(C'\fR is an
\&\f(CW\*(C`n\*(C'\fR\-component vector, returns a permutation of \f(CW\*(C`[1,2,...,n]\*(C'\fR which
applied to the components of \f(CW\*(C`x\*(C'\fR sorts \f(CW\*(C`x\*(C'\fR in increasing order.
For example, \f(CW\*(C`vecextract(x, vecsort(x,,1))\*(C'\fR is equivalent to
\&\f(CWvecsort(x)\fR.
.PP
\&\eitem 2: sorts \f(CW\*(C`x\*(C'\fR by ascending lexicographic order (as per the
\&\f(CW\*(C`lex\*(C'\fR comparison function).
.PP
\&\eitem 4: use descending instead of ascending order.
.PP
The library syntax is \fBvecsort0\fR\f(CW\*(C`(x,k,flag)\*(C'\fR. To omit \f(CW\*(C`k\*(C'\fR, use \f(CW\*(C`NULL\*(C'\fR instead. You can also
use the simpler functions
.IX Xref "vecsort0"
.PP
\&\f(CW\*(C` \f(CBsort\f(CW(x)\*(C'\fR ( = \f(CW\*(C` \f(CBvecsort0\f(CW(x,NULL,0)\*(C'\fR).
.IX Xref "sort vecsort0"
.PP
\&\f(CW\*(C` \f(CBindexsort\f(CW(x)\*(C'\fR ( = \f(CW\*(C` \f(CBvecsort0\f(CW(x,NULL,1)\*(C'\fR).
.IX Xref "indexsort vecsort0"
.PP
\&\f(CW\*(C` \f(CBlexsort\f(CW(x)\*(C'\fR ( = \f(CW\*(C` \f(CBvecsort0\f(CW(x,NULL,2)\*(C'\fR).
.IX Xref "lexsort vecsort0"
.PP
Also available are \f(CW\*(C` \f(CBsindexsort\f(CW(x)\*(C'\fR and \f(CW\*(C` \f(CBsindexlexsort\f(CW(x)\*(C'\fR which
return a \f(CW\*(C`t_VECSMALL\*(C'\fR \f(CW\*(C`v\*(C'\fR, where \f(CW\*(C`v[1]...v[n]\*(C'\fR contain the indices.
.IX Xref "sindexsort sindexlexsort"
.ie n .SS "vector""(n,{X},{\f(CIexpr\fP = 0})"""
.el .SS "vector\f(CW(n,{X},{\fP\f(CIexpr\fP\f(CW = 0})\fP"
.IX Xref "vector"
.IX Subsection "vector(n,{X},{expr = 0})"
creates a row vector (type
\&\f(CW\*(C`t_VEC\*(C'\fR) with \f(CW\*(C`n\*(C'\fR components whose components are the expression
\&\fIexpr\fR evaluated at the integer points between 1 and \f(CW\*(C`n\*(C'\fR. If one of the
last two arguments is omitted, fill the vector with zeroes.
.PP
Avoid modifying \f(CW\*(C`X\*(C'\fR within \fIexpr\fR; if you do, the formal variable
still runs from \f(CW1\fR to \f(CW\*(C`n\*(C'\fR. In particular, \f(CW\*(C`vector(n,i,expr)\*(C'\fR is not
equivalent to
.PP
.Vb 2
\&      v = vector(n)
\&      for (i = 1, n, v[i] = expr)
.Ve
.PP
as the following example shows:
.PP
.Vb 3
\&      n = 3
\&      v = vector(n); vector(n, i, i++)            \-\-\-\-> [2, 3, 4]
\&      v = vector(n); for (i = 1, n, v[i] = i++)   \-\-\-\-> [2, 0, 4]
.Ve
.PP
The library syntax is \fBvecteur\fR\f(CW\*(C`(GEN nmax, entree *ep, char *expr)\*(C'\fR.
.IX Xref "vecteur"
.ie n .SS "vectorsmall""(n,{X},{\f(CIexpr\fP = 0})"""
.el .SS "vectorsmall\f(CW(n,{X},{\fP\f(CIexpr\fP\f(CW = 0})\fP"
.IX Xref "vectorsmall"
.IX Subsection "vectorsmall(n,{X},{expr = 0})"
creates a row vector of small integers (type
\&\f(CW\*(C`t_VECSMALL\*(C'\fR) with \f(CW\*(C`n\*(C'\fR components whose components are the expression
\&\fIexpr\fR evaluated at the integer points between 1 and \f(CW\*(C`n\*(C'\fR. If one of the
last two arguments is omitted, fill the vector with zeroes.
.PP
The library syntax is \fBvecteursmall\fR\f(CW\*(C`(GEN nmax, entree *ep, char *expr)\*(C'\fR.
.IX Xref "vecteursmall"
.ie n .SS "vectorv""(n,X,\f(CIexpr\fP)"""
.el .SS "vectorv\f(CW(n,X,\fP\f(CIexpr\fP\f(CW)\fP"
.IX Xref "vectorv"
.IX Subsection "vectorv(n,X,expr)"
as \f(CW\*(C`vector\*(C'\fR, but returns a
column vector (type \f(CW\*(C`t_COL\*(C'\fR).
.IX Xref "vector"
.PP
The library syntax is \fBvvecteur\fR\f(CW\*(C`(GEN nmax, entree *ep, char *expr)\*(C'\fR.
.IX Xref "vvecteur"
.SH "Sums, products, integrals and similar functions"
.IX Header "Sums, products, integrals and similar functions"

Although the \f(CW\*(C`gp\*(C'\fR calculator is programmable, it is useful to have
preprogrammed a number of loops, including sums, products, and a certain
number of recursions. Also, a number of functions from numerical analysis
like numerical integration and summation of series will be described here.
.IX Xref "Label se:sums"
.PP
One of the parameters in these loops must be the control variable, hence a
simple variable name. In the descriptions, the letter \f(CW\*(C`X\*(C'\fR will always denote
any simple variable name, and represents the formal parameter used in the
function. The expression to be summed, integrated, etc. is any legal \s-1PARI\s0
expression, including of course expressions using loops.
.PP
\&\fBLibrary mode.\fR
Since it is easier to program directly the loops in library mode, these
functions are mainly useful for \s-1GP\s0 programming. Using them in library mode is
tricky and we will not give any details, although the reader can try and figure
it out by himself by checking the example given for \f(CW\*(C`sum\*(C'\fR.
.IX Xref "sum"
.PP
On the other hand, numerical routines code a function (to be integrated,
summed, etc.) with two parameters named
.PP
.Vb 2
\&    GEN (*eval)(GEN,void*)
\&    void *E;
.Ve
.PP
The second is meant to contain all auxilliary data needed by your function.
The first is such that \f(CW\*(C`eval(x, E)\*(C'\fR returns your function evaluated at
\&\f(CW\*(C`x\*(C'\fR. For instance, one may code the family of functions
\&\f(CW\*(C`f_t: x \eto (x+t)^2\*(C'\fR via
.PP
.Vb 1
\&  GEN f(GEN x, void *t) { return gsqr(gadd(x, (GEN)t)); }
.Ve
.PP
One can then integrate \f(CW\*(C`f_1\*(C'\fR between \f(CW\*(C`a\*(C'\fR and \f(CW\*(C`b\*(C'\fR with the call
.PP
.Vb 1
\&  intnum((void*)stoi(1), &fun, a, b, NULL, prec);
.Ve
.PP
Since you can set \f(CW\*(C`E\*(C'\fR to a pointer to any \f(CW\*(C`struct\*(C'\fR (typecast to
\&\f(CW\*(C`void*\*(C'\fR) the above mechanism handles arbitrary functions. For simple
functions without extra parameters, you may set \f(CW\*(C`E = NULL\*(C'\fR and ignore
that argument in your function definition.
.PP
\&\fBNumerical integration.\fR
Starting with version 2.2.9 the powerful ``double exponential'' univariate
integration method is implemented in \f(CW\*(C`intnum\*(C'\fR and its variants. Romberg
integration is still available under the name \f(CW\*(C`intnumromb\*(C'\fR, but
superseded. It is possible to compute numerically integrals to thousands of
decimal places in reasonable time, as long as the integrand is regular. It is
also reasonable to compute numerically integrals in several variables,
although more than two becomes lengthy. The integration domain may be
non-compact, and the integrand may have reasonable singularities at
endpoints. To use \f(CW\*(C`intnum\*(C'\fR, the user must split the integral into a sum
of subintegrals where the function has (possible) singularities only at the
endpoints. Polynomials in logarithms are not considered singular, and
neglecting these logs, singularities are assumed to be algebraic (in other
words asymptotic to \f(CW\*(C`C(x\-a)^{\-\f(CIalpha\f(CW}\*(C'\fR for some \f(CW\*(C`\f(CIalpha\f(CW\*(C'\fR such that
\&\f(CW\*(C`\f(CIalpha\f(CW > \-1\*(C'\fR when \f(CW\*(C`x\*(C'\fR is close to \f(CW\*(C`a\*(C'\fR), or to correspond to simple
discontinuities of some (higher) derivative of the function. For instance,
the point \f(CW0\fR is a singularity of \f(CWabs(x)\fR.
.IX Xref "numerical integration intnum"
.PP
See also the discrete summation methods below (sharing the prefix \f(CW\*(C`sum\*(C'\fR).
.ie n .SS "intcirc""(X = a,R,\f(CIexpr\fP, {\f(CItab\fP})"""
.el .SS "intcirc\f(CW(X = a,R,\fP\f(CIexpr\fP\f(CW, {\fP\f(CItab\fP\f(CW})\fP"
.IX Xref "intcirc"
.IX Subsection "intcirc(X = a,R,expr, {tab})"
numerical
integration of \fIexpr\fR with respect to \f(CW\*(C`X\*(C'\fR on the circle \f(CW\*(C`|X\-a |= R\*(C'\fR,
divided by \f(CW\*(C`2i\f(CIPi\f(CW\*(C'\fR. In other words, when \fIexpr\fR is a meromorphic
function, sum of the residues in the corresponding disk. \fItab\fR is as in
\&\f(CW\*(C`intnum\*(C'\fR, except that if computed with \f(CW\*(C`intnuminit\*(C'\fR it should be with
the endpoints \f(CW\*(C`[\-1, 1]\*(C'\fR.
.PP
.Vb 4
\&  ? \ep105
\&  ? intcirc(s=1, 0.5, zeta(s)) \- 1
\&  time = 3,460 ms.
\&  %1 = \-2.40... E\-104 \- 2.7... E\-106*I
.Ve
.PP
The library syntax is \fBintcirc\fR\f(CW\*(C`(void *E, GEN (*eval)(GEN,void*), GEN a,GEN R,GEN tab, long prec)\*(C'\fR.
.IX Xref "intcirc"
.ie n .SS "intfouriercos""(X = a,b,z,\f(CIexpr\fP,{\f(CItab\fP})"""
.el .SS "intfouriercos\f(CW(X = a,b,z,\fP\f(CIexpr\fP\f(CW,{\fP\f(CItab\fP\f(CW})\fP"
.IX Xref "intfouriercos"
.IX Subsection "intfouriercos(X = a,b,z,expr,{tab})"
numerical
integration of \f(CW\*(C`\f(CIexpr\f(CW(X) \f(CIcos\f(CW (2\f(CIPi\f(CW zX)\*(C'\fR from \f(CW\*(C`a\*(C'\fR to \f(CW\*(C`b\*(C'\fR, in other words
Fourier cosine transform (from \f(CW\*(C`a\*(C'\fR to \f(CW\*(C`b\*(C'\fR) of the function represented by
\&\fIexpr\fR. \f(CW\*(C`a\*(C'\fR and \f(CW\*(C`b\*(C'\fR are coded as in \f(CW\*(C`intnum\*(C'\fR, and are not necessarily
at infinity, but if they are, oscillations (i.e. \f(CW\*(C`[[\f(CI+\-\f(CW1],\f(CIalpha\f(CW I]\*(C'\fR) are
forbidden.
.PP
The library syntax is \fBintfouriercos\fR\f(CW\*(C`(void *E, GEN (*eval)(GEN,void*), GEN a, GEN b, GEN z, GEN tab, long prec)\*(C'\fR.
.IX Xref "intfouriercos"
.ie n .SS "intfourierexp""(X = a,b,z,\f(CIexpr\fP,{\f(CItab\fP})"""
.el .SS "intfourierexp\f(CW(X = a,b,z,\fP\f(CIexpr\fP\f(CW,{\fP\f(CItab\fP\f(CW})\fP"
.IX Xref "intfourierexp"
.IX Subsection "intfourierexp(X = a,b,z,expr,{tab})"
numerical
integration of \f(CW\*(C`\f(CIexpr\f(CW(X) \f(CIexp\f(CW (\-2\f(CIPi\f(CW zX)\*(C'\fR from \f(CW\*(C`a\*(C'\fR to \f(CW\*(C`b\*(C'\fR, in other words
Fourier transform (from \f(CW\*(C`a\*(C'\fR to \f(CW\*(C`b\*(C'\fR) of the function represented by
\&\fIexpr\fR. Note the minus sign. \f(CW\*(C`a\*(C'\fR and \f(CW\*(C`b\*(C'\fR are coded as in \f(CW\*(C`intnum\*(C'\fR,
and are not necessarily at infinity but if they are, oscillations (i.e.
\&\f(CW\*(C`[[\f(CI+\-\f(CW1],\f(CIalpha\f(CW I]\*(C'\fR) are forbidden.
.PP
The library syntax is \fBintfourierexp\fR\f(CW\*(C`(void *E, GEN (*eval)(GEN,void*), GEN a, GEN b, GEN z, GEN tab, long prec)\*(C'\fR.
.IX Xref "intfourierexp"
.ie n .SS "intfouriersin""(X = a,b,z,\f(CIexpr\fP,{\f(CItab\fP})"""
.el .SS "intfouriersin\f(CW(X = a,b,z,\fP\f(CIexpr\fP\f(CW,{\fP\f(CItab\fP\f(CW})\fP"
.IX Xref "intfouriersin"
.IX Subsection "intfouriersin(X = a,b,z,expr,{tab})"
numerical
integration of \f(CW\*(C`\f(CIexpr\f(CW(X) \f(CIsin\f(CW (2\f(CIPi\f(CW zX)\*(C'\fR from \f(CW\*(C`a\*(C'\fR to \f(CW\*(C`b\*(C'\fR, in other words
Fourier sine transform (from \f(CW\*(C`a\*(C'\fR to \f(CW\*(C`b\*(C'\fR) of the function represented by
\&\fIexpr\fR. \f(CW\*(C`a\*(C'\fR and \f(CW\*(C`b\*(C'\fR are coded as in \f(CW\*(C`intnum\*(C'\fR, and are not necessarily
at infinity but if they are, oscillations (i.e. \f(CW\*(C`[[\f(CI+\-\f(CW1],\f(CIalpha\f(CW I]\*(C'\fR) are
forbidden.
.PP
The library syntax is \fBintfouriersin\fR\f(CW\*(C`(void *E, GEN (*eval)(GEN,void*), GEN a, GEN b, GEN z, GEN tab, long prec)\*(C'\fR.
.IX Xref "intfouriersin"
.ie n .SS "intfuncinit""(X = a,b,\f(CIexpr\fP,{\f(CIflag\fP = 0},{m = 0})"""
.el .SS "intfuncinit\f(CW(X = a,b,\fP\f(CIexpr\fP\f(CW,{\fP\f(CIflag\fP\f(CW = 0},{m = 0})\fP"
.IX Xref "intfuncinit"
.IX Subsection "intfuncinit(X = a,b,expr,{flag = 0},{m = 0})"
initalize tables for use with integral transforms such as \f(CW\*(C`intmellininv\*(C'\fR,
etc., where \f(CW\*(C`a\*(C'\fR and \f(CW\*(C`b\*(C'\fR are coded as in \f(CW\*(C`intnum\*(C'\fR, \f(CW\*(C`\f(CIexpr\f(CW\*(C'\fR is the
function \f(CWs(X)\fR to which the integral transform is to be applied (which will
multiply the weights of integration) and \f(CW\*(C`m\*(C'\fR is as in \f(CW\*(C`intnuminit\*(C'\fR. If
\&\f(CW\*(C`\f(CIflag\f(CW\*(C'\fR is nonzero, assumes that \f(CW\*(C`s(\-X) = \eoverline{s(X)}\*(C'\fR, which makes the
computation twice as fast. See \f(CW\*(C`intmellininvshort\*(C'\fR for examples of the
use of this function, which is particularly useful when the function \f(CWs(X)\fR
is lengthy to compute, such as a gamma product.
.PP
The library syntax is \fBintfuncinit\fR\f(CW\*(C`(void *E, GEN (*eval)(GEN,void*), GEN a,GEN b,long m, long flag, long prec)\*(C'\fR.
Note that the order of \f(CW\*(C`m\*(C'\fR and \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR are reversed compared to the \f(CW\*(C`GP\*(C'\fR
syntax.
.IX Xref "intfuncinit"
.ie n .SS "intlaplaceinv""(X = sig,z,\f(CIexpr\fP,{\f(CItab\fP})"""
.el .SS "intlaplaceinv\f(CW(X = sig,z,\fP\f(CIexpr\fP\f(CW,{\fP\f(CItab\fP\f(CW})\fP"
.IX Xref "intlaplaceinv"
.IX Subsection "intlaplaceinv(X = sig,z,expr,{tab})"
numerical integration of \f(CW\*(C`\f(CIexpr\f(CW(X)e^{Xz}\*(C'\fR with respect to \f(CW\*(C`X\*(C'\fR on the line
\&\f(CW\*(C` \f(CIRe\f(CW (X) = sig\*(C'\fR, divided by \f(CW\*(C`2i\f(CIPi\f(CW\*(C'\fR, in other words, inverse Laplace transform
of the function corresponding to \fIexpr\fR at the value \f(CW\*(C`z\*(C'\fR.
.PP
\&\f(CW\*(C`sig\*(C'\fR is coded as follows. Either it is a real number \f(CW\*(C`\f(CIsigma\f(CW\*(C'\fR, equal to the
abcissa of integration, and then the function to be integrated is assumed to
be slowly decreasing when the imaginary part of the variable tends to
\&\f(CW\*(C`\f(CI+\-\f(CW oo \*(C'\fR. Or it is a two component vector \f(CW\*(C`[\f(CIsigma\f(CW,\f(CIalpha\f(CW]\*(C'\fR, where
\&\f(CW\*(C`\f(CIsigma\f(CW\*(C'\fR is as before, and either \f(CW\*(C`\f(CIalpha\f(CW = 0\*(C'\fR for slowly decreasing functions,
or \f(CW\*(C`\f(CIalpha\f(CW > 0\*(C'\fR for functions decreasing like \f(CW\*(C` \f(CIexp\f(CW (\-\f(CIalpha\f(CW t)\*(C'\fR. Note that it
is not necessary to choose the exact value of \f(CW\*(C`\f(CIalpha\f(CW\*(C'\fR. \fItab\fR is as in
\&\f(CW\*(C`intnum\*(C'\fR.
.PP
It is often a good idea to use this function with a value of \f(CW\*(C`m\*(C'\fR one or two
higher than the one chosen by default (which can be viewed thanks to the
function \f(CW\*(C`intnumstep\*(C'\fR), or to increase the abcissa of integration
\&\f(CW\*(C`\f(CIsigma\f(CW\*(C'\fR. For example:
.PP
.Vb 10
\&  ? intlaplaceinv(x=100, 1, 1/x) \- 1
\&  time = 330 ms.
\&  %7 = 1.07... E\-72 + 3.2... E\-72*I \e\e not so good
\&  ? intlaplaceinv(x=100, 1, 1/x) \- 1
\&  time = 330 ms.
\&  %7 = 1.07... E\-72 + 3.2... E\-72*I \e\e better
\&  ? intlaplaceinv(x=100, 1, 1/x) \- 1
\&  time = 330 ms.
\&  %7 = 1.07... E\-72 + 3.2... E\-72*I \e\e perfect but slow.
\&  ? intlaplaceinv(x=100, 1, 1/x) \- 1
\&  time = 330 ms.
\&  %7 = 1.07... E\-72 + 3.2... E\-72*I \e\e better than %1
\&  ? intlaplaceinv(x=100, 1, 1/x) \- 1
\&  time = 330 ms.
\&  %7 = 1.07... E\-72 + 3.2... E\-72*I \e\e perfect, fast.
\&  ? intlaplaceinv(x=100, 1, 1/x) \- 1
\&  time = 330 ms.
\&  %7 = 1.07... E\-72 + 3.2... E\-72*I \e\e perfect, fastest, but why sig = 10?
\&  ? intlaplaceinv(x=100, 1, 1/x) \- 1
\&  time = 330 ms.
\&  %7 = 1.07... E\-72 + 3.2... E\-72*I \e\e too far now...
.Ve
.PP
The library syntax is \fBintlaplaceinv\fR\f(CW\*(C`(void *E, GEN (*eval)(GEN,void*), GEN sig,GEN z, GEN tab, long prec)\*(C'\fR.
.IX Xref "intlaplaceinv"
.ie n .SS "intmellininv""(X = sig,z,\f(CIexpr\fP,{\f(CItab\fP})"""
.el .SS "intmellininv\f(CW(X = sig,z,\fP\f(CIexpr\fP\f(CW,{\fP\f(CItab\fP\f(CW})\fP"
.IX Xref "intmellininv"
.IX Subsection "intmellininv(X = sig,z,expr,{tab})"
numerical
integration of \f(CW\*(C`\f(CIexpr\f(CW(X)z^{\-X}\*(C'\fR with respect to \f(CW\*(C`X\*(C'\fR on the line
\&\f(CW\*(C` \f(CIRe\f(CW (X) = sig\*(C'\fR, divided by \f(CW\*(C`2i\f(CIPi\f(CW\*(C'\fR, in other words, inverse Mellin transform of
the function corresponding to \fIexpr\fR at the value \f(CW\*(C`z\*(C'\fR.
.PP
\&\f(CW\*(C`sig\*(C'\fR is coded as follows. Either it is a real number \f(CW\*(C`\f(CIsigma\f(CW\*(C'\fR, equal to the
abcissa of integration, and then the function to be integrated is assumed to
decrease exponentially fast, of the order of \f(CW\*(C` \f(CIexp\f(CW (\-t)\*(C'\fR when the imaginary
part of the variable tends to \f(CW\*(C`\f(CI+\-\f(CW oo \*(C'\fR. Or it is a two component vector
\&\f(CW\*(C`[\f(CIsigma\f(CW,\f(CIalpha\f(CW]\*(C'\fR, where \f(CW\*(C`\f(CIsigma\f(CW\*(C'\fR is as before, and either \f(CW\*(C`\f(CIalpha\f(CW = 0\*(C'\fR for
slowly decreasing functions, or \f(CW\*(C`\f(CIalpha\f(CW > 0\*(C'\fR for functions decreasing like
\&\f(CW\*(C` \f(CIexp\f(CW (\-\f(CIalpha\f(CW t)\*(C'\fR, such as gamma products. Note that it is not necessary to
choose the exact value of \f(CW\*(C`\f(CIalpha\f(CW\*(C'\fR, and that \f(CW\*(C`\f(CIalpha\f(CW = 1\*(C'\fR (equivalent to \f(CW\*(C`sig\*(C'\fR
alone) is usually sufficient. \fItab\fR is as in \f(CW\*(C`intnum\*(C'\fR.
.PP
As all similar functions, this function is provided for the convenience of
the user, who could use \f(CW\*(C`intnum\*(C'\fR directly. However it is in general
better to use \f(CW\*(C`intmellininvshort\*(C'\fR.
.PP
.Vb 6
\&  ? \ep 308
\&  ? intmellininv(s=2,4, gamma(s)^3);
\&  time = 51,300 ms. \e\e reasonable.
\&  ? \ep 308
\&  ? intmellininv(s=2,4, gamma(s)^3);
\&  time = 51,300 ms. \e\e slow because of Gamma(s)^3.
.Ve
.PP
The library syntax is \fBintmellininv\fR\f(CW\*(C`(void *E, GEN (*eval)(GEN,void*), GEN sig, GEN z, GEN tab, long prec)\*(C'\fR.
.IX Xref "intmellininv"
.ie n .SS "intmellininvshort""(sig,z,tab)"""
.el .SS "intmellininvshort\f(CW(sig,z,tab)\fP"
.IX Xref "intmellininvshort"
.IX Subsection "intmellininvshort(sig,z,tab)"
numerical integration
of \f(CW\*(C`s(X)z^{\-X}\*(C'\fR with respect to \f(CW\*(C`X\*(C'\fR on the line \f(CW\*(C` \f(CIRe\f(CW (X) = sig\*(C'\fR, divided by
\&\f(CW\*(C`2i\f(CIPi\f(CW\*(C'\fR, in other words, inverse Mellin transform of \f(CWs(X)\fR at the value \f(CW\*(C`z\*(C'\fR.
Here \f(CWs(X)\fR is implicitly contained in \fItab\fR in \f(CW\*(C`intfuncinit\*(C'\fR format,
typically
.PP
.Vb 1
\&    tab = intfuncinit(T = [\-1], [1], s(sig + I*T))
.Ve
.PP
or similar commands. Take the example of the inverse Mellin transform of
\&\f(CW\*(C`\f(CIGamma\f(CW(s)^3\*(C'\fR given in \f(CW\*(C`intmellininv\*(C'\fR:
.PP
.Vb 10
\&  ? tab2 = intfuncinit(t=\-oo, oo, gamma(2+I*t)^3, 1);
\&  ? intmellininvshort(2,4, tab2)
\&  %6 = \-1.2...E\-42 \- 3.2...E\-109*I  \e\e for clarity
\&  ? tab2 = intfuncinit(t=\-oo, oo, gamma(2+I*t)^3, 1);
\&  ? intmellininvshort(2,4, tab2)
\&  %6 = \-1.2...E\-42 \- 3.2...E\-109*I  \e\e not too fast because of Gamma(s)^3.
\&  ? tab2 = intfuncinit(t=\-oo, oo, gamma(2+I*t)^3, 1);
\&  ? intmellininvshort(2,4, tab2)
\&  %6 = \-1.2...E\-42 \- 3.2...E\-109*I  \e\e function of real type, decreasing as exp(\-3Pi/2.|t|)
\&  ? tab2 = intfuncinit(t=\-oo, oo, gamma(2+I*t)^3, 1);
\&  ? intmellininvshort(2,4, tab2)
\&  %6 = \-1.2...E\-42 \- 3.2...E\-109*I  \e\e 50 times faster than A and perfect.
\&  ? tab2 = intfuncinit(t=\-oo, oo, gamma(2+I*t)^3, 1);
\&  ? intmellininvshort(2,4, tab2)
\&  %6 = \-1.2...E\-42 \- 3.2...E\-109*I  \e\e 63 digits lost
.Ve
.PP
In the computation of \fItab\fR, it was not essential to include the
\&\eemph{exact} exponential decrease of \f(CW\*(C`\f(CIGamma\f(CW(2+it)^3\*(C'\fR. But as the last
example shows, a rough indication \eemph{must} be given, otherwise slow
decrease is assumed, resulting in catastrophic loss of accuracy.
.PP
The library syntax is \fBintmellininvshort\fR\f(CW\*(C`(GEN sig, GEN z, GEN tab, long prec)\*(C'\fR.
.IX Xref "intmellininvshort"
.ie n .SS "intnum""(X = a,b,\f(CIexpr\fP,{\f(CItab\fP})"""
.el .SS "intnum\f(CW(X = a,b,\fP\f(CIexpr\fP\f(CW,{\fP\f(CItab\fP\f(CW})\fP"
.IX Xref "intnum"
.IX Subsection "intnum(X = a,b,expr,{tab})"
numerical integration
of \fIexpr\fR on \f(CW\*(C`[a,b]\*(C'\fR (possibly infinite interval) with respect to \f(CW\*(C`X\*(C'\fR,
where \f(CW\*(C`a\*(C'\fR and \f(CW\*(C`b\*(C'\fR are coded as explained below. The integrand may have values
belonging to a vector space over the real numbers; in particular, it can be
complex-valued or vector-valued.
.PP
If \fItab\fR is omitted, necessary integration tables are computed using
\&\f(CW\*(C`intnuminit\*(C'\fR according to the current precision. It may be a positive
integer \f(CW\*(C`m\*(C'\fR, and tables are computed assuming the integration step is
\&\f(CW\*(C`1/2^m\*(C'\fR. Finally \fItab\fR can be a table output by \f(CW\*(C`intnuminit\*(C'\fR, in
which case it is used directly. This is important if several integrations of
the same type are performed (on the same kind of interval and functions, and
the same accuracy), since it saves expensive precomputations.
.PP
If \fItab\fR is omitted the algorithm guesses a reasonable value for \f(CW\*(C`m\*(C'\fR
depending on the current precision. That value may be obtained as
.PP
.Vb 1
\&    intnumstep()
.Ve
.PP
However this value may be off from the optimal one, and this is important
since the integration time is roughly proportional to \f(CW\*(C`2^m\*(C'\fR. One may try
consecutive values of \f(CW\*(C`m\*(C'\fR until they give the same value up to an accepted
error.
.PP
The endpoints \f(CW\*(C`a\*(C'\fR and \f(CW\*(C`b\*(C'\fR are coded as follows. If \f(CW\*(C`a\*(C'\fR is not at \f(CW\*(C`\f(CI+\-\f(CW oo \*(C'\fR,
it is either coded as a scalar (real or complex), or as a two component vector
\&\f(CW\*(C`[a,\f(CIalpha\f(CW]\*(C'\fR, where the function is assumed to have a singularity of the
form \f(CW\*(C`(x\-a)^{\f(CIalpha\f(CW+\eepsilon}\*(C'\fR at \f(CW\*(C`a\*(C'\fR, where \f(CW\*(C`\eepsilon\*(C'\fR indicates that powers
of logarithms are neglected. In particular, \f(CW\*(C`[a,\f(CIalpha\f(CW]\*(C'\fR with \f(CW\*(C`\f(CIalpha\f(CW >= 0\*(C'\fR
is equivalent to \f(CW\*(C`a\*(C'\fR. If a wrong singularity exponent is used, the result
will lose a catastrophic number of decimals, for instance approximately half
the number of digits will be correct if \f(CW\*(C`\f(CIalpha\f(CW = \-1/2\*(C'\fR is omitted.
.PP
The endpoints of integration can be \f(CW\*(C`\f(CI+\-\f(CW oo \*(C'\fR, which is coded as
\&\f(CW\*(C`[\f(CI+\-\f(CW 1]\*(C'\fR or as \f(CW\*(C`[[\f(CI+\-\f(CW1],\f(CIalpha\f(CW]\*(C'\fR. Here \f(CW\*(C`\f(CIalpha\f(CW\*(C'\fR codes the behaviour of the
function at \f(CW\*(C`\f(CI+\-\f(CW oo \*(C'\fR as follows.
.PP
\&\eitem \f(CW\*(C`\f(CIalpha\f(CW = 0\*(C'\fR (or no \f(CW\*(C`\f(CIalpha\f(CW\*(C'\fR at all, i.e. simply \f(CW\*(C`[\f(CI+\-\f(CW1]\*(C'\fR) assumes that the
function to be integrated tends to zero, but not exponentially fast, and not
oscillating such as \f(CW\*(C` \f(CIsin\f(CW (x)/x\*(C'\fR.
.PP
\&\eitem \f(CW\*(C`\f(CIalpha\f(CW > 0\*(C'\fR assumes that the function tends to zero exponentially fast
approximately as \f(CW\*(C` \f(CIexp\f(CW (\-\f(CIalpha\f(CW x)\*(C'\fR, including reasonably oscillating
functions such as \f(CW\*(C` \f(CIexp\f(CW (\-x) \f(CIsin\f(CW (x)\*(C'\fR. The precise choice of \f(CW\*(C`\f(CIalpha\f(CW\*(C'\fR, while
useful in extreme cases, is not critical, and may be off by a \eemph{factor}
of \f(CW10\fR or more from the correct value.
.PP
\&\eitem \f(CW\*(C`\f(CIalpha\f(CW < \-1\*(C'\fR assumes that the function tends to \f(CW0\fR slowly, like
\&\f(CW\*(C`x^{\f(CIalpha\f(CW}\*(C'\fR. Here it is essential to give the correct \f(CW\*(C`\f(CIalpha\f(CW\*(C'\fR, if possible,
but on the other hand \f(CW\*(C`\f(CIalpha\f(CW <= \-2\*(C'\fR is equivalent to \f(CW\*(C`\f(CIalpha\f(CW = 0\*(C'\fR, in other
words to no \f(CW\*(C`\f(CIalpha\f(CW\*(C'\fR at all.
.PP
The last two codes are reserved for oscillating functions.
Let \f(CW\*(C`k > 0\*(C'\fR real, and \f(CWg(x)\fR a nonoscillating function tending to \f(CW0\fR, then
.PP
\&\eitem \f(CW\*(C`\f(CIalpha\f(CW = k I\*(C'\fR assumes that the function behaves like \f(CW\*(C` \f(CIcos\f(CW (kx)g(x)\*(C'\fR.
.PP
\&\eitem \f(CW\*(C`\f(CIalpha\f(CW = \-kI\*(C'\fR assumes that the function behaves like \f(CW\*(C` \f(CIsin\f(CW (kx)g(x)\*(C'\fR.
.PP
Here it is critical to give the exact value of \f(CW\*(C`k\*(C'\fR. If the
oscillating part is not a pure sine or cosine, one must expand it into a
Fourier series, use the above codings, and sum the resulting contributions.
Otherwise you will get nonsense. Note that \f(CW\*(C` \f(CIcos\f(CW (kx)\*(C'\fR (and similarly
\&\f(CW\*(C` \f(CIsin\f(CW (kx)\*(C'\fR) means that very function, and not a translated version such as
\&\f(CW\*(C` \f(CIcos\f(CW (kx+a)\*(C'\fR.
.PP
If for instance \f(CW\*(C`f(x) =  \f(CIcos\f(CW (kx)g(x)\*(C'\fR where \f(CWg(x)\fR tends to zero exponentially
fast as \f(CW\*(C` \f(CIexp\f(CW (\-\f(CIalpha\f(CW x)\*(C'\fR, it is up to the user to choose between
\&\f(CW\*(C`[[\f(CI+\-\f(CW1],\f(CIalpha\f(CW]\*(C'\fR and \f(CW\*(C`[[\f(CI+\-\f(CW1],kI]\*(C'\fR, but a good rule of thumb is that if the
oscillations are much weaker than the exponential decrease, choose
\&\f(CW\*(C`[[\f(CI+\-\f(CW1],\f(CIalpha\f(CW]\*(C'\fR, otherwise choose \f(CW\*(C`[[\f(CI+\-\f(CW1],kI]\*(C'\fR, although the latter can
reasonably be used in all cases, while the former cannot. To take a specific
example, in the inverse Mellin transform, the function to be integrated is
almost always exponentially decreasing times oscillating. If we choose the
oscillating type of integral we perhaps obtain the best results, at the
expense of having to recompute our functions for a different value of the
variable \f(CW\*(C`z\*(C'\fR giving the transform, preventing us to use a function such as
\&\f(CW\*(C`intmellininvshort\*(C'\fR. On the other hand using the exponential type of
integral, we obtain less accurate results, but we skip expensive
recomputations. See \f(CW\*(C`intmellininvshort\*(C'\fR and \f(CW\*(C`intfuncinit\*(C'\fR for more
explanations.
.PP
\&\fBNote.\fR If you do not like the code \f(CW\*(C`[\f(CI+\-\f(CW1]\*(C'\fR for \f(CW\*(C`\f(CI+\-\f(CW oo \*(C'\fR, you
are welcome to set, e.g \f(CW\*(C`oo = [1]\*(C'\fR or \f(CW\*(C`INFINITY = [1]\*(C'\fR, then
using \f(CW\*(C`+oo\*(C'\fR, \f(CW\*(C`\-oo\*(C'\fR, \f(CW\*(C`\-INFINITY\*(C'\fR, etc. will have the expected
behaviour.
.PP
We shall now see many examples to get a feeling for what the various
parameters achieve. All examples below assume precision is set to \f(CW105\fR
decimal digits. We first type
.PP
.Vb 2
\&  ? \ep 105
\&  ? oo = [1]  \e\e for clarity
.Ve
.PP
\&\fBApparent singularities.\fR Even if the function \f(CWf(x)\fR represented
by \fIexpr\fR has no singularities, it may be important to define the
function differently near special points. For instance, if \f(CW\*(C`f(x) = 1
/( \f(CIexp\f(CW (x)\-1) \-  \f(CIexp\f(CW (\-x)/x\*(C'\fR, then \f(CW\*(C`\f(CIint\f(CW_0^ oo f(x)dx = \f(CIgamma\f(CW\*(C'\fR, Euler's
constant \f(CW\*(C`Euler\*(C'\fR. But
.PP
.Vb 3
\&  ? f(x) = 1/(exp(x)\-1) \- exp(\-x)/x
\&  ? intnum(x = 0, [oo,1],  f(x)) \- Euler
\&  %1 = 6.00... E\-67
.Ve
.PP
thus only correct to \f(CW76\fR decimal digits. This is because close to \f(CW0\fR the
function \f(CW\*(C`f\*(C'\fR is computed with an enormous loss of accuracy.
A better solution is
.PP
.Vb 6
\&  ? intnum(x = 0, [oo,1],  g(x)) \- Euler
\&  %2 = 0.E\-106 \e\e expansion around t = 0
\&  ? intnum(x = 0, [oo,1],  g(x)) \- Euler
\&  %2 = 0.E\-106 \e\e note that 6.18 > 105
\&  ? intnum(x = 0, [oo,1],  g(x)) \- Euler
\&  %2 = 0.E\-106 \e\e perfect
.Ve
.PP
It is up to the user to determine constants such as the \f(CW\*(C`10^{\-18}\*(C'\fR and \f(CW7\fR
used above.
.PP
\&\fBTrue singularities.\fR With true singularities the result is much
worse. For instance
.PP
.Vb 2
\&  ? intnum(x = [0,\-1/2], 1,  1/sqrt(x)) \- 2
\&  %2 = 0.E\-105 \e\e only 59 correct decimals
\&
\&  ? intnum(x = [0,\-1/2], 1,  1/sqrt(x)) \- 2
\&  %2 = 0.E\-105 \e\e better
.Ve
.PP
\&\fBOscillating functions.\fR
.PP
.Vb 2
\&  ? intnum(x = 0, [oo,\-I], sin(x)^3/x) \- Pi/4
\&  %6 = 0.0092... \e\e nonsense
\&
\&  ? intnum(x = 0, [oo,\-I], sin(x)^3/x) \- Pi/4
\&  %6 = 0.0092... \e\e bad
\&
\&  ? intnum(x = 0, [oo,\-I], sin(x)^3/x) \- Pi/4
\&  %6 = 0.0092... \e\e perfect
\&
\&  ? intnum(x = 0, [oo,\-I], sin(x)^3/x) \- Pi/4
\&  %6 = 0.0092... \e\e oops, wrong k
\&
\&  ? intnum(x = 0, [oo,\-I], sin(x)^3/x) \- Pi/4
\&  %6 = 0.0092... \e\e perfect
\&
\&  ? intnum(x = 0, [oo,\-I], sin(x)^3/x) \- Pi/4
\&  %6 = 0.0092... \e\e bad
\&  ? sin(x)^3 \- (3*sin(x)\-sin(3*x))/4
\&  %7 = O(x^17)
.Ve
.PP
We may use the above linearization and compute two oscillating integrals with
``infinite endpoints'' \f(CW\*(C`[oo, \-I]\*(C'\fR and \f(CW\*(C`[oo, \-3*I]\*(C'\fR respectively, or
notice the obvious change of variable, and reduce to the single integral
\&\f(CW\*(C`(1/2)\f(CIint\f(CW_0^ oo  \f(CIsin\f(CW (x)/xdx\*(C'\fR. We finish with some more complicated
examples:
.PP
.Vb 10
\&  ? intnum(x = 0, oo, sin(x)^3*exp(\-x), tab) \- 0.3
\&  %6 = 5.45... E\-107 \e\e bad
\&  ? intnum(x = 0, oo, sin(x)^3*exp(\-x), tab) \- 0.3
\&  %6 = 5.45... E\-107 \e\e OK
\&  ? intnum(x = 0, oo, sin(x)^3*exp(\-x), tab) \- 0.3
\&  %6 = 5.45... E\-107 \e\e OK
\&  ? intnum(x = 0, oo, sin(x)^3*exp(\-x), tab) \- 0.3
\&  %6 = 5.45... E\-107 \e\e lost 16 decimals. Try higher m:
\&  ? intnum(x = 0, oo, sin(x)^3*exp(\-x), tab) \- 0.3
\&  %6 = 5.45... E\-107 \e\e the value of m actually used above.
\&  ? intnum(x = 0, oo, sin(x)^3*exp(\-x), tab) \- 0.3
\&  %6 = 5.45... E\-107 \e\e try m one higher.
\&  ? intnum(x = 0, oo, sin(x)^3*exp(\-x), tab) \- 0.3
\&  %6 = 5.45... E\-107 \e\e OK this time.
.Ve
.PP
\&\fBWarning.\fR Like \f(CW\*(C`sumalt\*(C'\fR, \f(CW\*(C`intnum\*(C'\fR often assigns a
reasonable value to diverging integrals. Use these values at your own risk!
For example:
.IX Xref "sumalt"
.PP
.Vb 2
\&  ? intnum(x = 0, [oo, \-I], x^2*sin(x))
\&  %1 = \-2.0000000000...
.Ve
.PP
Note the formula
.PP
  \f(CW\*(C` \f(CIint\f(CW_0^ oo  \f(CIsin\f(CW (x)/x^sdx =  \f(CIcos\f(CW (\f(CIPi\f(CW s/2) \f(CIGamma\f(CW(1\-s) , \*(C'\fR
.PP
a priori valid only for \f(CW\*(C`0 <  \f(CIRe\f(CW (s) < 2\*(C'\fR, but the right hand side provides an
analytic continuation which may be evaluated at \f(CW\*(C`s = \-2\*(C'\fR...
.PP
\&\fBMultivariate integration.\fR
Using successive univariate integration with respect to different formal
parameters, it is immediate to do naive multivariate integration. But it is
important to use a suitable \f(CW\*(C`intnuminit\*(C'\fR to precompute data for the
\&\eemph{internal} integrations at least!
.PP
For example, to compute the double integral on the unit disc \f(CW\*(C`x^2+y^2 <= 1\*(C'\fR
of the function \f(CW\*(C`x^2+y^2\*(C'\fR, we can write
.PP
.Vb 2
\&  ? tab = intnuminit(\-1,1);
\&  ? intnum(x=\-1,1, intnum(y=\-sqrt(1\-x^2),sqrt(1\-x^2), x^2+y^2, tab), tab)
.Ve
.PP
The first \fItab\fR is essential, the second optional. Compare:
.PP
.Vb 4
\&  ? intnum(x=\-1,1, intnum(y=\-sqrt(1\-x^2),sqrt(1\-x^2), x^2+y^2, tab), tab);
\&  time = 7,210 ms.  \e\e slow
\&  ? intnum(x=\-1,1, intnum(y=\-sqrt(1\-x^2),sqrt(1\-x^2), x^2+y^2, tab), tab);
\&  time = 7,210 ms.  \e\e faster
.Ve
.PP
However, the \f(CW\*(C`intnuminit\*(C'\fR program is usually pessimistic when it comes to
choosing the integration step \f(CW\*(C`2^{\-m}\*(C'\fR. It is often possible to improve the
speed by trial and error. Continuing the above example:
.PP
.Vb 12
\&  ? test(m \- 3)
\&  time = 120 ms.
\&  %3 = \-7.23... E\-60 \e\e what value of m did it take ?
\&  ? test(m \- 3)
\&  time = 120 ms.
\&  %3 = \-7.23... E\-60 \e\e 4 = 2^2 times faster and still OK.
\&  ? test(m \- 3)
\&  time = 120 ms.
\&  %3 = \-7.23... E\-60 \e\e 16 = 2^4 times faster and still OK.
\&  ? test(m \- 3)
\&  time = 120 ms.
\&  %3 = \-7.23... E\-60 \e\e 64 = 2^6 times faster, lost 45 decimals.
.Ve
.PP
The library syntax is \fBintnum\fR\f(CW\*(C`(void *E, GEN (*eval)(GEN,void*), GEN a,GEN b,GEN tab, long prec)\*(C'\fR,
where an omitted \fItab\fR is coded as \f(CW\*(C`NULL\*(C'\fR.
.IX Xref "intnum"
.ie n .SS "intnuminit""(a,b,{m = 0})"""
.el .SS "intnuminit\f(CW(a,b,{m = 0})\fP"
.IX Xref "intnuminit"
.IX Subsection "intnuminit(a,b,{m = 0})"
initialize tables for integration from
\&\f(CW\*(C`a\*(C'\fR to \f(CW\*(C`b\*(C'\fR, where \f(CW\*(C`a\*(C'\fR and \f(CW\*(C`b\*(C'\fR are coded as in \f(CW\*(C`intnum\*(C'\fR. Only the
compactness, the possible existence of singularities, the speed of decrease
or the oscillations at infinity are taken into account, and not the values.
For instance \f(CW\*(C`intnuminit(\-1,1)\*(C'\fR is equivalent to \f(CW\*(C`intnuminit(0,Pi)\*(C'\fR,
and \f(CW\*(C`intnuminit([0,\-1/2],[1])\*(C'\fR is equivalent to \f(CW\*(C`
intnuminit([\-1],[\-1,\-1/2])\*(C'\fR. If \f(CW\*(C`m\*(C'\fR is not given, it is computed according to
the current precision. Otherwise the integration step is \f(CW\*(C`1/2^m\*(C'\fR. Reasonable
values of \f(CW\*(C`m\*(C'\fR are \f(CW\*(C`m = 6\*(C'\fR or \f(CW\*(C`m = 7\*(C'\fR for \f(CW100\fR decimal digits, and \f(CW\*(C`m = 9\*(C'\fR for
\&\f(CW1000\fR decimal digits.
.PP
The result is technical, but in some cases it is useful to know the output.
Let \f(CW\*(C`x = \f(CIphi\f(CW(t)\*(C'\fR be the change of variable which is used. \fItab\fR[1] contains
the integer \f(CW\*(C`m\*(C'\fR as above, either given by the user or computed from the default
precision, and can be recomputed directly using the function \f(CW\*(C`intnumstep\*(C'\fR.
\&\fItab\fR[2] and \fItab\fR[3] contain respectively the abcissa and weight
corresponding to \f(CW\*(C`t = 0\*(C'\fR (\f(CW\*(C`\f(CIphi\f(CW(0)\*(C'\fR and \f(CW\*(C`\f(CIphi\f(CW\*(Aq(0)\*(C'\fR). \fItab\fR[4] and
\&\fItab\fR[5] contain the abcissas and weights corresponding to positive
\&\f(CW\*(C`t = nh\*(C'\fR for \f(CW\*(C`1 <= n <= N\*(C'\fR and \f(CW\*(C`h = 1/2^m\*(C'\fR (\f(CW\*(C`\f(CIphi\f(CW(nh)\*(C'\fR and \f(CW\*(C`\f(CIphi\f(CW\*(Aq(nh)\*(C'\fR). Finally
\&\fItab\fR[6] and \fItab\fR[7] contain either the abcissas and weights
corresponding to negative \f(CW\*(C`t = nh\*(C'\fR for \f(CW\*(C`\-N <= n <= \-1\*(C'\fR, or may be empty (but
not always) if \f(CW\*(C`\f(CIphi\f(CW(t)\*(C'\fR is an odd function (implicitly we would have
\&\f(CW\*(C`\f(CItab\f(CW[6] = \-\f(CItab\f(CW[4]\*(C'\fR and \f(CW\*(C`\f(CItab\f(CW[7] = \f(CItab\f(CW[5]\*(C'\fR).
.PP
The library syntax is \fBintnuminit\fR\f(CW\*(C`(GEN a, GEN b, long m, long prec)\*(C'\fR.
.IX Xref "intnuminit"
.ie n .SS "intnumromb""(X = a,b,\f(CIexpr\fP,{\f(CIflag\fP = 0})"""
.el .SS "intnumromb\f(CW(X = a,b,\fP\f(CIexpr\fP\f(CW,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "intnumromb"
.IX Subsection "intnumromb(X = a,b,expr,{flag = 0})"
numerical integration of
\&\fIexpr\fR (smooth in \f(CW\*(C`]a,b[\*(C'\fR), with respect to \f(CW\*(C`X\*(C'\fR. This function is
deprecated, use \f(CW\*(C`intnum\*(C'\fR instead.
.IX Xref "intnum"
.PP
Set \f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR (or omit it altogether) when \f(CW\*(C`a\*(C'\fR and \f(CW\*(C`b\*(C'\fR are not too large, the
function is smooth, and can be evaluated exactly everywhere on the interval
\&\f(CW\*(C`[a,b]\*(C'\fR.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR, uses a general driver routine for doing numerical integration,
making no particular assumption (slow).
.PP
\&\f(CW\*(C`\f(CIflag\f(CW = 2\*(C'\fR is tailored for being used when \f(CW\*(C`a\*(C'\fR or \f(CW\*(C`b\*(C'\fR are infinite. One
\&\eemph{must} have \f(CW\*(C`ab > 0\*(C'\fR, and in fact if for example \f(CW\*(C`b = + oo \*(C'\fR, then it is
preferable to have \f(CW\*(C`a\*(C'\fR as large as possible, at least \f(CW\*(C`a >= 1\*(C'\fR.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 3\*(C'\fR, the function is allowed to be undefined (but continuous) at \f(CW\*(C`a\*(C'\fR
or \f(CW\*(C`b\*(C'\fR, for example the function \f(CW\*(C` \f(CIsin\f(CW (x)/x\*(C'\fR at \f(CW\*(C`x = 0\*(C'\fR.
.PP
The user should not require too much accuracy: 18 or 28 decimal digits is \s-1OK,\s0
but not much more. In addition, analytical cleanup of the integral must have
been done: there must be no singularities in the interval or at the
boundaries. In practice this can be accomplished with a simple change of
variable. Furthermore, for improper integrals, where one or both of the
limits of integration are plus or minus infinity, the function must decrease
sufficiently rapidly at infinity. This can often be accomplished through
integration by parts. Finally, the function to be integrated should not be
very small (compared to the current precision) on the entire interval. This
can of course be accomplished by just multiplying by an appropriate constant.
.PP
Note that infinity can be represented with essentially no loss of
accuracy by 1e1000. However beware of real underflow when dealing with
rapidly decreasing functions. For example, if one wants to compute the
\&\f(CW\*(C`\f(CIint\f(CW_0^ oo e^{\-x^2}dx\*(C'\fR to 28 decimal digits, then one should set
infinity equal to 10 for example, and certainly not to 1e1000.
.IX Xref "infinity"
.PP
The library syntax is \fBintnumromb\fR\f(CW\*(C`(void *E, GEN (*eval)(GEN,void*), GEN a, GEN b, long flag, long prec)\*(C'\fR,
where \f(CW\*(C`eval(x, E)\*(C'\fR returns the value of the function at \f(CW\*(C`x\*(C'\fR.
You may store any additional information required by \f(CW\*(C`eval\*(C'\fR in \f(CW\*(C`E\*(C'\fR, or set
it to \f(CW\*(C`NULL\*(C'\fR.
.IX Xref "intnumromb"
.ie n .SS "intnumstep""()"""
.el .SS "intnumstep\f(CW()\fP"
.IX Xref "intnumstep"
.IX Subsection "intnumstep()"
give the value of \f(CW\*(C`m\*(C'\fR used in all the
\&\f(CW\*(C`intnum\*(C'\fR and \f(CW\*(C`sumnum\*(C'\fR programs, hence such that the integration
step is equal to \f(CW\*(C`1/2^m\*(C'\fR.
.PP
The library syntax is \fBintnumstep\fR\f(CW\*(C`(long prec)\*(C'\fR.
.IX Xref "intnumstep"
.ie n .SS "prod""(X = a,b,\f(CIexpr\fP,{x = 1})"""
.el .SS "prod\f(CW(X = a,b,\fP\f(CIexpr\fP\f(CW,{x = 1})\fP"
.IX Xref "prod"
.IX Subsection "prod(X = a,b,expr,{x = 1})"
product of expression
\&\fIexpr\fR, initialized at \f(CW\*(C`x\*(C'\fR, the formal parameter \f(CW\*(C`X\*(C'\fR going from \f(CW\*(C`a\*(C'\fR to
\&\f(CW\*(C`b\*(C'\fR. As for \f(CW\*(C`sum\*(C'\fR, the main purpose of the initialization parameter \f(CW\*(C`x\*(C'\fR
is to force the type of the operations being performed. For example if it is
set equal to the integer 1, operations will start being done exactly. If it
is set equal to the real \f(CW1.\fR, they will be done using real numbers having
the default precision. If it is set equal to the power series \f(CW\*(C`1+O(X^k)\*(C'\fR for
a certain \f(CW\*(C`k\*(C'\fR, they will be done using power series of precision at most \f(CW\*(C`k\*(C'\fR.
These are the three most common initializations.
.PP
As an extreme example, compare
.PP
.Vb 6
\&  ? prod(i=1, 100, 1 \- X^i);  \e\e this has degree 5050 !!
\&  time = 3,335 ms.
\&  ? prod(i=1, 100, 1 \- X^i, 1 + O(X^101))
\&  time = 43 ms.
\&  %2 = 1 \- X \- X^2 + X^5 + X^7 \- X^12 \- X^15 + X^22 + X^26 \- X^35 \- X^40 + \e
\&    X^51 + X^57 \- X^70 \- X^77 + X^92 + X^100 + O(X^101)
.Ve
.PP
The library syntax is \fBproduit\fR\f(CW\*(C`(entree *ep, GEN a, GEN b, char *expr, GEN x)\*(C'\fR.
.IX Xref "produit"
.ie n .SS "prodeuler""(X = a,b,\f(CIexpr\fP)"""
.el .SS "prodeuler\f(CW(X = a,b,\fP\f(CIexpr\fP\f(CW)\fP"
.IX Xref "prodeuler"
.IX Subsection "prodeuler(X = a,b,expr)"
product of expression \fIexpr\fR,
initialized at 1. (i.e. to a \eemph{real} number equal to 1 to the current
\&\f(CW\*(C`realprecision\*(C'\fR), the formal parameter \f(CW\*(C`X\*(C'\fR ranging over the prime numbers
between \f(CW\*(C`a\*(C'\fR and \f(CW\*(C`b\*(C'\fR.
.IX Xref "Euler product"
.PP
The library syntax is \fBprodeuler\fR\f(CW\*(C`(void *E, GEN (*eval)(GEN,void*), GEN a,GEN b, long prec)\*(C'\fR.
.IX Xref "prodeuler"
.ie n .SS "prodinf""(X = a,\f(CIexpr\fP,{\f(CIflag\fP = 0})"""
.el .SS "prodinf\f(CW(X = a,\fP\f(CIexpr\fP\f(CW,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "prodinf"
.IX Subsection "prodinf(X = a,expr,{flag = 0})"
infinite product of
expression \fIexpr\fR, the formal parameter \f(CW\*(C`X\*(C'\fR starting at \f(CW\*(C`a\*(C'\fR. The evaluation
stops when the relative error of the expression minus 1 is less than the
default precision. The expressions must always evaluate to an element of
\&\fB\f(BIC\fB\fR.
.IX Xref "infinite product"
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR, do the product of the (\f(CW\*(C`1+\f(CIexpr\f(CW\*(C'\fR) instead.
.PP
The library syntax is \fBprodinf\fR\f(CW\*(C`(void *E, GEN (*eval)(GEN, void*), GEN a, long prec)\*(C'\fR
(\f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR), or \fBprodinf1\fR with the same arguments (\f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR).
.IX Xref "prodinf prodinf1"
.ie n .SS "solve""(X = a,b,\f(CIexpr\fP)"""
.el .SS "solve\f(CW(X = a,b,\fP\f(CIexpr\fP\f(CW)\fP"
.IX Xref "solve"
.IX Subsection "solve(X = a,b,expr)"
find a real root of expression
\&\fIexpr\fR between \f(CW\*(C`a\*(C'\fR and \f(CW\*(C`b\*(C'\fR, under the condition
\&\f(CW\*(C`\f(CIexpr\f(CW(X = a) * \f(CIexpr\f(CW(X = b) <= 0\*(C'\fR.
This routine uses Brent's method and can fail miserably if \fIexpr\fR is
not defined in the whole of \f(CW\*(C`[a,b]\*(C'\fR (try \f(CW\*(C`solve(x = 1, 2, tan(x)\*(C'\fR).
.PP
The library syntax is \fBzbrent\fR\f(CW\*(C`(void *E,GEN (*eval)(GEN,void*),GEN a,GEN b,long prec)\*(C'\fR.
.IX Xref "zbrent"
.ie n .SS "sum""(X = a,b,\f(CIexpr\fP,{x = 0})"""
.el .SS "sum\f(CW(X = a,b,\fP\f(CIexpr\fP\f(CW,{x = 0})\fP"
.IX Xref "sum"
.IX Subsection "sum(X = a,b,expr,{x = 0})"
sum of expression \fIexpr\fR,
initialized at \f(CW\*(C`x\*(C'\fR, the formal parameter going from \f(CW\*(C`a\*(C'\fR to \f(CW\*(C`b\*(C'\fR. As for
\&\f(CW\*(C`prod\*(C'\fR, the initialization parameter \f(CW\*(C`x\*(C'\fR may be given to force the type
of the operations being performed.
.PP
As an extreme example, compare
.PP
.Vb 5
\&  ? sum(i=1, 5000, 1/i); \e\e rational number: denominator has 2166 digits.
\&  time = 1,241 ms.
\&  ? sum(i=1, 5000, 1/i, 0.)
\&  time = 158 ms.
\&  %2 = 9.094508852984436967261245533
.Ve
.PP
The library syntax is \fBsomme\fR\f(CW\*(C`(entree *ep, GEN a, GEN b, char *expr, GEN x)\*(C'\fR. This is to be
used as follows: \f(CW\*(C`ep\*(C'\fR represents the dummy variable used in the
expression \f(CW\*(C`expr\*(C'\fR
.IX Xref "somme"
.PP
.Vb 7
\&  /* compute a^2 + ... + b^2 */
\&  {
\&    /* define the dummy variable "i" */
\&    entree *ep = is_entry("i");
\&    /* sum for a <= i <= b */
\&    return somme(ep, a, b, "i^2", gen_0);
\&  }
.Ve
.ie n .SS "sumalt""(X = a,\f(CIexpr\fP,{\f(CIflag\fP = 0})"""
.el .SS "sumalt\f(CW(X = a,\fP\f(CIexpr\fP\f(CW,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "sumalt"
.IX Subsection "sumalt(X = a,expr,{flag = 0})"
numerical summation of the
series \fIexpr\fR, which should be an alternating series, the formal
variable \f(CW\*(C`X\*(C'\fR starting at \f(CW\*(C`a\*(C'\fR. Use an algorithm of F. Villegas as modified by
D. Zagier (improves on Euler\-Van Wijngaarden method).
.IX Xref "alternating series Euler Van Wijngaarden"
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR, use a variant with slightly different polynomials. Sometimes
faster.
.PP
Divergent alternating series can sometimes be summed by this method, as well
as series which are not exactly alternating (see for example
\&\*(L"Label se:user_defined\*(R"). If the series already converges geometrically,
\&\f(CW\*(C`suminf\*(C'\fR is often a better choice:
.IX Xref "suminf"
.PP
.Vb 10
\&  ? \ep28
\&  ? sumalt(i = 1, \-(\-1)^i / i)  \- log(2)
\&  time = 0 ms.
\&  %1 = \-2.524354897 E\-29
\&  ? suminf(i = 1, \-(\-1)^i / i)
\&    *** suminf: user interrupt after 10min, 20,100 ms.
\&  ? \ep1000
\&  ? sumalt(i = 1, \-(\-1)^i / i)  \- log(2)
\&  time = 90 ms.
\&  %2 = 4.459597722 E\-1002
\&
\&  ? sumalt(i = 0, (\-1)^i / i!) \- exp(\-1)
\&  time = 670 ms.
\&  %3 = \-4.03698781490633483156497361352190615794353338591897830587 E\-944
\&  ? suminf(i = 0, (\-1)^i / i!) \- exp(\-1)
\&  time = 110 ms.
\&  %4 = \-8.39147638 E\-1000   \e\e  faster and more accurate
.Ve
.PP
The library syntax is \fBsumalt\fR\f(CW\*(C`(void *E, GEN (*eval)(GEN,void*),GEN a,long prec)\*(C'\fR. Also
available is \f(CW\*(C`sumalt2\*(C'\fR with the same arguments (\f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR).
.IX Xref "sumalt sumalt2"
.ie n .SS "sumdiv""(n,X,\f(CIexpr\fP)"""
.el .SS "sumdiv\f(CW(n,X,\fP\f(CIexpr\fP\f(CW)\fP"
.IX Xref "sumdiv"
.IX Subsection "sumdiv(n,X,expr)"
sum of expression \fIexpr\fR over
the positive divisors of \f(CW\*(C`n\*(C'\fR.
.PP
Arithmetic functions like \f(CW\*(C`sigma\*(C'\fR use the multiplicativity of the
underlying expression to speed up the computation. In the present version
\&\fB2.3.5\fR, there is no way to indicate that \fIexpr\fR is multiplicative in
\&\f(CW\*(C`n\*(C'\fR, hence specialized functions should be preferred whenever possible.
.IX Xref "sigma"
.PP
The library syntax is \fBdivsum\fR\f(CW\*(C`(entree *ep, GEN num, char *expr)\*(C'\fR.
.IX Xref "divsum"
.ie n .SS "suminf""(X = a,\f(CIexpr\fP)"""
.el .SS "suminf\f(CW(X = a,\fP\f(CIexpr\fP\f(CW)\fP"
.IX Xref "suminf"
.IX Subsection "suminf(X = a,expr)"
infinite sum of expression
\&\fIexpr\fR, the formal parameter \f(CW\*(C`X\*(C'\fR starting at \f(CW\*(C`a\*(C'\fR. The evaluation stops
when the relative error of the expression is less than the default precision
for 3 consecutive evaluations. The expressions must always evaluate to a
complex number.
.IX Xref "infinite sum"
.PP
If the series converges slowly, make sure \f(CW\*(C`realprecision\*(C'\fR is low (even 28
digits may be too much). In this case, if the series is alternating or the
terms have a constant sign, \f(CW\*(C`sumalt\*(C'\fR and \f(CW\*(C`sumpos\*(C'\fR should be used
instead.
.IX Xref "sumalt sumpos"
.PP
.Vb 6
\&  ? \ep28
\&  ? suminf(i = 1, \-(\-1)^i / i)
\&    *** suminf: user interrupt after 10min, 20,100 ms.
\&  ? sumalt(i = 1, \-(\-1)^i / i) \- log(2)
\&  time = 0 ms.
\&  %1 = \-2.524354897 E\-29
.Ve
.PP
The library syntax is \fBsuminf\fR\f(CW\*(C`(void *E, GEN (*eval)(GEN,void*), GEN a, long prec)\*(C'\fR.
.IX Xref "suminf"
.ie n .SS "sumnum""(X = a,sig,\f(CIexpr\fP,{\f(CItab\fP}),{\f(CIflag\fP = 0}"""
.el .SS "sumnum\f(CW(X = a,sig,\fP\f(CIexpr\fP\f(CW,{\fP\f(CItab\fP\f(CW}),{\fP\f(CIflag\fP\f(CW = 0}\fP"
.IX Xref "sumnum"
.IX Subsection "sumnum(X = a,sig,expr,{tab}),{flag = 0}"
numerical
summation of \fIexpr\fR, the variable \f(CW\*(C`X\*(C'\fR taking integer values from ceiling
of \f(CW\*(C`a\*(C'\fR to \f(CW\*(C`+ oo \*(C'\fR, where \fIexpr\fR is assumed to be a holomorphic function
\&\f(CWf(X)\fR for \f(CW\*(C` \f(CIRe\f(CW (X) >= \f(CIsigma\f(CW\*(C'\fR.
.PP
The parameter \f(CW\*(C`\f(CIsigma\f(CW belongs to \f(CB\f(CBR\f(CB\f(CW\*(C'\fR is coded in the argument \f(CW\*(C`sig\*(C'\fR as follows: it
is either
.PP
\&\eitem a real number \f(CW\*(C`\f(CIsigma\f(CW\*(C'\fR. Then the function \f(CW\*(C`f\*(C'\fR is assumed to
decrease at least as \f(CW\*(C`1/X^2\*(C'\fR at infinity, but not exponentially;
.PP
\&\eitem a two-component vector \f(CW\*(C`[\f(CIsigma\f(CW,\f(CIalpha\f(CW]\*(C'\fR, where \f(CW\*(C`\f(CIsigma\f(CW\*(C'\fR is as
before, \f(CW\*(C`\f(CIalpha\f(CW < \-1\*(C'\fR. The function \f(CW\*(C`f\*(C'\fR is assumed to decrease like
\&\f(CW\*(C`X^{\f(CIalpha\f(CW}\*(C'\fR. In particular, \f(CW\*(C`\f(CIalpha\f(CW <= \-2\*(C'\fR is equivalent to no \f(CW\*(C`\f(CIalpha\f(CW\*(C'\fR at all.
.PP
\&\eitem a two-component vector \f(CW\*(C`[\f(CIsigma\f(CW,\f(CIalpha\f(CW]\*(C'\fR, where \f(CW\*(C`\f(CIsigma\f(CW\*(C'\fR is as
before, \f(CW\*(C`\f(CIalpha\f(CW > 0\*(C'\fR. The function \f(CW\*(C`f\*(C'\fR is assumed to decrease like
\&\f(CW\*(C` \f(CIexp\f(CW (\-\f(CIalpha\f(CW X)\*(C'\fR. In this case it is essential that \f(CW\*(C`\f(CIalpha\f(CW\*(C'\fR be exactly the
rate of exponential decrease, and it is usually a good idea to increase
the default value of \f(CW\*(C`m\*(C'\fR used for the integration step. In practice, if
the function is exponentially decreasing \f(CW\*(C`sumnum\*(C'\fR is slower and less
accurate than \f(CW\*(C`sumpos\*(C'\fR or \f(CW\*(C`suminf\*(C'\fR, so should not be used.
.PP
The function uses the \f(CW\*(C`intnum\*(C'\fR routines and integration on the line
\&\f(CW\*(C` \f(CIRe\f(CW (s) = \f(CIsigma\f(CW\*(C'\fR. The optional argument \fItab\fR is as in intnum, except it
must be initialized with \f(CW\*(C`sumnuminit\*(C'\fR instead of \f(CW\*(C`intnuminit\*(C'\fR.
.IX Xref "intnum"
.PP
When \fItab\fR is not precomputed, \f(CW\*(C`sumnum\*(C'\fR can be slower than
\&\f(CW\*(C`sumpos\*(C'\fR, when the latter is applicable. It is in general faster for
slowly decreasing functions.
.PP
Finally, if \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR is nonzero, we assume that the function \f(CW\*(C`f\*(C'\fR to be summed is
of real type, i.e. satisfies \f(CW\*(C`\eoverline{f(z)} = f(\eoverline{z})\*(C'\fR, which
speeds up the computation.
.PP
.Vb 10
\&  ? d \- c
\&  time = 0 ms.
\&  %5 = 1.97... E\-306 \e\e slower but done once and for all.
\&  ? d \- c
\&  time = 0 ms.
\&  %5 = 1.97... E\-306 \e\e 3 times as fast as sumpos
\&  ? d \- c
\&  time = 0 ms.
\&  %5 = 1.97... E\-306 \e\e perfect.
\&  ? d \- c
\&  time = 0 ms.
\&  %5 = 1.97... E\-306 \e\e function of real type
\&  ? d \- c
\&  time = 0 ms.
\&  %5 = 1.97... E\-306 \e\e twice as fast, no imaginary part.
\&  ? d \- c
\&  time = 0 ms.
\&  %5 = 1.97... E\-306 \e\e fast
\&  ? d \- c
\&  time = 0 ms.
\&  %5 = 1.97... E\-306 \e\e slow.
\&  ? d \- c
\&  time = 0 ms.
\&  %5 = 1.97... E\-306 \e\e perfect.
.Ve
.PP
For slowly decreasing function, we must indicate singularities:
.PP
.Vb 12
\&  time = 12,210 ms.
\&  ? b \- zeta(4/3)
\&  %3 = 1.05... E\-300 \e\e slow because of the computation of n^{\-4/3}.
\&  time = 12,210 ms.
\&  ? b \- zeta(4/3)
\&  %3 = 1.05... E\-300 \e\e lost 200 decimals because of singularity at  oo 
\&  time = 12,210 ms.
\&  ? b \- zeta(4/3)
\&  %3 = 1.05... E\-300 \e\e of real type
\&  time = 12,210 ms.
\&  ? b \- zeta(4/3)
\&  %3 = 1.05... E\-300 \e\e better
.Ve
.PP
Since the \eemph{complex} values of the function are used, beware of
determination problems. For instance:
.PP
.Vb 9
\&  ? sumnum(n=1,[2,\-3/2], 1/n^(3/2), tab,1) \- zeta(3/2)
\&  time = 8,990 ms.
\&  %3 = \-1.19... E\-305 \e\e fast and correct
\&  ? sumnum(n=1,[2,\-3/2], 1/n^(3/2), tab,1) \- zeta(3/2)
\&  time = 8,990 ms.
\&  %3 = \-1.19... E\-305 \e\e nonsense. However
\&  ? sumnum(n=1,[2,\-3/2], 1/n^(3/2), tab,1) \- zeta(3/2)
\&  time = 8,990 ms.
\&  %3 = \-1.19... E\-305 \e\e perfect, as 1/(n*sqrt{n}) above but much slower
.Ve
.PP
For exponentially decreasing functions, \f(CW\*(C`sumnum\*(C'\fR is given for
completeness, but one of \f(CW\*(C`suminf\*(C'\fR or \f(CW\*(C`sumpos\*(C'\fR should always be
preferred. If you experiment with such functions and \f(CW\*(C`sumnum\*(C'\fR anyway,
indicate the exact rate of decrease and increase \f(CW\*(C`m\*(C'\fR by \f(CW1\fR or \f(CW2\fR:
.IX Xref "suminf sumpos"
.PP
.Vb 10
\&  ? m = intnumstep()
\&  %4 = 9
\&  ? sumnum(n=1,[2,log(2)], 2^(\-n), m+1, 1) \- 1
\&  time = 11,770 ms.
\&  %5 = \-1.9... E\-305 \e\e fast and perfect
\&  ? m = intnumstep()
\&  %4 = 9
\&  ? sumnum(n=1,[2,log(2)], 2^(\-n), m+1, 1) \- 1
\&  time = 11,770 ms.
\&  %5 = \-1.9... E\-305 \e\e also fast and perfect
\&  ? m = intnumstep()
\&  %4 = 9
\&  ? sumnum(n=1,[2,log(2)], 2^(\-n), m+1, 1) \- 1
\&  time = 11,770 ms.
\&  %5 = \-1.9... E\-305 \e\e nonsense
\&  ? m = intnumstep()
\&  %4 = 9
\&  ? sumnum(n=1,[2,log(2)], 2^(\-n), m+1, 1) \- 1
\&  time = 11,770 ms.
\&  %5 = \-1.9... E\-305 \e\e of real type
\&  ? m = intnumstep()
\&  %4 = 9
\&  ? sumnum(n=1,[2,log(2)], 2^(\-n), m+1, 1) \- 1
\&  time = 11,770 ms.
\&  %5 = \-1.9... E\-305 \e\e slow and lost 70 decimals
\&  ? m = intnumstep()
\&  %4 = 9
\&  ? sumnum(n=1,[2,log(2)], 2^(\-n), m+1, 1) \- 1
\&  time = 11,770 ms.
\&  %5 = \-1.9... E\-305 \e\e now perfect, but slow.
.Ve
.PP
The library syntax is \fBsumnum\fR\f(CW\*(C`(void *E, GEN (*eval)(GEN,void*), GEN a,GEN sig,GEN tab,long flag, long prec)\*(C'\fR.
.IX Xref "sumnum"
.ie n .SS "sumnumalt""(X = a,sig,\f(CIexpr\fP,{\f(CItab\fP},{\f(CIflag\fP = 0})"""
.el .SS "sumnumalt\f(CW(X = a,sig,\fP\f(CIexpr\fP\f(CW,{\fP\f(CItab\fP\f(CW},{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "sumnumalt"
.IX Subsection "sumnumalt(X = a,sig,expr,{tab},{flag = 0})"
numerical
summation of \f(CW\*(C`(\-1)^X\f(CIexpr\f(CW(X)\*(C'\fR, the variable \f(CW\*(C`X\*(C'\fR taking integer values from
ceiling of \f(CW\*(C`a\*(C'\fR to \f(CW\*(C`+ oo \*(C'\fR, where \fIexpr\fR is assumed to be a holomorphic
function for \f(CW\*(C` \f(CIRe\f(CW (X) >= sig\*(C'\fR (or \f(CW\*(C`sig[1]\*(C'\fR).
.PP
\&\fBWarning.\fR This function uses the \f(CW\*(C`intnum\*(C'\fR routines and is
orders of magnitude slower than \f(CW\*(C`sumalt\*(C'\fR. It is only given for
completeness and should not be used in practice.
.PP
\&\fBWarning2.\fR The expression \fIexpr\fR must \eemph{not} include the
\&\f(CW\*(C`(\-1)^X\*(C'\fR coefficient. Thus \f(CW\*(C`sumalt(n = a,(\-1)^nf(n))\*(C'\fR is (approximately)
equal to \f(CW\*(C`sumnumalt(n = a,sig,f(n))\*(C'\fR.
.PP
\&\f(CW\*(C`sig\*(C'\fR is coded as in \f(CW\*(C`sumnum\*(C'\fR. However for slowly decreasing functions
(where \f(CW\*(C`sig\*(C'\fR is coded as \f(CW\*(C`[\f(CIsigma\f(CW,\f(CIalpha\f(CW]\*(C'\fR with \f(CW\*(C`\f(CIalpha\f(CW < \-1\*(C'\fR), it is not
really important to indicate \f(CW\*(C`\f(CIalpha\f(CW\*(C'\fR. In fact, as for \f(CW\*(C`sumalt\*(C'\fR, the
program will often give meaningful results (usually analytic continuations)
even for divergent series. On the other hand the exponential decrease must be
indicated.
.PP
\&\fItab\fR is as in \f(CW\*(C`intnum\*(C'\fR, but if used must be initialized with
\&\f(CW\*(C`sumnuminit\*(C'\fR. If \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR is nonzero, assumes that the function \f(CW\*(C`f\*(C'\fR to be
summed is of real type, i.e. satisfies \f(CW\*(C`\eoverline{f(z)} = f(\eoverline{z})\*(C'\fR, and
then twice faster when \fItab\fR is precomputed.
.PP
.Vb 10
\&  ? a \- b
\&  time = 0 ms.
\&  %1 = \-1.66... E\-308 \e\e abcissa sigma = 2, alternating sums.
\&  ? a \- b
\&  time = 0 ms.
\&  %1 = \-1.66... E\-308 \e\e slow, but done once and for all.
\&  ? a \- b
\&  time = 0 ms.
\&  %1 = \-1.66... E\-308 \e\e similar speed to sumnum
\&  ? a \- b
\&  time = 0 ms.
\&  %1 = \-1.66... E\-308 \e\e infinitely faster!
\&  ? a \- b
\&  time = 0 ms.
\&  %1 = \-1.66... E\-308 \e\e perfect
.Ve
.PP
The library syntax is \fBsumnumalt\fR\f(CW\*(C`(void *E, GEN (*eval)(GEN,void*), GEN a, GEN sig, GEN tab, long flag, long prec)\*(C'\fR.
.IX Xref "sumnumalt"
.ie n .SS "sumnuminit""(sig,{m = 0},{sgn = 1})"""
.el .SS "sumnuminit\f(CW(sig,{m = 0},{sgn = 1})\fP"
.IX Xref "sumnuminit"
.IX Subsection "sumnuminit(sig,{m = 0},{sgn = 1})"
initialize tables for numerical
summation using \f(CW\*(C`sumnum\*(C'\fR (with \f(CW\*(C`\f(CIsgn\f(CW = 1\*(C'\fR) or \f(CW\*(C`sumnumalt\*(C'\fR (with
\&\f(CW\*(C`\f(CIsgn\f(CW = \-1\*(C'\fR), \f(CW\*(C`sig\*(C'\fR is the abcissa of integration coded as in \f(CW\*(C`sumnum\*(C'\fR,
and \f(CW\*(C`m\*(C'\fR is as in \f(CW\*(C`intnuminit\*(C'\fR.
.PP
The library syntax is \fBsumnuminit\fR\f(CW\*(C`(GEN sig, long m, long sgn, long prec)\*(C'\fR.
.IX Xref "sumnuminit"
.ie n .SS "sumpos""(X = a,\f(CIexpr\fP,{\f(CIflag\fP = 0})"""
.el .SS "sumpos\f(CW(X = a,\fP\f(CIexpr\fP\f(CW,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "sumpos"
.IX Subsection "sumpos(X = a,expr,{flag = 0})"
numerical summation of the
series \fIexpr\fR, which must be a series of terms having the same sign,
the formal
variable \f(CW\*(C`X\*(C'\fR starting at \f(CW\*(C`a\*(C'\fR. The algorithm used is Van Wijngaarden's trick
for converting such a series into an alternating one, and is quite slow. For
regular functions, the function \f(CW\*(C`sumnum\*(C'\fR is in general much faster once the
initializations have been made using \f(CW\*(C`sumnuminit\*(C'\fR.
.PP
If \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR, use slightly different polynomials. Sometimes faster.
.PP
The library syntax is \fBsumpos\fR\f(CW\*(C`(void *E, GEN (*eval)(GEN,void*),GEN a,long prec)\*(C'\fR. Also
available is \f(CW\*(C`sumpos2\*(C'\fR with the same arguments (\f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR).
.IX Xref "sumpos sumpos2"
.SH "Plotting functions"
.IX Header "Plotting functions"
Although plotting is not even a side purpose of \s-1PARI,\s0 a number of plotting
functions are provided. Moreover, a lot of people suggested ideas or submitted
patches for this section of the code. Among these, special thanks go to
Klaus-Peter Nischke who suggested the recursive plotting and the
forking/resizing stuff under X11, and Ilya Zakharevich who undertook a
complete rewrite of the graphic code, so that most of it is now
platform-independent and should be easy to port or expand. There are three
types of graphic functions.
.SS "High-level plotting functions"
.IX Subsection "High-level plotting functions"
(all the functions starting with \f(CW\*(C`ploth\*(C'\fR) in which the user has little to
do but explain what type of plot he wants, and whose syntax is similar to the
one used in the preceding section.
.SS "Low-level plotting functions"
.IX Subsection "Low-level plotting functions"
(called \fIrectplot\fR functions,
sharing the prefix \f(CW\*(C`plot\*(C'\fR), where every drawing primitive (point, line,
box, etc.) is specified by the user. These low-level functions work as
follows. You have at your disposal 16 virtual windows which are filled
independently, and can then be physically ORed on a single window at
user-defined positions. These windows are numbered from 0 to 15, and must be
initialized before being used by the function \f(CW\*(C`plotinit\*(C'\fR, which specifies
the height and width of the virtual window (called a \fIrectwindow\fR in the
sequel). At all times, a virtual cursor (initialized at \f(CW\*(C`[0,0]\*(C'\fR) is associated
to the window, and its current value can be obtained using the function
\&\f(CW\*(C`plotcursor\*(C'\fR.
.PP
A number of primitive graphic objects (called \fIrect\fR objects) can then
be drawn in these windows, using a default color associated to that window
(which can be changed under X11, using the \f(CW\*(C`plotcolor\*(C'\fR function, black
otherwise) and only the part of the object which is inside the window will be
drawn, with the exception of polygons and strings which are drawn entirely.
The ones sharing the prefix \f(CW\*(C`plotr\*(C'\fR draw relatively to the current
position of the virtual cursor, the others use absolute coordinates. Those
having the prefix \f(CW\*(C`plotrecth\*(C'\fR put in the rectwindow a large batch of rect
objects corresponding to the output of the related \f(CW\*(C`ploth\*(C'\fR function.
.PP
Finally, the actual physical drawing is done using the function
\&\f(CW\*(C`plotdraw\*(C'\fR. The rectwindows are preserved so that further drawings
using the same windows at different positions or different windows can be
done without extra work. To erase a window (and free the corresponding
memory), use the function \f(CW\*(C`plotkill\*(C'\fR. It is not possible to partially
erase a window. Erase it completely, initialize it again and then fill it with
the graphic objects that you want to keep.
.PP
In addition to initializing the window, you may use a scaled
window to avoid unnecessary conversions. For this, use the function
\&\f(CW\*(C`plotscale\*(C'\fR below. As long as this function is not called, the scaling is
simply the number of pixels, the origin being at the upper left and the
\&\f(CW\*(C`y\*(C'\fR\-coordinates going downwards.
.PP
Note that in the present version \fB2.3.5\fR all plotting functions (both low
and high level) are written for the X11\-window system (hence also for \s-1GUI\s0's
based on X11 such as Openwindows and Motif) only, though little code
remains which is actually platform-dependent. It is also possible to compile
\&\f(CW\*(C`gp\*(C'\fR with either of the Qt or \s-1FLTK\s0 graphical libraries. A
Suntools/Sunview, Macintosh, and an Atari/Gem port were provided for previous
versions, but are now obsolete.
.PP
Under X11, the physical window (opened by \f(CW\*(C`plotdraw\*(C'\fR or any of the
\&\f(CW\*(C`ploth*\*(C'\fR functions) is completely separated from \f(CW\*(C`gp\*(C'\fR (technically, a
\&\f(CW\*(C`fork\*(C'\fR is done, and the non-graphical memory is immediately freed in the
child process), which means you can go on working in the current \f(CW\*(C`gp\*(C'\fR
session, without having to kill the window first. Under X11, this window can
be closed, enlarged or reduced using the standard window manager functions.
No zooming procedure is implemented though (yet).
.SS "Functions for PostScript output:"
.IX Subsection "Functions for PostScript output:"
in the same way that \f(CW\*(C`printtex\*(C'\fR allows you to have a TeX output
corresponding to printed results, the functions starting with \f(CW\*(C`ps\*(C'\fR allow
you to have \f(CW\*(C`PostScript\*(C'\fR output of the plots. This will not be absolutely
identical with the screen output, but will be sufficiently close. Note that
you can use PostScript output even if you do not have the plotting routines
enabled. The PostScript output is written in a file whose name is derived from
the \f(CW\*(C`psfile\*(C'\fR default (\f(CW\*(C`./pari.ps\*(C'\fR if you did not tamper with it). Each
time a new PostScript output is asked for, the PostScript output is appended
to that file. Hence you probably want to remove this file, or change the value
of \f(CW\*(C`psfile\*(C'\fR, in between plots. On the other hand, in this manner, as many
plots as desired can be kept in a single file.
.IX Xref "PostScript psfile"
.SS "And library mode ?"
.IX Subsection "And library mode ?"
\&\eemph{None of the graphic functions are available
within the \s-1PARI\s0 library, you must be under \f(CW\*(C`gp\*(C'\fR to use them}. The reason
for that is that you really should not use \s-1PARI\s0 for heavy-duty graphical work,
there are better specialized alternatives around. This whole set of routines
was only meant as a convenient, but simple-minded, visual aid. If you really
insist on using these in your program (we warned you), the source
(\f(CW\*(C`plot*.c\*(C'\fR) should be readable enough for you to achieve something.
.ie n .SS "plot""(X = a,b,\f(CIexpr\fP,{\f(CIYmin\fP},{\f(CIYmax\fP})"""
.el .SS "plot\f(CW(X = a,b,\fP\f(CIexpr\fP\f(CW,{\fP\f(CIYmin\fP\f(CW},{\fP\f(CIYmax\fP\f(CW})\fP"
.IX Xref "plot"
.IX Subsection "plot(X = a,b,expr,{Ymin},{Ymax})"
crude
\&\s-1ASCII\s0 plot of the function represented by expression \fIexpr\fR from
\&\f(CW\*(C`a\*(C'\fR to \f(CW\*(C`b\*(C'\fR, with \fIY\fR ranging from \fIYmin\fR to \fIYmax\fR. If
\&\fIYmin\fR (resp. \fIYmax\fR) is not given, the minima (resp. the
maxima) of the computed values of the expression is used instead.
.ie n .SS "plotbox""(w,x2,y2)"""
.el .SS "plotbox\f(CW(w,x2,y2)\fP"
.IX Xref "plotbox"
.IX Subsection "plotbox(w,x2,y2)"
let \f(CW\*(C`(x1,y1)\*(C'\fR be the current position of the
virtual cursor. Draw in the rectwindow \f(CW\*(C`w\*(C'\fR the outline of the rectangle which
is such that the points \f(CW\*(C`(x1,y1)\*(C'\fR and \f(CW\*(C`(x2,y2)\*(C'\fR are opposite corners. Only
the part of the rectangle which is in \f(CW\*(C`w\*(C'\fR is drawn. The virtual cursor does
\&\eemph{not} move.
.ie n .SS "plotclip""(w)"""
.el .SS "plotclip\f(CW(w)\fP"
.IX Xref "plotclip"
.IX Subsection "plotclip(w)"
`clips' the content of rectwindow \f(CW\*(C`w\*(C'\fR, i.e
remove all parts of the drawing that would not be visible on the screen.
Together with \f(CW\*(C`plotcopy\*(C'\fR this function enables you to draw on a
scratchpad before commiting the part you're interested in to the final
picture.
.IX Xref "plotcopy"
.ie n .SS "plotcolor""(w,c)"""
.el .SS "plotcolor\f(CW(w,c)\fP"
.IX Xref "plotcolor"
.IX Subsection "plotcolor(w,c)"
set default color to \f(CW\*(C`c\*(C'\fR in rectwindow \f(CW\*(C`w\*(C'\fR.
In present version \fB2.3.5\fR, this is only implemented for the X11 window system,
and you only have the following palette to choose from:
.PP
1 = black, 2 = blue, 3 = sienna, 4 = red, 5 = green, 6 = grey, 7 = gainsborough.
.PP
Note that it should be fairly easy for you to hardwire some more colors by
tweaking the files \f(CW\*(C`rect.h\*(C'\fR and \f(CW\*(C`plotX.c\*(C'\fR. User-defined
colormaps would be nice, and \eemph{may} be available in future versions.
.ie n .SS "plotcopy""(w1,w2,dx,dy)"""
.el .SS "plotcopy\f(CW(w1,w2,dx,dy)\fP"
.IX Xref "plotcopy"
.IX Subsection "plotcopy(w1,w2,dx,dy)"
copy the contents of rectwindow
\&\f(CW\*(C`w1\*(C'\fR to rectwindow \f(CW\*(C`w2\*(C'\fR, with offset \f(CW\*(C`(dx,dy)\*(C'\fR.
.ie n .SS "plotcursor""(w)"""
.el .SS "plotcursor\f(CW(w)\fP"
.IX Xref "plotcursor"
.IX Subsection "plotcursor(w)"
give as a 2\-component vector the current
(scaled) position of the virtual cursor corresponding to the rectwindow \f(CW\*(C`w\*(C'\fR.
.ie n .SS "plotdraw""(list)"""
.el .SS "plotdraw\f(CW(list)\fP"
.IX Xref "plotdraw"
.IX Subsection "plotdraw(list)"
physically draw the rectwindows given in \f(CW\*(C`list\*(C'\fR
which must be a vector whose number of components is divisible by 3. If
\&\f(CW\*(C`list = [w1,x1,y1,w2,x2,y2,...]\*(C'\fR, the windows \f(CW\*(C`w1\*(C'\fR, \f(CW\*(C`w2\*(C'\fR, etc. are
physically placed with their upper left corner at physical position
\&\f(CW\*(C`(x1,y1)\*(C'\fR, \f(CW\*(C`(x2,y2)\*(C'\fR,...respectively, and are then drawn together.
Overlapping regions will thus be drawn twice, and the windows are considered
transparent. Then display the whole drawing in a special window on your
screen.
.ie n .SS "ploth""(X = a,b,\f(CIexpr\fP,{\f(CIflag\fP = 0},{n = 0})"""
.el .SS "ploth\f(CW(X = a,b,\fP\f(CIexpr\fP\f(CW,{\fP\f(CIflag\fP\f(CW = 0},{n = 0})\fP"
.IX Xref "ploth"
.IX Subsection "ploth(X = a,b,expr,{flag = 0},{n = 0})"
high precision
plot of the function \f(CW\*(C`y = f(x)\*(C'\fR represented by the expression \fIexpr\fR, \f(CW\*(C`x\*(C'\fR
going from \f(CW\*(C`a\*(C'\fR to \f(CW\*(C`b\*(C'\fR. This opens a specific window (which is killed
whenever you click on it), and returns a four-component vector giving the
coordinates of the bounding box in the form
\&\f(CW\*(C`[\f(CIxmin\f(CW,\f(CIxmax\f(CW,\f(CIymin\f(CW,\f(CIymax\f(CW]\*(C'\fR.
.PP
\&\fBImportant note\fR: Since this may involve a lot of function calls,
it is advised to keep the current precision to a minimum (e.g. 9) before
calling this function.
.PP
\&\f(CW\*(C`n\*(C'\fR specifies the number of reference point on the graph (0 means use the
hardwired default values, that is: 1000 for general plot, 1500 for
parametric plot, and 15 for recursive plot).
.PP
If no \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR is given, \fIexpr\fR is either a scalar expression \f(CWf(X)\fR, in which
case the plane curve \f(CW\*(C`y = f(X)\*(C'\fR will be drawn, or a vector
\&\f(CW\*(C`[f_1(X),...,f_k(X)]\*(C'\fR, and then all the curves \f(CW\*(C`y = f_i(X)\*(C'\fR will be drawn in
the same window.
.PP
The binary digits of \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR mean:
.PP
\&\eitem \f(CW\*(C`1 = Parametric\*(C'\fR: \fIparametric plot\fR. Here \fIexpr\fR must
be a vector with an even number of components. Successive pairs are then
understood as the parametric coordinates of a plane curve. Each of these are
then drawn.
.IX Xref "parametric plot"
.PP
For instance:
.PP
\&\f(CW\*(C`ploth(X = 0,2*Pi,[sin(X),cos(X)],1)\*(C'\fR will draw a circle.
.PP
\&\f(CW\*(C`ploth(X = 0,2*Pi,[sin(X),cos(X)])\*(C'\fR will draw two entwined sinusoidal
curves.
.PP
\&\f(CW\*(C`ploth(X = 0,2*Pi,[X,X,sin(X),cos(X)],1)\*(C'\fR will draw a circle and the line
\&\f(CW\*(C`y = x\*(C'\fR.
.PP
\&\eitem \f(CW\*(C`2 = Recursive\*(C'\fR: \fIrecursive plot\fR. If this flag is set,
only \eemph{one} curve can be drawn at a time, i.e. \fIexpr\fR must be either a
two-component vector (for a single parametric curve, and the parametric flag
\&\eemph{has} to be set), or a scalar function. The idea is to choose pairs of
successive reference points, and if their middle point is not too far away
from the segment joining them, draw this as a local approximation to the
curve. Otherwise, add the middle point to the reference points. This is
fast, and usually more precise than usual plot. Compare the results of
.IX Xref "recursive plot"
.PP
  \f(CW\*(C`ploth(X = \-1,1,sin(1/X),2)  and  ploth(X = \-1,1,sin(1/X))\*(C'\fR
.PP
for instance. But beware that if you are extremely unlucky, or choose too few
reference points, you may draw some nice polygon bearing little resemblance
to the original curve. For instance you should \eemph{never} plot recursively
an odd function in a symmetric interval around 0. Try
.PP
.Vb 1
\&    ploth(x = \-20, 20, sin(x), 2)
.Ve
.PP
to see why. Hence, it's usually a good idea to try and plot the same curve
with slightly different parameters.
.PP
The other values toggle various display options:
.PP
\&\eitem \f(CW\*(C`4 = no_Rescale\*(C'\fR: do not rescale plot according to the
computed extrema. This is meant to be used when graphing multiple functions
on a rectwindow (as a \f(CW\*(C`plotrecth\*(C'\fR call), in conjunction with
\&\f(CW\*(C`plotscale\*(C'\fR.
.IX Xref "plotrecth plotscale"
.PP
\&\eitem \f(CW\*(C`8 = no_X_axis\*(C'\fR: do not print the \f(CW\*(C`x\*(C'\fR\-axis.
.PP
\&\eitem \f(CW\*(C`16 = no_Y_axis\*(C'\fR: do not print the \f(CW\*(C`y\*(C'\fR\-axis.
.PP
\&\eitem \f(CW\*(C`32 = no_Frame\*(C'\fR: do not print frame.
.PP
\&\eitem \f(CW\*(C`64 = no_Lines\*(C'\fR: only plot reference points, do not join them.
.PP
\&\eitem \f(CW\*(C`128 = Points_too\*(C'\fR: plot both lines and points.
.PP
\&\eitem \f(CW\*(C`256 = Splines\*(C'\fR: use splines to interpolate the points.
.PP
\&\eitem \f(CW\*(C`512 = no_X_ticks\*(C'\fR: plot no \f(CW\*(C`x\*(C'\fR\-ticks.
.PP
\&\eitem \f(CW\*(C`1024 = no_Y_ticks\*(C'\fR: plot no \f(CW\*(C`y\*(C'\fR\-ticks.
.PP
\&\eitem \f(CW\*(C`2048 = Same_ticks\*(C'\fR: plot all ticks with the same length.
.ie n .SS "plothraw""(\f(CIlistx\fP,\f(CIlisty\fP,{\f(CIflag\fP = 0})"""
.el .SS "plothraw\f(CW(\fP\f(CIlistx\fP\f(CW,\fP\f(CIlisty\fP\f(CW,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "plothraw"
.IX Subsection "plothraw(listx,listy,{flag = 0})"
given
\&\fIlistx\fR and \fIlisty\fR two vectors of equal length, plots (in high
precision) the points whose \f(CW\*(C`(x,y)\*(C'\fR\-coordinates are given in \fIlistx\fR
and \fIlisty\fR. Automatic positioning and scaling is done, but with the
same scaling factor on \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR. If \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR is 1, join points, other non\-0
flags toggle display options and should be combinations of bits \f(CW\*(C`2^k\*(C'\fR, \f(CW\*(C`k
 >= 3\*(C'\fR as in \f(CW\*(C`ploth\*(C'\fR.
.ie n .SS "plothsizes""()"""
.el .SS "plothsizes\f(CW()\fP"
.IX Xref "plothsizes"
.IX Subsection "plothsizes()"
return data corresponding to the output window
in the form of a 6\-component vector: window width and height, sizes for ticks
in horizontal and vertical directions (this is intended for the \f(CW\*(C`gnuplot\*(C'\fR
interface and is currently not significant), width and height of characters.
.ie n .SS "plotinit""(w,x,y,{\f(CIflag\fP})"""
.el .SS "plotinit\f(CW(w,x,y,{\fP\f(CIflag\fP\f(CW})\fP"
.IX Xref "plotinit"
.IX Subsection "plotinit(w,x,y,{flag})"
initialize the rectwindow \f(CW\*(C`w\*(C'\fR,
destroying any rect objects you may have already drawn in \f(CW\*(C`w\*(C'\fR. The virtual
cursor is set to \f(CW\*(C`(0,0)\*(C'\fR. The rectwindow size is set to width \f(CW\*(C`x\*(C'\fR and height
\&\f(CW\*(C`y\*(C'\fR. If \f(CW\*(C`\f(CIflag\f(CW = 0\*(C'\fR, \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR represent pixel units. Otherwise, \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR
are understood as fractions of the size of the current output device (hence
must be between \f(CW0\fR and \f(CW1\fR) and internally converted to pixels.
.PP
The plotting device imposes an upper bound for \f(CW\*(C`x\*(C'\fR and \f(CW\*(C`y\*(C'\fR, for instance the
number of pixels for screen output. These bounds are available through the
\&\f(CW\*(C`plothsizes\*(C'\fR function. The following sequence initializes in a portable
way (i.e independent of the output device) a window of maximal size, accessed
through coordinates in the \f(CW\*(C`[0,1000]  x [0,1000]\*(C'\fR range:
.IX Xref "plothsizes"
.PP
.Vb 3
\&  s = plothsizes();
\&  plotinit(0, s[1]\-1, s[2]\-1);
\&  plotscale(0, 0,1000, 0,1000);
.Ve
.ie n .SS "plotkill""(w)"""
.el .SS "plotkill\f(CW(w)\fP"
.IX Xref "plotkill"
.IX Subsection "plotkill(w)"
erase rectwindow \f(CW\*(C`w\*(C'\fR and free the corresponding
memory. Note that if you want to use the rectwindow \f(CW\*(C`w\*(C'\fR again, you have to
use \f(CW\*(C`plotinit\*(C'\fR first to specify the new size. So it's better in this case
to use \f(CW\*(C`plotinit\*(C'\fR directly as this throws away any previous work in the
given rectwindow.
.ie n .SS "plotlines""(w,X,Y,{\f(CIflag\fP = 0})"""
.el .SS "plotlines\f(CW(w,X,Y,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "plotlines"
.IX Subsection "plotlines(w,X,Y,{flag = 0})"
draw on the rectwindow \f(CW\*(C`w\*(C'\fR
the polygon such that the (x,y)\-coordinates of the vertices are in the
vectors of equal length \f(CW\*(C`X\*(C'\fR and \f(CW\*(C`Y\*(C'\fR. For simplicity, the whole
polygon is drawn, not only the part of the polygon which is inside the
rectwindow. If \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR is non-zero, close the polygon. In any case, the
virtual cursor does not move.
.PP
\&\f(CW\*(C`X\*(C'\fR and \f(CW\*(C`Y\*(C'\fR are allowed to be scalars (in this case, both have to).
There, a single segment will be drawn, between the virtual cursor current
position and the point \f(CW\*(C`(X,Y)\*(C'\fR. And only the part thereof which
actually lies within the boundary of \f(CW\*(C`w\*(C'\fR. Then \eemph{move} the virtual cursor
to \f(CW\*(C`(X,Y)\*(C'\fR, even if it is outside the window. If you want to draw a
line from \f(CW\*(C`(x1,y1)\*(C'\fR to \f(CW\*(C`(x2,y2)\*(C'\fR where \f(CW\*(C`(x1,y1)\*(C'\fR is not necessarily the
position of the virtual cursor, use \f(CW\*(C`plotmove(w,x1,y1)\*(C'\fR before using this
function.
.ie n .SS "plotlinetype""(w,\f(CItype\fP)"""
.el .SS "plotlinetype\f(CW(w,\fP\f(CItype\fP\f(CW)\fP"
.IX Xref "plotlinetype"
.IX Subsection "plotlinetype(w,type)"
change the type of lines
subsequently plotted in rectwindow \f(CW\*(C`w\*(C'\fR. \fItype\fR \f(CW\*(C`\-2\*(C'\fR corresponds to
frames, \f(CW\*(C`\-1\*(C'\fR to axes, larger values may correspond to something else. \f(CW\*(C`w = 
\&\-1\*(C'\fR changes highlevel plotting. This is only taken into account by the
\&\f(CW\*(C`gnuplot\*(C'\fR interface.
.ie n .SS "plotmove""(w,x,y)"""
.el .SS "plotmove\f(CW(w,x,y)\fP"
.IX Xref "plotmove"
.IX Subsection "plotmove(w,x,y)"
move the virtual cursor of the rectwindow \f(CW\*(C`w\*(C'\fR
to position \f(CW\*(C`(x,y)\*(C'\fR.
.ie n .SS "plotpoints""(w,X,Y)"""
.el .SS "plotpoints\f(CW(w,X,Y)\fP"
.IX Xref "plotpoints"
.IX Subsection "plotpoints(w,X,Y)"
draw on the rectwindow \f(CW\*(C`w\*(C'\fR the
points whose \f(CW\*(C`(x,y)\*(C'\fR\-coordinates are in the vectors of equal length \f(CW\*(C`X\*(C'\fR and
\&\f(CW\*(C`Y\*(C'\fR and which are inside \f(CW\*(C`w\*(C'\fR. The virtual cursor does \eemph{not} move. This
is basically the same function as \f(CW\*(C`plothraw\*(C'\fR, but either with no scaling
factor or with a scale chosen using the function \f(CW\*(C`plotscale\*(C'\fR.
.PP
As was the case with the \f(CW\*(C`plotlines\*(C'\fR function, \f(CW\*(C`X\*(C'\fR and \f(CW\*(C`Y\*(C'\fR are allowed to
be (simultaneously) scalar. In this case, draw the single point \f(CW\*(C`(X,Y)\*(C'\fR on
the rectwindow \f(CW\*(C`w\*(C'\fR (if it is actually inside \f(CW\*(C`w\*(C'\fR), and in any case
\&\eemph{move} the virtual cursor to position \f(CW\*(C`(x,y)\*(C'\fR.
.ie n .SS "plotpointsize""(w,size)"""
.el .SS "plotpointsize\f(CW(w,size)\fP"
.IX Xref "plotpointsize"
.IX Subsection "plotpointsize(w,size)"
changes the ``size'' of following
points in rectwindow \f(CW\*(C`w\*(C'\fR. If \f(CW\*(C`w = \-1\*(C'\fR, change it in all rectwindows.
This only works in the \f(CW\*(C`gnuplot\*(C'\fR interface.
.ie n .SS "plotpointtype""(w,\f(CItype\fP)"""
.el .SS "plotpointtype\f(CW(w,\fP\f(CItype\fP\f(CW)\fP"
.IX Xref "plotpointtype"
.IX Subsection "plotpointtype(w,type)"
change the type of
points subsequently plotted in rectwindow \f(CW\*(C`w\*(C'\fR. \f(CW\*(C`\f(CItype\f(CW = \-1\*(C'\fR
corresponds to a dot, larger values may correspond to something else. \f(CW\*(C`w = \-1\*(C'\fR
changes highlevel plotting. This is only taken into account by the
\&\f(CW\*(C`gnuplot\*(C'\fR interface.
.ie n .SS "plotrbox""(w,dx,dy)"""
.el .SS "plotrbox\f(CW(w,dx,dy)\fP"
.IX Xref "plotrbox"
.IX Subsection "plotrbox(w,dx,dy)"
draw in the rectwindow \f(CW\*(C`w\*(C'\fR the outline of
the rectangle which is such that the points \f(CW\*(C`(x1,y1)\*(C'\fR and \f(CW\*(C`(x1+dx,y1+dy)\*(C'\fR are
opposite corners, where \f(CW\*(C`(x1,y1)\*(C'\fR is the current position of the cursor.
Only the part of the rectangle which is in \f(CW\*(C`w\*(C'\fR is drawn. The virtual cursor
does \eemph{not} move.
.ie n .SS "plotrecth""(w,X = a,b,\f(CIexpr\fP,{\f(CIflag\fP = 0},{n = 0})"""
.el .SS "plotrecth\f(CW(w,X = a,b,\fP\f(CIexpr\fP\f(CW,{\fP\f(CIflag\fP\f(CW = 0},{n = 0})\fP"
.IX Xref "plotrecth"
.IX Subsection "plotrecth(w,X = a,b,expr,{flag = 0},{n = 0})"
writes to
rectwindow \f(CW\*(C`w\*(C'\fR the curve output of \f(CW\*(C`ploth\*(C'\fR\f(CW\*(C`(w,X = a,b,\f(CIexpr\f(CW,\f(CIflag\f(CW,n)\*(C'\fR.
.ie n .SS "plotrecthraw""(w,\f(CIdata\fP,{\f(CIflag\fP = 0})"""
.el .SS "plotrecthraw\f(CW(w,\fP\f(CIdata\fP\f(CW,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "plotrecthraw"
.IX Subsection "plotrecthraw(w,data,{flag = 0})"
plot graph(s) for
\&\fIdata\fR in rectwindow \f(CW\*(C`w\*(C'\fR. \f(CW\*(C`\f(CIflag\f(CW\*(C'\fR has the same significance here as in
\&\f(CW\*(C`ploth\*(C'\fR, though recursive plot is no more significant.
.PP
\&\fIdata\fR is a vector of vectors, each corresponding to a list a coordinates.
If parametric plot is set, there must be an even number of vectors, each
successive pair corresponding to a curve. Otherwise, the first one contains
the \f(CW\*(C`x\*(C'\fR coordinates, and the other ones contain the \f(CW\*(C`y\*(C'\fR\-coordinates
of curves to plot.
.ie n .SS "plotrline""(w,dx,dy)"""
.el .SS "plotrline\f(CW(w,dx,dy)\fP"
.IX Xref "plotrline"
.IX Subsection "plotrline(w,dx,dy)"
draw in the rectwindow \f(CW\*(C`w\*(C'\fR the part of the
segment \f(CW\*(C`(x1,y1)\-(x1+dx,y1+dy)\*(C'\fR which is inside \f(CW\*(C`w\*(C'\fR, where \f(CW\*(C`(x1,y1)\*(C'\fR is the
current position of the virtual cursor, and move the virtual cursor to
\&\f(CW\*(C`(x1+dx,y1+dy)\*(C'\fR (even if it is outside the window).
.ie n .SS "plotrmove""(w,dx,dy)"""
.el .SS "plotrmove\f(CW(w,dx,dy)\fP"
.IX Xref "plotrmove"
.IX Subsection "plotrmove(w,dx,dy)"
move the virtual cursor of the rectwindow
\&\f(CW\*(C`w\*(C'\fR to position \f(CW\*(C`(x1+dx,y1+dy)\*(C'\fR, where \f(CW\*(C`(x1,y1)\*(C'\fR is the initial position of
the cursor (i.e. to position \f(CW\*(C`(dx,dy)\*(C'\fR relative to the initial cursor).
.ie n .SS "plotrpoint""(w,dx,dy)"""
.el .SS "plotrpoint\f(CW(w,dx,dy)\fP"
.IX Xref "plotrpoint"
.IX Subsection "plotrpoint(w,dx,dy)"
draw the point \f(CW\*(C`(x1+dx,y1+dy)\*(C'\fR on the
rectwindow \f(CW\*(C`w\*(C'\fR (if it is inside \f(CW\*(C`w\*(C'\fR), where \f(CW\*(C`(x1,y1)\*(C'\fR is the current position
of the cursor, and in any case move the virtual cursor to position
\&\f(CW\*(C`(x1+dx,y1+dy)\*(C'\fR.
.ie n .SS "plotscale""(w,x1,x2,y1,y2)"""
.el .SS "plotscale\f(CW(w,x1,x2,y1,y2)\fP"
.IX Xref "plotscale"
.IX Subsection "plotscale(w,x1,x2,y1,y2)"
scale the local coordinates of the
rectwindow \f(CW\*(C`w\*(C'\fR so that \f(CW\*(C`x\*(C'\fR goes from \f(CW\*(C`x1\*(C'\fR to \f(CW\*(C`x2\*(C'\fR and \f(CW\*(C`y\*(C'\fR goes from \f(CW\*(C`y1\*(C'\fR to
\&\f(CW\*(C`y2\*(C'\fR (\f(CW\*(C`x2 < x1\*(C'\fR and \f(CW\*(C`y2 < y1\*(C'\fR being allowed). Initially, after the initialization
of the rectwindow \f(CW\*(C`w\*(C'\fR using the function \f(CW\*(C`plotinit\*(C'\fR, the default scaling
is the graphic pixel count, and in particular the \f(CW\*(C`y\*(C'\fR axis is oriented
downwards since the origin is at the upper left. The function \f(CW\*(C`plotscale\*(C'\fR
allows to change all these defaults and should be used whenever functions are
graphed.
.ie n .SS "plotstring""(w,x,{\f(CIflag\fP = 0})"""
.el .SS "plotstring\f(CW(w,x,{\fP\f(CIflag\fP\f(CW = 0})\fP"
.IX Xref "plotstring"
.IX Subsection "plotstring(w,x,{flag = 0})"
draw on the rectwindow \f(CW\*(C`w\*(C'\fR the
String \f(CW\*(C`x\*(C'\fR (see \*(L"Label se:strings\*(R"), at the current position of the cursor.
.PP
\&\fIflag\fR is used for justification: bits 1 and 2 regulate horizontal alignment:
left if 0, right if 2, center if 1. Bits 4 and 8 regulate vertical
alignment: bottom if 0, top if 8, v\-center if 4. Can insert additional
small gap between point and string: horizontal if bit 16 is set, vertical
if bit 32 is set (see the tutorial for an example).
.ie n .SS "psdraw""(\f(CIlist\fP)"""
.el .SS "psdraw\f(CW(\fP\f(CIlist\fP\f(CW)\fP"
.IX Xref "psdraw"
.IX Subsection "psdraw(list)"
same as \f(CW\*(C`plotdraw\*(C'\fR, except that the
output is a PostScript program appended to the \f(CW\*(C`psfile\*(C'\fR.
.ie n .SS "psploth""(X = a,b,\f(CIexpr\fP)"""
.el .SS "psploth\f(CW(X = a,b,\fP\f(CIexpr\fP\f(CW)\fP"
.IX Xref "psploth"
.IX Subsection "psploth(X = a,b,expr)"
same as \f(CW\*(C`ploth\*(C'\fR, except that the
output is a PostScript program appended to the \f(CW\*(C`psfile\*(C'\fR.
.ie n .SS "psplothraw""(\f(CIlistx\fP,\f(CIlisty\fP)"""
.el .SS "psplothraw\f(CW(\fP\f(CIlistx\fP\f(CW,\fP\f(CIlisty\fP\f(CW)\fP"
.IX Xref "psplothraw"
.IX Subsection "psplothraw(listx,listy)"
same as \f(CW\*(C`plothraw\*(C'\fR,
except that the output is a PostScript program appended to the \f(CW\*(C`psfile\*(C'\fR.
.SH "Programming in GP"
.IX Header "Programming in GP"

=head2 Control statements.
.IX Xref "programming Label se:programming"
.PP
A number of control statements are available in \s-1GP.\s0 They are simpler and
have a syntax slightly different from their C counterparts, but are quite
powerful enough to write any kind of program. Some of them are specific to
\&\s-1GP,\s0 since they are made for number theorists. As usual, \f(CW\*(C`X\*(C'\fR will denote any
simple variable name, and \fIseq\fR will always denote a sequence of
expressions, including the empty sequence.
.PP
\&\fBCaveat:\fR in constructs like
.PP
.Vb 1
\&      for (X = a,b, seq)
.Ve
.PP
the variable \f(CW\*(C`X\*(C'\fR is considered local to the loop, leading to possibly
unexpected behaviour:
.PP
.Vb 5
\&      n = 5;
\&      for (n = 1, 10,
\&        if (something_nice(), break);
\&      );
\&      \e\e  at this point n is 5 !
.Ve
.PP
If the sequence \f(CW\*(C`seq\*(C'\fR modifies the loop index, then the loop
is modified accordingly:
.PP
.Vb 5
\&      ? for (n = 1, 10, n += 2; print(n))
\&      3
\&      6
\&      9
\&      12
.Ve
.ie n .IP "break""({n = 1})""" 4
.el .IP "break\f(CW({n = 1})\fR" 4
.IX Xref "break"
.IX Item "break({n = 1})"
interrupts execution of current \fIseq\fR, and
immediately exits from the \f(CW\*(C`n\*(C'\fR innermost enclosing loops, within the
current function call (or the top level loop). \f(CW\*(C`n\*(C'\fR must be bigger than 1.
If \f(CW\*(C`n\*(C'\fR is greater than the number of enclosing loops, all enclosing loops
are exited.
.ie n .IP "for""(X = a,b,\fIseq\fP)""" 4
.el .IP "for\f(CW(X = a,b,\f(CIseq\f(CW)\fR" 4
.IX Xref "for"
.IX Item "for(X = a,b,seq)"
evaluates \fIseq\fR, where 
the formal variable \f(CW\*(C`X\*(C'\fR goes from \f(CW\*(C`a\*(C'\fR to \f(CW\*(C`b\*(C'\fR. Nothing is done if \f(CW\*(C`a > b\*(C'\fR.
\&\f(CW\*(C`a\*(C'\fR and \f(CW\*(C`b\*(C'\fR must be in \fB\f(BIR\fB\fR.
.ie n .IP "fordiv""(n,X,\fIseq\fP)""" 4
.el .IP "fordiv\f(CW(n,X,\f(CIseq\f(CW)\fR" 4
.IX Xref "fordiv"
.IX Item "fordiv(n,X,seq)"
evaluates \fIseq\fR, where
the formal variable \f(CW\*(C`X\*(C'\fR ranges through the divisors of \f(CW\*(C`n\*(C'\fR
(see \f(CW\*(C`divisors\*(C'\fR, which is used as a subroutine). It is assumed that
\&\f(CW\*(C`factor\*(C'\fR can handle \f(CW\*(C`n\*(C'\fR, without negative exponents. Instead of \f(CW\*(C`n\*(C'\fR,
it is possible to input a factorization matrix, i.e. the output of
\&\f(CWfactor(n)\fR.
.IX Xref "divisors"
.Sp
This routine uses \f(CW\*(C`divisors\*(C'\fR as a subroutine, then loops over the
divisors. In particular, if \f(CW\*(C`n\*(C'\fR is an integer, divisors are sorted by
increasing size.
.Sp
To avoid storing all divisors, possibly using a lot of memory, the following
(much slower) routine loops over the divisors using essentially constant
space:
.Sp
.Vb 2
\&      FORDIV(N)=
\&      { local(P, E);
\&
\&        P = factor(N); E = P[,2]; P = P[,1]; 
\&        forvec( v = vector(#E, i, [0,E[i]]),
\&          X = factorback(P, v)
\&          \e\e ...
\&        );
\&      }
\&      ? for(i=1,10^5, FORDIV(i))
\&      time = 3,445 ms.
\&      ? for(i=1,10^5, fordiv(i, d, ))
\&      time = 490 ms.
.Ve
.ie n .IP "forell""(E,a,b,\fIseq\fP)""" 4
.el .IP "forell\f(CW(E,a,b,\f(CIseq\f(CW)\fR" 4
.IX Xref "forell"
.IX Item "forell(E,a,b,seq)"
evaluates \fIseq\fR, where 
the formal variable \f(CW\*(C`E\*(C'\fR ranges through all elliptic curves of conductors from
\&\f(CW\*(C`a\*(C'\fR to \f(CW\*(C`b\*(C'\fR. Th \f(CW\*(C`elldata\*(C'\fR database must be installed and contain data for
the specified conductors.
.IX Xref "elldata"
.ie n .IP "forprime""(X = a,b,\fIseq\fP)""" 4
.el .IP "forprime\f(CW(X = a,b,\f(CIseq\f(CW)\fR" 4
.IX Xref "forprime"
.IX Item "forprime(X = a,b,seq)"
evaluates \fIseq\fR,
where the formal variable \f(CW\*(C`X\*(C'\fR ranges over the prime numbers between \f(CW\*(C`a\*(C'\fR to
\&\f(CW\*(C`b\*(C'\fR (including \f(CW\*(C`a\*(C'\fR and \f(CW\*(C`b\*(C'\fR if they are prime). More precisely, the value of
\&\f(CW\*(C`X\*(C'\fR is incremented to the smallest prime strictly larger than \f(CW\*(C`X\*(C'\fR at the end
of each iteration. Nothing is done if \f(CW\*(C`a > b\*(C'\fR. Note that \f(CW\*(C`a\*(C'\fR and \f(CW\*(C`b\*(C'\fR must be in
\&\fB\f(BIR\fB\fR.
.Sp
.Vb 9
\&  ? { forprime(p = 2, 12,
\&        print(p);
\&        if (p == 3, p = 6);
\&      )
\&    }
\&  2
\&  3
\&  7
\&  11
.Ve
.ie n .IP "forstep""(X = a,b,s,\fIseq\fP)""" 4
.el .IP "forstep\f(CW(X = a,b,s,\f(CIseq\f(CW)\fR" 4
.IX Xref "forstep"
.IX Item "forstep(X = a,b,s,seq)"
evaluates \fIseq\fR,
where the formal variable \f(CW\*(C`X\*(C'\fR goes from \f(CW\*(C`a\*(C'\fR to \f(CW\*(C`b\*(C'\fR, in increments of \f(CW\*(C`s\*(C'\fR.
Nothing is done if \f(CW\*(C`s > 0\*(C'\fR and \f(CW\*(C`a > b\*(C'\fR or if \f(CW\*(C`s < 0\*(C'\fR and \f(CW\*(C`a < b\*(C'\fR. \f(CW\*(C`s\*(C'\fR must be in
\&\f(CW\*(C`\f(CB\f(CBR\f(CB\f(CW^*\*(C'\fR or a vector of steps \f(CW\*(C`[s_1,...,s_n]\*(C'\fR. In the latter case, the
successive steps are used in the order they appear in \f(CW\*(C`s\*(C'\fR.
.Sp
.Vb 7
\&  ? forstep(x=5, 20, [2,4], print(x))
\&  5
\&  7
\&  11
\&  13
\&  17
\&  19
.Ve
.ie n .IP "forsubgroup""(H = G,{B},\fIseq\fP)""" 4
.el .IP "forsubgroup\f(CW(H = G,{B},\f(CIseq\f(CW)\fR" 4
.IX Xref "forsubgroup"
.IX Item "forsubgroup(H = G,{B},seq)"
evaluates \fIseq\fR for
each subgroup \f(CW\*(C`H\*(C'\fR of the \eemph{abelian} group \f(CW\*(C`G\*(C'\fR (given in
\&\s-1SNF\s0 form or as a vector of elementary divisors),
whose index is bounded by \f(CW\*(C`B\*(C'\fR. The subgroups are not ordered in any
obvious way, unless \f(CW\*(C`G\*(C'\fR is a \f(CW\*(C`p\*(C'\fR\-group in which case Birkhoff's algorithm
produces them by decreasing index. A subgroup is given as a matrix
whose columns give its generators on the implicit generators of \f(CW\*(C`G\*(C'\fR. For
example, the following prints all subgroups of index less than 2 in \f(CW\*(C`G = 
\&\f(CB\f(CBZ\f(CB\f(CW/2\f(CB\f(CBZ\f(CB\f(CW g_1  x \f(CB\f(CBZ\f(CB\f(CW/2\f(CB\f(CBZ\f(CB\f(CW g_2\*(C'\fR:
.IX Xref "Smith normal form subgroup"
.Sp
.Vb 5
\&  ? G = [2,2]; forsubgroup(H=G, 2, print(H))
\&  [1; 1]
\&  [1; 2]
\&  [2; 1]
\&  [1, 0; 1, 1]
.Ve
.Sp
The last one, for instance is generated by \f(CW\*(C`(g_1, g_1 + g_2)\*(C'\fR. This
routine is intended to treat huge groups, when \f(CW\*(C`subgrouplist\*(C'\fR is not an
option due to the sheer size of the output.
.IX Xref "subgrouplist"
.Sp
For maximal speed the subgroups have been left as produced by the algorithm.
To print them in canonical form (as left divisors of \f(CW\*(C`G\*(C'\fR in \s-1HNF\s0 form), one
can for instance use
.Sp
.Vb 5
\&  ? G = matdiagonal([2,2]); forsubgroup(H=G, 2, print(mathnf(concat(G,H))))
\&  [2, 1; 0, 1]
\&  [1, 0; 0, 2]
\&  [2, 0; 0, 1]
\&  [1, 0; 0, 1]
.Ve
.Sp
Note that in this last representation, the index \f(CW\*(C`[G:H]\*(C'\fR is given by the
determinant. See \f(CW\*(C`galoissubcyclo\*(C'\fR and \f(CW\*(C`galoisfixedfield\*(C'\fR for
\&\f(CW\*(C`nfsubfields\*(C'\fR applications to Galois theory.
.IX Xref "galoissubcyclo galoisfixedfield nfsubfields Galois"
.Sp
\&\fBWarning:\fR the present implementation cannot treat a group \f(CW\*(C`G\*(C'\fR, if
one of its \f(CW\*(C`p\*(C'\fR\-Sylow subgroups has a cyclic factor with more than \f(CW\*(C`2^{31}\*(C'\fR,
resp. \f(CW\*(C`2^{63}\*(C'\fR elements on a \f(CW32\fR\-bit, resp. \f(CW64\fR\-bit architecture.
.ie n .IP "forvec""(X = v,\fIseq\fP,{\fIflag\fP = 0})""" 4
.el .IP "forvec\f(CW(X = v,\f(CIseq\f(CW,{\f(CIflag\f(CW = 0})\fR" 4
.IX Xref "forvec"
.IX Item "forvec(X = v,seq,{flag = 0})"
Let \f(CW\*(C`v\*(C'\fR be an \f(CW\*(C`n\*(C'\fR\-component
vector (where \f(CW\*(C`n\*(C'\fR is arbitrary) of two-component vectors \f(CW\*(C`[a_i,b_i]\*(C'\fR
for \f(CW\*(C`1 <= i <= n\*(C'\fR. This routine evaluates \fIseq\fR, where the formal
variables \f(CW\*(C`X[1],..., X[n]\*(C'\fR go from \f(CW\*(C`a_1\*(C'\fR to \f(CW\*(C`b_1\*(C'\fR,..., from \f(CW\*(C`a_n\*(C'\fR to
\&\f(CW\*(C`b_n\*(C'\fR, i.e. \f(CW\*(C`X\*(C'\fR goes from \f(CW\*(C`[a_1,...,a_n]\*(C'\fR to \f(CW\*(C`[b_1,...,b_n]\*(C'\fR with respect
to the lexicographic ordering. (The formal variable with the highest index
moves the fastest.) If \f(CW\*(C`\f(CIflag\f(CW = 1\*(C'\fR, generate only nondecreasing vectors \f(CW\*(C`X\*(C'\fR, and
if \f(CW\*(C`\f(CIflag\f(CW = 2\*(C'\fR, generate only strictly increasing vectors \f(CW\*(C`X\*(C'\fR.
.ie n .IP "if""(a,{\fIseq1\fP},{\fIseq2\fP})""" 4
.el .IP "if\f(CW(a,{\f(CIseq1\f(CW},{\f(CIseq2\f(CW})\fR" 4
.IX Xref "if"
.IX Item "if(a,{seq1},{seq2})"
evaluates the expression sequence \fIseq1\fR if \f(CW\*(C`a\*(C'\fR is non-zero, otherwise
the expression \fIseq2\fR. Of course, \fIseq1\fR or \fIseq2\fR may be empty:
.Sp
\&\f(CW\*(C`if (a,\f(CIseq\f(CW)\*(C'\fR evaluates \fIseq\fR if \f(CW\*(C`a\*(C'\fR is not equal to zero
(you don't have to write the second comma), and does nothing otherwise,
.Sp
\&\f(CW\*(C`if (a,,\f(CIseq\f(CW)\*(C'\fR evaluates \fIseq\fR if \f(CW\*(C`a\*(C'\fR is equal to zero, and
does nothing otherwise. You could get the same result using the \f(CW\*(C`!\*(C'\fR
(\f(CW\*(C`not\*(C'\fR) operator: \f(CW\*(C`if (!a,\f(CIseq\f(CW)\*(C'\fR.
.Sp
Note that the boolean operators \f(CW\*(C`&&\*(C'\fR and \f(CW\*(C`||\*(C'\fR are evaluated
according to operator precedence as explained in \*(L"Label se:operators\*(R", but
that, contrary to other operators, the evaluation of the arguments is stopped
as soon as the final truth value has been determined. For instance
.Sp
.Vb 1
\&      if (reallydoit && longcomplicatedfunction(), ...)%
.Ve
.Sp
is a perfectly safe statement.
.Sp
Recall that functions such as \f(CW\*(C`break\*(C'\fR and \f(CW\*(C`next\*(C'\fR operate on
\&\eemph{loops} (such as \f(CW\*(C`forxxx\*(C'\fR, \f(CW\*(C`while\*(C'\fR, \f(CW\*(C`until\*(C'\fR). The \f(CW\*(C`if\*(C'\fR
statement is \eemph{not} a loop (obviously!).
.ie n .IP "next""({n = 1})""" 4
.el .IP "next\f(CW({n = 1})\fR" 4
.IX Xref "next"
.IX Item "next({n = 1})"
interrupts execution of current \f(CW\*(C`seq\*(C'\fR,
resume the next iteration of the innermost enclosing loop, within the
current function call (or top level loop). If \f(CW\*(C`n\*(C'\fR is specified, resume at
the \f(CW\*(C`n\*(C'\fR\-th enclosing loop. If \f(CW\*(C`n\*(C'\fR is bigger than the number of enclosing
loops, all enclosing loops are exited.
.ie n .IP "return""({x = 0})""" 4
.el .IP "return\f(CW({x = 0})\fR" 4
.IX Xref "return"
.IX Item "return({x = 0})"
returns from current subroutine, with
result \f(CW\*(C`x\*(C'\fR. If \f(CW\*(C`x\*(C'\fR is omitted, return the \f(CW\*(C`(void)\*(C'\fR value (return no
result, like \f(CW\*(C`print\*(C'\fR).
.ie n .IP "until""(a,\fIseq\fP)""" 4
.el .IP "until\f(CW(a,\f(CIseq\f(CW)\fR" 4
.IX Xref "until"
.IX Item "until(a,seq)"
evaluates \fIseq\fR until \f(CW\*(C`a\*(C'\fR is not
equal to 0 (i.e. until \f(CW\*(C`a\*(C'\fR is true). If \f(CW\*(C`a\*(C'\fR is initially not equal to 0,
\&\fIseq\fR is evaluated once (more generally, the condition on \f(CW\*(C`a\*(C'\fR is tested
\&\eemph{after} execution of the \fIseq\fR, not before as in \f(CW\*(C`while\*(C'\fR).
.ie n .IP "while""(a,\fIseq\fP)""" 4
.el .IP "while\f(CW(a,\f(CIseq\f(CW)\fR" 4
.IX Xref "while"
.IX Item "while(a,seq)"
while \f(CW\*(C`a\*(C'\fR is non-zero, evaluates the
expression sequence \fIseq\fR. The test is made \eemph{before} evaluating
the \f(CW\*(C`seq\*(C'\fR, hence in particular if \f(CW\*(C`a\*(C'\fR is initially equal to zero the
\&\fIseq\fR will not be evaluated at all.
.SS "Specific functions used in \s-1GP\s0 programming"
.IX Subsection "Specific functions used in GP programming"

In addition to the general \s-1PARI\s0 functions, it is necessary to have some
functions which will be of use specifically for \f(CW\*(C`gp\*(C'\fR, though a few of these can
be accessed under library mode. Before we start describing these, we recall
the difference between \eemph{strings} and \eemph{keywords} (see
\&\*(L"Label se:strings\*(R"): the latter don't get expanded at all, and you can type
them without any enclosing quotes. The former are dynamic objects, where
everything outside quotes gets immediately expanded.
.IX Xref "Label se:gp_program"
.ie n .IP "addhelp""(S,\fIstr\fP)""" 4
.el .IP "addhelp\f(CW(S,\f(CIstr\f(CW)\fR" 4
.IX Xref "addhelp"
.IX Item "addhelp(S,str)"
 changes the help
message for the symbol \f(CW\*(C`S\*(C'\fR. The string \fIstr\fR is expanded on the spot
and stored as the online help for \f(CW\*(C`S\*(C'\fR. If \f(CW\*(C`S\*(C'\fR is a function \eemph{you} have
defined, its definition will still be printed before the message \fIstr\fR.
It is recommended that you document global variables and user functions in
this way. Of course \f(CW\*(C`gp\*(C'\fR will not protest if you skip this.
.IX Xref "Label se:addhelp"
.Sp
Nothing prevents you from modifying the help of built-in \s-1PARI\s0
functions. (But if you do, we would like to hear why you needed to do it!)
.ie n .IP "alias""(\fInewkey\fP,\fIkey\fP)""" 4
.el .IP "alias\f(CW(\f(CInewkey\f(CW,\f(CIkey\f(CW)\fR" 4
.IX Xref "alias"
.IX Item "alias(newkey,key)"
defines the keyword
\&\fInewkey\fR as an alias for keyword \fIkey\fR. \fIkey\fR must correspond
to an existing \eemph{function} name. This is different from the general user
macros in that alias expansion takes place immediately upon execution,
without having to look up any function code, and is thus much faster. A
sample alias file \f(CW\*(C`misc/gpalias\*(C'\fR is provided with the standard
distribution. Alias commands are meant to be read upon startup from the
\&\f(CW\*(C`.gprc\*(C'\fR file, to cope with function names you are dissatisfied with, and
should be useless in interactive usage.
.ie n .IP "allocatemem""({x = 0})""" 4
.el .IP "allocatemem\f(CW({x = 0})\fR" 4
.IX Xref "allocatemem"
.IX Item "allocatemem({x = 0})"
this is a very special operation which
allows the user to change the stack size \eemph{after} initialization. \f(CW\*(C`x\*(C'\fR
must be a non-negative integer. If \f(CW\*(C`x  ! = 0\*(C'\fR, a new stack of size
\&\f(CW\*(C`16*\eceil{x/16}\*(C'\fR bytes is allocated, all the \s-1PARI\s0 data on the old stack is
moved to the new one, and the old stack is discarded. If \f(CW\*(C`x = 0\*(C'\fR, the size of
the new stack is twice the size of the old one.
.Sp
Although it is a function, \f(CW\*(C`allocatemem\*(C'\fR cannot be used in loop-like
constructs, or as part of a larger expression, e.g \f(CW\*(C`2 + allocatemem()\*(C'\fR.
Such an attempt will raise an error. The technical reason is that this
routine usually moves the stack, so objects from the current expression may
not be correct anymore, e.g. loop indexes.
.Sp
The library syntax is \fBallocatemoremem\fR\f(CW\*(C`(x)\*(C'\fR, where \f(CW\*(C`x\*(C'\fR is an unsigned long, and the return type
is void. \f(CW\*(C`gp\*(C'\fR uses a variant which makes sure it was not called within a
loop.
.IX Xref "allocatemoremem"
.ie n .IP "default""({\fIkey\fP},{\fIval\fP})""" 4
.el .IP "default\f(CW({\f(CIkey\f(CW},{\f(CIval\f(CW})\fR" 4
.IX Xref "default"
.IX Item "default({key},{val})"
returns
the default corresponding to keyword \fIkey\fR. If \fIval\fR is present,
sets the default to \fIval\fR first (which is subject to string expansion
first). Typing \f(CW\*(C`default()\*(C'\fR (or \f(CW\*(C`\ed\*(C'\fR) yields the complete default
list as well as their current values.
See \*(L"Label se:defaults\*(R" for a list of available defaults, and
\&\*(L"Label se:meta\*(R" for some shortcut alternatives. Note that the shortcut
are meant for interactive use and usually display more information than
\&\f(CW\*(C`default\*(C'\fR.
.IX Xref "Label se:default"
.Sp
The library syntax is \fBgp_default\fR\f(CW\*(C`(key, val)\*(C'\fR, where \fIkey\fR and \fIval\fR are
\&\f(CW\*(C`char *\*(C'\fR.
.IX Xref "gp_default"
.ie n .IP "error""({\fIstr\fP}*)""" 4
.el .IP "error\f(CW({\f(CIstr\f(CW}*)\fR" 4
.IX Xref "error"
.IX Item "error({str}*)"
outputs its argument list (each of
them interpreted as a string), then interrupts the running \f(CW\*(C`gp\*(C'\fR program,
returning to the input prompt. For instance
.Sp
.Vb 1
\&  error("n = ", n, " is not squarefree !")
.Ve
.ie n .IP "extern""(\fIstr\fP)""" 4
.el .IP "extern\f(CW(\f(CIstr\f(CW)\fR" 4
.IX Xref "extern"
.IX Item "extern(str)"
the string \fIstr\fR is the name
of an external command (i.e. one you would type from your \s-1UNIX\s0 shell prompt).
This command is immediately run and its input fed into \f(CW\*(C`gp\*(C'\fR, just as if read
from a file.
.Sp
The library syntax is \fBextern0\fR\f(CW\*(C`(str)\*(C'\fR, where \fIstr\fR is a \f(CW\*(C`char *\*(C'\fR.
.IX Xref "extern0"
.ie n .IP "getheap""()""" 4
.el .IP "getheap\f(CW()\fR" 4
.IX Xref "getheap"
.IX Item "getheap()"
returns a two-component row vector giving the
number of objects on the heap and the amount of memory they occupy in long
words. Useful mainly for debugging purposes.
.Sp
The library syntax is \fBgetheap\fR\f(CW\*(C`()\*(C'\fR.
.IX Xref "getheap"
.ie n .IP "getrand""()""" 4
.el .IP "getrand\f(CW()\fR" 4
.IX Xref "getrand"
.IX Item "getrand()"
returns the current value of the random number
seed. Useful mainly for debugging purposes.
.Sp
The library syntax is \fBgetrand\fR\f(CW\*(C`()\*(C'\fR, returns a C long.
.IX Xref "getrand"
.ie n .IP "getstack""()""" 4
.el .IP "getstack\f(CW()\fR" 4
.IX Xref "getstack"
.IX Item "getstack()"
returns the current value of
\&\f(CW\*(C`top\-avma\*(C'\fR, i.e. the number of bytes used up to now on the stack.
Should be equal to \f(CW0\fR in between commands. Useful mainly for debugging
purposes.
.Sp
The library syntax is \fBgetstack\fR\f(CW\*(C`()\*(C'\fR, returns a C long.
.IX Xref "getstack"
.ie n .IP "gettime""()""" 4
.el .IP "gettime\f(CW()\fR" 4
.IX Xref "gettime"
.IX Item "gettime()"
returns the time (in milliseconds) elapsed since
either the last call to \f(CW\*(C`gettime\*(C'\fR, or to the beginning of the containing
\&\s-1GP\s0 instruction (if inside \f(CW\*(C`gp\*(C'\fR), whichever came last.
.Sp
The library syntax is \fBgettime\fR\f(CW\*(C`()\*(C'\fR, returns a C long.
.IX Xref "gettime"
.ie n .IP "global""(\fIlist of variables\fP)""" 4
.el .IP "global\f(CW(\f(CIlist of variables\f(CW)\fR" 4
.IX Xref "global"
.IX Item "global(list of variables)"

declares the corresponding variables to be global. From now on, you will be
forbidden to use them as formal parameters for function definitions or as
loop indexes. This is especially useful when patching together various
scripts, possibly written with different naming conventions. For instance the
following situation is dangerous:
.IX Xref "Label se:global"
.Sp
.Vb 4
\&  p = 3   \e\e fix characteristic
\&  ...
\&  forprime(p = 2, N, ...)
\&  f(p) = ...
.Ve
.Sp
since within the loop or within the function's body (even worse: in the
subroutines called in that scope), the true global value of \f(CW\*(C`p\*(C'\fR will be
hidden. If the statement \f(CW\*(C`global(p = 3)\*(C'\fR appears at the beginning of
the script, then both expressions will trigger syntax errors.
.Sp
Calling \f(CW\*(C`global\*(C'\fR without arguments prints the list of global variables in
use. In particular, \f(CW\*(C`eval(global)\*(C'\fR will output the values of all global
variables.
.ie n .IP "input""()""" 4
.el .IP "input\f(CW()\fR" 4
.IX Xref "input"
.IX Item "input()"
reads a string, interpreted as a \s-1GP\s0 expression,
from the input file, usually standard input (i.e. the keyboard). If a
sequence of expressions is given, the result is the result of the last
expression of the sequence. When using this instruction, it is useful to
prompt for the string by using the \f(CW\*(C`print1\*(C'\fR function. Note that in the
present version 2.19 of \f(CW\*(C`pari.el\*(C'\fR, when using \f(CW\*(C`gp\*(C'\fR under \s-1GNU\s0 Emacs (see
\&\*(L"Label se:emacs\*(R") one \eemph{must} prompt for the string, with a string
which ends with the same prompt as any of the previous ones (a \f(CW"? "\fR
will do for instance).
.ie n .IP "install""(\fIname\fP,\fIcode\fP,{\fIgpname\fP},{\fIlib\fP})""" 4
.el .IP "install\f(CW(\f(CIname\f(CW,\f(CIcode\f(CW,{\f(CIgpname\f(CW},{\f(CIlib\f(CW})\fR" 4
.IX Xref "install"
.IX Item "install(name,code,{gpname},{lib})"
loads from dynamic library \fIlib\fR the function \fIname\fR. Assigns to it
the name \fIgpname\fR in this \f(CW\*(C`gp\*(C'\fR session, with argument code \fIcode\fR
(see the Libpari Manual for an explanation of those). If \fIlib\fR is
omitted, uses \f(CW\*(C`libpari.so\*(C'\fR. If \fIgpname\fR is omitted, uses
\&\fIname\fR.
.IX Xref "Label se:install"
.Sp
This function is useful for adding custom functions to the \f(CW\*(C`gp\*(C'\fR interpreter,
or picking useful functions from unrelated libraries. For instance, it
makes the function \f(CW\*(C`system\*(C'\fR obsolete:
.IX Xref "system"
.Sp
.Vb 3
\&  ? install(system, vs, sys, "libc.so")
\&  ? sys("ls gp*")
\&  gp.c            gp.h            gp_rl.c
.Ve
.Sp
But it also gives you access to all (non static) functions defined in the
\&\s-1PARI\s0 library. For instance, the function \f(CW\*(C`GEN addii(GEN x, GEN y)\*(C'\fR adds
two \s-1PARI\s0 integers, and is not directly accessible under \f(CW\*(C`gp\*(C'\fR (it's eventually
called by the \f(CW\*(C`+\*(C'\fR operator of course):
.Sp
.Vb 3
\&  ? install("addii", "GG")
\&  ? addii(1, 2)
\&  %1 = 3
.Ve
.Sp
Re-installing a function will print a Warning, and update the prototype code
if needed, but will reload a symbol from the library, even it the latter has
been recompiled.
.Sp
\&\fBCaution:\fR This function may not work on all systems, especially
when \f(CW\*(C`gp\*(C'\fR has been compiled statically. In that case, the first use of an
installed function will provoke a Segmentation Fault, i.e. a major internal
blunder (this should never happen with a dynamically linked executable).
Hence, if you intend to use this function, please check first on some
harmless example such as the ones above that it works properly on your
machine.
.ie n .IP "kill""(s)""" 4
.el .IP "kill\f(CW(s)\fR" 4
.IX Xref "kill"
.IX Item "kill(s)"
 kills the present value of the
variable, alias or user-defined function \f(CW\*(C`s\*(C'\fR. The corresponding identifier
can now be used to name any \s-1GP\s0 object (variable or function). This is the
only way to replace a variable by a function having the same name (or the
other way round), as in the following example:
.IX Xref "Label se:kill"
.Sp
.Vb 9
\&  ? f = 1
\&  %1 = 1
\&  ? f(x) = 0
\&    ***   unused characters: f(x)=0
\&                              ^\-\-\-\-
\&  ? kill(f)
\&  ? f(x) = 0
\&  ? f()
\&  %2 = 0
.Ve
.Sp
When you kill a variable, all objects that used it become invalid. You
can still display them, even though the killed variable will be printed in a
funny way. For example:
.Sp
.Vb 5
\&  ? a^2 + 1
\&  %1 = a^2 + 1
\&  ? kill(a)
\&  ? %1
\&  %2 = #<1>^2 + 1
.Ve
.Sp
If you simply want to restore a variable to its ``undefined'' value
(monomial of degree one), use the quote operator: \f(CW\*(C`a = \*(Aqa\*(C'\fR.
Predefined symbols (\f(CW\*(C`x\*(C'\fR and \s-1GP\s0 function names) cannot be killed.
.IX Xref "quote"
.ie n .IP "print""({\fIstr\fP}*)""" 4
.el .IP "print\f(CW({\f(CIstr\f(CW}*)\fR" 4
.IX Xref "print"
.IX Item "print({str}*)"
outputs its (string) arguments in raw
format, ending with a newline.
.ie n .IP "print1""({\fIstr\fP}*)""" 4
.el .IP "print1\f(CW({\f(CIstr\f(CW}*)\fR" 4
.IX Xref "print1"
.IX Item "print1({str}*)"
outputs its (string) arguments in raw
format, without ending with a newline (note that you can still embed newlines
within your strings, using the \f(CW\*(C`\en\*(C'\fR notation !).
.ie n .IP "printp""({\fIstr\fP}*)""" 4
.el .IP "printp\f(CW({\f(CIstr\f(CW}*)\fR" 4
.IX Xref "printp"
.IX Item "printp({str}*)"
outputs its (string) arguments in
prettyprint (beautified) format, ending with a newline.
.ie n .IP "printp1""({\fIstr\fP}*)""" 4
.el .IP "printp1\f(CW({\f(CIstr\f(CW}*)\fR" 4
.IX Xref "printp1"
.IX Item "printp1({str}*)"
outputs its (string) arguments in
prettyprint (beautified) format, without ending with a newline.
.ie n .IP "printtex""({\fIstr\fP}*)""" 4
.el .IP "printtex\f(CW({\f(CIstr\f(CW}*)\fR" 4
.IX Xref "printtex"
.IX Item "printtex({str}*)"
outputs its (string) arguments in
TeX format. This output can then be used in a TeX manuscript.
The printing is done on the standard output. If you want to print it to a
file you should use \f(CW\*(C`writetex\*(C'\fR (see there).
.Sp
Another possibility is to enable the \f(CW\*(C`log\*(C'\fR default
(see \*(L"Label se:defaults\*(R").
You could for instance do:
.IX Xref "log logfile"
.Sp
.Vb 3
\&  default(logfile, "new.tex");
\&  default(log, 1);
\&  printtex(result);
.Ve
.ie n .IP "quit""()""" 4
.el .IP "quit\f(CW()\fR" 4
.IX Xref "quit"
.IX Item "quit()"
exits \f(CW\*(C`gp\*(C'\fR.
.IX Xref "Label se:quit"
.ie n .IP "read""({\fIfilename\fP})""" 4
.el .IP "read\f(CW({\f(CIfilename\f(CW})\fR" 4
.IX Xref "read"
.IX Item "read({filename})"
reads in the file
\&\fIfilename\fR (subject to string expansion). If \fIfilename\fR is
omitted, re-reads the last file that was fed into \f(CW\*(C`gp\*(C'\fR. The return
value is the result of the last expression evaluated.
.IX Xref "Label se:read"
.Sp
If a \s-1GP\s0 \f(CW\*(C`binary file\*(C'\fR is read using this command (see
\&\*(L"Label se:writebin\*(R"), the file is loaded and the last object in the file
is returned.
.IX Xref "binary file"
.ie n .IP "readvec""({\fIstr\fP})""" 4
.el .IP "readvec\f(CW({\f(CIstr\f(CW})\fR" 4
.IX Xref "readvec"
.IX Item "readvec({str})"
reads in the file
\&\fIfilename\fR (subject to string expansion). If \fIfilename\fR is
omitted, re-reads the last file that was fed into \f(CW\*(C`gp\*(C'\fR. The return
value is a vector whose components are the evaluation of all sequences
of instructions contained in the file. For instance, if \fIfile\fR contains
.Sp
.Vb 3
\&    1
\&    2
\&    3
.Ve
.Sp
then we will get:
.Sp
.Vb 8
\&    ? \er a
\&    %1 = 1
\&    %2 = 2
\&    %3 = 3
\&    ? read(a)
\&    %4 = 3
\&    ? readvec(a)
\&    %5 = [1, 2, 3]
.Ve
.Sp
In general a sequence is just a single line, but as usual braces and
\&\f(CW\*(C`\e\e\*(C'\fR may be used to enter multiline sequences.
.ie n .IP "reorder""({x = []})""" 4
.el .IP "reorder\f(CW({x = []})\fR" 4
.IX Xref "reorder"
.IX Item "reorder({x = []})"
\&\f(CW\*(C`x\*(C'\fR must be a vector. If \f(CW\*(C`x\*(C'\fR is the
empty vector, this gives the vector whose components are the existing
variables in increasing order (i.e. in decreasing importance). Killed
variables (see \f(CW\*(C`kill\*(C'\fR) will be shown as \f(CW0\fR. If \f(CW\*(C`x\*(C'\fR is
non-empty, it must be a permutation of variable names, and this permutation
gives a new order of importance of the variables, \eemph{for output only}. For
example, if the existing order is \f(CW\*(C`[x,y,z]\*(C'\fR, then after
\&\f(CW\*(C`reorder([z,x])\*(C'\fR the order of importance of the variables, with respect
to output, will be \f(CW\*(C`[z,y,x]\*(C'\fR. The internal representation is unaffected.
.IX Xref "Label se:reorder"
.ie n .IP "setrand""(n)""" 4
.el .IP "setrand\f(CW(n)\fR" 4
.IX Xref "setrand"
.IX Item "setrand(n)"
reseeds the random number generator to the value
\&\f(CW\*(C`n\*(C'\fR. The initial seed is \f(CW\*(C`n = 1\*(C'\fR.
.Sp
The library syntax is \fBsetrand\fR\f(CW\*(C`(n)\*(C'\fR, where \f(CW\*(C`n\*(C'\fR is a \f(CW\*(C`long\*(C'\fR. Returns \f(CW\*(C`n\*(C'\fR.
.IX Xref "setrand"
.ie n .IP "system""(\fIstr\fP)""" 4
.el .IP "system\f(CW(\f(CIstr\f(CW)\fR" 4
.IX Xref "system"
.IX Item "system(str)"
\&\fIstr\fR is a string representing
a system command. This command is executed, its output written to the
standard output (this won't get into your logfile), and control returns
to the \s-1PARI\s0 system. This simply calls the C \f(CW\*(C`system\*(C'\fR command.
.ie n .IP "trap""({e}, {\fIrec\fP}, {\fIseq\fP})""" 4
.el .IP "trap\f(CW({e}, {\f(CIrec\f(CW}, {\f(CIseq\f(CW})\fR" 4
.IX Xref "trap"
.IX Item "trap({e}, {rec}, {seq})"
tries to
evaluate \fIseq\fR, trapping error \f(CW\*(C`e\*(C'\fR, that is effectively preventing it
from aborting computations in the usual way; the recovery sequence
\&\fIrec\fR is executed if the error occurs and the evaluation of \fIrec\fR
becomes the result of the command. If \f(CW\*(C`e\*(C'\fR is omitted, all exceptions are
trapped. Note in particular that hitting \f(CW\*(C`^C\*(C'\fR (Control-C) raises an
exception. See \*(L"Label se:errorrec\*(R" for an introduction to error recovery
under \f(CW\*(C`gp\*(C'\fR.
.Sp
.Vb 6
\&  ? \e\e trap division by 0
\&  ? inv(x) = trap (gdiver, INFINITY, 1/x)
\&  ? inv(2)
\&  %1 = 1/2
\&  ? inv(0)
\&  %2 = INFINITY
.Ve
.Sp
If \fIseq\fR is omitted, defines \fIrec\fR as a default action when
catching exception \f(CW\*(C`e\*(C'\fR, provided no other trap as above intercepts it first.
The error message is printed, as well as the result of the evaluation of
\&\fIrec\fR, and control is given back to the \f(CW\*(C`gp\*(C'\fR prompt. In particular, current
computation is then lost.
.Sp
The following error handler prints the list of all user variables, then
stores in a file their name and their values:
.IX Xref "writebin"
.Sp
.Vb 3
\&  ? { trap( ,
\&        print(reorder);
\&        writebin("crash")) }
.Ve
.Sp
If no recovery code is given (\fIrec\fR is omitted) a \fIbreak loop\fR will
be started (see \*(L"Label se:breakloop\*(R"). In particular
.IX Xref "break loop"
.Sp
.Vb 1
\&  ? trap()
.Ve
.Sp
by itself installs a default error handler, that will start a break
loop whenever an exception is raised.
.Sp
If \fIrec\fR is the empty string \f(CW""\fR the default handler (for that error
if \f(CW\*(C`e\*(C'\fR is present) is disabled.
.Sp
\&\fBNote:\fR The interface is currently not adequate for trapping
individual exceptions. In the current version \fB2.3.5\fR, the following keywords
are recognized, but the name list will be expanded and changed in the
future (all library mode errors can be trapped: it's a matter of defining
the keywords to \f(CW\*(C`gp\*(C'\fR, and there are currently far too many useless ones):
.Sp
\&\f(CW\*(C`accurer\*(C'\fR: accuracy problem
.Sp
\&\f(CW\*(C`archer\*(C'\fR: not available on this architecture or operating system
.Sp
\&\f(CW\*(C`errpile\*(C'\fR: the \s-1PARI\s0 stack overflows
.Sp
\&\f(CW\*(C`gdiver\*(C'\fR: division by 0
.Sp
\&\f(CW\*(C`invmoder\*(C'\fR: impossible inverse modulo
.Sp
\&\f(CW\*(C`siginter\*(C'\fR: \s-1SIGINT\s0 received (usually from Control-C)
.Sp
\&\f(CW\*(C`talker\*(C'\fR: miscellaneous error
.Sp
\&\f(CW\*(C`typeer\*(C'\fR: wrong type
.Sp
\&\f(CW\*(C`user\*(C'\fR: user error (from the \f(CW\*(C`error\*(C'\fR function)
.ie n .IP "type""(x)""" 4
.el .IP "type\f(CW(x)\fR" 4
.IX Xref "type"
.IX Item "type(x)"
this is useful only under \f(CW\*(C`gp\*(C'\fR. Returns the
internal type name of the \s-1PARI\s0 object \f(CW\*(C`x\*(C'\fR as a  string. Check out
existing type names with the metacommand \f(CW\*(C`\et\*(C'\fR.
For example \f(CWtype(1)\fR will return "\f(CW\*(C`t_INT\*(C'\fR".
.IX Xref "Label se:gptype"
.Sp
The library syntax is \fBtype0\fR\f(CW\*(C`(\f(CIx\f(CW)\*(C'\fR, though the macro \f(CW\*(C`typ\*(C'\fR is usually simpler to use
since it return an integer that can easily be matched with the symbols \f(CW\*(C`t_*\*(C'\fR.
The name \f(CW\*(C`type\*(C'\fR was avoided due to the fact that \f(CW\*(C`type\*(C'\fR is a reserved identifier for some C(++) compilers.
.IX Xref "type0"
.ie n .IP "version""()""" 4
.el .IP "version\f(CW()\fR" 4
.IX Xref "version"
.IX Item "version()"
Returns the current version number as a \f(CW\*(C`t_VEC\*(C'\fR
with three integer components: major version number, minor version number and
patchlevel. To check against a particular version number, you can use:
.Sp
.Vb 5
\&     if (lex(version(), [2,2,0]) >= 0,
\&       \e\e code to be executed if we are running 2.2.0 or more recent.
\&     ,
\&       \e\e compatibility code
\&     );
.Ve
.ie n .IP "whatnow""(\fIkey\fP)""" 4
.el .IP "whatnow\f(CW(\f(CIkey\f(CW)\fR" 4
.IX Xref "whatnow"
.IX Item "whatnow(key)"
if keyword \fIkey\fR is the name
of a function that was present in \s-1GP\s0 version 1.39.15 or lower, outputs
the new function name and syntax, if it changed at all (\f(CW387\fR out of \f(CW560\fR
did).
.IX Xref "Label se:whatnow"
.ie n .IP "write""(\fIfilename\fP,{\fIstr\fP}*)""" 4
.el .IP "write\f(CW(\f(CIfilename\f(CW,{\f(CIstr\f(CW}*)\fR" 4
.IX Xref "write"
.IX Item "write(filename,{str}*)"
writes (appends)
to \fIfilename\fR the remaining arguments, and appends a newline (same output
as \f(CW\*(C`print\*(C'\fR).
.IX Xref "Label se:write"
.ie n .IP "write1""(\fIfilename\fP,{\fIstr\fP}*)""" 4
.el .IP "write1\f(CW(\f(CIfilename\f(CW,{\f(CIstr\f(CW}*)\fR" 4
.IX Xref "write1"
.IX Item "write1(filename,{str}*)"
writes (appends) to
\&\fIfilename\fR the remaining arguments without a trailing newline
(same output as \f(CW\*(C`print1\*(C'\fR).
.ie n .IP "writebin""(\fIfilename\fP,{x})""" 4
.el .IP "writebin\f(CW(\f(CIfilename\f(CW,{x})\fR" 4
.IX Xref "writebin"
.IX Item "writebin(filename,{x})"
writes (appends) to
\&\fIfilename\fR the object \f(CW\*(C`x\*(C'\fR in binary format. This format is not human
readable, but contains the exact internal structure of \f(CW\*(C`x\*(C'\fR, and is much
faster to save/load than a string expression, as would be produced by
\&\f(CW\*(C`write\*(C'\fR. The binary file format includes a magic number, so that such a
file can be recognized and correctly input by the regular \f(CW\*(C`read\*(C'\fR or \f(CW\*(C`\er\*(C'\fR
function. If saved objects refer to (polynomial) variables that are not
defined in the new session, they will be displayed in a funny way (see
\&\*(L"Label se:kill\*(R").
.IX Xref "write read"
.Sp
If \f(CW\*(C`x\*(C'\fR is omitted, saves all user variables from the session, together with
their names. Reading such a ``named object'' back in a \f(CW\*(C`gp\*(C'\fR session will set
the corresponding user variable to the saved value. E.g after
.Sp
.Vb 1
\&  x = 1; writebin("log")
.Ve
.Sp
reading \f(CW\*(C`log\*(C'\fR into a clean session will set \f(CW\*(C`x\*(C'\fR to \f(CW1\fR.
The relative variables priorities (see \*(L"Label se:priority\*(R") of new variables
set in this way remain the same (preset variables retain their former
priority, but are set to the new value). In particular, reading such a
session log into a clean session will restore all variables exactly as they
were in the original one.
.Sp
User functions, installed functions and history objects can not be saved via
this function. Just as a regular input file, a binary file can be compressed
using \f(CW\*(C`gzip\*(C'\fR, provided the file name has the standard \f(CW\*(C`.gz\*(C'\fR
extension.
.IX Xref "gzip Label se:writebin binary file"
.Sp
In the present implementation, the binary files are architecture dependent
and compatibility with future versions of \f(CW\*(C`gp\*(C'\fR is not guaranteed. Hence
binary files should not be used for long term storage (also, they are
larger and harder to compress than text files).
.ie n .IP "writetex""(\fIfilename\fP,{\fIstr\fP}*)""" 4
.el .IP "writetex\f(CW(\f(CIfilename\f(CW,{\f(CIstr\f(CW}*)\fR" 4
.IX Xref "writetex"
.IX Item "writetex(filename,{str}*)"
as \f(CW\*(C`write\*(C'\fR,
in TeX format.
.IX Xref "Label se:writetex"
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 9532:" 4
.IX Item "Around line 9532:"
\&'=item' outside of any '=over'
.IP "Around line 9723:" 4
.IX Item "Around line 9723:"
You forgot a '=back' before '=head2'
.IP "Around line 9734:" 4
.IX Item "Around line 9734:"
\&'=item' outside of any '=over'
.Sp
=over without closing =back
