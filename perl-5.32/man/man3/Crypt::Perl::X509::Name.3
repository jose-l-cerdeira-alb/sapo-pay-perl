.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Crypt::Perl::X509::Name 3"
.TH Crypt::Perl::X509::Name 3 "2018-07-21" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Crypt::Perl::X509::Name \- Representation of Distinguished Name
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 9
\&    #This encodes each key/value into separate
\&    #RelativeDistinguishedName structures, as OpenSSL does by default.
\&    #Unless you know otherwise, this is probably what you want.
\&    #(See ENCODING below for more details.)
\&    my $name = Crypt::Perl::X509::Name\->new(
\&        streetAddress => \*(Aq...\*(Aq,     #keys are short OID names
\&        localityName => \*(Aq...\*(Aq,
\&        #...
\&    );
\&
\&    my $der = $name\->encode();
.Ve
.SH "DISCUSSION"
.IX Header "DISCUSSION"
This is useful to represent the Subject and Issuer parts of an
X.509 (i.e., \s-1SSL/TLS\s0) certificate as well as the name portion of
a \s-1PCKS\s0 #10 Certificate Signing Request (\s-1CSR\s0).
.SH "ENCODING"
.IX Header "ENCODING"
\&\s-1RFC 5280\s0 §4.1.2.4 <https://tools.ietf.org/html/rfc5280#section-4.1.2.4>
defines the \f(CW\*(C`Name\*(C'\fR type as an ordered \f(CW\*(C`SEQUENCE\*(C'\fR of unordered \f(CW\*(C`SET\*(C'\fRs
—\f(CW\*(C`RelativeDistinguishedName\*(C'\fR objects, or “RDN”s—of key/value pairs.
OpenSSL defaults to having each \s-1RDN\s0 contain only one key/value
pair. (You can also have it create “multi\-value RDNs”. <http://openssl.6102.n7.nabble.com/Multi-value-RDNs-and-openssl-cnf-format-td7925.html>) I’m unclear as to why this is,
but I suspect it has to do with ease of matching up \f(CW\*(C`Name\*(C'\fR values; since
the RDNs are unordered, to compare one multi-value \s-1RDN\s0 against another takes
more work than to compare two ordered lists of single-value RDNs, which can be
done with a simple text equality check.
(cf. \s-1RFC 5280\s0 §7.1 <http://tools.ietf.org/html/rfc5280#section-7.1>)
.PP
If you need a multi-value \s-1RDN,\s0 it can be gotten by grouping key/value pairs
in an array reference, thus:
.PP
.Vb 1
\&    my $name = Crypt::Perl::X509::Name\->new(
\&
\&        #a multi\-value RDN
\&        [ streetAddress => \*(Aq...\*(Aq, localityName => \*(Aq...\*(Aq ],
\&
\&        #regular key/value pair becomes its own single\-value RDN
\&        stateOrProvinceName => \*(Aq...\*(Aq,
\&    );
.Ve
.ie n .SH "ABOUT ""commonName"""
.el .SH "ABOUT \f(CWcommonName\fP"
.IX Header "ABOUT commonName"
Note that \f(CW\*(C`commonName\*(C'\fR is
deprecated (cf. \s-1RFC 6125\s0 §2.3 <https://tools.ietf.org/html/rfc6125#section-2.3>,
\&\s-1CA\s0 Browser Forum Baseline Requirements §7.1.4.2.2 <https://cabforum.org/wp-content/uploads/CA-Browser-Forum-BR-1.4.1.pdf>)
for use in X.509 certificates, but many CAs still require it as of
December 2016.
