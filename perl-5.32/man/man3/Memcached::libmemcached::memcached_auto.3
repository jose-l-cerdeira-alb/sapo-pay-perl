.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Memcached::libmemcached::memcached_auto 3"
.TH Memcached::libmemcached::memcached_auto 3 "2015-05-07" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
memcached_increment, memcached_decrement,
memcached_increment_with_initial, memcached_decrement_with_initial \- Manipulate
counters
.SH "LIBRARY"
.IX Header "LIBRARY"
C Client Library for memcached (libmemcached, \-lmemcached)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  #include <memcached.h>
\&
\&  memcached_return_t
\&    memcached_increment (memcached_st *ptr, 
\&                         const char *key, size_t key_length,
\&                         unsigned int offset,
\&                         uint64_t *value);
\&
\&  memcached_return_t
\&    memcached_decrement (memcached_st *ptr, 
\&                         const char *key, size_t key_length,
\&                         unsigned int offset,
\&                         uint64_t *value);
\&
\&  memcached_return_t
\&    memcached_increment_with_initial (memcached_st *ptr,
\&                                      const char *key,
\&                                      size_t key_length,
\&                                      uint64_t offset,
\&                                      uint64_t initial,
\&                                      time_t expiration,
\&                                      uint64_t *value);
\&
\&  memcached_return_t
\&    memcached_decrement_with_initial (memcached_st *ptr,
\&                                      const char *key,
\&                                      size_t key_length,
\&                                      uint64_t offset,
\&                                      uint64_t initial,
\&                                      time_t expiration,
\&                                      uint64_t *value);
\&
\&  memcached_return_t
\&    memcached_increment_by_key (memcached_st *ptr, 
\&                                const char *master_key, size_t master_key_length,
\&                                const char *key, size_t key_length,
\&                                unsigned int offset,
\&                                uint64_t *value);
\&
\&  memcached_return_t
\&    memcached_decrement_by_key (memcached_st *ptr, 
\&                                const char *master_key, size_t master_key_length,
\&                                const char *key, size_t key_length,
\&                                unsigned int offset,
\&                                uint64_t *value);
\&
\&  memcached_return_t
\&    memcached_increment_with_initial_by_key (memcached_st *ptr,
\&                                             const char *master_key,
\&                                             size_t master_key_length,
\&                                             const char *key,
\&                                             size_t key_length,
\&                                             uint64_t offset,
\&                                             uint64_t initial,
\&                                             time_t expiration,
\&                                             uint64_t *value);
\&
\&  memcached_return_t
\&    memcached_decrement_with_initial_by_key (memcached_st *ptr,
\&                                             const char *master_key,
\&                                             size_t master_key_length,
\&                                             const char *key,
\&                                             size_t key_length,
\&                                             uint64_t offset,
\&                                             uint64_t initial,
\&                                             time_t expiration,
\&                                             uint64_t *value);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBmemcached\fR\|(1) servers have the ability to increment and decrement keys
(overflow and underflow are not detected). This gives you the ability to use
memcached to generate shared sequences of values.
.PP
\&\fBmemcached_increment()\fR takes a key and keylength and increments the value by
the offset passed to it. The value is then returned via the unsigned int
value pointer you pass to it.
.PP
\&\fBmemcached_decrement()\fR takes a key and keylength and decrements the value by
the offset passed to it. The value is then returned via the unsigned int
value pointer you pass to it.
.PP
\&\fBmemcached_increment_with_initial()\fR takes a key and keylength and increments
the value by the offset passed to it. If the object specified by key does
not exist, one of two things may happen: If the expiration value is
\&\s-1MEMCACHED_EXPIRATION_NOT_ADD,\s0 the operation will fail. For all other
expiration values, the operation will succeed by seeding the value for that
key with a initial value to expire with the provided expiration time. The
flags will be set to zero.The value is then returned via the unsigned int
value pointer you pass to it.
.PP
\&\fBmemcached_decrement_with_initial()\fR takes a key and keylength and decrements
the value by the offset passed to it. If the object specified by key does
not exist, one of two things may happen: If the expiration value is
\&\s-1MEMCACHED_EXPIRATION_NOT_ADD,\s0 the operation will fail. For all other
expiration values, the operation will succeed by seeding the value for that
key with a initial value to expire with the provided expiration time. The
flags will be set to zero.The value is then returned via the unsigned int
value pointer you pass to it.
.PP
\&\fBmemcached_increment_by_key()\fR, \fBmemcached_decrement_by_key()\fR,
\&\fBmemcached_increment_with_initial_by_key()\fR, and
\&\fBmemcached_decrement_with_initial_by_key()\fR are master key equivalents of the
above.
.SH "RETURN"
.IX Header "RETURN"
A value of type \f(CW\*(C`memcached_return_t\*(C'\fR is returned.
On success that value will be \f(CW\*(C`MEMCACHED_SUCCESS\*(C'\fR.
Use \fBmemcached_strerror()\fR to translate this value to a printable string.
.SH "HOME"
.IX Header "HOME"
To find out more information please check:
<https://launchpad.net/libmemcached>
.SH "AUTHOR"
.IX Header "AUTHOR"
Brian Aker, <brian@tangent.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBmemcached\fR\|(1) \fBlibmemcached\fR\|(3) \fBmemcached_strerror\fR\|(3)
