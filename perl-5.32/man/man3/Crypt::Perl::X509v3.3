.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Crypt::Perl::X509v3 3"
.TH Crypt::Perl::X509v3 3 "2020-09-27" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Crypt::Perl::X509v3 \- TLS/SSL Certificates
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&    my $cert = Crypt::Perl::X509v3\->new(
\&        key => $crypt_perl_public_key_obj,
\&        issuer => [
\&            [ commonName => \*(AqFoo\*(Aq, surname => \*(AqtheIssuer\*(Aq ],
\&            [ givenName => \*(Aqseparate RDNs\*(Aq ],
\&        ],
\&        subject => \e@subject,   #same format as issuer
\&
\&        not_before => $unixtime,
\&        not_after => $unixtime,
\&
\&        # The same structure as in Crypt::Perl::PKCS10 …
\&        extensions => [
\&            [ keyUsage => \*(AqkeyCertSign\*(Aq, \*(AqkeyEncipherment\*(Aq ],
\&            [ $extn_name => @extn_args ],
\&            # ..
\&        ],
\&
\&        serial_number => 12345,
\&
\&        issuer_unique_id => \*(Aq..\*(Aq,
\&        subject_unique_id => \*(Aq..\*(Aq,
\&    );
\&
\&    # The signature algorithm (2nd argument) is not needed
\&    # when the signing key is Ed25519.
\&    $cert\->sign( $crypt_perl_private_key_obj, \*(Aqsha256\*(Aq );
\&
\&    my $pem = $cert\->to_pem();
.Ve
.SH "STATUS"
.IX Header "STATUS"
This module is \fBexperimental\fR! The \s-1API\s0 may change between versions.
If you’re going to build something off of it, ensure that you check
Crypt::Perl’s changelog before updating this module.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module can create \s-1TLS/SSL\s0 certificates. The caller has full control
over all certificate components, and anything not specified is not assumed.
.PP
There currently is not a parsing interface. Hopefully that can be remedied.
