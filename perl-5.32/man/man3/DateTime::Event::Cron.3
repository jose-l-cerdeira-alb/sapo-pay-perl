.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DateTime::Event::Cron 3"
.TH DateTime::Event::Cron 3 "2017-04-06" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DateTime::Event::Cron \- DateTime extension for generating recurrence
sets from crontab lines and files.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use DateTime::Event::Cron;
\&
\&  # check if a date matches (defaults to current time)
\&  my $c = DateTime::Event::Cron\->new(\*(Aq* 2 * * *\*(Aq);
\&  if ($c\->match) {
\&    # do stuff
\&  }
\&  if ($c\->match($date)) {
\&    # do something else for datetime $date
\&  }
\&
\&  # DateTime::Set construction from crontab line
\&  $crontab = \*(Aq*/3 15 1\-10 3,4,5 */2\*(Aq;
\&  $set = DateTime::Event::Cron\->from_cron($crontab);
\&  $iter = $set\->iterator(after => DateTime\->now);
\&  while (1) {
\&    my $next = $iter\->next;
\&    my $now  = DateTime\->now;
\&    sleep(($next\->subtract_datetime_absolute($now))\->seconds);
\&    # do stuff...
\&  }
\&
\&  # List of DateTime::Set objects from crontab file
\&  @sets = DateTime::Event::Cron\->from_crontab(file => \*(Aq/etc/crontab\*(Aq);
\&  $now = DateTime\->now;
\&  print "Now: ", $now\->datetime, "\en";
\&  foreach (@sets) {
\&    my $next = $_\->next($now);
\&    print $next\->datetime, "\en";
\&  }
\&
\&  # DateTime::Set parameters
\&  $crontab = \*(Aq* * * * *\*(Aq;
\&
\&  $now = DateTime\->now;
\&  %set_parms = ( after => $now );
\&  $set = DateTime::Event::Cron\->from_cron(cron => $crontab, %set_parms);
\&  $dt = $set\->next;
\&  print "Now: ", $now\->datetime, " and next: ", $dt\->datetime, "\en";
\&
\&  # Spans for DateTime::Set
\&  $crontab = \*(Aq* * * * *\*(Aq;
\&  $now = DateTime\->now;
\&  $now2 = $now\->clone;
\&  $span = DateTime::Span\->from_datetimes(
\&            start => $now\->add(minutes => 1),
\&            end   => $now2\->add(hours => 1),
\&          );
\&  %parms = (cron => $crontab, span => $span);
\&  $set = DateTime::Event::Cron\->from_cron(%parms);
\&  # ...do things with the DateTime::Set
\&
\&  # Every RTFCT relative to 12am Jan 1st this year
\&  $crontab = \*(Aq7\-10 6,12\-15 10\-28/2 */3 3,4,5\*(Aq;
\&  $date = DateTime\->now\->truncate(to => \*(Aqyear\*(Aq);
\&  $set = DateTime::Event::Cron\->from_cron(cron => $crontab, after => $date);
\&
\&  # Rather than generating DateTime::Set objects, next/prev
\&  # calculations can be made directly:
\&
\&  # Every day at 10am, 2pm, and 6pm. Reference date
\&  # defaults to DateTime\->now.
\&  $crontab = \*(Aq10,14,18 * * * *\*(Aq;
\&  $dtc = DateTime::Event::Cron\->new_from_cron(cron => $crontab);
\&  $next_datetime = $dtc\->next;
\&  $last_datetime = $dtc\->previous;
\&  ...
\&
\&  # List of DateTime::Event::Cron objects from
\&  # crontab file
\&  @dtc = DateTime::Event::Cron\->new_from_crontab(file => \*(Aq/etc/crontab\*(Aq);
\&
\&  # Full cron lines with user, such as from /etc/crontab
\&  # or files in /etc/cron.d, are supported and auto\-detected:
\&  $crontab = \*(Aq* * * * * gump /bin/date\*(Aq;
\&  $dtc = DateTime::Event::Cron\->new(cron => $crontab);
\&
\&  # Auto\-detection of users is disabled if you explicitly
\&  # enable/disable via the user_mode parameter:
\&  $dtc = DateTime::Event::Cron\->new(cron => $crontab, user_mode => 1);
\&  my $user = $dtc\->user;
\&  my $command = $dtc\->command;
\&
\&  # Unparsed original cron entry
\&  my $original = $dtc\->original;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
DateTime::Event::Cron generated DateTime events or DateTime::Set objects
based on crontab-style entries.
.SH "METHODS"
.IX Header "METHODS"
The cron fields are typical crontab-style entries. For more information,
see \fBcrontab\fR\|(5) and extensions described in Set::Crontab. The
fields can be passed as a single string or as a reference to an array
containing each field. Only the first five fields are retained.
.SS "DateTime::Set Factories"
.IX Subsection "DateTime::Set Factories"
See DateTime::Set for methods provided by Set objects, such as
\&\f(CW\*(C`next()\*(C'\fR and \f(CW\*(C`previous()\*(C'\fR.
.IP "from_cron($cronline)" 4
.IX Item "from_cron($cronline)"
.PD 0
.ie n .IP "from_cron(cron => $cronline, %parms, %set_parms)" 4
.el .IP "from_cron(cron => \f(CW$cronline\fR, \f(CW%parms\fR, \f(CW%set_parms\fR)" 4
.IX Item "from_cron(cron => $cronline, %parms, %set_parms)"
.PD
Generates a DateTime::Set recurrence for the cron line provided. See
\&\fBnew()\fR for details on \f(CW%parms\fR. Optionally takes parameters for
DateTime::Set.
.ie n .IP "from_crontab(file => $crontab_fh, %parms, %set_parms)" 4
.el .IP "from_crontab(file => \f(CW$crontab_fh\fR, \f(CW%parms\fR, \f(CW%set_parms\fR)" 4
.IX Item "from_crontab(file => $crontab_fh, %parms, %set_parms)"
Returns a list of DateTime::Set recurrences based on lines from a
crontab file. \f(CW$crontab_fh\fR can be either a filename or filehandle
reference. See \fBnew()\fR for details on \f(CW%parm\fR. Optionally takes parameters
for DateTime::Set which will be passed along to each set for each line.
.IP "as_set(%set_parms)" 4
.IX Item "as_set(%set_parms)"
Generates a DateTime::Set recurrence from an existing
DateTime::Event::Cron object.
.SS "Constructors"
.IX Subsection "Constructors"
.ie n .IP "new_from_cron(cron => $cronstring, %parms)" 4
.el .IP "new_from_cron(cron => \f(CW$cronstring\fR, \f(CW%parms\fR)" 4
.IX Item "new_from_cron(cron => $cronstring, %parms)"
Returns a DateTime::Event::Cron object based on the cron specification.
Optional parameters include the boolean 'user_mode' which indicates that
the crontab entry includes a username column before the command.
.ie n .IP "new_from_crontab(file => $fh, %parms)" 4
.el .IP "new_from_crontab(file => \f(CW$fh\fR, \f(CW%parms\fR)" 4
.IX Item "new_from_crontab(file => $fh, %parms)"
Returns a list of DateTime::Event::Cron objects based on the lines of a
crontab file. \f(CW$fh\fR can be either a filename or a filehandle reference.
Optional parameters include the boolean 'user_mode' as mentioned above.
.SS "Other methods"
.IX Subsection "Other methods"
.IP "\fBnext()\fR" 4
.IX Item "next()"
.PD 0
.IP "next($date)" 4
.IX Item "next($date)"
.PD
Returns the next valid datetime according to the cron specification.
\&\f(CW$date\fR defaults to DateTime\->now unless provided.
.IP "\fBprevious()\fR" 4
.IX Item "previous()"
.PD 0
.IP "previous($date)" 4
.IX Item "previous($date)"
.PD
Returns the previous valid datetime according to the cron specification.
\&\f(CW$date\fR defaults to DateTime\->now unless provided.
.IP "increment($date)" 4
.IX Item "increment($date)"
.PD 0
.IP "decrement($date)" 4
.IX Item "decrement($date)"
.PD
Same as \f(CW\*(C`next()\*(C'\fR and \f(CW\*(C`previous()\*(C'\fR except that the provided datetime is
modified to the new datetime.
.IP "match($date)" 4
.IX Item "match($date)"
Returns whether or not the given datetime (defaults to current time)
matches the current cron specification. Dates are truncated to minute
resolution.
.IP "valid($date)" 4
.IX Item "valid($date)"
A more strict version of \fBmatch()\fR. Returns whether the given datetime is
valid under the current cron specification. Cron dates are only accurate
to the minute \*(-- datetimes with seconds greater than 0 are invalid by
default. (note: never fear, all methods accepting dates will accept
invalid dates \*(-- they will simply be rounded to the next nearest valid
date in all cases except this particular method)
.IP "\fBcommand()\fR" 4
.IX Item "command()"
Returns the command string, if any, from the original crontab entry.
Currently no expansion is performed such as resolving environment
variables, etc.
.IP "\fBuser()\fR" 4
.IX Item "user()"
Returns the username under which this cron command was to be executed,
assuming such a field was present in the original cron entry.
.IP "\fBoriginal()\fR" 4
.IX Item "original()"
Returns the original, unparsed cron string including any user or
command fields.
.SH "AUTHOR"
.IX Header "AUTHOR"
Matthew P. Sisk <sisk@mojotoad.com>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2003 Matthew P. Sisk. All rights reserved. All wrongs
revenged. This program is free software; you can distribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBDateTime\fR\|(3), \fBDateTime::Set\fR\|(3), \fBDateTime::Event::Recurrence\fR\|(3),
\&\fBDateTime::Event::ICal\fR\|(3), \fBDateTime::Span\fR\|(3), \fBSet::Crontab\fR\|(3), \fBcrontab\fR\|(5)
