.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Memcached::libmemcached::memcached_analyze 3"
.TH Memcached::libmemcached::memcached_analyze 3 "2015-05-07" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
memcached_analyze \- Analyze server information
.SH "LIBRARY"
.IX Header "LIBRARY"
C Client Library for memcached (libmemcached, \-lmemcached)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  #include <memcached.h>
\&
\&  memcached_analysis_st *
\&    memcached_analyze (memcached_st *ptr,
\&                       memcached_stat_st *stat,
\&                       memcached_return_t *error);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBlibmemcached\fR\|(3) has the ability to query a memcached server (or collection
of servers) for their current state. Queries to find state return a
\&\f(CW\*(C`memcached_analysis_st\*(C'\fR structure. You are responsible for freeing this structure.
.PP
\&\fBmemcached_analyze()\fR analyzes useful information based on the provided servers
and sets the result to the \f(CW\*(C`memcached_analysis_st\*(C'\fR structure. The return value
must be freed by the calling application.
.PP
A command line tool, \fBmemstat\fR\|(1) with the option \-\-analyze, is provided so that
you do not have to write an application to use this method.
.SH "RETURN"
.IX Header "RETURN"
A pointer to the allocated \f(CW\*(C`memcached_analysis_st\*(C'\fR structure on success and
a \s-1NULL\s0 pointer on failure. You may inspect the error detail by checking the
\&\f(CW\*(C`memcached_return_t\*(C'\fR value.
.PP
Any method returning a \f(CW\*(C`memcached_analysis_st\*(C'\fR expects you to free the
memory allocated for it.
.SH "HOME"
.IX Header "HOME"
To find out more information please check:
<https://launchpad.net/libmemcached>
.SH "AUTHOR"
.IX Header "AUTHOR"
Toru Maesaka, <dev@torum.net>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBmemcached\fR\|(1) \fBlibmemcached\fR\|(3) \fBmemcached_strerror\fR\|(3)
