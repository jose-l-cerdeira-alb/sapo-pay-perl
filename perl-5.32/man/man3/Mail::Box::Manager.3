.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Box::Manager 3"
.TH Mail::Box::Manager 3 "2019-10-04" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Box::Manager \- manage a set of folders
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 2
\& Mail::Box::Manager
\&   is a Mail::Reporter
\&
\& Mail::Box::Manager is extended by
\&   Mail::Box::Manage::User
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Mail::Box::Manager;
\& my $mgr     = new Mail::Box::Manager;
\&
\& # Create folder objects.
\& my $folder   = $mgr\->open(folder => $ENV{MAIL});
\& my $message1 = $folder\->message(0);
\& $mgr\->copyMessage(\*(AqDraft\*(Aq, $message);
\&
\& my @messages = $folder\->message(0,3);
\& $mgr\->moveMessage(\*(AqOutbox\*(Aq, @messages, create => 1 );
\& $mgr\->close($folder);
\&
\& # Create thread\-detectors (see Mail::Box::Thread::Manager)
\& my $t       = $mgr\->threads($inbox, $outbox);
\&
\& my $threads = $mgr\->threads(folder => $folder);
\& foreach my $thread ($threads\->all)
\& {   $thread\->print;
\& }
\&
\& $mgr\->registerType(mbox => \*(AqMail::Box::MyType\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The manager keeps track on a set of open folders and a set of message-thread
supporting objects.  You are not obliged to use this object (you can
directly create a Mail::Box::Mbox if you prefer), but you will create
more portable and safer code if you do use it.
.PP
Extends \*(L"\s-1DESCRIPTION\*(R"\s0 in Mail::Reporter.
.SH "METHODS"
.IX Header "METHODS"
Extends \*(L"\s-1METHODS\*(R"\s0 in Mail::Reporter.
.SS "Constructors"
.IX Subsection "Constructors"
Extends \*(L"Constructors\*(R" in Mail::Reporter.
.IP "Mail::Box::Manager\->\fBnew\fR($args)" 4
.IX Item "Mail::Box::Manager->new($args)"
.Vb 8
\& \-Option             \-\-Defined in     \-\-Default
\&  autodetect                            undef
\&  default_folder_type                   \*(Aqmbox\*(Aq
\&  folder_types                          <all standard types>
\&  folderdir                             [ \*(Aq.\*(Aq ]
\&  folderdirs                            <synonym for C<folderdir>>
\&  log                  Mail::Reporter   \*(AqWARNINGS\*(Aq
\&  trace                Mail::Reporter   \*(AqWARNINGS\*(Aq
.Ve
.RS 4
.IP "autodetect => TYPE|ARRAY\-OF\-TYPES" 2
.IX Item "autodetect => TYPE|ARRAY-OF-TYPES"
Select only a subset of the folder types which are implemented by MailBox
to be detected automatically.  This may improve the auto-detection of
folder types.  Normally, all folder types will be tried when a folder's
name is incorrect, but this option limits the types which are checked
and therefore may respond faster.
.IP "default_folder_type => NAME|CLASS" 2
.IX Item "default_folder_type => NAME|CLASS"
Specifies the default folder type for newly created folders.  If this
option is not specified, the most recently registered type is used (see
\&\fBregisterType()\fR and the new(folder_types) option.
.IP "folder_types => NEW-TYPE | ARRAY-OF-NEW-TYPES" 2
.IX Item "folder_types => NEW-TYPE | ARRAY-OF-NEW-TYPES"
Add one or more new folder types to the list of known types.  The order is
important: when you open a file without specifying its type, the
manager will start trying the last added list of types, in order.
.Sp
Each \s-1TYPE\s0 is specified as an array which contains name, class, and
defaults for options which overrule the usual defaults.  You may specify
folder-specific defaults as \s-1OPTIONS.\s0  They override the settings of
the manager.
.IP "folderdir => \s-1DIRECTORY\s0" 2
.IX Item "folderdir => DIRECTORY"
The default directory, or directories, where folders are
located. The \f(CW\*(C`Mail::Box::Manager\*(C'\fR can autodetect the existing folder-types.
There may be different kinds of folders opened at the same time, and
messages can be moved between those types, although that may result in
a loss of information depending on the folder types.
.IP "folderdirs => [\s-1DIRECTORIES\s0]" 2
.IX Item "folderdirs => [DIRECTORIES]"
.PD 0
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
.RE
.RS 4
.RE
.PD
.SS "Attributes"
.IX Subsection "Attributes"
.ie n .IP "$obj\->\fBdefaultFolderType\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultFolderType\fR()" 4
.IX Item "$obj->defaultFolderType()"
Returns the default folder type, some class name.
.ie n .IP "$obj\->\fBfolderTypes\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfolderTypes\fR()" 4
.IX Item "$obj->folderTypes()"
Returns the list of currently defined folder types.
.Sp
example:
.Sp
.Vb 1
\& print join("\en", $manager\->folderTypes), "\en";
.Ve
.ie n .IP "$obj\->\fBfolderdir\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfolderdir\fR()" 4
.IX Item "$obj->folderdir()"
In list context, this returns all folderdirs specified.  In \s-1SCALAR\s0
context only the first.
.ie n .IP "$obj\->\fBregisterType\fR($type, $class, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBregisterType\fR($type, \f(CW$class\fR, \f(CW%options\fR)" 4
.IX Item "$obj->registerType($type, $class, %options)"
With \f(CW\*(C`registerType\*(C'\fR you can register one \f(CW$type\fR of folders.  The \f(CW$class\fR
is compiled automatically, so you do not need to \f(CW\*(C`use\*(C'\fR them in your own
modules.  The \f(CW$type\fR is just an arbitrary name.
.Sp
The added types are prepended to the list of known types, so they are
checked first when a folder is opened in autodetect mode.
.Sp
example:
.Sp
.Vb 2
\& $manager\->registerType(mbox => \*(AqMail::Box::Mbox\*(Aq,
\&     save_on_exit => 0, folderdir => \*(Aq/tmp\*(Aq);
.Ve
.SS "Manage open folders"
.IX Subsection "Manage open folders"
.ie n .IP "$obj\->\fBclose\fR($folder, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBclose\fR($folder, \f(CW%options\fR)" 4
.IX Item "$obj->close($folder, %options)"
\&\f(CW\*(C`close\*(C'\fR removes the specified folder from the list of open folders.
Indirectly it will update the files on disk if needed (depends on
the Mail::Box::new(save_on_exit) flag for each folder). \f(CW%options\fR are
passed to \fBMail::Box::close()\fR of the folder.
.Sp
The folder's messages will also be withdrawn from the known message threads.
You may also close the folder directly. The manager will be informed
about this event and take appropriate actions.
.Sp
.Vb 2
\& \-Option       \-\-Default
\&  close_by_self  <false>
.Ve
.RS 4
.IP "close_by_self => \s-1BOOLEAN\s0" 2
.IX Item "close_by_self => BOOLEAN"
Used internally to avoid confusion about how the close was started.  Do
not change this.
.RE
.RS 4
.Sp
example:
.Sp
.Vb 3
\& my $inbox = $mgr\->open(\*(Aqinbox\*(Aq);
\& $mgr\->close($inbox);
\& $inbox\->close;        # alternative
.Ve
.RE
.ie n .IP "$obj\->\fBcloseAllFolders\fR(, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBcloseAllFolders\fR(, \f(CW%options\fR)" 4
.IX Item "$obj->closeAllFolders(, %options)"
\&\f(CW\*(C`closeAllFolders\*(C'\fR calls \fBclose()\fR for each folder managed by
this object.  It is called just before the program stops (before global
cleanup).
.ie n .IP "$obj\->\fBisOpenFolder\fR($folder)" 4
.el .IP "\f(CW$obj\fR\->\fBisOpenFolder\fR($folder)" 4
.IX Item "$obj->isOpenFolder($folder)"
Returns true if the \f(CW$folder\fR is currently open.
.Sp
example:
.Sp
.Vb 1
\& print "Yes\en" if $mgr\->isOpenFolder(\*(AqInbox\*(Aq);
.Ve
.ie n .IP "$obj\->\fBopen\fR( [$foldername], %options )" 4
.el .IP "\f(CW$obj\fR\->\fBopen\fR( [$foldername], \f(CW%options\fR )" 4
.IX Item "$obj->open( [$foldername], %options )"
Open a folder which name is specified as first parameter or with
the option flag \f(CW\*(C`folder\*(C'\fR.  The folder type is autodetected unless
the \f(CW\*(C`type\*(C'\fR is specified.
.Sp
\&\f(CW\*(C`open\*(C'\fR carries options for the manager which are described here, but
may also have additional options for the folder type.  For a
description of the folder options, see the options to the constructor
\&\fBMail::Box::new()\fR for each type of mail box.
.Sp
.Vb 6
\& \-Option      \-\-Default
\&  authenticate  \*(AqAUTO\*(Aq
\&  create        <false>
\&  folder        $ENV{MAIL}
\&  folderdir     \*(Aq.\*(Aq
\&  type          <first, usually C<mbox>>
.Ve
.RS 4
.IP "authenticate => TYPE|ARRAY\-OF\-TYPES|'\s-1AUTO\s0'" 2
.IX Item "authenticate => TYPE|ARRAY-OF-TYPES|'AUTO'"
The \s-1TYPE\s0 of authentication to be used, or a list of \s-1TYPES\s0 which the
client prefers.  The server may provide preferences as well, and that
order will be kept.  This option is only supported by a small subset of
folder types, especially by \s-1POP\s0 and \s-1IMAP.\s0
.IP "create => \s-1BOOLEAN\s0" 2
.IX Item "create => BOOLEAN"
Create the folder if it does not exist. By default, this is not done.
The \f(CW\*(C`type\*(C'\fR option specifies which type of folder is created.
.IP "folder => NAME|URL" 2
.IX Item "folder => NAME|URL"
Which folder to open, specified by \s-1NAME\s0 or special \s-1URL.\s0
The \s-1URL\s0 format is composed as
.Sp
.Vb 1
\& type://username:password@hostname:port/foldername
.Ve
.Sp
Like real URLs, all fields are optional and have smart defaults, as long
as the string starts with a known folder type.  Far
from all folder types support all these options, but at least they are
always split-out.  Be warned that special characters in the password should
be properly url-encoded.
.Sp
When you specify anything which does not match the \s-1URL\s0 format, it is
passed directly to the \f(CW\*(C`new\*(C'\fR method of the folder which is opened.
.IP "folderdir => \s-1DIRECTORY\s0" 2
.IX Item "folderdir => DIRECTORY"
The directory where the folders are usually stored.
.IP "type => FOLDERTYPENAME|FOLDERTYPE" 2
.IX Item "type => FOLDERTYPENAME|FOLDERTYPE"
Specify the type of the folder.  If you do not specify this option while
opening a folder for reading, the manager checks all registered folder
types in order for the ability to open the folder. If you open a new
folder for writing, then the default will be the most recently registered
type. (If you add more than one type at once, the first of the list is
used.)
.Sp
Currently, the types are \f(CW\*(C`mbox\*(C'\fR, \f(CW\*(C`mh\*(C'\fR, \f(CW\*(C`maildir\*(C'\fR, \f(CW\*(C`pop3\*(C'\fR, \f(CW\*(C`pop3s\*(C'\fR,
\&\f(CW\*(C`imap4\*(C'\fR, and \f(CW\*(C`imap4s\*(C'\fR.  You may also use names \f(CW\*(C`pop\*(C'\fR, \f(CW\*(C`pops\*(C'\fR, \f(CW\*(C`imap\*(C'\fR,
and \f(CW\*(C`imaps\*(C'\fR.
.RE
.RS 4
.Sp
example: opening folders via the manager
.Sp
.Vb 2
\& my $jack  = $manager\->open(folder => \*(Aq=jack\*(Aq,
\&    type => \*(Aqmbox\*(Aq);
\&
\& my $rcvd  = $manager\->open(\*(AqmyMail\*(Aq,
\&    type => \*(AqMail::Box::Mbox\*(Aq, access => \*(Aqrw\*(Aq);
\&
\& my $inbox = $manager\->open(\*(AqInbox\*(Aq)
\&    or die "Cannot open Inbox.\en";
\&
\& my $pop   = \*(Aqpop3://myself:secret@pop3.server.com:120/x\*(Aq;
\& my $send  = $manager\->open($url);
\&
\& my $send  = $manager\->open(folder => \*(Aq/x\*(Aq,
\&   type => \*(Aqpop3\*(Aq, username => \*(Aqmyself\*(Aq, password => \*(Aqsecret\*(Aq
\&   server_name => \*(Aqpop3.server.com\*(Aq, server_port => \*(Aq120\*(Aq);
.Ve
.RE
.ie n .IP "$obj\->\fBopenFolders\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBopenFolders\fR()" 4
.IX Item "$obj->openFolders()"
Returns a list of all open folders.
.SS "Manage existing folders"
.IX Subsection "Manage existing folders"
.ie n .IP "$obj\->\fBdelete\fR($foldername, %options)" 4
.el .IP "\f(CW$obj\fR\->\fBdelete\fR($foldername, \f(CW%options\fR)" 4
.IX Item "$obj->delete($foldername, %options)"
Remove the named folder.  The \f(CW%options\fR are the same as those for \fBopen()\fR.
.Sp
The deletion of a folder can take some time.  Dependent on the type of
folder, the folder must be read first.  For some folder-types this will
be fast.
.Sp
.Vb 2
\& \-Option   \-\-Default
\&  recursive  <folder\*(Aqs default>
.Ve
.RS 4
.IP "recursive => \s-1BOOLEAN\s0" 2
.IX Item "recursive => BOOLEAN"
Some folder can only be recursively deleted, other have more flexibility.
.RE
.RS 4
.RE
.SS "Move messages to folders"
.IX Subsection "Move messages to folders"
.ie n .IP "$obj\->\fBappendMessage\fR( [$folder|$foldername], $messages, %options )" 4
.el .IP "\f(CW$obj\fR\->\fBappendMessage\fR( [$folder|$foldername], \f(CW$messages\fR, \f(CW%options\fR )" 4
.IX Item "$obj->appendMessage( [$folder|$foldername], $messages, %options )"
Append one or more messages to a folder (therefore, an \f(CW\*(C`appendMessages()\*(C'\fR
is defined as well). You may specify a \f(CW$foldername\fR or an opened folder
as the first argument. When the name is that of an open folder, it is
treated as if the folder-object was specified, and not directly access
the folder-files.  You may also specify the foldername as part of the
options list.
.Sp
If a message is added to an already opened folder, it is only added to
the structure internally in the program.  The data will not be written to
disk until a write of that folder takes place.  When the name of an
unopened folder is given, the folder is opened, the messages stored on
disk, and then the folder is closed.
.Sp
A message must be an instance of a Mail::Message.  The actual message
type does not have to match the folder type\*(--the folder will try to
resolve the differences with minimal loss of information.  The coerced
messages (how the were actually written) are returned as list.
.Sp
The \f(CW%options\fR is a list of key/values, which are added to (overriding)
the default options for the detected folder type.
.Sp
example:
.Sp
.Vb 2
\& $mgr\->appendMessage(\*(Aq=send\*(Aq, $message, folderdir => \*(Aq/\*(Aq);
\& $mgr\->appendMessage($received, $inbox\->messages);
\&
\& my @appended = $mgr\->appendMessages($inbox\->messages,
\&    folder => \*(AqDrafts\*(Aq);
\& $_\->label(seen => 1) foreach @appended;
.Ve
.ie n .IP "$obj\->\fBcopyMessage\fR( [$folder|$foldername], $messages, %options )" 4
.el .IP "\f(CW$obj\fR\->\fBcopyMessage\fR( [$folder|$foldername], \f(CW$messages\fR, \f(CW%options\fR )" 4
.IX Item "$obj->copyMessage( [$folder|$foldername], $messages, %options )"
Copy a message from one folder into another folder.  If the destination
folder is already opened, \fBMail::Box::copyTo()\fR is used.  Otherwise,
\&\fBMail::Box::appendMessages()\fR is called.
.Sp
You need to specify a folder's name or folder object as the first
argument, or in the options list.  The options are the same as those
which can be specified when opening a folder.
.Sp
.Vb 2
\& \-Option\-\-Default
\&  share   <false>
.Ve
.RS 4
.IP "share => \s-1BOOLEAN\s0" 2
.IX Item "share => BOOLEAN"
Try to share the physical storage of the messages.  The folder types
may be different, but it all depends on the actual folder where the
message is copied to.  Silently ignored when not possible to share.
.RE
.RS 4
.Sp
example:
.Sp
.Vb 3
\& my $drafts = $mgr\->open(folder => \*(AqDrafts\*(Aq);
\& my $outbox = $mgr\->open(folder => \*(AqOutbox\*(Aq);
\& $mgr\->copyMessage($outbox, $drafts\->message(0));
\&
\& my @messages = $drafts\->message(1,2);
\& $mgr\->copyMessage(\*(Aq=Trash\*(Aq, @messages,
\&    folderdir => \*(Aq/tmp\*(Aq, create => 1);
\&
\& $mgr\->copyMessage($drafts\->message(1),
\&    folder => \*(Aq=Drafts\*(Aq folderdir => \*(Aq/tmp\*(Aq,
\&    create => 1);
.Ve
.RE
.ie n .IP "$obj\->\fBmoveMessage\fR( [$folder|$foldername], $messages, %options )" 4
.el .IP "\f(CW$obj\fR\->\fBmoveMessage\fR( [$folder|$foldername], \f(CW$messages\fR, \f(CW%options\fR )" 4
.IX Item "$obj->moveMessage( [$folder|$foldername], $messages, %options )"
Move a message from one folder to another.
.Sp
\&\s-1BE WARNED\s0 that removals from a folder only take place when the folder
is closed, so the message is only flagged to be deleted in the opened
source folder.
.Sp
\&\s-1BE WARNED\s0 that message labels may get lost when a message is moved from
one folder type to an other.  An attempt is made to translate labels,
but there are many differences in interpretation by applications.
.Sp
.Vb 1
\& $mgr\->moveMessage($received, $inbox\->message(1))
.Ve
.Sp
is equivalent to
.Sp
.Vb 2
\& $mgr\->copyMessage($received, $inbox\->message(1), share => 1);
\& $inbox\->message(1)\->delete;
\&
\& \-Option\-\-Default
\&  share   <true>
.Ve
.RS 4
.IP "share => \s-1BOOLEAN\s0" 2
.IX Item "share => BOOLEAN"
.RE
.RS 4
.RE
.SS "Manage message threads"
.IX Subsection "Manage message threads"
.PD 0
.ie n .IP "$obj\->\fBthreads\fR( [$folders], %options )" 4
.el .IP "\f(CW$obj\fR\->\fBthreads\fR( [$folders], \f(CW%options\fR )" 4
.IX Item "$obj->threads( [$folders], %options )"
.PD
Create a new object which keeps track of message threads.  You can
read about the possible options in Mail::Box::Thread::Manager.
As \f(CW%options\fR specify one folder or an array of \f(CW$folders\fR.
It is also permitted to specify folders before the options.
.Sp
example:
.Sp
.Vb 3
\& my $t1 = $mgr\->threads(folders => [ $inbox, $send ]);
\& my $t2 = $mgr\->threads($inbox);
\& my $t3 = $mgr\->threads($inbox, $send);
.Ve
.SS "Internals"
.IX Subsection "Internals"
.ie n .IP "$obj\->\fBdecodeFolderURL\fR($url)" 4
.el .IP "\f(CW$obj\fR\->\fBdecodeFolderURL\fR($url)" 4
.IX Item "$obj->decodeFolderURL($url)"
Try to decompose a folder name which is specified as \f(CW$url\fR (see \fBopen()\fR)
into separate options.  Special characters like @\-sign, colon, and slash
used in the user or password parts must be passed \f(CW$url\fR\-encoded.
.ie n .IP "$obj\->\fBtoBeThreaded\fR($folder, $messages)" 4
.el .IP "\f(CW$obj\fR\->\fBtoBeThreaded\fR($folder, \f(CW$messages\fR)" 4
.IX Item "$obj->toBeThreaded($folder, $messages)"
Signal to the manager that all thread managers which are using the
specified folder must be informed that new messages are
coming in.
.ie n .IP "$obj\->\fBtoBeUnthreaded\fR($folder, $messages)" 4
.el .IP "\f(CW$obj\fR\->\fBtoBeUnthreaded\fR($folder, \f(CW$messages\fR)" 4
.IX Item "$obj->toBeUnthreaded($folder, $messages)"
Signal to the manager that all thread managers which are using the
specified folder must be informed that new messages are
or going out.
.SS "Error handling"
.IX Subsection "Error handling"
Extends \*(L"Error handling\*(R" in Mail::Reporter.
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR($object)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR($object)" 4
.IX Item "$obj->addReport($object)"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "$obj->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD 0
.ie n .IP "Mail::Box::Manager\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "Mail::Box::Manager\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "Mail::Box::Manager->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR( [$level, [$strings]] )" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "$obj->log( [$level, [$strings]] )"
.PD 0
.IP "Mail::Box::Manager\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "Mail::Box::Manager->log( [$level, [$strings]] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR($level)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR($level)" 4
.IX Item "$obj->logPriority($level)"
.PD 0
.IP "Mail::Box::Manager\->\fBlogPriority\fR($level)" 4
.IX Item "Mail::Box::Manager->logPriority($level)"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR( [$level] )" 4
.IX Item "$obj->report( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR( [$level] )" 4
.IX Item "$obj->reportAll( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR( [$level] )" 4
.IX Item "$obj->trace( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
Extends \*(L"Cleanup\*(R" in Mail::Reporter.
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
Inherited, see \*(L"Cleanup\*(R" in Mail::Reporter
.SH "DETAILS"
.IX Header "DETAILS"
On many places in the documentation you can read that it is useful to
have a manager object.  There are two of them: the Mail::Box::Manager,
which maintains a set of open folders, and an extension of it: the
Mail::Box::Manage::User.
.SS "Managing open folders"
.IX Subsection "Managing open folders"
It is useful to start your program by creating a folder manager object,
an Mail::Box::Manager.  The object takes a few burdons from your neck:
.IP "\(bu" 4
autodetect the type of folder which is used.
.Sp
This means that your application can be fully folder type independent.
.IP "\(bu" 4
autoload the required modules
.Sp
There are so many modules involved in MailBox, that it is useful to
have some lazy autoloading of code.  The manager knows which modules
belong to which type of folder.
.IP "\(bu" 4
avoid double openings
.Sp
Your programming mistakes may cause the same folder to be opened twice.
The result of that could be very destructive.  Therefore, the manager
keeps track on all open folders and avoids the same folder to be opened
for the second time.
.IP "\(bu" 4
close folders at clean-up
.Sp
When the program is ending, the manager will cleanly close all folders
which are still open.  This is required, because the autodestruct
sequence of Perl works in an unpredicatable order.
.IP "\(bu" 4
message thread detection
.Sp
MailBox can discover message threads which span multiple folders. Any set
of open folders may be grouped in a tree of replies on replies on replies.
When a folder is closed, it will automatically be removed from the threads,
and a new folder can dynamically be added to the structure.
.PP
The manager is really simplifying things, and should therefore be the
base of all programs. However, it is possible to write useful programs
without it.
.SS "Managing a user"
.IX Subsection "Managing a user"
One step further is the Mail::Box::Manage::User object (since MailBox
v2.057), which not only keeps track on open folders, but also collects
information about not-open folders.
.PP
The user class is, as the name says, targeted on managing one single user.
Where the Mail::Box::Manager will open any set of folder files, probably
from multiple users, the user class want one root folder directory.
.PP
In many aspects, the user manager simplifies the task for user-based servers
and other user-centric applications by setting smart defaults.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Folder $name is already open." 4
.el .IP "Error: Folder \f(CW$name\fR is already open." 4
.IX Item "Error: Folder $name is already open."
You cannot ask the manager for a folder which is already open. In some
older releases (before MailBox 2.049), this was permitted, but then
behaviour changed, because many nasty side-effects are to be expected.
For instance, an \fBMail::Box::update()\fR on one folder handle would
influence the second, probably unexpectedly.
.ie n .IP "Error: Folder $name is not a Mail::Box; cannot add a message." 4
.el .IP "Error: Folder \f(CW$name\fR is not a Mail::Box; cannot add a message." 4
.IX Item "Error: Folder $name is not a Mail::Box; cannot add a message."
The folder where the message should be appended to is an object which is
not a folder type which extends Mail::Box.  Probably, it is not a folder
at all.
.ie n .IP "Warning: Folder does not exist, failed opening $type folder $name." 4
.el .IP "Warning: Folder does not exist, failed opening \f(CW$type\fR folder \f(CW$name\fR." 4
.IX Item "Warning: Folder does not exist, failed opening $type folder $name."
The folder does not exist and creating is not permitted (see
open(create)) or did not succeed.  When you do not have sufficient
access rights to the folder (for instance wrong password for \s-1POP3\s0),
this warning will be produced as well.
.Sp
The manager tried to open a folder of the specified type.  It may help
to explicitly state the type of your folder with the \f(CW\*(C`type\*(C'\fR option.
There will probably be another warning or error message which is related
to this report and provides more details about its cause.  You may also
have a look at new(autodetect) and new(folder_types).
.ie n .IP "Warning: Folder type $type is unknown, using autodetect." 4
.el .IP "Warning: Folder type \f(CW$type\fR is unknown, using autodetect." 4
.IX Item "Warning: Folder type $type is unknown, using autodetect."
The specified folder type (see open(type), possibly derived from
the folder name when specified as url) is not known to the manager.
This may mean that you forgot to require the Mail::Box extension
which implements this folder type, but probably it is a typo.  Usually,
the manager is able to figure-out which type to use by itself.
.IP "Error: Illegal folder \s-1URL\s0 '$url'." 4
.IX Item "Error: Illegal folder URL '$url'."
The folder name was specified as \s-1URL,\s0 but not according to the syntax.
See \fBdecodeFolderURL()\fR for an description of the syntax.
.IP "Error: No foldername specified to open." 4
.IX Item "Error: No foldername specified to open."
\&\f(CW\*(C`open()\*(C'\fR needs a folder name as first argument (before the list of options),
or with the \f(CW\*(C`folder\*(C'\fR option within the list.  If no name was found, the
\&\s-1MAIL\s0 environment variable is checked.  When even that does not result in
a usable folder, then this error is produced.  The error may be caused by
an accidental odd-length option list.
.ie n .IP "Error: Package $package does not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR does not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package does not implement $method."
Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.
.IP "Error: Use \fBappendMessage()\fR to add messages which are not in a folder." 4
.IX Item "Error: Use appendMessage() to add messages which are not in a folder."
You do not need to copy this message into the folder, because you do
not share the message between folders.
.IP "Warning: Use \fBmoveMessage()\fR or \fBcopyMessage()\fR to move between open folders." 4
.IX Item "Warning: Use moveMessage() or copyMessage() to move between open folders."
The message is already part of a folder, and now it should be appended
to a different folder.  You need to decide between copy or move, which
both will clone the message (not the body, because they are immutable).
.ie n .IP "Warning: Will never create a folder $name without having write access." 4
.el .IP "Warning: Will never create a folder \f(CW$name\fR without having write access." 4
.IX Item "Warning: Will never create a folder $name without having write access."
You have set open(create), but only want to read the folder.  Create is
only useful for folders which have write or append access modes
(see Mail::Box::new(access)).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Box distribution version 3.008,
built on October 04, 2019. Website: \fIhttp://perl.overmeer.net/CPAN/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2019 by [Mark Overmeer]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://dev.perl.org/licenses/\fR
