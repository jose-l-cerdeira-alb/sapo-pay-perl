.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Message::Head::ResentGroup 3"
.TH Mail::Message::Head::ResentGroup 3 "2020-02-07" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Message::Head::ResentGroup \- header fields tracking message delivery
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 3
\& Mail::Message::Head::ResentGroup
\&   is a Mail::Message::Head::FieldGroup
\&   is a Mail::Reporter
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\& use Mail::Message::Head::ResentGroup;
\& my $rg = Mail::Message::Head::ResentGroup\->new(head => $head,
\&              From => \*(Aqme@home.nl\*(Aq, To => \*(AqYou@tux.aq\*(Aq);
\& $head\->addResentGroup($rg);
\&
\& my $rg = $head\->addResentGroup(From => \*(Aqme\*(Aq);
\&
\& my @from = $rg\->From;
\&
\& my @rgs = $head\->resentGroups;
\& $rg[2]\->delete if @rgs > 2;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A \fIresent group\fR is a set of header fields which describe one intermediate
step in the message transport.  Resent groups \fBhave \s-1NOTHING\s0 to do\fR with
user activety; there is no relation to the \f(CW\*(C`user\*(Aqs\*(C'\fR sense of creating
reply, forward, or bounce messages at all!
.PP
Extends \*(L"\s-1DESCRIPTION\*(R"\s0 in Mail::Message::Head::FieldGroup.
.SH "METHODS"
.IX Header "METHODS"
Extends \*(L"\s-1METHODS\*(R"\s0 in Mail::Message::Head::FieldGroup.
.SS "Constructors"
.IX Subsection "Constructors"
Extends \*(L"Constructors\*(R" in Mail::Message::Head::FieldGroup.
.ie n .IP "$obj\->\fBclone\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBclone\fR()" 4
.IX Item "$obj->clone()"
Inherited, see \*(L"Constructors\*(R" in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBfrom\fR( [<$head|$message>, %options] )" 4
.el .IP "\f(CW$obj\fR\->\fBfrom\fR( [<$head|$message>, \f(CW%options\fR] )" 4
.IX Item "$obj->from( [<$head|$message>, %options] )"
\&\s-1WARNING:\s0 this method has two very different purposes.  For backward
compatibility reasons, without arguments \fBresentFrom()\fR is called to
return the \f(CW\*(C`From\*(C'\fR field of this resent group.
.Sp
With any arguments, a list of \f(CW\*(C`Mail::Message::Head::ResentGroup\*(C'\fR objects
is returned, taken from the specified \f(CW$message\fR or message \f(CW$head\fR.
.ie n .IP "$obj\->\fBimplementedTypes\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBimplementedTypes\fR()" 4
.IX Item "$obj->implementedTypes()"
.PD 0
.IP "Mail::Message::Head::ResentGroup\->\fBimplementedTypes\fR()" 4
.IX Item "Mail::Message::Head::ResentGroup->implementedTypes()"
.PD
Inherited, see \*(L"Constructors\*(R" in Mail::Message::Head::FieldGroup
.ie n .IP "Mail::Message::Head::ResentGroup\->\fBnew\fR( [$fields], %options )" 4
.el .IP "Mail::Message::Head::ResentGroup\->\fBnew\fR( [$fields], \f(CW%options\fR )" 4
.IX Item "Mail::Message::Head::ResentGroup->new( [$fields], %options )"
Create an object which maintains one set of resent headers.  The
\&\f(CW$fields\fR are Mail::Message::Field objects from the same header.
.Sp
\&\f(CW%options\fR which start with capitals will be used to construct additional
fields.  These option names are prepended with \f(CW\*(C`Resent\-*\*(C'\fR, keeping the
capitization of what is specified.
.Sp
.Vb 10
\& \-Option      \-\-Defined in                     \-\-Default
\&  Bcc                                            undef
\&  Cc                                             undef
\&  Date                                           <now>
\&  Delivered\-To                                   undef
\&  From                                           <required>
\&  Message\-ID                                     <uniquely created>
\&  Received                                       <created>
\&  Return\-Path                                    undef
\&  Sender                                         undef
\&  To                                             undef
\&  head                                           <created automatically>
\&  log           Mail::Reporter                   \*(AqWARNINGS\*(Aq
\&  message_head                                   undef
\&  software      Mail::Message::Head::FieldGroup  undef
\&  trace         Mail::Reporter                   \*(AqWARNINGS\*(Aq
\&  type          Mail::Message::Head::FieldGroup  undef
\&  version       Mail::Message::Head::FieldGroup  undef
.Ve
.RS 4
.IP "Bcc => STRING|OBJECT|OBJECTS" 2
.IX Item "Bcc => STRING|OBJECT|OBJECTS"
.PD 0
.IP "Cc => STRING|OBJECT|OBJECTS" 2
.IX Item "Cc => STRING|OBJECT|OBJECTS"
.IP "Date => \s-1STRING\s0" 2
.IX Item "Date => STRING"
.PD
When this resent-group is dispatched by the resender of the message. Like
the \f(CW\*(C`Date\*(C'\fR field, it is not the date and time that the message was
actually transported.
.IP "Delivered-To => STRING|FIELD" 2
.IX Item "Delivered-To => STRING|FIELD"
.PD 0
.IP "From => STRING|OBJECT|OBJECTS" 2
.IX Item "From => STRING|OBJECT|OBJECTS"
.IP "Message-ID => STRING|FIELD" 2
.IX Item "Message-ID => STRING|FIELD"
.PD
The \f(CW\*(C`Resent\-Message\-ID\*(C'\fR which identifies this resent group.  The \s-1FIELD\s0
must contain a message id.
.IP "Received => \s-1STRING\s0" 2
.IX Item "Received => STRING"
The \f(CW\*(C`Received\*(C'\fR field is the starting line for a resent group of header
lines. If it is not defined, one is created using \fBcreateReceived()\fR.
.IP "Return-Path => STRING|FIELD" 2
.IX Item "Return-Path => STRING|FIELD"
.PD 0
.IP "Sender => STRING|OBJECT" 2
.IX Item "Sender => STRING|OBJECT"
.PD
Only permitted when more than one from address is specified.  In this case,
it selects one of these addresses as the main originator of the message.
.IP "To => STRING|OBJECT|OBJECTS" 2
.IX Item "To => STRING|OBJECT|OBJECTS"
.PD 0
.IP "head => \s-1OBJECT\s0" 2
.IX Item "head => OBJECT"
.PD
The header where the data is stored in. By default a
Mail::Message::Head::Partial is created for you.
.IP "log => \s-1LEVEL\s0" 2
.IX Item "log => LEVEL"
.PD 0
.IP "message_head => \s-1HEAD\s0" 2
.IX Item "message_head => HEAD"
.PD
The real header of the message where this resent group is part of.  The
\&\f(CW\*(C`head\*(C'\fR used in this class is only a container for a subset of fields.
.IP "software => \s-1STRING\s0" 2
.IX Item "software => STRING"
.PD 0
.IP "trace => \s-1LEVEL\s0" 2
.IX Item "trace => LEVEL"
.IP "type => \s-1STRING\s0" 2
.IX Item "type => STRING"
.IP "version => \s-1STRING\s0" 2
.IX Item "version => STRING"
.RE
.RS 4
.RE
.PD
.SS "The header"
.IX Subsection "The header"
Extends \*(L"The header\*(R" in Mail::Message::Head::FieldGroup.
.ie n .IP "$obj\->\fBadd\fR( <$field, $value> | $object )" 4
.el .IP "\f(CW$obj\fR\->\fBadd\fR( <$field, \f(CW$value\fR> | \f(CW$object\fR )" 4
.IX Item "$obj->add( <$field, $value> | $object )"
All fields appear only once, so \f(CW\*(C`add()\*(C'\fR behaves as \fBset()\fR.
.ie n .IP "$obj\->\fBaddFields\fR( [$fieldnames] )" 4
.el .IP "\f(CW$obj\fR\->\fBaddFields\fR( [$fieldnames] )" 4
.IX Item "$obj->addFields( [$fieldnames] )"
Not applicable to resent-groups: the same name can appear in more than
one group.  Therefore, a \s-1FIELDNAME\s0 is sufficiently distinctive.
.ie n .IP "$obj\->\fBattach\fR($head)" 4
.el .IP "\f(CW$obj\fR\->\fBattach\fR($head)" 4
.IX Item "$obj->attach($head)"
Inherited, see \*(L"The header\*(R" in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBdelete\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdelete\fR()" 4
.IX Item "$obj->delete()"
Inherited, see \*(L"The header\*(R" in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBfieldNames\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfieldNames\fR()" 4
.IX Item "$obj->fieldNames()"
Inherited, see \*(L"The header\*(R" in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBfields\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBfields\fR()" 4
.IX Item "$obj->fields()"
Inherited, see \*(L"The header\*(R" in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBhead\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBhead\fR()" 4
.IX Item "$obj->head()"
Inherited, see \*(L"The header\*(R" in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBmessageHead\fR( [$head] )" 4
.el .IP "\f(CW$obj\fR\->\fBmessageHead\fR( [$head] )" 4
.IX Item "$obj->messageHead( [$head] )"
Returns (optionally after setting) the real header where this resent group
belongs to.  This may be undef at creation, and then later filled in
when \fBMail::Message::Head::Complete::addResentGroup()\fR is called.
.ie n .IP "$obj\->\fBorderedFields\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBorderedFields\fR()" 4
.IX Item "$obj->orderedFields()"
Returns the fields in the order as should appear in header according
to rfc2822.  For the \f(CW\*(C`Resent\-*\*(C'\fR fields of the group, the order is
not that important, but the \f(CW\*(C`Return\-Path\*(C'\fR, \f(CW\*(C`Delivered\-To\*(C'\fR, and \f(CW\*(C`Received\*(C'\fR
must come first.  Only fields mentioned in the \s-1RFC\s0 are returned.
.ie n .IP "$obj\->\fBset\fR( <$field, $value> | $object )" 4
.el .IP "\f(CW$obj\fR\->\fBset\fR( <$field, \f(CW$value\fR> | \f(CW$object\fR )" 4
.IX Item "$obj->set( <$field, $value> | $object )"
Set a \f(CW$field\fR to a (new) \f(CW$value\fR.  The \f(CW$field\fR names which do not start with
\&'Resent\-*' but need it will have that added.  It is also an option to
specify a fully prepared message field \f(CW$object\fR.  In any case, a field
\&\f(CW$object\fR is returned.
.Sp
example:
.Sp
.Vb 4
\& my $this = Mail::Message::Head::ResentGroup\->new;
\& $this\->set(To => \*(Aqfish@tux.aq\*(Aq);
\& $msg\->addResentGroup($this);
\& $msg\->send;
\&
\& $msg\->bounce(To => \*(Aqfish@tux.aq\*(Aq)\->send;   # the same
\&
\& my $this = Mail::Message::Head::ResentGroup
\&     \->new(To => \*(Aqfish@tux.aq\*(Aq);
.Ve
.SS "Access to the header"
.IX Subsection "Access to the header"
Extends \*(L"Access to the header\*(R" in Mail::Message::Head::FieldGroup.
.ie n .IP "$obj\->\fBbcc\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBbcc\fR()" 4
.IX Item "$obj->bcc()"
In scalar context, the \f(CW\*(C`Resent\-Bcc\*(C'\fR field is returned.  In list context,
the addresses as specified within the bcc field are returned as
Mail::Address objects.  Bcc fields are not transmitted (hidden for
external parties).
.ie n .IP "$obj\->\fBcc\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBcc\fR()" 4
.IX Item "$obj->cc()"
In scalar context, the \f(CW\*(C`Resent\-Cc\*(C'\fR field is returned.  In list context,
the addresses as specified within the cc field are returned as
Mail::Address objects.
.ie n .IP "$obj\->\fBdate\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdate\fR()" 4
.IX Item "$obj->date()"
Returns the \f(CW\*(C`Resent\-Date\*(C'\fR field, or \f(CW\*(C`undef\*(C'\fR if it was not defined.
.ie n .IP "$obj\->\fBdateTimestamp\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdateTimestamp\fR()" 4
.IX Item "$obj->dateTimestamp()"
The timestamp as stored within the \f(CW\*(C`Resent\-Date\*(C'\fR field converted to
local system time.
.ie n .IP "$obj\->\fBdeliveredTo\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdeliveredTo\fR()" 4
.IX Item "$obj->deliveredTo()"
The field which describes the \f(CW\*(C`Delivered\-To\*(C'\fR of this resent group.
.ie n .IP "$obj\->\fBdestinations\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdestinations\fR()" 4
.IX Item "$obj->destinations()"
Returns a list of all addresses specified in the \f(CW\*(C`Resent\-To\*(C'\fR, \f(CW\*(C`\-Cc\*(C'\fR, and
\&\f(CW\*(C`\-Bcc\*(C'\fR fields of this resent group.
.ie n .IP "$obj\->\fBisResentGroupFieldName\fR($name)" 4
.el .IP "\f(CW$obj\fR\->\fBisResentGroupFieldName\fR($name)" 4
.IX Item "$obj->isResentGroupFieldName($name)"
.PD 0
.IP "Mail::Message::Head::ResentGroup\->\fBisResentGroupFieldName\fR($name)" 4
.IX Item "Mail::Message::Head::ResentGroup->isResentGroupFieldName($name)"
.ie n .IP "$obj\->\fBmessageId\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBmessageId\fR()" 4
.IX Item "$obj->messageId()"
.PD
Returns the message-ID used for this group of resent lines.
.ie n .IP "$obj\->\fBreceived\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBreceived\fR()" 4
.IX Item "$obj->received()"
The field which describes the \f(CW\*(C`Received\*(C'\fR data of this resent group.
.ie n .IP "$obj\->\fBreceivedTimestamp\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBreceivedTimestamp\fR()" 4
.IX Item "$obj->receivedTimestamp()"
The timestamp as stored within the \f(CW\*(C`Received\*(C'\fR field converted to
local system time.
.ie n .IP "$obj\->\fBresentFrom\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBresentFrom\fR()" 4
.IX Item "$obj->resentFrom()"
In scalar context, the \f(CW\*(C`Resent\-From\*(C'\fR field is returned.  In list
context, the addresses as specified within the from field are
returned as Mail::Address objects.
.Sp
For reasons of backward compatibility and consistency, the \fBfrom()\fR
method will return the same as this method.
.ie n .IP "$obj\->\fBreturnPath\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBreturnPath\fR()" 4
.IX Item "$obj->returnPath()"
The field which describes the \f(CW\*(C`Return\-Path\*(C'\fR of this resent group.
.ie n .IP "$obj\->\fBsender\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBsender\fR()" 4
.IX Item "$obj->sender()"
In scalar context, the \f(CW\*(C`Resent\-Sender\*(C'\fR field is returned.  In list
context, the addresses as specified within the from field are
returned as Mail::Address objects.
.ie n .IP "$obj\->\fBsoftware\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBsoftware\fR()" 4
.IX Item "$obj->software()"
Inherited, see \*(L"Access to the header\*(R" in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBto\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBto\fR()" 4
.IX Item "$obj->to()"
In scalar context, the \f(CW\*(C`Resent\-To\*(C'\fR field is returned.  In list context,
the addresses as specified within the to field are returned as
Mail::Address objects.
.ie n .IP "$obj\->\fBtype\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBtype\fR()" 4
.IX Item "$obj->type()"
Inherited, see \*(L"Access to the header\*(R" in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBversion\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBversion\fR()" 4
.IX Item "$obj->version()"
Inherited, see \*(L"Access to the header\*(R" in Mail::Message::Head::FieldGroup
.SS "Internals"
.IX Subsection "Internals"
Extends \*(L"Internals\*(R" in Mail::Message::Head::FieldGroup.
.ie n .IP "$obj\->\fBcollectFields\fR( [$name] )" 4
.el .IP "\f(CW$obj\fR\->\fBcollectFields\fR( [$name] )" 4
.IX Item "$obj->collectFields( [$name] )"
Inherited, see \*(L"Internals\*(R" in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBcreateReceived\fR( [$domain] )" 4
.el .IP "\f(CW$obj\fR\->\fBcreateReceived\fR( [$domain] )" 4
.IX Item "$obj->createReceived( [$domain] )"
Create a received field for this resent group.  This is automatically
called if none was specified during creation of this resent group object.
.Sp
The content of this field is described in \s-1RFC2821\s0 section 4.4.  It could use
some improvement.
.ie n .IP "$obj\->\fBdetected\fR($type, $software, $version)" 4
.el .IP "\f(CW$obj\fR\->\fBdetected\fR($type, \f(CW$software\fR, \f(CW$version\fR)" 4
.IX Item "$obj->detected($type, $software, $version)"
Inherited, see \*(L"Internals\*(R" in Mail::Message::Head::FieldGroup
.SS "Error handling"
.IX Subsection "Error handling"
Extends \*(L"Error handling\*(R" in Mail::Message::Head::FieldGroup.
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR($object)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR($object)" 4
.IX Item "$obj->addReport($object)"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "$obj->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD 0
.ie n .IP "Mail::Message::Head::ResentGroup\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "Mail::Message::Head::ResentGroup\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "Mail::Message::Head::ResentGroup->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBdetails\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBdetails\fR()" 4
.IX Item "$obj->details()"
Inherited, see \*(L"Error handling\*(R" in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR( [$level, [$strings]] )" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "$obj->log( [$level, [$strings]] )"
.PD 0
.IP "Mail::Message::Head::ResentGroup\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "Mail::Message::Head::ResentGroup->log( [$level, [$strings]] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR($level)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR($level)" 4
.IX Item "$obj->logPriority($level)"
.PD 0
.IP "Mail::Message::Head::ResentGroup\->\fBlogPriority\fR($level)" 4
.IX Item "Mail::Message::Head::ResentGroup->logPriority($level)"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBprint\fR( [$fh] )" 4
.el .IP "\f(CW$obj\fR\->\fBprint\fR( [$fh] )" 4
.IX Item "$obj->print( [$fh] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Message::Head::FieldGroup
.ie n .IP "$obj\->\fBreport\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR( [$level] )" 4
.IX Item "$obj->report( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR( [$level] )" 4
.IX Item "$obj->reportAll( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR( [$level] )" 4
.IX Item "$obj->trace( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
Extends \*(L"Cleanup\*(R" in Mail::Message::Head::FieldGroup.
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
Inherited, see \*(L"Cleanup\*(R" in Mail::Reporter
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.IP "Error: Message header required for creation of ResentGroup." 4
.IX Item "Error: Message header required for creation of ResentGroup."
It is required to know to which header the resent-group
is created.  Use the \f(CW\*(C`head\*(C'\fR option.  Maybe you should use
\&\fBMail::Message::Head::Complete::addResentGroup()\fR with \s-1DATA,\s0 which will
organize the correct initiations for you.
.ie n .IP "Error: Package $package does not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR does not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package does not implement $method."
Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Message distribution version 3.009,
built on February 07, 2020. Website: \fIhttp://perl.overmeer.net/CPAN/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2020 by [Mark Overmeer <markov@cpan.org>]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://dev.perl.org/licenses/\fR
