.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Atom 3"
.TH Atom 3 "2020-07-20" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom \- Perl/XS interface to SAPO.Broker.Codecs.Autogen.ProtobufXS.Atom
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.SS "Serializing messages"
.IX Subsection "Serializing messages"
.Vb 1
\& #!/usr/bin/perl
\&
\& use strict;
\& use warnings;
\& use SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom;
\&
\& my $Atom = SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom\->new;
\& # Set fields in $Atom...
\& my $packAtom = $Atom\->pack();
.Ve
.SS "Unserializing messages"
.IX Subsection "Unserializing messages"
.Vb 1
\& #!/usr/bin/perl
\&
\& use strict;
\& use warnings;
\& use SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom;
\&
\& my $packAtom; # Read this from somewhere...
\& my $Atom = SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom\->new;
\& if ( $Atom\->unpack($packAtom) ) {
\&   print "OK"
\& } else {
\&   print "NOT OK"
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom defines the following classes:
.ie n .IP """SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::DestinationType""" 5
.el .IP "\f(CWSAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::DestinationType\fR" 5
.IX Item "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::DestinationType"
A wrapper around the \s-1SAPO\s0.Broker.Codecs.Autogen.ProtobufXS.Atom.DestinationType enum
.ie n .IP """SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Parameter""" 5
.el .IP "\f(CWSAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Parameter\fR" 5
.IX Item "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Parameter"
A wrapper around the \s-1SAPO\s0.Broker.Codecs.Autogen.ProtobufXS.Atom.Parameter message
.ie n .IP """SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Header""" 5
.el .IP "\f(CWSAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Header\fR" 5
.IX Item "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Header"
A wrapper around the \s-1SAPO\s0.Broker.Codecs.Autogen.ProtobufXS.Atom.Header message
.ie n .IP """SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::BrokerMessage""" 5
.el .IP "\f(CWSAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::BrokerMessage\fR" 5
.IX Item "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::BrokerMessage"
A wrapper around the \s-1SAPO\s0.Broker.Codecs.Autogen.ProtobufXS.Atom.BrokerMessage message
.ie n .IP """SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Publish""" 5
.el .IP "\f(CWSAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Publish\fR" 5
.IX Item "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Publish"
A wrapper around the \s-1SAPO\s0.Broker.Codecs.Autogen.ProtobufXS.Atom.Publish message
.ie n .IP """SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Poll""" 5
.el .IP "\f(CWSAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Poll\fR" 5
.IX Item "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Poll"
A wrapper around the \s-1SAPO\s0.Broker.Codecs.Autogen.ProtobufXS.Atom.Poll message
.ie n .IP """SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Accepted""" 5
.el .IP "\f(CWSAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Accepted\fR" 5
.IX Item "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Accepted"
A wrapper around the \s-1SAPO\s0.Broker.Codecs.Autogen.ProtobufXS.Atom.Accepted message
.ie n .IP """SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::AcknowledgeMessage""" 5
.el .IP "\f(CWSAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::AcknowledgeMessage\fR" 5
.IX Item "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::AcknowledgeMessage"
A wrapper around the \s-1SAPO\s0.Broker.Codecs.Autogen.ProtobufXS.Atom.AcknowledgeMessage message
.ie n .IP """SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Subscribe""" 5
.el .IP "\f(CWSAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Subscribe\fR" 5
.IX Item "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Subscribe"
A wrapper around the \s-1SAPO\s0.Broker.Codecs.Autogen.ProtobufXS.Atom.Subscribe message
.ie n .IP """SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Unsubscribe""" 5
.el .IP "\f(CWSAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Unsubscribe\fR" 5
.IX Item "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Unsubscribe"
A wrapper around the \s-1SAPO\s0.Broker.Codecs.Autogen.ProtobufXS.Atom.Unsubscribe message
.ie n .IP """SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Notification""" 5
.el .IP "\f(CWSAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Notification\fR" 5
.IX Item "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Notification"
A wrapper around the \s-1SAPO\s0.Broker.Codecs.Autogen.ProtobufXS.Atom.Notification message
.ie n .IP """SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Fault""" 5
.el .IP "\f(CWSAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Fault\fR" 5
.IX Item "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Fault"
A wrapper around the \s-1SAPO\s0.Broker.Codecs.Autogen.ProtobufXS.Atom.Fault message
.ie n .IP """SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Ping""" 5
.el .IP "\f(CWSAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Ping\fR" 5
.IX Item "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Ping"
A wrapper around the \s-1SAPO\s0.Broker.Codecs.Autogen.ProtobufXS.Atom.Ping message
.ie n .IP """SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Pong""" 5
.el .IP "\f(CWSAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Pong\fR" 5
.IX Item "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Pong"
A wrapper around the \s-1SAPO\s0.Broker.Codecs.Autogen.ProtobufXS.Atom.Pong message
.ie n .IP """SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Authentication""" 5
.el .IP "\f(CWSAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Authentication\fR" 5
.IX Item "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Authentication"
A wrapper around the \s-1SAPO\s0.Broker.Codecs.Autogen.ProtobufXS.Atom.Authentication message
.ie n .IP """SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Action::ActionType""" 5
.el .IP "\f(CWSAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Action::ActionType\fR" 5
.IX Item "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Action::ActionType"
A wrapper around the \s-1SAPO\s0.Broker.Codecs.Autogen.ProtobufXS.Atom.Action.ActionType enum
.ie n .IP """SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Action""" 5
.el .IP "\f(CWSAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Action\fR" 5
.IX Item "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Action"
A wrapper around the \s-1SAPO\s0.Broker.Codecs.Autogen.ProtobufXS.Atom.Action message
.ie n .IP """SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom""" 5
.el .IP "\f(CWSAPO::Broker::Codecs::Autogen::ProtobufXS::Atom\fR" 5
.IX Item "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom"
A wrapper around the \s-1SAPO\s0.Broker.Codecs.Autogen.ProtobufXS.Atom message
.ie n .SH """SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::DestinationType"" values"
.el .SH "\f(CWSAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::DestinationType\fP values"
.IX Header "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::DestinationType values"
.IP "\fB\s-1TOPIC\s0\fR" 4
.IX Item "TOPIC"
This constant has a value of 0.
.IP "\fB\s-1QUEUE\s0\fR" 4
.IX Item "QUEUE"
This constant has a value of 1.
.IP "\fB\s-1VIRTUAL_QUEUE\s0\fR" 4
.IX Item "VIRTUAL_QUEUE"
This constant has a value of 2.
.SH "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Parameter Constructor"
.IX Header "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Parameter Constructor"
.IP "\fB\f(CB$Parameter\fB = SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Parameter\->new( [$arg] )\fR" 4
.IX Item "$Parameter = SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Parameter->new( [$arg] )"
Constructs an instance of \f(CW\*(C`SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Parameter\*(C'\fR.  If a hashref argument
is supplied, it is copied into the message instance as if
the \fBcopy_from()\fR method were called immediately after
construction.  Otherwise, if a scalar argument is supplied,
it is interpreted as a serialized instance of the message
type, and the scalar is parsed to populate the message
fields.  Otherwise, if no argument is supplied, an empty
message instance is constructed.
.SH "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Parameter Methods"
.IX Header "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Parameter Methods"
.IP "\fB\f(CB$Parameter2\fB\->copy_from($Parameter1)\fR" 4
.IX Item "$Parameter2->copy_from($Parameter1)"
Copies the contents of \f(CW\*(C`Parameter1\*(C'\fR into \f(CW\*(C`Parameter2\*(C'\fR.
\&\f(CW\*(C`Parameter2\*(C'\fR is another instance of the same message type.
.IP "\fB\f(CB$Parameter2\fB\->copy_from($hashref)\fR" 4
.IX Item "$Parameter2->copy_from($hashref)"
Copies the contents of \f(CW\*(C`hashref\*(C'\fR into \f(CW\*(C`Parameter2\*(C'\fR.
\&\f(CW\*(C`hashref\*(C'\fR is a Data::Dumper\-style representation of an
instance of the message type.
.IP "\fB\f(CB$Parameter2\fB\->merge_from($Parameter1)\fR" 4
.IX Item "$Parameter2->merge_from($Parameter1)"
Merges the contents of \f(CW\*(C`Parameter1\*(C'\fR into \f(CW\*(C`Parameter2\*(C'\fR.
\&\f(CW\*(C`Parameter2\*(C'\fR is another instance of the same message type.
.IP "\fB\f(CB$Parameter2\fB\->merge_from($hashref)\fR" 4
.IX Item "$Parameter2->merge_from($hashref)"
Merges the contents of \f(CW\*(C`hashref\*(C'\fR into \f(CW\*(C`Parameter2\*(C'\fR.
\&\f(CW\*(C`hashref\*(C'\fR is a Data::Dumper\-style representation of an
instance of the message type.
.IP "\fB\f(CB$Parameter\fB\->\fBclear()\fB\fR" 4
.IX Item "$Parameter->clear()"
Clears the contents of \f(CW\*(C`Parameter\*(C'\fR.
.IP "\fB\f(CB$init\fB = \f(CB$Parameter\fB\->\fBis_initialized()\fB\fR" 4
.IX Item "$init = $Parameter->is_initialized()"
Returns 1 if \f(CW\*(C`Parameter\*(C'\fR has been initialized with data.
.IP "\fB\f(CB$errstr\fB = \f(CB$Parameter\fB\->\fBerror_string()\fB\fR" 4
.IX Item "$errstr = $Parameter->error_string()"
Returns a comma-delimited string of initialization errors.
.IP "\fB\f(CB$Parameter\fB\->\fBdiscard_unknown_fields()\fB\fR" 4
.IX Item "$Parameter->discard_unknown_fields()"
Discards unknown fields from \f(CW\*(C`Parameter\*(C'\fR.
.IP "\fB\f(CB$dstr\fB = \f(CB$Parameter\fB\->\fBdebug_string()\fB\fR" 4
.IX Item "$dstr = $Parameter->debug_string()"
Returns a string representation of \f(CW\*(C`Parameter\*(C'\fR.
.IP "\fB\f(CB$dstr\fB = \f(CB$Parameter\fB\->\fBshort_debug_string()\fB\fR" 4
.IX Item "$dstr = $Parameter->short_debug_string()"
Returns a short string representation of \f(CW\*(C`Parameter\*(C'\fR.
.IP "\fB\f(CB$ok\fB = \f(CB$Parameter\fB\->unpack($string)\fR" 4
.IX Item "$ok = $Parameter->unpack($string)"
Attempts to parse \f(CW\*(C`string\*(C'\fR into \f(CW\*(C`Parameter\*(C'\fR, returning 1 on success and 0 on failure.
.IP "\fB\f(CB$string\fB = \f(CB$Parameter\fB\->\fBpack()\fB\fR" 4
.IX Item "$string = $Parameter->pack()"
Serializes \f(CW\*(C`Parameter\*(C'\fR into \f(CW\*(C`string\*(C'\fR.
.IP "\fB\f(CB$length\fB = \f(CB$Parameter\fB\->\fBlength()\fB\fR" 4
.IX Item "$length = $Parameter->length()"
Returns the serialized length of \f(CW\*(C`Parameter\*(C'\fR.
.IP "\fB\f(CB@fields\fB = \f(CB$Parameter\fB\->\fBfields()\fB\fR" 4
.IX Item "@fields = $Parameter->fields()"
Returns the defined fields of \f(CW\*(C`Parameter\*(C'\fR.
.IP "\fB\f(CB$hashref\fB = \f(CB$Parameter\fB\->\fBto_hashref()\fB\fR" 4
.IX Item "$hashref = $Parameter->to_hashref()"
Exports the message to a hashref suitable for use in the
\&\f(CW\*(C`copy_from\*(C'\fR or \f(CW\*(C`merge_from\*(C'\fR methods.
.IP "\fB\f(CB$has_name\fB = \f(CB$Parameter\fB\->\fBhas_name()\fB\fR" 4
.IX Item "$has_name = $Parameter->has_name()"
Returns 1 if the \f(CW\*(C`name\*(C'\fR element of \f(CW\*(C`Parameter\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Parameter\fB\->\fBclear_name()\fB\fR" 4
.IX Item "$Parameter->clear_name()"
Clears the \f(CW\*(C`name\*(C'\fR element(s) of \f(CW\*(C`Parameter\*(C'\fR.
.IP "\fB\f(CB$name\fB = \f(CB$Parameter\fB\->\fBname()\fB\fR" 4
.IX Item "$name = $Parameter->name()"
Returns \f(CW\*(C`name\*(C'\fR from \f(CW\*(C`Parameter\*(C'\fR.  \f(CW\*(C`name\*(C'\fR will be a string.
.IP "\fB\f(CB$Parameter\fB\->set_name($value)\fR" 4
.IX Item "$Parameter->set_name($value)"
Sets the value of \f(CW\*(C`name\*(C'\fR in \f(CW\*(C`Parameter\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a string.
.IP "\fB\f(CB$has_value\fB = \f(CB$Parameter\fB\->\fBhas_value()\fB\fR" 4
.IX Item "$has_value = $Parameter->has_value()"
Returns 1 if the \f(CW\*(C`value\*(C'\fR element of \f(CW\*(C`Parameter\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Parameter\fB\->\fBclear_value()\fB\fR" 4
.IX Item "$Parameter->clear_value()"
Clears the \f(CW\*(C`value\*(C'\fR element(s) of \f(CW\*(C`Parameter\*(C'\fR.
.IP "\fB\f(CB$value\fB = \f(CB$Parameter\fB\->\fBvalue()\fB\fR" 4
.IX Item "$value = $Parameter->value()"
Returns \f(CW\*(C`value\*(C'\fR from \f(CW\*(C`Parameter\*(C'\fR.  \f(CW\*(C`value\*(C'\fR will be a string.
.IP "\fB\f(CB$Parameter\fB\->set_value($value)\fR" 4
.IX Item "$Parameter->set_value($value)"
Sets the value of \f(CW\*(C`value\*(C'\fR in \f(CW\*(C`Parameter\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a string.
.SH "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Header Constructor"
.IX Header "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Header Constructor"
.IP "\fB\f(CB$Header\fB = SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Header\->new( [$arg] )\fR" 4
.IX Item "$Header = SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Header->new( [$arg] )"
Constructs an instance of \f(CW\*(C`SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Header\*(C'\fR.  If a hashref argument
is supplied, it is copied into the message instance as if
the \fBcopy_from()\fR method were called immediately after
construction.  Otherwise, if a scalar argument is supplied,
it is interpreted as a serialized instance of the message
type, and the scalar is parsed to populate the message
fields.  Otherwise, if no argument is supplied, an empty
message instance is constructed.
.SH "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Header Methods"
.IX Header "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Header Methods"
.IP "\fB\f(CB$Header2\fB\->copy_from($Header1)\fR" 4
.IX Item "$Header2->copy_from($Header1)"
Copies the contents of \f(CW\*(C`Header1\*(C'\fR into \f(CW\*(C`Header2\*(C'\fR.
\&\f(CW\*(C`Header2\*(C'\fR is another instance of the same message type.
.IP "\fB\f(CB$Header2\fB\->copy_from($hashref)\fR" 4
.IX Item "$Header2->copy_from($hashref)"
Copies the contents of \f(CW\*(C`hashref\*(C'\fR into \f(CW\*(C`Header2\*(C'\fR.
\&\f(CW\*(C`hashref\*(C'\fR is a Data::Dumper\-style representation of an
instance of the message type.
.IP "\fB\f(CB$Header2\fB\->merge_from($Header1)\fR" 4
.IX Item "$Header2->merge_from($Header1)"
Merges the contents of \f(CW\*(C`Header1\*(C'\fR into \f(CW\*(C`Header2\*(C'\fR.
\&\f(CW\*(C`Header2\*(C'\fR is another instance of the same message type.
.IP "\fB\f(CB$Header2\fB\->merge_from($hashref)\fR" 4
.IX Item "$Header2->merge_from($hashref)"
Merges the contents of \f(CW\*(C`hashref\*(C'\fR into \f(CW\*(C`Header2\*(C'\fR.
\&\f(CW\*(C`hashref\*(C'\fR is a Data::Dumper\-style representation of an
instance of the message type.
.IP "\fB\f(CB$Header\fB\->\fBclear()\fB\fR" 4
.IX Item "$Header->clear()"
Clears the contents of \f(CW\*(C`Header\*(C'\fR.
.IP "\fB\f(CB$init\fB = \f(CB$Header\fB\->\fBis_initialized()\fB\fR" 4
.IX Item "$init = $Header->is_initialized()"
Returns 1 if \f(CW\*(C`Header\*(C'\fR has been initialized with data.
.IP "\fB\f(CB$errstr\fB = \f(CB$Header\fB\->\fBerror_string()\fB\fR" 4
.IX Item "$errstr = $Header->error_string()"
Returns a comma-delimited string of initialization errors.
.IP "\fB\f(CB$Header\fB\->\fBdiscard_unknown_fields()\fB\fR" 4
.IX Item "$Header->discard_unknown_fields()"
Discards unknown fields from \f(CW\*(C`Header\*(C'\fR.
.IP "\fB\f(CB$dstr\fB = \f(CB$Header\fB\->\fBdebug_string()\fB\fR" 4
.IX Item "$dstr = $Header->debug_string()"
Returns a string representation of \f(CW\*(C`Header\*(C'\fR.
.IP "\fB\f(CB$dstr\fB = \f(CB$Header\fB\->\fBshort_debug_string()\fB\fR" 4
.IX Item "$dstr = $Header->short_debug_string()"
Returns a short string representation of \f(CW\*(C`Header\*(C'\fR.
.IP "\fB\f(CB$ok\fB = \f(CB$Header\fB\->unpack($string)\fR" 4
.IX Item "$ok = $Header->unpack($string)"
Attempts to parse \f(CW\*(C`string\*(C'\fR into \f(CW\*(C`Header\*(C'\fR, returning 1 on success and 0 on failure.
.IP "\fB\f(CB$string\fB = \f(CB$Header\fB\->\fBpack()\fB\fR" 4
.IX Item "$string = $Header->pack()"
Serializes \f(CW\*(C`Header\*(C'\fR into \f(CW\*(C`string\*(C'\fR.
.IP "\fB\f(CB$length\fB = \f(CB$Header\fB\->\fBlength()\fB\fR" 4
.IX Item "$length = $Header->length()"
Returns the serialized length of \f(CW\*(C`Header\*(C'\fR.
.IP "\fB\f(CB@fields\fB = \f(CB$Header\fB\->\fBfields()\fB\fR" 4
.IX Item "@fields = $Header->fields()"
Returns the defined fields of \f(CW\*(C`Header\*(C'\fR.
.IP "\fB\f(CB$hashref\fB = \f(CB$Header\fB\->\fBto_hashref()\fB\fR" 4
.IX Item "$hashref = $Header->to_hashref()"
Exports the message to a hashref suitable for use in the
\&\f(CW\*(C`copy_from\*(C'\fR or \f(CW\*(C`merge_from\*(C'\fR methods.
.IP "\fB\f(CB$parameter_size\fB = \f(CB$Header\fB\->\fBparameter_size()\fB\fR" 4
.IX Item "$parameter_size = $Header->parameter_size()"
Returns the number of \f(CW\*(C`parameter\*(C'\fR elements present in \f(CW\*(C`Header\*(C'\fR.
.IP "\fB\f(CB$Header\fB\->\fBclear_parameter()\fB\fR" 4
.IX Item "$Header->clear_parameter()"
Clears the \f(CW\*(C`parameter\*(C'\fR element(s) of \f(CW\*(C`Header\*(C'\fR.
.IP "\fB\f(CB@parameter_list\fB = \f(CB$Header\fB\->\fBparameter()\fB\fR" 4
.IX Item "@parameter_list = $Header->parameter()"
Returns all values of \f(CW\*(C`parameter\*(C'\fR in an array.  Each element of \f(CW\*(C`parameter_list\*(C'\fR will be an instance of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Parameter.
.IP "\fB\f(CB$parameter_elem\fB = \f(CB$Header\fB\->parameter($index)\fR" 4
.IX Item "$parameter_elem = $Header->parameter($index)"
Returns \f(CW\*(C`parameter\*(C'\fR element \f(CW\*(C`index\*(C'\fR from \f(CW\*(C`Header\*(C'\fR.  \f(CW\*(C`parameter\*(C'\fR will be an instance of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Parameter, unless \f(CW\*(C`index\*(C'\fR is out of range, in which case it will be undef.
.IP "\fB\f(CB$Header\fB\->add_parameter($value)\fR" 4
.IX Item "$Header->add_parameter($value)"
Adds \f(CW\*(C`value\*(C'\fR to the list of \f(CW\*(C`parameter\*(C'\fR in \f(CW\*(C`Header\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be an instance of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Parameter.
.SH "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::BrokerMessage Constructor"
.IX Header "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::BrokerMessage Constructor"
.IP "\fB\f(CB$BrokerMessage\fB = SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::BrokerMessage\->new( [$arg] )\fR" 4
.IX Item "$BrokerMessage = SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::BrokerMessage->new( [$arg] )"
Constructs an instance of \f(CW\*(C`SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::BrokerMessage\*(C'\fR.  If a hashref argument
is supplied, it is copied into the message instance as if
the \fBcopy_from()\fR method were called immediately after
construction.  Otherwise, if a scalar argument is supplied,
it is interpreted as a serialized instance of the message
type, and the scalar is parsed to populate the message
fields.  Otherwise, if no argument is supplied, an empty
message instance is constructed.
.SH "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::BrokerMessage Methods"
.IX Header "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::BrokerMessage Methods"
.IP "\fB\f(CB$BrokerMessage2\fB\->copy_from($BrokerMessage1)\fR" 4
.IX Item "$BrokerMessage2->copy_from($BrokerMessage1)"
Copies the contents of \f(CW\*(C`BrokerMessage1\*(C'\fR into \f(CW\*(C`BrokerMessage2\*(C'\fR.
\&\f(CW\*(C`BrokerMessage2\*(C'\fR is another instance of the same message type.
.IP "\fB\f(CB$BrokerMessage2\fB\->copy_from($hashref)\fR" 4
.IX Item "$BrokerMessage2->copy_from($hashref)"
Copies the contents of \f(CW\*(C`hashref\*(C'\fR into \f(CW\*(C`BrokerMessage2\*(C'\fR.
\&\f(CW\*(C`hashref\*(C'\fR is a Data::Dumper\-style representation of an
instance of the message type.
.IP "\fB\f(CB$BrokerMessage2\fB\->merge_from($BrokerMessage1)\fR" 4
.IX Item "$BrokerMessage2->merge_from($BrokerMessage1)"
Merges the contents of \f(CW\*(C`BrokerMessage1\*(C'\fR into \f(CW\*(C`BrokerMessage2\*(C'\fR.
\&\f(CW\*(C`BrokerMessage2\*(C'\fR is another instance of the same message type.
.IP "\fB\f(CB$BrokerMessage2\fB\->merge_from($hashref)\fR" 4
.IX Item "$BrokerMessage2->merge_from($hashref)"
Merges the contents of \f(CW\*(C`hashref\*(C'\fR into \f(CW\*(C`BrokerMessage2\*(C'\fR.
\&\f(CW\*(C`hashref\*(C'\fR is a Data::Dumper\-style representation of an
instance of the message type.
.IP "\fB\f(CB$BrokerMessage\fB\->\fBclear()\fB\fR" 4
.IX Item "$BrokerMessage->clear()"
Clears the contents of \f(CW\*(C`BrokerMessage\*(C'\fR.
.IP "\fB\f(CB$init\fB = \f(CB$BrokerMessage\fB\->\fBis_initialized()\fB\fR" 4
.IX Item "$init = $BrokerMessage->is_initialized()"
Returns 1 if \f(CW\*(C`BrokerMessage\*(C'\fR has been initialized with data.
.IP "\fB\f(CB$errstr\fB = \f(CB$BrokerMessage\fB\->\fBerror_string()\fB\fR" 4
.IX Item "$errstr = $BrokerMessage->error_string()"
Returns a comma-delimited string of initialization errors.
.IP "\fB\f(CB$BrokerMessage\fB\->\fBdiscard_unknown_fields()\fB\fR" 4
.IX Item "$BrokerMessage->discard_unknown_fields()"
Discards unknown fields from \f(CW\*(C`BrokerMessage\*(C'\fR.
.IP "\fB\f(CB$dstr\fB = \f(CB$BrokerMessage\fB\->\fBdebug_string()\fB\fR" 4
.IX Item "$dstr = $BrokerMessage->debug_string()"
Returns a string representation of \f(CW\*(C`BrokerMessage\*(C'\fR.
.IP "\fB\f(CB$dstr\fB = \f(CB$BrokerMessage\fB\->\fBshort_debug_string()\fB\fR" 4
.IX Item "$dstr = $BrokerMessage->short_debug_string()"
Returns a short string representation of \f(CW\*(C`BrokerMessage\*(C'\fR.
.IP "\fB\f(CB$ok\fB = \f(CB$BrokerMessage\fB\->unpack($string)\fR" 4
.IX Item "$ok = $BrokerMessage->unpack($string)"
Attempts to parse \f(CW\*(C`string\*(C'\fR into \f(CW\*(C`BrokerMessage\*(C'\fR, returning 1 on success and 0 on failure.
.IP "\fB\f(CB$string\fB = \f(CB$BrokerMessage\fB\->\fBpack()\fB\fR" 4
.IX Item "$string = $BrokerMessage->pack()"
Serializes \f(CW\*(C`BrokerMessage\*(C'\fR into \f(CW\*(C`string\*(C'\fR.
.IP "\fB\f(CB$length\fB = \f(CB$BrokerMessage\fB\->\fBlength()\fB\fR" 4
.IX Item "$length = $BrokerMessage->length()"
Returns the serialized length of \f(CW\*(C`BrokerMessage\*(C'\fR.
.IP "\fB\f(CB@fields\fB = \f(CB$BrokerMessage\fB\->\fBfields()\fB\fR" 4
.IX Item "@fields = $BrokerMessage->fields()"
Returns the defined fields of \f(CW\*(C`BrokerMessage\*(C'\fR.
.IP "\fB\f(CB$hashref\fB = \f(CB$BrokerMessage\fB\->\fBto_hashref()\fB\fR" 4
.IX Item "$hashref = $BrokerMessage->to_hashref()"
Exports the message to a hashref suitable for use in the
\&\f(CW\*(C`copy_from\*(C'\fR or \f(CW\*(C`merge_from\*(C'\fR methods.
.IP "\fB\f(CB$has_message_id\fB = \f(CB$BrokerMessage\fB\->\fBhas_message_id()\fB\fR" 4
.IX Item "$has_message_id = $BrokerMessage->has_message_id()"
Returns 1 if the \f(CW\*(C`message_id\*(C'\fR element of \f(CW\*(C`BrokerMessage\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$BrokerMessage\fB\->\fBclear_message_id()\fB\fR" 4
.IX Item "$BrokerMessage->clear_message_id()"
Clears the \f(CW\*(C`message_id\*(C'\fR element(s) of \f(CW\*(C`BrokerMessage\*(C'\fR.
.IP "\fB\f(CB$message_id\fB = \f(CB$BrokerMessage\fB\->\fBmessage_id()\fB\fR" 4
.IX Item "$message_id = $BrokerMessage->message_id()"
Returns \f(CW\*(C`message_id\*(C'\fR from \f(CW\*(C`BrokerMessage\*(C'\fR.  \f(CW\*(C`message_id\*(C'\fR will be a string.
.IP "\fB\f(CB$BrokerMessage\fB\->set_message_id($value)\fR" 4
.IX Item "$BrokerMessage->set_message_id($value)"
Sets the value of \f(CW\*(C`message_id\*(C'\fR in \f(CW\*(C`BrokerMessage\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a string.
.IP "\fB\f(CB$has_payload\fB = \f(CB$BrokerMessage\fB\->\fBhas_payload()\fB\fR" 4
.IX Item "$has_payload = $BrokerMessage->has_payload()"
Returns 1 if the \f(CW\*(C`payload\*(C'\fR element of \f(CW\*(C`BrokerMessage\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$BrokerMessage\fB\->\fBclear_payload()\fB\fR" 4
.IX Item "$BrokerMessage->clear_payload()"
Clears the \f(CW\*(C`payload\*(C'\fR element(s) of \f(CW\*(C`BrokerMessage\*(C'\fR.
.IP "\fB\f(CB$payload\fB = \f(CB$BrokerMessage\fB\->\fBpayload()\fB\fR" 4
.IX Item "$payload = $BrokerMessage->payload()"
Returns \f(CW\*(C`payload\*(C'\fR from \f(CW\*(C`BrokerMessage\*(C'\fR.  \f(CW\*(C`payload\*(C'\fR will be a string.
.IP "\fB\f(CB$BrokerMessage\fB\->set_payload($value)\fR" 4
.IX Item "$BrokerMessage->set_payload($value)"
Sets the value of \f(CW\*(C`payload\*(C'\fR in \f(CW\*(C`BrokerMessage\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a string.
.IP "\fB\f(CB$has_expiration\fB = \f(CB$BrokerMessage\fB\->\fBhas_expiration()\fB\fR" 4
.IX Item "$has_expiration = $BrokerMessage->has_expiration()"
Returns 1 if the \f(CW\*(C`expiration\*(C'\fR element of \f(CW\*(C`BrokerMessage\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$BrokerMessage\fB\->\fBclear_expiration()\fB\fR" 4
.IX Item "$BrokerMessage->clear_expiration()"
Clears the \f(CW\*(C`expiration\*(C'\fR element(s) of \f(CW\*(C`BrokerMessage\*(C'\fR.
.IP "\fB\f(CB$expiration\fB = \f(CB$BrokerMessage\fB\->\fBexpiration()\fB\fR" 4
.IX Item "$expiration = $BrokerMessage->expiration()"
Returns \f(CW\*(C`expiration\*(C'\fR from \f(CW\*(C`BrokerMessage\*(C'\fR.  \f(CW\*(C`expiration\*(C'\fR will be a 64\-bit signed integer.
.IP "\fB\f(CB$BrokerMessage\fB\->set_expiration($value)\fR" 4
.IX Item "$BrokerMessage->set_expiration($value)"
Sets the value of \f(CW\*(C`expiration\*(C'\fR in \f(CW\*(C`BrokerMessage\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a 64\-bit signed integer.
.IP "\fB\f(CB$has_timestamp\fB = \f(CB$BrokerMessage\fB\->\fBhas_timestamp()\fB\fR" 4
.IX Item "$has_timestamp = $BrokerMessage->has_timestamp()"
Returns 1 if the \f(CW\*(C`timestamp\*(C'\fR element of \f(CW\*(C`BrokerMessage\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$BrokerMessage\fB\->\fBclear_timestamp()\fB\fR" 4
.IX Item "$BrokerMessage->clear_timestamp()"
Clears the \f(CW\*(C`timestamp\*(C'\fR element(s) of \f(CW\*(C`BrokerMessage\*(C'\fR.
.IP "\fB\f(CB$timestamp\fB = \f(CB$BrokerMessage\fB\->\fBtimestamp()\fB\fR" 4
.IX Item "$timestamp = $BrokerMessage->timestamp()"
Returns \f(CW\*(C`timestamp\*(C'\fR from \f(CW\*(C`BrokerMessage\*(C'\fR.  \f(CW\*(C`timestamp\*(C'\fR will be a 64\-bit signed integer.
.IP "\fB\f(CB$BrokerMessage\fB\->set_timestamp($value)\fR" 4
.IX Item "$BrokerMessage->set_timestamp($value)"
Sets the value of \f(CW\*(C`timestamp\*(C'\fR in \f(CW\*(C`BrokerMessage\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a 64\-bit signed integer.
.SH "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Publish Constructor"
.IX Header "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Publish Constructor"
.IP "\fB\f(CB$Publish\fB = SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Publish\->new( [$arg] )\fR" 4
.IX Item "$Publish = SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Publish->new( [$arg] )"
Constructs an instance of \f(CW\*(C`SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Publish\*(C'\fR.  If a hashref argument
is supplied, it is copied into the message instance as if
the \fBcopy_from()\fR method were called immediately after
construction.  Otherwise, if a scalar argument is supplied,
it is interpreted as a serialized instance of the message
type, and the scalar is parsed to populate the message
fields.  Otherwise, if no argument is supplied, an empty
message instance is constructed.
.SH "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Publish Methods"
.IX Header "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Publish Methods"
.IP "\fB\f(CB$Publish2\fB\->copy_from($Publish1)\fR" 4
.IX Item "$Publish2->copy_from($Publish1)"
Copies the contents of \f(CW\*(C`Publish1\*(C'\fR into \f(CW\*(C`Publish2\*(C'\fR.
\&\f(CW\*(C`Publish2\*(C'\fR is another instance of the same message type.
.IP "\fB\f(CB$Publish2\fB\->copy_from($hashref)\fR" 4
.IX Item "$Publish2->copy_from($hashref)"
Copies the contents of \f(CW\*(C`hashref\*(C'\fR into \f(CW\*(C`Publish2\*(C'\fR.
\&\f(CW\*(C`hashref\*(C'\fR is a Data::Dumper\-style representation of an
instance of the message type.
.IP "\fB\f(CB$Publish2\fB\->merge_from($Publish1)\fR" 4
.IX Item "$Publish2->merge_from($Publish1)"
Merges the contents of \f(CW\*(C`Publish1\*(C'\fR into \f(CW\*(C`Publish2\*(C'\fR.
\&\f(CW\*(C`Publish2\*(C'\fR is another instance of the same message type.
.IP "\fB\f(CB$Publish2\fB\->merge_from($hashref)\fR" 4
.IX Item "$Publish2->merge_from($hashref)"
Merges the contents of \f(CW\*(C`hashref\*(C'\fR into \f(CW\*(C`Publish2\*(C'\fR.
\&\f(CW\*(C`hashref\*(C'\fR is a Data::Dumper\-style representation of an
instance of the message type.
.IP "\fB\f(CB$Publish\fB\->\fBclear()\fB\fR" 4
.IX Item "$Publish->clear()"
Clears the contents of \f(CW\*(C`Publish\*(C'\fR.
.IP "\fB\f(CB$init\fB = \f(CB$Publish\fB\->\fBis_initialized()\fB\fR" 4
.IX Item "$init = $Publish->is_initialized()"
Returns 1 if \f(CW\*(C`Publish\*(C'\fR has been initialized with data.
.IP "\fB\f(CB$errstr\fB = \f(CB$Publish\fB\->\fBerror_string()\fB\fR" 4
.IX Item "$errstr = $Publish->error_string()"
Returns a comma-delimited string of initialization errors.
.IP "\fB\f(CB$Publish\fB\->\fBdiscard_unknown_fields()\fB\fR" 4
.IX Item "$Publish->discard_unknown_fields()"
Discards unknown fields from \f(CW\*(C`Publish\*(C'\fR.
.IP "\fB\f(CB$dstr\fB = \f(CB$Publish\fB\->\fBdebug_string()\fB\fR" 4
.IX Item "$dstr = $Publish->debug_string()"
Returns a string representation of \f(CW\*(C`Publish\*(C'\fR.
.IP "\fB\f(CB$dstr\fB = \f(CB$Publish\fB\->\fBshort_debug_string()\fB\fR" 4
.IX Item "$dstr = $Publish->short_debug_string()"
Returns a short string representation of \f(CW\*(C`Publish\*(C'\fR.
.IP "\fB\f(CB$ok\fB = \f(CB$Publish\fB\->unpack($string)\fR" 4
.IX Item "$ok = $Publish->unpack($string)"
Attempts to parse \f(CW\*(C`string\*(C'\fR into \f(CW\*(C`Publish\*(C'\fR, returning 1 on success and 0 on failure.
.IP "\fB\f(CB$string\fB = \f(CB$Publish\fB\->\fBpack()\fB\fR" 4
.IX Item "$string = $Publish->pack()"
Serializes \f(CW\*(C`Publish\*(C'\fR into \f(CW\*(C`string\*(C'\fR.
.IP "\fB\f(CB$length\fB = \f(CB$Publish\fB\->\fBlength()\fB\fR" 4
.IX Item "$length = $Publish->length()"
Returns the serialized length of \f(CW\*(C`Publish\*(C'\fR.
.IP "\fB\f(CB@fields\fB = \f(CB$Publish\fB\->\fBfields()\fB\fR" 4
.IX Item "@fields = $Publish->fields()"
Returns the defined fields of \f(CW\*(C`Publish\*(C'\fR.
.IP "\fB\f(CB$hashref\fB = \f(CB$Publish\fB\->\fBto_hashref()\fB\fR" 4
.IX Item "$hashref = $Publish->to_hashref()"
Exports the message to a hashref suitable for use in the
\&\f(CW\*(C`copy_from\*(C'\fR or \f(CW\*(C`merge_from\*(C'\fR methods.
.IP "\fB\f(CB$has_action_id\fB = \f(CB$Publish\fB\->\fBhas_action_id()\fB\fR" 4
.IX Item "$has_action_id = $Publish->has_action_id()"
Returns 1 if the \f(CW\*(C`action_id\*(C'\fR element of \f(CW\*(C`Publish\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Publish\fB\->\fBclear_action_id()\fB\fR" 4
.IX Item "$Publish->clear_action_id()"
Clears the \f(CW\*(C`action_id\*(C'\fR element(s) of \f(CW\*(C`Publish\*(C'\fR.
.IP "\fB\f(CB$action_id\fB = \f(CB$Publish\fB\->\fBaction_id()\fB\fR" 4
.IX Item "$action_id = $Publish->action_id()"
Returns \f(CW\*(C`action_id\*(C'\fR from \f(CW\*(C`Publish\*(C'\fR.  \f(CW\*(C`action_id\*(C'\fR will be a string.
.IP "\fB\f(CB$Publish\fB\->set_action_id($value)\fR" 4
.IX Item "$Publish->set_action_id($value)"
Sets the value of \f(CW\*(C`action_id\*(C'\fR in \f(CW\*(C`Publish\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a string.
.IP "\fB\f(CB$has_destination_type\fB = \f(CB$Publish\fB\->\fBhas_destination_type()\fB\fR" 4
.IX Item "$has_destination_type = $Publish->has_destination_type()"
Returns 1 if the \f(CW\*(C`destination_type\*(C'\fR element of \f(CW\*(C`Publish\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Publish\fB\->\fBclear_destination_type()\fB\fR" 4
.IX Item "$Publish->clear_destination_type()"
Clears the \f(CW\*(C`destination_type\*(C'\fR element(s) of \f(CW\*(C`Publish\*(C'\fR.
.IP "\fB\f(CB$destination_type\fB = \f(CB$Publish\fB\->\fBdestination_type()\fB\fR" 4
.IX Item "$destination_type = $Publish->destination_type()"
Returns \f(CW\*(C`destination_type\*(C'\fR from \f(CW\*(C`Publish\*(C'\fR.  \f(CW\*(C`destination_type\*(C'\fR will be a value of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::DestinationType.
.IP "\fB\f(CB$Publish\fB\->set_destination_type($value)\fR" 4
.IX Item "$Publish->set_destination_type($value)"
Sets the value of \f(CW\*(C`destination_type\*(C'\fR in \f(CW\*(C`Publish\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a value of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::DestinationType.
.IP "\fB\f(CB$has_destination\fB = \f(CB$Publish\fB\->\fBhas_destination()\fB\fR" 4
.IX Item "$has_destination = $Publish->has_destination()"
Returns 1 if the \f(CW\*(C`destination\*(C'\fR element of \f(CW\*(C`Publish\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Publish\fB\->\fBclear_destination()\fB\fR" 4
.IX Item "$Publish->clear_destination()"
Clears the \f(CW\*(C`destination\*(C'\fR element(s) of \f(CW\*(C`Publish\*(C'\fR.
.IP "\fB\f(CB$destination\fB = \f(CB$Publish\fB\->\fBdestination()\fB\fR" 4
.IX Item "$destination = $Publish->destination()"
Returns \f(CW\*(C`destination\*(C'\fR from \f(CW\*(C`Publish\*(C'\fR.  \f(CW\*(C`destination\*(C'\fR will be a string.
.IP "\fB\f(CB$Publish\fB\->set_destination($value)\fR" 4
.IX Item "$Publish->set_destination($value)"
Sets the value of \f(CW\*(C`destination\*(C'\fR in \f(CW\*(C`Publish\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a string.
.IP "\fB\f(CB$has_message\fB = \f(CB$Publish\fB\->\fBhas_message()\fB\fR" 4
.IX Item "$has_message = $Publish->has_message()"
Returns 1 if the \f(CW\*(C`message\*(C'\fR element of \f(CW\*(C`Publish\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Publish\fB\->\fBclear_message()\fB\fR" 4
.IX Item "$Publish->clear_message()"
Clears the \f(CW\*(C`message\*(C'\fR element(s) of \f(CW\*(C`Publish\*(C'\fR.
.IP "\fB\f(CB$message\fB = \f(CB$Publish\fB\->\fBmessage()\fB\fR" 4
.IX Item "$message = $Publish->message()"
Returns \f(CW\*(C`message\*(C'\fR from \f(CW\*(C`Publish\*(C'\fR.  \f(CW\*(C`message\*(C'\fR will be an instance of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::BrokerMessage.
.IP "\fB\f(CB$Publish\fB\->set_message($value)\fR" 4
.IX Item "$Publish->set_message($value)"
Sets the value of \f(CW\*(C`message\*(C'\fR in \f(CW\*(C`Publish\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be an instance of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::BrokerMessage.
.SH "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Poll Constructor"
.IX Header "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Poll Constructor"
.IP "\fB\f(CB$Poll\fB = SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Poll\->new( [$arg] )\fR" 4
.IX Item "$Poll = SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Poll->new( [$arg] )"
Constructs an instance of \f(CW\*(C`SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Poll\*(C'\fR.  If a hashref argument
is supplied, it is copied into the message instance as if
the \fBcopy_from()\fR method were called immediately after
construction.  Otherwise, if a scalar argument is supplied,
it is interpreted as a serialized instance of the message
type, and the scalar is parsed to populate the message
fields.  Otherwise, if no argument is supplied, an empty
message instance is constructed.
.SH "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Poll Methods"
.IX Header "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Poll Methods"
.IP "\fB\f(CB$Poll2\fB\->copy_from($Poll1)\fR" 4
.IX Item "$Poll2->copy_from($Poll1)"
Copies the contents of \f(CW\*(C`Poll1\*(C'\fR into \f(CW\*(C`Poll2\*(C'\fR.
\&\f(CW\*(C`Poll2\*(C'\fR is another instance of the same message type.
.IP "\fB\f(CB$Poll2\fB\->copy_from($hashref)\fR" 4
.IX Item "$Poll2->copy_from($hashref)"
Copies the contents of \f(CW\*(C`hashref\*(C'\fR into \f(CW\*(C`Poll2\*(C'\fR.
\&\f(CW\*(C`hashref\*(C'\fR is a Data::Dumper\-style representation of an
instance of the message type.
.IP "\fB\f(CB$Poll2\fB\->merge_from($Poll1)\fR" 4
.IX Item "$Poll2->merge_from($Poll1)"
Merges the contents of \f(CW\*(C`Poll1\*(C'\fR into \f(CW\*(C`Poll2\*(C'\fR.
\&\f(CW\*(C`Poll2\*(C'\fR is another instance of the same message type.
.IP "\fB\f(CB$Poll2\fB\->merge_from($hashref)\fR" 4
.IX Item "$Poll2->merge_from($hashref)"
Merges the contents of \f(CW\*(C`hashref\*(C'\fR into \f(CW\*(C`Poll2\*(C'\fR.
\&\f(CW\*(C`hashref\*(C'\fR is a Data::Dumper\-style representation of an
instance of the message type.
.IP "\fB\f(CB$Poll\fB\->\fBclear()\fB\fR" 4
.IX Item "$Poll->clear()"
Clears the contents of \f(CW\*(C`Poll\*(C'\fR.
.IP "\fB\f(CB$init\fB = \f(CB$Poll\fB\->\fBis_initialized()\fB\fR" 4
.IX Item "$init = $Poll->is_initialized()"
Returns 1 if \f(CW\*(C`Poll\*(C'\fR has been initialized with data.
.IP "\fB\f(CB$errstr\fB = \f(CB$Poll\fB\->\fBerror_string()\fB\fR" 4
.IX Item "$errstr = $Poll->error_string()"
Returns a comma-delimited string of initialization errors.
.IP "\fB\f(CB$Poll\fB\->\fBdiscard_unknown_fields()\fB\fR" 4
.IX Item "$Poll->discard_unknown_fields()"
Discards unknown fields from \f(CW\*(C`Poll\*(C'\fR.
.IP "\fB\f(CB$dstr\fB = \f(CB$Poll\fB\->\fBdebug_string()\fB\fR" 4
.IX Item "$dstr = $Poll->debug_string()"
Returns a string representation of \f(CW\*(C`Poll\*(C'\fR.
.IP "\fB\f(CB$dstr\fB = \f(CB$Poll\fB\->\fBshort_debug_string()\fB\fR" 4
.IX Item "$dstr = $Poll->short_debug_string()"
Returns a short string representation of \f(CW\*(C`Poll\*(C'\fR.
.IP "\fB\f(CB$ok\fB = \f(CB$Poll\fB\->unpack($string)\fR" 4
.IX Item "$ok = $Poll->unpack($string)"
Attempts to parse \f(CW\*(C`string\*(C'\fR into \f(CW\*(C`Poll\*(C'\fR, returning 1 on success and 0 on failure.
.IP "\fB\f(CB$string\fB = \f(CB$Poll\fB\->\fBpack()\fB\fR" 4
.IX Item "$string = $Poll->pack()"
Serializes \f(CW\*(C`Poll\*(C'\fR into \f(CW\*(C`string\*(C'\fR.
.IP "\fB\f(CB$length\fB = \f(CB$Poll\fB\->\fBlength()\fB\fR" 4
.IX Item "$length = $Poll->length()"
Returns the serialized length of \f(CW\*(C`Poll\*(C'\fR.
.IP "\fB\f(CB@fields\fB = \f(CB$Poll\fB\->\fBfields()\fB\fR" 4
.IX Item "@fields = $Poll->fields()"
Returns the defined fields of \f(CW\*(C`Poll\*(C'\fR.
.IP "\fB\f(CB$hashref\fB = \f(CB$Poll\fB\->\fBto_hashref()\fB\fR" 4
.IX Item "$hashref = $Poll->to_hashref()"
Exports the message to a hashref suitable for use in the
\&\f(CW\*(C`copy_from\*(C'\fR or \f(CW\*(C`merge_from\*(C'\fR methods.
.IP "\fB\f(CB$has_action_id\fB = \f(CB$Poll\fB\->\fBhas_action_id()\fB\fR" 4
.IX Item "$has_action_id = $Poll->has_action_id()"
Returns 1 if the \f(CW\*(C`action_id\*(C'\fR element of \f(CW\*(C`Poll\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Poll\fB\->\fBclear_action_id()\fB\fR" 4
.IX Item "$Poll->clear_action_id()"
Clears the \f(CW\*(C`action_id\*(C'\fR element(s) of \f(CW\*(C`Poll\*(C'\fR.
.IP "\fB\f(CB$action_id\fB = \f(CB$Poll\fB\->\fBaction_id()\fB\fR" 4
.IX Item "$action_id = $Poll->action_id()"
Returns \f(CW\*(C`action_id\*(C'\fR from \f(CW\*(C`Poll\*(C'\fR.  \f(CW\*(C`action_id\*(C'\fR will be a string.
.IP "\fB\f(CB$Poll\fB\->set_action_id($value)\fR" 4
.IX Item "$Poll->set_action_id($value)"
Sets the value of \f(CW\*(C`action_id\*(C'\fR in \f(CW\*(C`Poll\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a string.
.IP "\fB\f(CB$has_destination\fB = \f(CB$Poll\fB\->\fBhas_destination()\fB\fR" 4
.IX Item "$has_destination = $Poll->has_destination()"
Returns 1 if the \f(CW\*(C`destination\*(C'\fR element of \f(CW\*(C`Poll\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Poll\fB\->\fBclear_destination()\fB\fR" 4
.IX Item "$Poll->clear_destination()"
Clears the \f(CW\*(C`destination\*(C'\fR element(s) of \f(CW\*(C`Poll\*(C'\fR.
.IP "\fB\f(CB$destination\fB = \f(CB$Poll\fB\->\fBdestination()\fB\fR" 4
.IX Item "$destination = $Poll->destination()"
Returns \f(CW\*(C`destination\*(C'\fR from \f(CW\*(C`Poll\*(C'\fR.  \f(CW\*(C`destination\*(C'\fR will be a string.
.IP "\fB\f(CB$Poll\fB\->set_destination($value)\fR" 4
.IX Item "$Poll->set_destination($value)"
Sets the value of \f(CW\*(C`destination\*(C'\fR in \f(CW\*(C`Poll\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a string.
.IP "\fB\f(CB$has_timeout\fB = \f(CB$Poll\fB\->\fBhas_timeout()\fB\fR" 4
.IX Item "$has_timeout = $Poll->has_timeout()"
Returns 1 if the \f(CW\*(C`timeout\*(C'\fR element of \f(CW\*(C`Poll\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Poll\fB\->\fBclear_timeout()\fB\fR" 4
.IX Item "$Poll->clear_timeout()"
Clears the \f(CW\*(C`timeout\*(C'\fR element(s) of \f(CW\*(C`Poll\*(C'\fR.
.IP "\fB\f(CB$timeout\fB = \f(CB$Poll\fB\->\fBtimeout()\fB\fR" 4
.IX Item "$timeout = $Poll->timeout()"
Returns \f(CW\*(C`timeout\*(C'\fR from \f(CW\*(C`Poll\*(C'\fR.  \f(CW\*(C`timeout\*(C'\fR will be a 64\-bit signed integer.
.IP "\fB\f(CB$Poll\fB\->set_timeout($value)\fR" 4
.IX Item "$Poll->set_timeout($value)"
Sets the value of \f(CW\*(C`timeout\*(C'\fR in \f(CW\*(C`Poll\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a 64\-bit signed integer.
.SH "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Accepted Constructor"
.IX Header "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Accepted Constructor"
.IP "\fB\f(CB$Accepted\fB = SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Accepted\->new( [$arg] )\fR" 4
.IX Item "$Accepted = SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Accepted->new( [$arg] )"
Constructs an instance of \f(CW\*(C`SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Accepted\*(C'\fR.  If a hashref argument
is supplied, it is copied into the message instance as if
the \fBcopy_from()\fR method were called immediately after
construction.  Otherwise, if a scalar argument is supplied,
it is interpreted as a serialized instance of the message
type, and the scalar is parsed to populate the message
fields.  Otherwise, if no argument is supplied, an empty
message instance is constructed.
.SH "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Accepted Methods"
.IX Header "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Accepted Methods"
.IP "\fB\f(CB$Accepted2\fB\->copy_from($Accepted1)\fR" 4
.IX Item "$Accepted2->copy_from($Accepted1)"
Copies the contents of \f(CW\*(C`Accepted1\*(C'\fR into \f(CW\*(C`Accepted2\*(C'\fR.
\&\f(CW\*(C`Accepted2\*(C'\fR is another instance of the same message type.
.IP "\fB\f(CB$Accepted2\fB\->copy_from($hashref)\fR" 4
.IX Item "$Accepted2->copy_from($hashref)"
Copies the contents of \f(CW\*(C`hashref\*(C'\fR into \f(CW\*(C`Accepted2\*(C'\fR.
\&\f(CW\*(C`hashref\*(C'\fR is a Data::Dumper\-style representation of an
instance of the message type.
.IP "\fB\f(CB$Accepted2\fB\->merge_from($Accepted1)\fR" 4
.IX Item "$Accepted2->merge_from($Accepted1)"
Merges the contents of \f(CW\*(C`Accepted1\*(C'\fR into \f(CW\*(C`Accepted2\*(C'\fR.
\&\f(CW\*(C`Accepted2\*(C'\fR is another instance of the same message type.
.IP "\fB\f(CB$Accepted2\fB\->merge_from($hashref)\fR" 4
.IX Item "$Accepted2->merge_from($hashref)"
Merges the contents of \f(CW\*(C`hashref\*(C'\fR into \f(CW\*(C`Accepted2\*(C'\fR.
\&\f(CW\*(C`hashref\*(C'\fR is a Data::Dumper\-style representation of an
instance of the message type.
.IP "\fB\f(CB$Accepted\fB\->\fBclear()\fB\fR" 4
.IX Item "$Accepted->clear()"
Clears the contents of \f(CW\*(C`Accepted\*(C'\fR.
.IP "\fB\f(CB$init\fB = \f(CB$Accepted\fB\->\fBis_initialized()\fB\fR" 4
.IX Item "$init = $Accepted->is_initialized()"
Returns 1 if \f(CW\*(C`Accepted\*(C'\fR has been initialized with data.
.IP "\fB\f(CB$errstr\fB = \f(CB$Accepted\fB\->\fBerror_string()\fB\fR" 4
.IX Item "$errstr = $Accepted->error_string()"
Returns a comma-delimited string of initialization errors.
.IP "\fB\f(CB$Accepted\fB\->\fBdiscard_unknown_fields()\fB\fR" 4
.IX Item "$Accepted->discard_unknown_fields()"
Discards unknown fields from \f(CW\*(C`Accepted\*(C'\fR.
.IP "\fB\f(CB$dstr\fB = \f(CB$Accepted\fB\->\fBdebug_string()\fB\fR" 4
.IX Item "$dstr = $Accepted->debug_string()"
Returns a string representation of \f(CW\*(C`Accepted\*(C'\fR.
.IP "\fB\f(CB$dstr\fB = \f(CB$Accepted\fB\->\fBshort_debug_string()\fB\fR" 4
.IX Item "$dstr = $Accepted->short_debug_string()"
Returns a short string representation of \f(CW\*(C`Accepted\*(C'\fR.
.IP "\fB\f(CB$ok\fB = \f(CB$Accepted\fB\->unpack($string)\fR" 4
.IX Item "$ok = $Accepted->unpack($string)"
Attempts to parse \f(CW\*(C`string\*(C'\fR into \f(CW\*(C`Accepted\*(C'\fR, returning 1 on success and 0 on failure.
.IP "\fB\f(CB$string\fB = \f(CB$Accepted\fB\->\fBpack()\fB\fR" 4
.IX Item "$string = $Accepted->pack()"
Serializes \f(CW\*(C`Accepted\*(C'\fR into \f(CW\*(C`string\*(C'\fR.
.IP "\fB\f(CB$length\fB = \f(CB$Accepted\fB\->\fBlength()\fB\fR" 4
.IX Item "$length = $Accepted->length()"
Returns the serialized length of \f(CW\*(C`Accepted\*(C'\fR.
.IP "\fB\f(CB@fields\fB = \f(CB$Accepted\fB\->\fBfields()\fB\fR" 4
.IX Item "@fields = $Accepted->fields()"
Returns the defined fields of \f(CW\*(C`Accepted\*(C'\fR.
.IP "\fB\f(CB$hashref\fB = \f(CB$Accepted\fB\->\fBto_hashref()\fB\fR" 4
.IX Item "$hashref = $Accepted->to_hashref()"
Exports the message to a hashref suitable for use in the
\&\f(CW\*(C`copy_from\*(C'\fR or \f(CW\*(C`merge_from\*(C'\fR methods.
.IP "\fB\f(CB$has_action_id\fB = \f(CB$Accepted\fB\->\fBhas_action_id()\fB\fR" 4
.IX Item "$has_action_id = $Accepted->has_action_id()"
Returns 1 if the \f(CW\*(C`action_id\*(C'\fR element of \f(CW\*(C`Accepted\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Accepted\fB\->\fBclear_action_id()\fB\fR" 4
.IX Item "$Accepted->clear_action_id()"
Clears the \f(CW\*(C`action_id\*(C'\fR element(s) of \f(CW\*(C`Accepted\*(C'\fR.
.IP "\fB\f(CB$action_id\fB = \f(CB$Accepted\fB\->\fBaction_id()\fB\fR" 4
.IX Item "$action_id = $Accepted->action_id()"
Returns \f(CW\*(C`action_id\*(C'\fR from \f(CW\*(C`Accepted\*(C'\fR.  \f(CW\*(C`action_id\*(C'\fR will be a string.
.IP "\fB\f(CB$Accepted\fB\->set_action_id($value)\fR" 4
.IX Item "$Accepted->set_action_id($value)"
Sets the value of \f(CW\*(C`action_id\*(C'\fR in \f(CW\*(C`Accepted\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a string.
.SH "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::AcknowledgeMessage Constructor"
.IX Header "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::AcknowledgeMessage Constructor"
.IP "\fB\f(CB$AcknowledgeMessage\fB = SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::AcknowledgeMessage\->new( [$arg] )\fR" 4
.IX Item "$AcknowledgeMessage = SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::AcknowledgeMessage->new( [$arg] )"
Constructs an instance of \f(CW\*(C`SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::AcknowledgeMessage\*(C'\fR.  If a hashref argument
is supplied, it is copied into the message instance as if
the \fBcopy_from()\fR method were called immediately after
construction.  Otherwise, if a scalar argument is supplied,
it is interpreted as a serialized instance of the message
type, and the scalar is parsed to populate the message
fields.  Otherwise, if no argument is supplied, an empty
message instance is constructed.
.SH "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::AcknowledgeMessage Methods"
.IX Header "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::AcknowledgeMessage Methods"
.IP "\fB\f(CB$AcknowledgeMessage2\fB\->copy_from($AcknowledgeMessage1)\fR" 4
.IX Item "$AcknowledgeMessage2->copy_from($AcknowledgeMessage1)"
Copies the contents of \f(CW\*(C`AcknowledgeMessage1\*(C'\fR into \f(CW\*(C`AcknowledgeMessage2\*(C'\fR.
\&\f(CW\*(C`AcknowledgeMessage2\*(C'\fR is another instance of the same message type.
.IP "\fB\f(CB$AcknowledgeMessage2\fB\->copy_from($hashref)\fR" 4
.IX Item "$AcknowledgeMessage2->copy_from($hashref)"
Copies the contents of \f(CW\*(C`hashref\*(C'\fR into \f(CW\*(C`AcknowledgeMessage2\*(C'\fR.
\&\f(CW\*(C`hashref\*(C'\fR is a Data::Dumper\-style representation of an
instance of the message type.
.IP "\fB\f(CB$AcknowledgeMessage2\fB\->merge_from($AcknowledgeMessage1)\fR" 4
.IX Item "$AcknowledgeMessage2->merge_from($AcknowledgeMessage1)"
Merges the contents of \f(CW\*(C`AcknowledgeMessage1\*(C'\fR into \f(CW\*(C`AcknowledgeMessage2\*(C'\fR.
\&\f(CW\*(C`AcknowledgeMessage2\*(C'\fR is another instance of the same message type.
.IP "\fB\f(CB$AcknowledgeMessage2\fB\->merge_from($hashref)\fR" 4
.IX Item "$AcknowledgeMessage2->merge_from($hashref)"
Merges the contents of \f(CW\*(C`hashref\*(C'\fR into \f(CW\*(C`AcknowledgeMessage2\*(C'\fR.
\&\f(CW\*(C`hashref\*(C'\fR is a Data::Dumper\-style representation of an
instance of the message type.
.IP "\fB\f(CB$AcknowledgeMessage\fB\->\fBclear()\fB\fR" 4
.IX Item "$AcknowledgeMessage->clear()"
Clears the contents of \f(CW\*(C`AcknowledgeMessage\*(C'\fR.
.IP "\fB\f(CB$init\fB = \f(CB$AcknowledgeMessage\fB\->\fBis_initialized()\fB\fR" 4
.IX Item "$init = $AcknowledgeMessage->is_initialized()"
Returns 1 if \f(CW\*(C`AcknowledgeMessage\*(C'\fR has been initialized with data.
.IP "\fB\f(CB$errstr\fB = \f(CB$AcknowledgeMessage\fB\->\fBerror_string()\fB\fR" 4
.IX Item "$errstr = $AcknowledgeMessage->error_string()"
Returns a comma-delimited string of initialization errors.
.IP "\fB\f(CB$AcknowledgeMessage\fB\->\fBdiscard_unknown_fields()\fB\fR" 4
.IX Item "$AcknowledgeMessage->discard_unknown_fields()"
Discards unknown fields from \f(CW\*(C`AcknowledgeMessage\*(C'\fR.
.IP "\fB\f(CB$dstr\fB = \f(CB$AcknowledgeMessage\fB\->\fBdebug_string()\fB\fR" 4
.IX Item "$dstr = $AcknowledgeMessage->debug_string()"
Returns a string representation of \f(CW\*(C`AcknowledgeMessage\*(C'\fR.
.IP "\fB\f(CB$dstr\fB = \f(CB$AcknowledgeMessage\fB\->\fBshort_debug_string()\fB\fR" 4
.IX Item "$dstr = $AcknowledgeMessage->short_debug_string()"
Returns a short string representation of \f(CW\*(C`AcknowledgeMessage\*(C'\fR.
.IP "\fB\f(CB$ok\fB = \f(CB$AcknowledgeMessage\fB\->unpack($string)\fR" 4
.IX Item "$ok = $AcknowledgeMessage->unpack($string)"
Attempts to parse \f(CW\*(C`string\*(C'\fR into \f(CW\*(C`AcknowledgeMessage\*(C'\fR, returning 1 on success and 0 on failure.
.IP "\fB\f(CB$string\fB = \f(CB$AcknowledgeMessage\fB\->\fBpack()\fB\fR" 4
.IX Item "$string = $AcknowledgeMessage->pack()"
Serializes \f(CW\*(C`AcknowledgeMessage\*(C'\fR into \f(CW\*(C`string\*(C'\fR.
.IP "\fB\f(CB$length\fB = \f(CB$AcknowledgeMessage\fB\->\fBlength()\fB\fR" 4
.IX Item "$length = $AcknowledgeMessage->length()"
Returns the serialized length of \f(CW\*(C`AcknowledgeMessage\*(C'\fR.
.IP "\fB\f(CB@fields\fB = \f(CB$AcknowledgeMessage\fB\->\fBfields()\fB\fR" 4
.IX Item "@fields = $AcknowledgeMessage->fields()"
Returns the defined fields of \f(CW\*(C`AcknowledgeMessage\*(C'\fR.
.IP "\fB\f(CB$hashref\fB = \f(CB$AcknowledgeMessage\fB\->\fBto_hashref()\fB\fR" 4
.IX Item "$hashref = $AcknowledgeMessage->to_hashref()"
Exports the message to a hashref suitable for use in the
\&\f(CW\*(C`copy_from\*(C'\fR or \f(CW\*(C`merge_from\*(C'\fR methods.
.IP "\fB\f(CB$has_action_id\fB = \f(CB$AcknowledgeMessage\fB\->\fBhas_action_id()\fB\fR" 4
.IX Item "$has_action_id = $AcknowledgeMessage->has_action_id()"
Returns 1 if the \f(CW\*(C`action_id\*(C'\fR element of \f(CW\*(C`AcknowledgeMessage\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$AcknowledgeMessage\fB\->\fBclear_action_id()\fB\fR" 4
.IX Item "$AcknowledgeMessage->clear_action_id()"
Clears the \f(CW\*(C`action_id\*(C'\fR element(s) of \f(CW\*(C`AcknowledgeMessage\*(C'\fR.
.IP "\fB\f(CB$action_id\fB = \f(CB$AcknowledgeMessage\fB\->\fBaction_id()\fB\fR" 4
.IX Item "$action_id = $AcknowledgeMessage->action_id()"
Returns \f(CW\*(C`action_id\*(C'\fR from \f(CW\*(C`AcknowledgeMessage\*(C'\fR.  \f(CW\*(C`action_id\*(C'\fR will be a string.
.IP "\fB\f(CB$AcknowledgeMessage\fB\->set_action_id($value)\fR" 4
.IX Item "$AcknowledgeMessage->set_action_id($value)"
Sets the value of \f(CW\*(C`action_id\*(C'\fR in \f(CW\*(C`AcknowledgeMessage\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a string.
.IP "\fB\f(CB$has_message_id\fB = \f(CB$AcknowledgeMessage\fB\->\fBhas_message_id()\fB\fR" 4
.IX Item "$has_message_id = $AcknowledgeMessage->has_message_id()"
Returns 1 if the \f(CW\*(C`message_id\*(C'\fR element of \f(CW\*(C`AcknowledgeMessage\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$AcknowledgeMessage\fB\->\fBclear_message_id()\fB\fR" 4
.IX Item "$AcknowledgeMessage->clear_message_id()"
Clears the \f(CW\*(C`message_id\*(C'\fR element(s) of \f(CW\*(C`AcknowledgeMessage\*(C'\fR.
.IP "\fB\f(CB$message_id\fB = \f(CB$AcknowledgeMessage\fB\->\fBmessage_id()\fB\fR" 4
.IX Item "$message_id = $AcknowledgeMessage->message_id()"
Returns \f(CW\*(C`message_id\*(C'\fR from \f(CW\*(C`AcknowledgeMessage\*(C'\fR.  \f(CW\*(C`message_id\*(C'\fR will be a string.
.IP "\fB\f(CB$AcknowledgeMessage\fB\->set_message_id($value)\fR" 4
.IX Item "$AcknowledgeMessage->set_message_id($value)"
Sets the value of \f(CW\*(C`message_id\*(C'\fR in \f(CW\*(C`AcknowledgeMessage\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a string.
.IP "\fB\f(CB$has_destination\fB = \f(CB$AcknowledgeMessage\fB\->\fBhas_destination()\fB\fR" 4
.IX Item "$has_destination = $AcknowledgeMessage->has_destination()"
Returns 1 if the \f(CW\*(C`destination\*(C'\fR element of \f(CW\*(C`AcknowledgeMessage\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$AcknowledgeMessage\fB\->\fBclear_destination()\fB\fR" 4
.IX Item "$AcknowledgeMessage->clear_destination()"
Clears the \f(CW\*(C`destination\*(C'\fR element(s) of \f(CW\*(C`AcknowledgeMessage\*(C'\fR.
.IP "\fB\f(CB$destination\fB = \f(CB$AcknowledgeMessage\fB\->\fBdestination()\fB\fR" 4
.IX Item "$destination = $AcknowledgeMessage->destination()"
Returns \f(CW\*(C`destination\*(C'\fR from \f(CW\*(C`AcknowledgeMessage\*(C'\fR.  \f(CW\*(C`destination\*(C'\fR will be a string.
.IP "\fB\f(CB$AcknowledgeMessage\fB\->set_destination($value)\fR" 4
.IX Item "$AcknowledgeMessage->set_destination($value)"
Sets the value of \f(CW\*(C`destination\*(C'\fR in \f(CW\*(C`AcknowledgeMessage\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a string.
.SH "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Subscribe Constructor"
.IX Header "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Subscribe Constructor"
.IP "\fB\f(CB$Subscribe\fB = SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Subscribe\->new( [$arg] )\fR" 4
.IX Item "$Subscribe = SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Subscribe->new( [$arg] )"
Constructs an instance of \f(CW\*(C`SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Subscribe\*(C'\fR.  If a hashref argument
is supplied, it is copied into the message instance as if
the \fBcopy_from()\fR method were called immediately after
construction.  Otherwise, if a scalar argument is supplied,
it is interpreted as a serialized instance of the message
type, and the scalar is parsed to populate the message
fields.  Otherwise, if no argument is supplied, an empty
message instance is constructed.
.SH "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Subscribe Methods"
.IX Header "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Subscribe Methods"
.IP "\fB\f(CB$Subscribe2\fB\->copy_from($Subscribe1)\fR" 4
.IX Item "$Subscribe2->copy_from($Subscribe1)"
Copies the contents of \f(CW\*(C`Subscribe1\*(C'\fR into \f(CW\*(C`Subscribe2\*(C'\fR.
\&\f(CW\*(C`Subscribe2\*(C'\fR is another instance of the same message type.
.IP "\fB\f(CB$Subscribe2\fB\->copy_from($hashref)\fR" 4
.IX Item "$Subscribe2->copy_from($hashref)"
Copies the contents of \f(CW\*(C`hashref\*(C'\fR into \f(CW\*(C`Subscribe2\*(C'\fR.
\&\f(CW\*(C`hashref\*(C'\fR is a Data::Dumper\-style representation of an
instance of the message type.
.IP "\fB\f(CB$Subscribe2\fB\->merge_from($Subscribe1)\fR" 4
.IX Item "$Subscribe2->merge_from($Subscribe1)"
Merges the contents of \f(CW\*(C`Subscribe1\*(C'\fR into \f(CW\*(C`Subscribe2\*(C'\fR.
\&\f(CW\*(C`Subscribe2\*(C'\fR is another instance of the same message type.
.IP "\fB\f(CB$Subscribe2\fB\->merge_from($hashref)\fR" 4
.IX Item "$Subscribe2->merge_from($hashref)"
Merges the contents of \f(CW\*(C`hashref\*(C'\fR into \f(CW\*(C`Subscribe2\*(C'\fR.
\&\f(CW\*(C`hashref\*(C'\fR is a Data::Dumper\-style representation of an
instance of the message type.
.IP "\fB\f(CB$Subscribe\fB\->\fBclear()\fB\fR" 4
.IX Item "$Subscribe->clear()"
Clears the contents of \f(CW\*(C`Subscribe\*(C'\fR.
.IP "\fB\f(CB$init\fB = \f(CB$Subscribe\fB\->\fBis_initialized()\fB\fR" 4
.IX Item "$init = $Subscribe->is_initialized()"
Returns 1 if \f(CW\*(C`Subscribe\*(C'\fR has been initialized with data.
.IP "\fB\f(CB$errstr\fB = \f(CB$Subscribe\fB\->\fBerror_string()\fB\fR" 4
.IX Item "$errstr = $Subscribe->error_string()"
Returns a comma-delimited string of initialization errors.
.IP "\fB\f(CB$Subscribe\fB\->\fBdiscard_unknown_fields()\fB\fR" 4
.IX Item "$Subscribe->discard_unknown_fields()"
Discards unknown fields from \f(CW\*(C`Subscribe\*(C'\fR.
.IP "\fB\f(CB$dstr\fB = \f(CB$Subscribe\fB\->\fBdebug_string()\fB\fR" 4
.IX Item "$dstr = $Subscribe->debug_string()"
Returns a string representation of \f(CW\*(C`Subscribe\*(C'\fR.
.IP "\fB\f(CB$dstr\fB = \f(CB$Subscribe\fB\->\fBshort_debug_string()\fB\fR" 4
.IX Item "$dstr = $Subscribe->short_debug_string()"
Returns a short string representation of \f(CW\*(C`Subscribe\*(C'\fR.
.IP "\fB\f(CB$ok\fB = \f(CB$Subscribe\fB\->unpack($string)\fR" 4
.IX Item "$ok = $Subscribe->unpack($string)"
Attempts to parse \f(CW\*(C`string\*(C'\fR into \f(CW\*(C`Subscribe\*(C'\fR, returning 1 on success and 0 on failure.
.IP "\fB\f(CB$string\fB = \f(CB$Subscribe\fB\->\fBpack()\fB\fR" 4
.IX Item "$string = $Subscribe->pack()"
Serializes \f(CW\*(C`Subscribe\*(C'\fR into \f(CW\*(C`string\*(C'\fR.
.IP "\fB\f(CB$length\fB = \f(CB$Subscribe\fB\->\fBlength()\fB\fR" 4
.IX Item "$length = $Subscribe->length()"
Returns the serialized length of \f(CW\*(C`Subscribe\*(C'\fR.
.IP "\fB\f(CB@fields\fB = \f(CB$Subscribe\fB\->\fBfields()\fB\fR" 4
.IX Item "@fields = $Subscribe->fields()"
Returns the defined fields of \f(CW\*(C`Subscribe\*(C'\fR.
.IP "\fB\f(CB$hashref\fB = \f(CB$Subscribe\fB\->\fBto_hashref()\fB\fR" 4
.IX Item "$hashref = $Subscribe->to_hashref()"
Exports the message to a hashref suitable for use in the
\&\f(CW\*(C`copy_from\*(C'\fR or \f(CW\*(C`merge_from\*(C'\fR methods.
.IP "\fB\f(CB$has_action_id\fB = \f(CB$Subscribe\fB\->\fBhas_action_id()\fB\fR" 4
.IX Item "$has_action_id = $Subscribe->has_action_id()"
Returns 1 if the \f(CW\*(C`action_id\*(C'\fR element of \f(CW\*(C`Subscribe\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Subscribe\fB\->\fBclear_action_id()\fB\fR" 4
.IX Item "$Subscribe->clear_action_id()"
Clears the \f(CW\*(C`action_id\*(C'\fR element(s) of \f(CW\*(C`Subscribe\*(C'\fR.
.IP "\fB\f(CB$action_id\fB = \f(CB$Subscribe\fB\->\fBaction_id()\fB\fR" 4
.IX Item "$action_id = $Subscribe->action_id()"
Returns \f(CW\*(C`action_id\*(C'\fR from \f(CW\*(C`Subscribe\*(C'\fR.  \f(CW\*(C`action_id\*(C'\fR will be a string.
.IP "\fB\f(CB$Subscribe\fB\->set_action_id($value)\fR" 4
.IX Item "$Subscribe->set_action_id($value)"
Sets the value of \f(CW\*(C`action_id\*(C'\fR in \f(CW\*(C`Subscribe\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a string.
.IP "\fB\f(CB$has_destination\fB = \f(CB$Subscribe\fB\->\fBhas_destination()\fB\fR" 4
.IX Item "$has_destination = $Subscribe->has_destination()"
Returns 1 if the \f(CW\*(C`destination\*(C'\fR element of \f(CW\*(C`Subscribe\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Subscribe\fB\->\fBclear_destination()\fB\fR" 4
.IX Item "$Subscribe->clear_destination()"
Clears the \f(CW\*(C`destination\*(C'\fR element(s) of \f(CW\*(C`Subscribe\*(C'\fR.
.IP "\fB\f(CB$destination\fB = \f(CB$Subscribe\fB\->\fBdestination()\fB\fR" 4
.IX Item "$destination = $Subscribe->destination()"
Returns \f(CW\*(C`destination\*(C'\fR from \f(CW\*(C`Subscribe\*(C'\fR.  \f(CW\*(C`destination\*(C'\fR will be a string.
.IP "\fB\f(CB$Subscribe\fB\->set_destination($value)\fR" 4
.IX Item "$Subscribe->set_destination($value)"
Sets the value of \f(CW\*(C`destination\*(C'\fR in \f(CW\*(C`Subscribe\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a string.
.IP "\fB\f(CB$has_destination_type\fB = \f(CB$Subscribe\fB\->\fBhas_destination_type()\fB\fR" 4
.IX Item "$has_destination_type = $Subscribe->has_destination_type()"
Returns 1 if the \f(CW\*(C`destination_type\*(C'\fR element of \f(CW\*(C`Subscribe\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Subscribe\fB\->\fBclear_destination_type()\fB\fR" 4
.IX Item "$Subscribe->clear_destination_type()"
Clears the \f(CW\*(C`destination_type\*(C'\fR element(s) of \f(CW\*(C`Subscribe\*(C'\fR.
.IP "\fB\f(CB$destination_type\fB = \f(CB$Subscribe\fB\->\fBdestination_type()\fB\fR" 4
.IX Item "$destination_type = $Subscribe->destination_type()"
Returns \f(CW\*(C`destination_type\*(C'\fR from \f(CW\*(C`Subscribe\*(C'\fR.  \f(CW\*(C`destination_type\*(C'\fR will be a value of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::DestinationType.
.IP "\fB\f(CB$Subscribe\fB\->set_destination_type($value)\fR" 4
.IX Item "$Subscribe->set_destination_type($value)"
Sets the value of \f(CW\*(C`destination_type\*(C'\fR in \f(CW\*(C`Subscribe\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a value of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::DestinationType.
.SH "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Unsubscribe Constructor"
.IX Header "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Unsubscribe Constructor"
.IP "\fB\f(CB$Unsubscribe\fB = SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Unsubscribe\->new( [$arg] )\fR" 4
.IX Item "$Unsubscribe = SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Unsubscribe->new( [$arg] )"
Constructs an instance of \f(CW\*(C`SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Unsubscribe\*(C'\fR.  If a hashref argument
is supplied, it is copied into the message instance as if
the \fBcopy_from()\fR method were called immediately after
construction.  Otherwise, if a scalar argument is supplied,
it is interpreted as a serialized instance of the message
type, and the scalar is parsed to populate the message
fields.  Otherwise, if no argument is supplied, an empty
message instance is constructed.
.SH "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Unsubscribe Methods"
.IX Header "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Unsubscribe Methods"
.IP "\fB\f(CB$Unsubscribe2\fB\->copy_from($Unsubscribe1)\fR" 4
.IX Item "$Unsubscribe2->copy_from($Unsubscribe1)"
Copies the contents of \f(CW\*(C`Unsubscribe1\*(C'\fR into \f(CW\*(C`Unsubscribe2\*(C'\fR.
\&\f(CW\*(C`Unsubscribe2\*(C'\fR is another instance of the same message type.
.IP "\fB\f(CB$Unsubscribe2\fB\->copy_from($hashref)\fR" 4
.IX Item "$Unsubscribe2->copy_from($hashref)"
Copies the contents of \f(CW\*(C`hashref\*(C'\fR into \f(CW\*(C`Unsubscribe2\*(C'\fR.
\&\f(CW\*(C`hashref\*(C'\fR is a Data::Dumper\-style representation of an
instance of the message type.
.IP "\fB\f(CB$Unsubscribe2\fB\->merge_from($Unsubscribe1)\fR" 4
.IX Item "$Unsubscribe2->merge_from($Unsubscribe1)"
Merges the contents of \f(CW\*(C`Unsubscribe1\*(C'\fR into \f(CW\*(C`Unsubscribe2\*(C'\fR.
\&\f(CW\*(C`Unsubscribe2\*(C'\fR is another instance of the same message type.
.IP "\fB\f(CB$Unsubscribe2\fB\->merge_from($hashref)\fR" 4
.IX Item "$Unsubscribe2->merge_from($hashref)"
Merges the contents of \f(CW\*(C`hashref\*(C'\fR into \f(CW\*(C`Unsubscribe2\*(C'\fR.
\&\f(CW\*(C`hashref\*(C'\fR is a Data::Dumper\-style representation of an
instance of the message type.
.IP "\fB\f(CB$Unsubscribe\fB\->\fBclear()\fB\fR" 4
.IX Item "$Unsubscribe->clear()"
Clears the contents of \f(CW\*(C`Unsubscribe\*(C'\fR.
.IP "\fB\f(CB$init\fB = \f(CB$Unsubscribe\fB\->\fBis_initialized()\fB\fR" 4
.IX Item "$init = $Unsubscribe->is_initialized()"
Returns 1 if \f(CW\*(C`Unsubscribe\*(C'\fR has been initialized with data.
.IP "\fB\f(CB$errstr\fB = \f(CB$Unsubscribe\fB\->\fBerror_string()\fB\fR" 4
.IX Item "$errstr = $Unsubscribe->error_string()"
Returns a comma-delimited string of initialization errors.
.IP "\fB\f(CB$Unsubscribe\fB\->\fBdiscard_unknown_fields()\fB\fR" 4
.IX Item "$Unsubscribe->discard_unknown_fields()"
Discards unknown fields from \f(CW\*(C`Unsubscribe\*(C'\fR.
.IP "\fB\f(CB$dstr\fB = \f(CB$Unsubscribe\fB\->\fBdebug_string()\fB\fR" 4
.IX Item "$dstr = $Unsubscribe->debug_string()"
Returns a string representation of \f(CW\*(C`Unsubscribe\*(C'\fR.
.IP "\fB\f(CB$dstr\fB = \f(CB$Unsubscribe\fB\->\fBshort_debug_string()\fB\fR" 4
.IX Item "$dstr = $Unsubscribe->short_debug_string()"
Returns a short string representation of \f(CW\*(C`Unsubscribe\*(C'\fR.
.IP "\fB\f(CB$ok\fB = \f(CB$Unsubscribe\fB\->unpack($string)\fR" 4
.IX Item "$ok = $Unsubscribe->unpack($string)"
Attempts to parse \f(CW\*(C`string\*(C'\fR into \f(CW\*(C`Unsubscribe\*(C'\fR, returning 1 on success and 0 on failure.
.IP "\fB\f(CB$string\fB = \f(CB$Unsubscribe\fB\->\fBpack()\fB\fR" 4
.IX Item "$string = $Unsubscribe->pack()"
Serializes \f(CW\*(C`Unsubscribe\*(C'\fR into \f(CW\*(C`string\*(C'\fR.
.IP "\fB\f(CB$length\fB = \f(CB$Unsubscribe\fB\->\fBlength()\fB\fR" 4
.IX Item "$length = $Unsubscribe->length()"
Returns the serialized length of \f(CW\*(C`Unsubscribe\*(C'\fR.
.IP "\fB\f(CB@fields\fB = \f(CB$Unsubscribe\fB\->\fBfields()\fB\fR" 4
.IX Item "@fields = $Unsubscribe->fields()"
Returns the defined fields of \f(CW\*(C`Unsubscribe\*(C'\fR.
.IP "\fB\f(CB$hashref\fB = \f(CB$Unsubscribe\fB\->\fBto_hashref()\fB\fR" 4
.IX Item "$hashref = $Unsubscribe->to_hashref()"
Exports the message to a hashref suitable for use in the
\&\f(CW\*(C`copy_from\*(C'\fR or \f(CW\*(C`merge_from\*(C'\fR methods.
.IP "\fB\f(CB$has_action_id\fB = \f(CB$Unsubscribe\fB\->\fBhas_action_id()\fB\fR" 4
.IX Item "$has_action_id = $Unsubscribe->has_action_id()"
Returns 1 if the \f(CW\*(C`action_id\*(C'\fR element of \f(CW\*(C`Unsubscribe\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Unsubscribe\fB\->\fBclear_action_id()\fB\fR" 4
.IX Item "$Unsubscribe->clear_action_id()"
Clears the \f(CW\*(C`action_id\*(C'\fR element(s) of \f(CW\*(C`Unsubscribe\*(C'\fR.
.IP "\fB\f(CB$action_id\fB = \f(CB$Unsubscribe\fB\->\fBaction_id()\fB\fR" 4
.IX Item "$action_id = $Unsubscribe->action_id()"
Returns \f(CW\*(C`action_id\*(C'\fR from \f(CW\*(C`Unsubscribe\*(C'\fR.  \f(CW\*(C`action_id\*(C'\fR will be a string.
.IP "\fB\f(CB$Unsubscribe\fB\->set_action_id($value)\fR" 4
.IX Item "$Unsubscribe->set_action_id($value)"
Sets the value of \f(CW\*(C`action_id\*(C'\fR in \f(CW\*(C`Unsubscribe\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a string.
.IP "\fB\f(CB$has_destination\fB = \f(CB$Unsubscribe\fB\->\fBhas_destination()\fB\fR" 4
.IX Item "$has_destination = $Unsubscribe->has_destination()"
Returns 1 if the \f(CW\*(C`destination\*(C'\fR element of \f(CW\*(C`Unsubscribe\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Unsubscribe\fB\->\fBclear_destination()\fB\fR" 4
.IX Item "$Unsubscribe->clear_destination()"
Clears the \f(CW\*(C`destination\*(C'\fR element(s) of \f(CW\*(C`Unsubscribe\*(C'\fR.
.IP "\fB\f(CB$destination\fB = \f(CB$Unsubscribe\fB\->\fBdestination()\fB\fR" 4
.IX Item "$destination = $Unsubscribe->destination()"
Returns \f(CW\*(C`destination\*(C'\fR from \f(CW\*(C`Unsubscribe\*(C'\fR.  \f(CW\*(C`destination\*(C'\fR will be a string.
.IP "\fB\f(CB$Unsubscribe\fB\->set_destination($value)\fR" 4
.IX Item "$Unsubscribe->set_destination($value)"
Sets the value of \f(CW\*(C`destination\*(C'\fR in \f(CW\*(C`Unsubscribe\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a string.
.IP "\fB\f(CB$has_destination_type\fB = \f(CB$Unsubscribe\fB\->\fBhas_destination_type()\fB\fR" 4
.IX Item "$has_destination_type = $Unsubscribe->has_destination_type()"
Returns 1 if the \f(CW\*(C`destination_type\*(C'\fR element of \f(CW\*(C`Unsubscribe\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Unsubscribe\fB\->\fBclear_destination_type()\fB\fR" 4
.IX Item "$Unsubscribe->clear_destination_type()"
Clears the \f(CW\*(C`destination_type\*(C'\fR element(s) of \f(CW\*(C`Unsubscribe\*(C'\fR.
.IP "\fB\f(CB$destination_type\fB = \f(CB$Unsubscribe\fB\->\fBdestination_type()\fB\fR" 4
.IX Item "$destination_type = $Unsubscribe->destination_type()"
Returns \f(CW\*(C`destination_type\*(C'\fR from \f(CW\*(C`Unsubscribe\*(C'\fR.  \f(CW\*(C`destination_type\*(C'\fR will be a value of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::DestinationType.
.IP "\fB\f(CB$Unsubscribe\fB\->set_destination_type($value)\fR" 4
.IX Item "$Unsubscribe->set_destination_type($value)"
Sets the value of \f(CW\*(C`destination_type\*(C'\fR in \f(CW\*(C`Unsubscribe\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a value of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::DestinationType.
.SH "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Notification Constructor"
.IX Header "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Notification Constructor"
.IP "\fB\f(CB$Notification\fB = SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Notification\->new( [$arg] )\fR" 4
.IX Item "$Notification = SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Notification->new( [$arg] )"
Constructs an instance of \f(CW\*(C`SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Notification\*(C'\fR.  If a hashref argument
is supplied, it is copied into the message instance as if
the \fBcopy_from()\fR method were called immediately after
construction.  Otherwise, if a scalar argument is supplied,
it is interpreted as a serialized instance of the message
type, and the scalar is parsed to populate the message
fields.  Otherwise, if no argument is supplied, an empty
message instance is constructed.
.SH "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Notification Methods"
.IX Header "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Notification Methods"
.IP "\fB\f(CB$Notification2\fB\->copy_from($Notification1)\fR" 4
.IX Item "$Notification2->copy_from($Notification1)"
Copies the contents of \f(CW\*(C`Notification1\*(C'\fR into \f(CW\*(C`Notification2\*(C'\fR.
\&\f(CW\*(C`Notification2\*(C'\fR is another instance of the same message type.
.IP "\fB\f(CB$Notification2\fB\->copy_from($hashref)\fR" 4
.IX Item "$Notification2->copy_from($hashref)"
Copies the contents of \f(CW\*(C`hashref\*(C'\fR into \f(CW\*(C`Notification2\*(C'\fR.
\&\f(CW\*(C`hashref\*(C'\fR is a Data::Dumper\-style representation of an
instance of the message type.
.IP "\fB\f(CB$Notification2\fB\->merge_from($Notification1)\fR" 4
.IX Item "$Notification2->merge_from($Notification1)"
Merges the contents of \f(CW\*(C`Notification1\*(C'\fR into \f(CW\*(C`Notification2\*(C'\fR.
\&\f(CW\*(C`Notification2\*(C'\fR is another instance of the same message type.
.IP "\fB\f(CB$Notification2\fB\->merge_from($hashref)\fR" 4
.IX Item "$Notification2->merge_from($hashref)"
Merges the contents of \f(CW\*(C`hashref\*(C'\fR into \f(CW\*(C`Notification2\*(C'\fR.
\&\f(CW\*(C`hashref\*(C'\fR is a Data::Dumper\-style representation of an
instance of the message type.
.IP "\fB\f(CB$Notification\fB\->\fBclear()\fB\fR" 4
.IX Item "$Notification->clear()"
Clears the contents of \f(CW\*(C`Notification\*(C'\fR.
.IP "\fB\f(CB$init\fB = \f(CB$Notification\fB\->\fBis_initialized()\fB\fR" 4
.IX Item "$init = $Notification->is_initialized()"
Returns 1 if \f(CW\*(C`Notification\*(C'\fR has been initialized with data.
.IP "\fB\f(CB$errstr\fB = \f(CB$Notification\fB\->\fBerror_string()\fB\fR" 4
.IX Item "$errstr = $Notification->error_string()"
Returns a comma-delimited string of initialization errors.
.IP "\fB\f(CB$Notification\fB\->\fBdiscard_unknown_fields()\fB\fR" 4
.IX Item "$Notification->discard_unknown_fields()"
Discards unknown fields from \f(CW\*(C`Notification\*(C'\fR.
.IP "\fB\f(CB$dstr\fB = \f(CB$Notification\fB\->\fBdebug_string()\fB\fR" 4
.IX Item "$dstr = $Notification->debug_string()"
Returns a string representation of \f(CW\*(C`Notification\*(C'\fR.
.IP "\fB\f(CB$dstr\fB = \f(CB$Notification\fB\->\fBshort_debug_string()\fB\fR" 4
.IX Item "$dstr = $Notification->short_debug_string()"
Returns a short string representation of \f(CW\*(C`Notification\*(C'\fR.
.IP "\fB\f(CB$ok\fB = \f(CB$Notification\fB\->unpack($string)\fR" 4
.IX Item "$ok = $Notification->unpack($string)"
Attempts to parse \f(CW\*(C`string\*(C'\fR into \f(CW\*(C`Notification\*(C'\fR, returning 1 on success and 0 on failure.
.IP "\fB\f(CB$string\fB = \f(CB$Notification\fB\->\fBpack()\fB\fR" 4
.IX Item "$string = $Notification->pack()"
Serializes \f(CW\*(C`Notification\*(C'\fR into \f(CW\*(C`string\*(C'\fR.
.IP "\fB\f(CB$length\fB = \f(CB$Notification\fB\->\fBlength()\fB\fR" 4
.IX Item "$length = $Notification->length()"
Returns the serialized length of \f(CW\*(C`Notification\*(C'\fR.
.IP "\fB\f(CB@fields\fB = \f(CB$Notification\fB\->\fBfields()\fB\fR" 4
.IX Item "@fields = $Notification->fields()"
Returns the defined fields of \f(CW\*(C`Notification\*(C'\fR.
.IP "\fB\f(CB$hashref\fB = \f(CB$Notification\fB\->\fBto_hashref()\fB\fR" 4
.IX Item "$hashref = $Notification->to_hashref()"
Exports the message to a hashref suitable for use in the
\&\f(CW\*(C`copy_from\*(C'\fR or \f(CW\*(C`merge_from\*(C'\fR methods.
.IP "\fB\f(CB$has_destination\fB = \f(CB$Notification\fB\->\fBhas_destination()\fB\fR" 4
.IX Item "$has_destination = $Notification->has_destination()"
Returns 1 if the \f(CW\*(C`destination\*(C'\fR element of \f(CW\*(C`Notification\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Notification\fB\->\fBclear_destination()\fB\fR" 4
.IX Item "$Notification->clear_destination()"
Clears the \f(CW\*(C`destination\*(C'\fR element(s) of \f(CW\*(C`Notification\*(C'\fR.
.IP "\fB\f(CB$destination\fB = \f(CB$Notification\fB\->\fBdestination()\fB\fR" 4
.IX Item "$destination = $Notification->destination()"
Returns \f(CW\*(C`destination\*(C'\fR from \f(CW\*(C`Notification\*(C'\fR.  \f(CW\*(C`destination\*(C'\fR will be a string.
.IP "\fB\f(CB$Notification\fB\->set_destination($value)\fR" 4
.IX Item "$Notification->set_destination($value)"
Sets the value of \f(CW\*(C`destination\*(C'\fR in \f(CW\*(C`Notification\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a string.
.IP "\fB\f(CB$has_subscription\fB = \f(CB$Notification\fB\->\fBhas_subscription()\fB\fR" 4
.IX Item "$has_subscription = $Notification->has_subscription()"
Returns 1 if the \f(CW\*(C`subscription\*(C'\fR element of \f(CW\*(C`Notification\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Notification\fB\->\fBclear_subscription()\fB\fR" 4
.IX Item "$Notification->clear_subscription()"
Clears the \f(CW\*(C`subscription\*(C'\fR element(s) of \f(CW\*(C`Notification\*(C'\fR.
.IP "\fB\f(CB$subscription\fB = \f(CB$Notification\fB\->\fBsubscription()\fB\fR" 4
.IX Item "$subscription = $Notification->subscription()"
Returns \f(CW\*(C`subscription\*(C'\fR from \f(CW\*(C`Notification\*(C'\fR.  \f(CW\*(C`subscription\*(C'\fR will be a string.
.IP "\fB\f(CB$Notification\fB\->set_subscription($value)\fR" 4
.IX Item "$Notification->set_subscription($value)"
Sets the value of \f(CW\*(C`subscription\*(C'\fR in \f(CW\*(C`Notification\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a string.
.IP "\fB\f(CB$has_destination_type\fB = \f(CB$Notification\fB\->\fBhas_destination_type()\fB\fR" 4
.IX Item "$has_destination_type = $Notification->has_destination_type()"
Returns 1 if the \f(CW\*(C`destination_type\*(C'\fR element of \f(CW\*(C`Notification\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Notification\fB\->\fBclear_destination_type()\fB\fR" 4
.IX Item "$Notification->clear_destination_type()"
Clears the \f(CW\*(C`destination_type\*(C'\fR element(s) of \f(CW\*(C`Notification\*(C'\fR.
.IP "\fB\f(CB$destination_type\fB = \f(CB$Notification\fB\->\fBdestination_type()\fB\fR" 4
.IX Item "$destination_type = $Notification->destination_type()"
Returns \f(CW\*(C`destination_type\*(C'\fR from \f(CW\*(C`Notification\*(C'\fR.  \f(CW\*(C`destination_type\*(C'\fR will be a value of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::DestinationType.
.IP "\fB\f(CB$Notification\fB\->set_destination_type($value)\fR" 4
.IX Item "$Notification->set_destination_type($value)"
Sets the value of \f(CW\*(C`destination_type\*(C'\fR in \f(CW\*(C`Notification\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a value of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::DestinationType.
.IP "\fB\f(CB$has_message\fB = \f(CB$Notification\fB\->\fBhas_message()\fB\fR" 4
.IX Item "$has_message = $Notification->has_message()"
Returns 1 if the \f(CW\*(C`message\*(C'\fR element of \f(CW\*(C`Notification\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Notification\fB\->\fBclear_message()\fB\fR" 4
.IX Item "$Notification->clear_message()"
Clears the \f(CW\*(C`message\*(C'\fR element(s) of \f(CW\*(C`Notification\*(C'\fR.
.IP "\fB\f(CB$message\fB = \f(CB$Notification\fB\->\fBmessage()\fB\fR" 4
.IX Item "$message = $Notification->message()"
Returns \f(CW\*(C`message\*(C'\fR from \f(CW\*(C`Notification\*(C'\fR.  \f(CW\*(C`message\*(C'\fR will be an instance of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::BrokerMessage.
.IP "\fB\f(CB$Notification\fB\->set_message($value)\fR" 4
.IX Item "$Notification->set_message($value)"
Sets the value of \f(CW\*(C`message\*(C'\fR in \f(CW\*(C`Notification\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be an instance of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::BrokerMessage.
.SH "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Fault Constructor"
.IX Header "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Fault Constructor"
.IP "\fB\f(CB$Fault\fB = SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Fault\->new( [$arg] )\fR" 4
.IX Item "$Fault = SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Fault->new( [$arg] )"
Constructs an instance of \f(CW\*(C`SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Fault\*(C'\fR.  If a hashref argument
is supplied, it is copied into the message instance as if
the \fBcopy_from()\fR method were called immediately after
construction.  Otherwise, if a scalar argument is supplied,
it is interpreted as a serialized instance of the message
type, and the scalar is parsed to populate the message
fields.  Otherwise, if no argument is supplied, an empty
message instance is constructed.
.SH "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Fault Methods"
.IX Header "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Fault Methods"
.IP "\fB\f(CB$Fault2\fB\->copy_from($Fault1)\fR" 4
.IX Item "$Fault2->copy_from($Fault1)"
Copies the contents of \f(CW\*(C`Fault1\*(C'\fR into \f(CW\*(C`Fault2\*(C'\fR.
\&\f(CW\*(C`Fault2\*(C'\fR is another instance of the same message type.
.IP "\fB\f(CB$Fault2\fB\->copy_from($hashref)\fR" 4
.IX Item "$Fault2->copy_from($hashref)"
Copies the contents of \f(CW\*(C`hashref\*(C'\fR into \f(CW\*(C`Fault2\*(C'\fR.
\&\f(CW\*(C`hashref\*(C'\fR is a Data::Dumper\-style representation of an
instance of the message type.
.IP "\fB\f(CB$Fault2\fB\->merge_from($Fault1)\fR" 4
.IX Item "$Fault2->merge_from($Fault1)"
Merges the contents of \f(CW\*(C`Fault1\*(C'\fR into \f(CW\*(C`Fault2\*(C'\fR.
\&\f(CW\*(C`Fault2\*(C'\fR is another instance of the same message type.
.IP "\fB\f(CB$Fault2\fB\->merge_from($hashref)\fR" 4
.IX Item "$Fault2->merge_from($hashref)"
Merges the contents of \f(CW\*(C`hashref\*(C'\fR into \f(CW\*(C`Fault2\*(C'\fR.
\&\f(CW\*(C`hashref\*(C'\fR is a Data::Dumper\-style representation of an
instance of the message type.
.IP "\fB\f(CB$Fault\fB\->\fBclear()\fB\fR" 4
.IX Item "$Fault->clear()"
Clears the contents of \f(CW\*(C`Fault\*(C'\fR.
.IP "\fB\f(CB$init\fB = \f(CB$Fault\fB\->\fBis_initialized()\fB\fR" 4
.IX Item "$init = $Fault->is_initialized()"
Returns 1 if \f(CW\*(C`Fault\*(C'\fR has been initialized with data.
.IP "\fB\f(CB$errstr\fB = \f(CB$Fault\fB\->\fBerror_string()\fB\fR" 4
.IX Item "$errstr = $Fault->error_string()"
Returns a comma-delimited string of initialization errors.
.IP "\fB\f(CB$Fault\fB\->\fBdiscard_unknown_fields()\fB\fR" 4
.IX Item "$Fault->discard_unknown_fields()"
Discards unknown fields from \f(CW\*(C`Fault\*(C'\fR.
.IP "\fB\f(CB$dstr\fB = \f(CB$Fault\fB\->\fBdebug_string()\fB\fR" 4
.IX Item "$dstr = $Fault->debug_string()"
Returns a string representation of \f(CW\*(C`Fault\*(C'\fR.
.IP "\fB\f(CB$dstr\fB = \f(CB$Fault\fB\->\fBshort_debug_string()\fB\fR" 4
.IX Item "$dstr = $Fault->short_debug_string()"
Returns a short string representation of \f(CW\*(C`Fault\*(C'\fR.
.IP "\fB\f(CB$ok\fB = \f(CB$Fault\fB\->unpack($string)\fR" 4
.IX Item "$ok = $Fault->unpack($string)"
Attempts to parse \f(CW\*(C`string\*(C'\fR into \f(CW\*(C`Fault\*(C'\fR, returning 1 on success and 0 on failure.
.IP "\fB\f(CB$string\fB = \f(CB$Fault\fB\->\fBpack()\fB\fR" 4
.IX Item "$string = $Fault->pack()"
Serializes \f(CW\*(C`Fault\*(C'\fR into \f(CW\*(C`string\*(C'\fR.
.IP "\fB\f(CB$length\fB = \f(CB$Fault\fB\->\fBlength()\fB\fR" 4
.IX Item "$length = $Fault->length()"
Returns the serialized length of \f(CW\*(C`Fault\*(C'\fR.
.IP "\fB\f(CB@fields\fB = \f(CB$Fault\fB\->\fBfields()\fB\fR" 4
.IX Item "@fields = $Fault->fields()"
Returns the defined fields of \f(CW\*(C`Fault\*(C'\fR.
.IP "\fB\f(CB$hashref\fB = \f(CB$Fault\fB\->\fBto_hashref()\fB\fR" 4
.IX Item "$hashref = $Fault->to_hashref()"
Exports the message to a hashref suitable for use in the
\&\f(CW\*(C`copy_from\*(C'\fR or \f(CW\*(C`merge_from\*(C'\fR methods.
.IP "\fB\f(CB$has_action_id\fB = \f(CB$Fault\fB\->\fBhas_action_id()\fB\fR" 4
.IX Item "$has_action_id = $Fault->has_action_id()"
Returns 1 if the \f(CW\*(C`action_id\*(C'\fR element of \f(CW\*(C`Fault\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Fault\fB\->\fBclear_action_id()\fB\fR" 4
.IX Item "$Fault->clear_action_id()"
Clears the \f(CW\*(C`action_id\*(C'\fR element(s) of \f(CW\*(C`Fault\*(C'\fR.
.IP "\fB\f(CB$action_id\fB = \f(CB$Fault\fB\->\fBaction_id()\fB\fR" 4
.IX Item "$action_id = $Fault->action_id()"
Returns \f(CW\*(C`action_id\*(C'\fR from \f(CW\*(C`Fault\*(C'\fR.  \f(CW\*(C`action_id\*(C'\fR will be a string.
.IP "\fB\f(CB$Fault\fB\->set_action_id($value)\fR" 4
.IX Item "$Fault->set_action_id($value)"
Sets the value of \f(CW\*(C`action_id\*(C'\fR in \f(CW\*(C`Fault\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a string.
.IP "\fB\f(CB$has_fault_code\fB = \f(CB$Fault\fB\->\fBhas_fault_code()\fB\fR" 4
.IX Item "$has_fault_code = $Fault->has_fault_code()"
Returns 1 if the \f(CW\*(C`fault_code\*(C'\fR element of \f(CW\*(C`Fault\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Fault\fB\->\fBclear_fault_code()\fB\fR" 4
.IX Item "$Fault->clear_fault_code()"
Clears the \f(CW\*(C`fault_code\*(C'\fR element(s) of \f(CW\*(C`Fault\*(C'\fR.
.IP "\fB\f(CB$fault_code\fB = \f(CB$Fault\fB\->\fBfault_code()\fB\fR" 4
.IX Item "$fault_code = $Fault->fault_code()"
Returns \f(CW\*(C`fault_code\*(C'\fR from \f(CW\*(C`Fault\*(C'\fR.  \f(CW\*(C`fault_code\*(C'\fR will be a string.
.IP "\fB\f(CB$Fault\fB\->set_fault_code($value)\fR" 4
.IX Item "$Fault->set_fault_code($value)"
Sets the value of \f(CW\*(C`fault_code\*(C'\fR in \f(CW\*(C`Fault\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a string.
.IP "\fB\f(CB$has_fault_message\fB = \f(CB$Fault\fB\->\fBhas_fault_message()\fB\fR" 4
.IX Item "$has_fault_message = $Fault->has_fault_message()"
Returns 1 if the \f(CW\*(C`fault_message\*(C'\fR element of \f(CW\*(C`Fault\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Fault\fB\->\fBclear_fault_message()\fB\fR" 4
.IX Item "$Fault->clear_fault_message()"
Clears the \f(CW\*(C`fault_message\*(C'\fR element(s) of \f(CW\*(C`Fault\*(C'\fR.
.IP "\fB\f(CB$fault_message\fB = \f(CB$Fault\fB\->\fBfault_message()\fB\fR" 4
.IX Item "$fault_message = $Fault->fault_message()"
Returns \f(CW\*(C`fault_message\*(C'\fR from \f(CW\*(C`Fault\*(C'\fR.  \f(CW\*(C`fault_message\*(C'\fR will be a string.
.IP "\fB\f(CB$Fault\fB\->set_fault_message($value)\fR" 4
.IX Item "$Fault->set_fault_message($value)"
Sets the value of \f(CW\*(C`fault_message\*(C'\fR in \f(CW\*(C`Fault\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a string.
.IP "\fB\f(CB$has_fault_detail\fB = \f(CB$Fault\fB\->\fBhas_fault_detail()\fB\fR" 4
.IX Item "$has_fault_detail = $Fault->has_fault_detail()"
Returns 1 if the \f(CW\*(C`fault_detail\*(C'\fR element of \f(CW\*(C`Fault\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Fault\fB\->\fBclear_fault_detail()\fB\fR" 4
.IX Item "$Fault->clear_fault_detail()"
Clears the \f(CW\*(C`fault_detail\*(C'\fR element(s) of \f(CW\*(C`Fault\*(C'\fR.
.IP "\fB\f(CB$fault_detail\fB = \f(CB$Fault\fB\->\fBfault_detail()\fB\fR" 4
.IX Item "$fault_detail = $Fault->fault_detail()"
Returns \f(CW\*(C`fault_detail\*(C'\fR from \f(CW\*(C`Fault\*(C'\fR.  \f(CW\*(C`fault_detail\*(C'\fR will be a string.
.IP "\fB\f(CB$Fault\fB\->set_fault_detail($value)\fR" 4
.IX Item "$Fault->set_fault_detail($value)"
Sets the value of \f(CW\*(C`fault_detail\*(C'\fR in \f(CW\*(C`Fault\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a string.
.SH "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Ping Constructor"
.IX Header "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Ping Constructor"
.IP "\fB\f(CB$Ping\fB = SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Ping\->new( [$arg] )\fR" 4
.IX Item "$Ping = SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Ping->new( [$arg] )"
Constructs an instance of \f(CW\*(C`SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Ping\*(C'\fR.  If a hashref argument
is supplied, it is copied into the message instance as if
the \fBcopy_from()\fR method were called immediately after
construction.  Otherwise, if a scalar argument is supplied,
it is interpreted as a serialized instance of the message
type, and the scalar is parsed to populate the message
fields.  Otherwise, if no argument is supplied, an empty
message instance is constructed.
.SH "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Ping Methods"
.IX Header "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Ping Methods"
.IP "\fB\f(CB$Ping2\fB\->copy_from($Ping1)\fR" 4
.IX Item "$Ping2->copy_from($Ping1)"
Copies the contents of \f(CW\*(C`Ping1\*(C'\fR into \f(CW\*(C`Ping2\*(C'\fR.
\&\f(CW\*(C`Ping2\*(C'\fR is another instance of the same message type.
.IP "\fB\f(CB$Ping2\fB\->copy_from($hashref)\fR" 4
.IX Item "$Ping2->copy_from($hashref)"
Copies the contents of \f(CW\*(C`hashref\*(C'\fR into \f(CW\*(C`Ping2\*(C'\fR.
\&\f(CW\*(C`hashref\*(C'\fR is a Data::Dumper\-style representation of an
instance of the message type.
.IP "\fB\f(CB$Ping2\fB\->merge_from($Ping1)\fR" 4
.IX Item "$Ping2->merge_from($Ping1)"
Merges the contents of \f(CW\*(C`Ping1\*(C'\fR into \f(CW\*(C`Ping2\*(C'\fR.
\&\f(CW\*(C`Ping2\*(C'\fR is another instance of the same message type.
.IP "\fB\f(CB$Ping2\fB\->merge_from($hashref)\fR" 4
.IX Item "$Ping2->merge_from($hashref)"
Merges the contents of \f(CW\*(C`hashref\*(C'\fR into \f(CW\*(C`Ping2\*(C'\fR.
\&\f(CW\*(C`hashref\*(C'\fR is a Data::Dumper\-style representation of an
instance of the message type.
.IP "\fB\f(CB$Ping\fB\->\fBclear()\fB\fR" 4
.IX Item "$Ping->clear()"
Clears the contents of \f(CW\*(C`Ping\*(C'\fR.
.IP "\fB\f(CB$init\fB = \f(CB$Ping\fB\->\fBis_initialized()\fB\fR" 4
.IX Item "$init = $Ping->is_initialized()"
Returns 1 if \f(CW\*(C`Ping\*(C'\fR has been initialized with data.
.IP "\fB\f(CB$errstr\fB = \f(CB$Ping\fB\->\fBerror_string()\fB\fR" 4
.IX Item "$errstr = $Ping->error_string()"
Returns a comma-delimited string of initialization errors.
.IP "\fB\f(CB$Ping\fB\->\fBdiscard_unknown_fields()\fB\fR" 4
.IX Item "$Ping->discard_unknown_fields()"
Discards unknown fields from \f(CW\*(C`Ping\*(C'\fR.
.IP "\fB\f(CB$dstr\fB = \f(CB$Ping\fB\->\fBdebug_string()\fB\fR" 4
.IX Item "$dstr = $Ping->debug_string()"
Returns a string representation of \f(CW\*(C`Ping\*(C'\fR.
.IP "\fB\f(CB$dstr\fB = \f(CB$Ping\fB\->\fBshort_debug_string()\fB\fR" 4
.IX Item "$dstr = $Ping->short_debug_string()"
Returns a short string representation of \f(CW\*(C`Ping\*(C'\fR.
.IP "\fB\f(CB$ok\fB = \f(CB$Ping\fB\->unpack($string)\fR" 4
.IX Item "$ok = $Ping->unpack($string)"
Attempts to parse \f(CW\*(C`string\*(C'\fR into \f(CW\*(C`Ping\*(C'\fR, returning 1 on success and 0 on failure.
.IP "\fB\f(CB$string\fB = \f(CB$Ping\fB\->\fBpack()\fB\fR" 4
.IX Item "$string = $Ping->pack()"
Serializes \f(CW\*(C`Ping\*(C'\fR into \f(CW\*(C`string\*(C'\fR.
.IP "\fB\f(CB$length\fB = \f(CB$Ping\fB\->\fBlength()\fB\fR" 4
.IX Item "$length = $Ping->length()"
Returns the serialized length of \f(CW\*(C`Ping\*(C'\fR.
.IP "\fB\f(CB@fields\fB = \f(CB$Ping\fB\->\fBfields()\fB\fR" 4
.IX Item "@fields = $Ping->fields()"
Returns the defined fields of \f(CW\*(C`Ping\*(C'\fR.
.IP "\fB\f(CB$hashref\fB = \f(CB$Ping\fB\->\fBto_hashref()\fB\fR" 4
.IX Item "$hashref = $Ping->to_hashref()"
Exports the message to a hashref suitable for use in the
\&\f(CW\*(C`copy_from\*(C'\fR or \f(CW\*(C`merge_from\*(C'\fR methods.
.IP "\fB\f(CB$has_action_id\fB = \f(CB$Ping\fB\->\fBhas_action_id()\fB\fR" 4
.IX Item "$has_action_id = $Ping->has_action_id()"
Returns 1 if the \f(CW\*(C`action_id\*(C'\fR element of \f(CW\*(C`Ping\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Ping\fB\->\fBclear_action_id()\fB\fR" 4
.IX Item "$Ping->clear_action_id()"
Clears the \f(CW\*(C`action_id\*(C'\fR element(s) of \f(CW\*(C`Ping\*(C'\fR.
.IP "\fB\f(CB$action_id\fB = \f(CB$Ping\fB\->\fBaction_id()\fB\fR" 4
.IX Item "$action_id = $Ping->action_id()"
Returns \f(CW\*(C`action_id\*(C'\fR from \f(CW\*(C`Ping\*(C'\fR.  \f(CW\*(C`action_id\*(C'\fR will be a string.
.IP "\fB\f(CB$Ping\fB\->set_action_id($value)\fR" 4
.IX Item "$Ping->set_action_id($value)"
Sets the value of \f(CW\*(C`action_id\*(C'\fR in \f(CW\*(C`Ping\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a string.
.SH "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Pong Constructor"
.IX Header "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Pong Constructor"
.IP "\fB\f(CB$Pong\fB = SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Pong\->new( [$arg] )\fR" 4
.IX Item "$Pong = SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Pong->new( [$arg] )"
Constructs an instance of \f(CW\*(C`SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Pong\*(C'\fR.  If a hashref argument
is supplied, it is copied into the message instance as if
the \fBcopy_from()\fR method were called immediately after
construction.  Otherwise, if a scalar argument is supplied,
it is interpreted as a serialized instance of the message
type, and the scalar is parsed to populate the message
fields.  Otherwise, if no argument is supplied, an empty
message instance is constructed.
.SH "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Pong Methods"
.IX Header "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Pong Methods"
.IP "\fB\f(CB$Pong2\fB\->copy_from($Pong1)\fR" 4
.IX Item "$Pong2->copy_from($Pong1)"
Copies the contents of \f(CW\*(C`Pong1\*(C'\fR into \f(CW\*(C`Pong2\*(C'\fR.
\&\f(CW\*(C`Pong2\*(C'\fR is another instance of the same message type.
.IP "\fB\f(CB$Pong2\fB\->copy_from($hashref)\fR" 4
.IX Item "$Pong2->copy_from($hashref)"
Copies the contents of \f(CW\*(C`hashref\*(C'\fR into \f(CW\*(C`Pong2\*(C'\fR.
\&\f(CW\*(C`hashref\*(C'\fR is a Data::Dumper\-style representation of an
instance of the message type.
.IP "\fB\f(CB$Pong2\fB\->merge_from($Pong1)\fR" 4
.IX Item "$Pong2->merge_from($Pong1)"
Merges the contents of \f(CW\*(C`Pong1\*(C'\fR into \f(CW\*(C`Pong2\*(C'\fR.
\&\f(CW\*(C`Pong2\*(C'\fR is another instance of the same message type.
.IP "\fB\f(CB$Pong2\fB\->merge_from($hashref)\fR" 4
.IX Item "$Pong2->merge_from($hashref)"
Merges the contents of \f(CW\*(C`hashref\*(C'\fR into \f(CW\*(C`Pong2\*(C'\fR.
\&\f(CW\*(C`hashref\*(C'\fR is a Data::Dumper\-style representation of an
instance of the message type.
.IP "\fB\f(CB$Pong\fB\->\fBclear()\fB\fR" 4
.IX Item "$Pong->clear()"
Clears the contents of \f(CW\*(C`Pong\*(C'\fR.
.IP "\fB\f(CB$init\fB = \f(CB$Pong\fB\->\fBis_initialized()\fB\fR" 4
.IX Item "$init = $Pong->is_initialized()"
Returns 1 if \f(CW\*(C`Pong\*(C'\fR has been initialized with data.
.IP "\fB\f(CB$errstr\fB = \f(CB$Pong\fB\->\fBerror_string()\fB\fR" 4
.IX Item "$errstr = $Pong->error_string()"
Returns a comma-delimited string of initialization errors.
.IP "\fB\f(CB$Pong\fB\->\fBdiscard_unknown_fields()\fB\fR" 4
.IX Item "$Pong->discard_unknown_fields()"
Discards unknown fields from \f(CW\*(C`Pong\*(C'\fR.
.IP "\fB\f(CB$dstr\fB = \f(CB$Pong\fB\->\fBdebug_string()\fB\fR" 4
.IX Item "$dstr = $Pong->debug_string()"
Returns a string representation of \f(CW\*(C`Pong\*(C'\fR.
.IP "\fB\f(CB$dstr\fB = \f(CB$Pong\fB\->\fBshort_debug_string()\fB\fR" 4
.IX Item "$dstr = $Pong->short_debug_string()"
Returns a short string representation of \f(CW\*(C`Pong\*(C'\fR.
.IP "\fB\f(CB$ok\fB = \f(CB$Pong\fB\->unpack($string)\fR" 4
.IX Item "$ok = $Pong->unpack($string)"
Attempts to parse \f(CW\*(C`string\*(C'\fR into \f(CW\*(C`Pong\*(C'\fR, returning 1 on success and 0 on failure.
.IP "\fB\f(CB$string\fB = \f(CB$Pong\fB\->\fBpack()\fB\fR" 4
.IX Item "$string = $Pong->pack()"
Serializes \f(CW\*(C`Pong\*(C'\fR into \f(CW\*(C`string\*(C'\fR.
.IP "\fB\f(CB$length\fB = \f(CB$Pong\fB\->\fBlength()\fB\fR" 4
.IX Item "$length = $Pong->length()"
Returns the serialized length of \f(CW\*(C`Pong\*(C'\fR.
.IP "\fB\f(CB@fields\fB = \f(CB$Pong\fB\->\fBfields()\fB\fR" 4
.IX Item "@fields = $Pong->fields()"
Returns the defined fields of \f(CW\*(C`Pong\*(C'\fR.
.IP "\fB\f(CB$hashref\fB = \f(CB$Pong\fB\->\fBto_hashref()\fB\fR" 4
.IX Item "$hashref = $Pong->to_hashref()"
Exports the message to a hashref suitable for use in the
\&\f(CW\*(C`copy_from\*(C'\fR or \f(CW\*(C`merge_from\*(C'\fR methods.
.IP "\fB\f(CB$has_action_id\fB = \f(CB$Pong\fB\->\fBhas_action_id()\fB\fR" 4
.IX Item "$has_action_id = $Pong->has_action_id()"
Returns 1 if the \f(CW\*(C`action_id\*(C'\fR element of \f(CW\*(C`Pong\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Pong\fB\->\fBclear_action_id()\fB\fR" 4
.IX Item "$Pong->clear_action_id()"
Clears the \f(CW\*(C`action_id\*(C'\fR element(s) of \f(CW\*(C`Pong\*(C'\fR.
.IP "\fB\f(CB$action_id\fB = \f(CB$Pong\fB\->\fBaction_id()\fB\fR" 4
.IX Item "$action_id = $Pong->action_id()"
Returns \f(CW\*(C`action_id\*(C'\fR from \f(CW\*(C`Pong\*(C'\fR.  \f(CW\*(C`action_id\*(C'\fR will be a string.
.IP "\fB\f(CB$Pong\fB\->set_action_id($value)\fR" 4
.IX Item "$Pong->set_action_id($value)"
Sets the value of \f(CW\*(C`action_id\*(C'\fR in \f(CW\*(C`Pong\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a string.
.SH "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Authentication Constructor"
.IX Header "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Authentication Constructor"
.IP "\fB\f(CB$Authentication\fB = SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Authentication\->new( [$arg] )\fR" 4
.IX Item "$Authentication = SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Authentication->new( [$arg] )"
Constructs an instance of \f(CW\*(C`SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Authentication\*(C'\fR.  If a hashref argument
is supplied, it is copied into the message instance as if
the \fBcopy_from()\fR method were called immediately after
construction.  Otherwise, if a scalar argument is supplied,
it is interpreted as a serialized instance of the message
type, and the scalar is parsed to populate the message
fields.  Otherwise, if no argument is supplied, an empty
message instance is constructed.
.SH "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Authentication Methods"
.IX Header "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Authentication Methods"
.IP "\fB\f(CB$Authentication2\fB\->copy_from($Authentication1)\fR" 4
.IX Item "$Authentication2->copy_from($Authentication1)"
Copies the contents of \f(CW\*(C`Authentication1\*(C'\fR into \f(CW\*(C`Authentication2\*(C'\fR.
\&\f(CW\*(C`Authentication2\*(C'\fR is another instance of the same message type.
.IP "\fB\f(CB$Authentication2\fB\->copy_from($hashref)\fR" 4
.IX Item "$Authentication2->copy_from($hashref)"
Copies the contents of \f(CW\*(C`hashref\*(C'\fR into \f(CW\*(C`Authentication2\*(C'\fR.
\&\f(CW\*(C`hashref\*(C'\fR is a Data::Dumper\-style representation of an
instance of the message type.
.IP "\fB\f(CB$Authentication2\fB\->merge_from($Authentication1)\fR" 4
.IX Item "$Authentication2->merge_from($Authentication1)"
Merges the contents of \f(CW\*(C`Authentication1\*(C'\fR into \f(CW\*(C`Authentication2\*(C'\fR.
\&\f(CW\*(C`Authentication2\*(C'\fR is another instance of the same message type.
.IP "\fB\f(CB$Authentication2\fB\->merge_from($hashref)\fR" 4
.IX Item "$Authentication2->merge_from($hashref)"
Merges the contents of \f(CW\*(C`hashref\*(C'\fR into \f(CW\*(C`Authentication2\*(C'\fR.
\&\f(CW\*(C`hashref\*(C'\fR is a Data::Dumper\-style representation of an
instance of the message type.
.IP "\fB\f(CB$Authentication\fB\->\fBclear()\fB\fR" 4
.IX Item "$Authentication->clear()"
Clears the contents of \f(CW\*(C`Authentication\*(C'\fR.
.IP "\fB\f(CB$init\fB = \f(CB$Authentication\fB\->\fBis_initialized()\fB\fR" 4
.IX Item "$init = $Authentication->is_initialized()"
Returns 1 if \f(CW\*(C`Authentication\*(C'\fR has been initialized with data.
.IP "\fB\f(CB$errstr\fB = \f(CB$Authentication\fB\->\fBerror_string()\fB\fR" 4
.IX Item "$errstr = $Authentication->error_string()"
Returns a comma-delimited string of initialization errors.
.IP "\fB\f(CB$Authentication\fB\->\fBdiscard_unknown_fields()\fB\fR" 4
.IX Item "$Authentication->discard_unknown_fields()"
Discards unknown fields from \f(CW\*(C`Authentication\*(C'\fR.
.IP "\fB\f(CB$dstr\fB = \f(CB$Authentication\fB\->\fBdebug_string()\fB\fR" 4
.IX Item "$dstr = $Authentication->debug_string()"
Returns a string representation of \f(CW\*(C`Authentication\*(C'\fR.
.IP "\fB\f(CB$dstr\fB = \f(CB$Authentication\fB\->\fBshort_debug_string()\fB\fR" 4
.IX Item "$dstr = $Authentication->short_debug_string()"
Returns a short string representation of \f(CW\*(C`Authentication\*(C'\fR.
.IP "\fB\f(CB$ok\fB = \f(CB$Authentication\fB\->unpack($string)\fR" 4
.IX Item "$ok = $Authentication->unpack($string)"
Attempts to parse \f(CW\*(C`string\*(C'\fR into \f(CW\*(C`Authentication\*(C'\fR, returning 1 on success and 0 on failure.
.IP "\fB\f(CB$string\fB = \f(CB$Authentication\fB\->\fBpack()\fB\fR" 4
.IX Item "$string = $Authentication->pack()"
Serializes \f(CW\*(C`Authentication\*(C'\fR into \f(CW\*(C`string\*(C'\fR.
.IP "\fB\f(CB$length\fB = \f(CB$Authentication\fB\->\fBlength()\fB\fR" 4
.IX Item "$length = $Authentication->length()"
Returns the serialized length of \f(CW\*(C`Authentication\*(C'\fR.
.IP "\fB\f(CB@fields\fB = \f(CB$Authentication\fB\->\fBfields()\fB\fR" 4
.IX Item "@fields = $Authentication->fields()"
Returns the defined fields of \f(CW\*(C`Authentication\*(C'\fR.
.IP "\fB\f(CB$hashref\fB = \f(CB$Authentication\fB\->\fBto_hashref()\fB\fR" 4
.IX Item "$hashref = $Authentication->to_hashref()"
Exports the message to a hashref suitable for use in the
\&\f(CW\*(C`copy_from\*(C'\fR or \f(CW\*(C`merge_from\*(C'\fR methods.
.IP "\fB\f(CB$has_action_id\fB = \f(CB$Authentication\fB\->\fBhas_action_id()\fB\fR" 4
.IX Item "$has_action_id = $Authentication->has_action_id()"
Returns 1 if the \f(CW\*(C`action_id\*(C'\fR element of \f(CW\*(C`Authentication\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Authentication\fB\->\fBclear_action_id()\fB\fR" 4
.IX Item "$Authentication->clear_action_id()"
Clears the \f(CW\*(C`action_id\*(C'\fR element(s) of \f(CW\*(C`Authentication\*(C'\fR.
.IP "\fB\f(CB$action_id\fB = \f(CB$Authentication\fB\->\fBaction_id()\fB\fR" 4
.IX Item "$action_id = $Authentication->action_id()"
Returns \f(CW\*(C`action_id\*(C'\fR from \f(CW\*(C`Authentication\*(C'\fR.  \f(CW\*(C`action_id\*(C'\fR will be a string.
.IP "\fB\f(CB$Authentication\fB\->set_action_id($value)\fR" 4
.IX Item "$Authentication->set_action_id($value)"
Sets the value of \f(CW\*(C`action_id\*(C'\fR in \f(CW\*(C`Authentication\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a string.
.IP "\fB\f(CB$has_authentication_type\fB = \f(CB$Authentication\fB\->\fBhas_authentication_type()\fB\fR" 4
.IX Item "$has_authentication_type = $Authentication->has_authentication_type()"
Returns 1 if the \f(CW\*(C`authentication_type\*(C'\fR element of \f(CW\*(C`Authentication\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Authentication\fB\->\fBclear_authentication_type()\fB\fR" 4
.IX Item "$Authentication->clear_authentication_type()"
Clears the \f(CW\*(C`authentication_type\*(C'\fR element(s) of \f(CW\*(C`Authentication\*(C'\fR.
.IP "\fB\f(CB$authentication_type\fB = \f(CB$Authentication\fB\->\fBauthentication_type()\fB\fR" 4
.IX Item "$authentication_type = $Authentication->authentication_type()"
Returns \f(CW\*(C`authentication_type\*(C'\fR from \f(CW\*(C`Authentication\*(C'\fR.  \f(CW\*(C`authentication_type\*(C'\fR will be a string.
.IP "\fB\f(CB$Authentication\fB\->set_authentication_type($value)\fR" 4
.IX Item "$Authentication->set_authentication_type($value)"
Sets the value of \f(CW\*(C`authentication_type\*(C'\fR in \f(CW\*(C`Authentication\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a string.
.IP "\fB\f(CB$has_token\fB = \f(CB$Authentication\fB\->\fBhas_token()\fB\fR" 4
.IX Item "$has_token = $Authentication->has_token()"
Returns 1 if the \f(CW\*(C`token\*(C'\fR element of \f(CW\*(C`Authentication\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Authentication\fB\->\fBclear_token()\fB\fR" 4
.IX Item "$Authentication->clear_token()"
Clears the \f(CW\*(C`token\*(C'\fR element(s) of \f(CW\*(C`Authentication\*(C'\fR.
.IP "\fB\f(CB$token\fB = \f(CB$Authentication\fB\->\fBtoken()\fB\fR" 4
.IX Item "$token = $Authentication->token()"
Returns \f(CW\*(C`token\*(C'\fR from \f(CW\*(C`Authentication\*(C'\fR.  \f(CW\*(C`token\*(C'\fR will be a string.
.IP "\fB\f(CB$Authentication\fB\->set_token($value)\fR" 4
.IX Item "$Authentication->set_token($value)"
Sets the value of \f(CW\*(C`token\*(C'\fR in \f(CW\*(C`Authentication\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a string.
.IP "\fB\f(CB$has_user_id\fB = \f(CB$Authentication\fB\->\fBhas_user_id()\fB\fR" 4
.IX Item "$has_user_id = $Authentication->has_user_id()"
Returns 1 if the \f(CW\*(C`user_id\*(C'\fR element of \f(CW\*(C`Authentication\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Authentication\fB\->\fBclear_user_id()\fB\fR" 4
.IX Item "$Authentication->clear_user_id()"
Clears the \f(CW\*(C`user_id\*(C'\fR element(s) of \f(CW\*(C`Authentication\*(C'\fR.
.IP "\fB\f(CB$user_id\fB = \f(CB$Authentication\fB\->\fBuser_id()\fB\fR" 4
.IX Item "$user_id = $Authentication->user_id()"
Returns \f(CW\*(C`user_id\*(C'\fR from \f(CW\*(C`Authentication\*(C'\fR.  \f(CW\*(C`user_id\*(C'\fR will be a string.
.IP "\fB\f(CB$Authentication\fB\->set_user_id($value)\fR" 4
.IX Item "$Authentication->set_user_id($value)"
Sets the value of \f(CW\*(C`user_id\*(C'\fR in \f(CW\*(C`Authentication\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a string.
.IP "\fB\f(CB$role_size\fB = \f(CB$Authentication\fB\->\fBrole_size()\fB\fR" 4
.IX Item "$role_size = $Authentication->role_size()"
Returns the number of \f(CW\*(C`role\*(C'\fR elements present in \f(CW\*(C`Authentication\*(C'\fR.
.IP "\fB\f(CB$Authentication\fB\->\fBclear_role()\fB\fR" 4
.IX Item "$Authentication->clear_role()"
Clears the \f(CW\*(C`role\*(C'\fR element(s) of \f(CW\*(C`Authentication\*(C'\fR.
.IP "\fB\f(CB@role_list\fB = \f(CB$Authentication\fB\->\fBrole()\fB\fR" 4
.IX Item "@role_list = $Authentication->role()"
Returns all values of \f(CW\*(C`role\*(C'\fR in an array.  Each element of \f(CW\*(C`role_list\*(C'\fR will be a string.
.IP "\fB\f(CB$role_elem\fB = \f(CB$Authentication\fB\->role($index)\fR" 4
.IX Item "$role_elem = $Authentication->role($index)"
Returns \f(CW\*(C`role\*(C'\fR element \f(CW\*(C`index\*(C'\fR from \f(CW\*(C`Authentication\*(C'\fR.  \f(CW\*(C`role\*(C'\fR will be a string, unless \f(CW\*(C`index\*(C'\fR is out of range, in which case it will be undef.
.IP "\fB\f(CB$Authentication\fB\->add_role($value)\fR" 4
.IX Item "$Authentication->add_role($value)"
Adds \f(CW\*(C`value\*(C'\fR to the list of \f(CW\*(C`role\*(C'\fR in \f(CW\*(C`Authentication\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a string.
.ie n .SH """SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Action::ActionType"" values"
.el .SH "\f(CWSAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Action::ActionType\fP values"
.IX Header "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Action::ActionType values"
.IP "\fB\s-1PUBLISH\s0\fR" 4
.IX Item "PUBLISH"
This constant has a value of 0.
.IP "\fB\s-1POLL\s0\fR" 4
.IX Item "POLL"
This constant has a value of 1.
.IP "\fB\s-1ACCEPTED\s0\fR" 4
.IX Item "ACCEPTED"
This constant has a value of 2.
.IP "\fB\s-1ACKNOWLEDGE_MESSAGE\s0\fR" 4
.IX Item "ACKNOWLEDGE_MESSAGE"
This constant has a value of 3.
.IP "\fB\s-1SUBSCRIBE\s0\fR" 4
.IX Item "SUBSCRIBE"
This constant has a value of 4.
.IP "\fB\s-1UNSUBSCRIBE\s0\fR" 4
.IX Item "UNSUBSCRIBE"
This constant has a value of 5.
.IP "\fB\s-1NOTIFICATION\s0\fR" 4
.IX Item "NOTIFICATION"
This constant has a value of 6.
.IP "\fB\s-1FAULT\s0\fR" 4
.IX Item "FAULT"
This constant has a value of 7.
.IP "\fB\s-1PING\s0\fR" 4
.IX Item "PING"
This constant has a value of 8.
.IP "\fB\s-1PONG\s0\fR" 4
.IX Item "PONG"
This constant has a value of 9.
.IP "\fB\s-1AUTH\s0\fR" 4
.IX Item "AUTH"
This constant has a value of 10.
.SH "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Action Constructor"
.IX Header "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Action Constructor"
.IP "\fB\f(CB$Action\fB = SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Action\->new( [$arg] )\fR" 4
.IX Item "$Action = SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Action->new( [$arg] )"
Constructs an instance of \f(CW\*(C`SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Action\*(C'\fR.  If a hashref argument
is supplied, it is copied into the message instance as if
the \fBcopy_from()\fR method were called immediately after
construction.  Otherwise, if a scalar argument is supplied,
it is interpreted as a serialized instance of the message
type, and the scalar is parsed to populate the message
fields.  Otherwise, if no argument is supplied, an empty
message instance is constructed.
.SH "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Action Methods"
.IX Header "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Action Methods"
.IP "\fB\f(CB$Action2\fB\->copy_from($Action1)\fR" 4
.IX Item "$Action2->copy_from($Action1)"
Copies the contents of \f(CW\*(C`Action1\*(C'\fR into \f(CW\*(C`Action2\*(C'\fR.
\&\f(CW\*(C`Action2\*(C'\fR is another instance of the same message type.
.IP "\fB\f(CB$Action2\fB\->copy_from($hashref)\fR" 4
.IX Item "$Action2->copy_from($hashref)"
Copies the contents of \f(CW\*(C`hashref\*(C'\fR into \f(CW\*(C`Action2\*(C'\fR.
\&\f(CW\*(C`hashref\*(C'\fR is a Data::Dumper\-style representation of an
instance of the message type.
.IP "\fB\f(CB$Action2\fB\->merge_from($Action1)\fR" 4
.IX Item "$Action2->merge_from($Action1)"
Merges the contents of \f(CW\*(C`Action1\*(C'\fR into \f(CW\*(C`Action2\*(C'\fR.
\&\f(CW\*(C`Action2\*(C'\fR is another instance of the same message type.
.IP "\fB\f(CB$Action2\fB\->merge_from($hashref)\fR" 4
.IX Item "$Action2->merge_from($hashref)"
Merges the contents of \f(CW\*(C`hashref\*(C'\fR into \f(CW\*(C`Action2\*(C'\fR.
\&\f(CW\*(C`hashref\*(C'\fR is a Data::Dumper\-style representation of an
instance of the message type.
.IP "\fB\f(CB$Action\fB\->\fBclear()\fB\fR" 4
.IX Item "$Action->clear()"
Clears the contents of \f(CW\*(C`Action\*(C'\fR.
.IP "\fB\f(CB$init\fB = \f(CB$Action\fB\->\fBis_initialized()\fB\fR" 4
.IX Item "$init = $Action->is_initialized()"
Returns 1 if \f(CW\*(C`Action\*(C'\fR has been initialized with data.
.IP "\fB\f(CB$errstr\fB = \f(CB$Action\fB\->\fBerror_string()\fB\fR" 4
.IX Item "$errstr = $Action->error_string()"
Returns a comma-delimited string of initialization errors.
.IP "\fB\f(CB$Action\fB\->\fBdiscard_unknown_fields()\fB\fR" 4
.IX Item "$Action->discard_unknown_fields()"
Discards unknown fields from \f(CW\*(C`Action\*(C'\fR.
.IP "\fB\f(CB$dstr\fB = \f(CB$Action\fB\->\fBdebug_string()\fB\fR" 4
.IX Item "$dstr = $Action->debug_string()"
Returns a string representation of \f(CW\*(C`Action\*(C'\fR.
.IP "\fB\f(CB$dstr\fB = \f(CB$Action\fB\->\fBshort_debug_string()\fB\fR" 4
.IX Item "$dstr = $Action->short_debug_string()"
Returns a short string representation of \f(CW\*(C`Action\*(C'\fR.
.IP "\fB\f(CB$ok\fB = \f(CB$Action\fB\->unpack($string)\fR" 4
.IX Item "$ok = $Action->unpack($string)"
Attempts to parse \f(CW\*(C`string\*(C'\fR into \f(CW\*(C`Action\*(C'\fR, returning 1 on success and 0 on failure.
.IP "\fB\f(CB$string\fB = \f(CB$Action\fB\->\fBpack()\fB\fR" 4
.IX Item "$string = $Action->pack()"
Serializes \f(CW\*(C`Action\*(C'\fR into \f(CW\*(C`string\*(C'\fR.
.IP "\fB\f(CB$length\fB = \f(CB$Action\fB\->\fBlength()\fB\fR" 4
.IX Item "$length = $Action->length()"
Returns the serialized length of \f(CW\*(C`Action\*(C'\fR.
.IP "\fB\f(CB@fields\fB = \f(CB$Action\fB\->\fBfields()\fB\fR" 4
.IX Item "@fields = $Action->fields()"
Returns the defined fields of \f(CW\*(C`Action\*(C'\fR.
.IP "\fB\f(CB$hashref\fB = \f(CB$Action\fB\->\fBto_hashref()\fB\fR" 4
.IX Item "$hashref = $Action->to_hashref()"
Exports the message to a hashref suitable for use in the
\&\f(CW\*(C`copy_from\*(C'\fR or \f(CW\*(C`merge_from\*(C'\fR methods.
.IP "\fB\f(CB$has_publish\fB = \f(CB$Action\fB\->\fBhas_publish()\fB\fR" 4
.IX Item "$has_publish = $Action->has_publish()"
Returns 1 if the \f(CW\*(C`publish\*(C'\fR element of \f(CW\*(C`Action\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Action\fB\->\fBclear_publish()\fB\fR" 4
.IX Item "$Action->clear_publish()"
Clears the \f(CW\*(C`publish\*(C'\fR element(s) of \f(CW\*(C`Action\*(C'\fR.
.IP "\fB\f(CB$publish\fB = \f(CB$Action\fB\->\fBpublish()\fB\fR" 4
.IX Item "$publish = $Action->publish()"
Returns \f(CW\*(C`publish\*(C'\fR from \f(CW\*(C`Action\*(C'\fR.  \f(CW\*(C`publish\*(C'\fR will be an instance of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Publish.
.IP "\fB\f(CB$Action\fB\->set_publish($value)\fR" 4
.IX Item "$Action->set_publish($value)"
Sets the value of \f(CW\*(C`publish\*(C'\fR in \f(CW\*(C`Action\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be an instance of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Publish.
.IP "\fB\f(CB$has_poll\fB = \f(CB$Action\fB\->\fBhas_poll()\fB\fR" 4
.IX Item "$has_poll = $Action->has_poll()"
Returns 1 if the \f(CW\*(C`poll\*(C'\fR element of \f(CW\*(C`Action\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Action\fB\->\fBclear_poll()\fB\fR" 4
.IX Item "$Action->clear_poll()"
Clears the \f(CW\*(C`poll\*(C'\fR element(s) of \f(CW\*(C`Action\*(C'\fR.
.IP "\fB\f(CB$poll\fB = \f(CB$Action\fB\->\fBpoll()\fB\fR" 4
.IX Item "$poll = $Action->poll()"
Returns \f(CW\*(C`poll\*(C'\fR from \f(CW\*(C`Action\*(C'\fR.  \f(CW\*(C`poll\*(C'\fR will be an instance of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Poll.
.IP "\fB\f(CB$Action\fB\->set_poll($value)\fR" 4
.IX Item "$Action->set_poll($value)"
Sets the value of \f(CW\*(C`poll\*(C'\fR in \f(CW\*(C`Action\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be an instance of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Poll.
.IP "\fB\f(CB$has_accepted\fB = \f(CB$Action\fB\->\fBhas_accepted()\fB\fR" 4
.IX Item "$has_accepted = $Action->has_accepted()"
Returns 1 if the \f(CW\*(C`accepted\*(C'\fR element of \f(CW\*(C`Action\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Action\fB\->\fBclear_accepted()\fB\fR" 4
.IX Item "$Action->clear_accepted()"
Clears the \f(CW\*(C`accepted\*(C'\fR element(s) of \f(CW\*(C`Action\*(C'\fR.
.IP "\fB\f(CB$accepted\fB = \f(CB$Action\fB\->\fBaccepted()\fB\fR" 4
.IX Item "$accepted = $Action->accepted()"
Returns \f(CW\*(C`accepted\*(C'\fR from \f(CW\*(C`Action\*(C'\fR.  \f(CW\*(C`accepted\*(C'\fR will be an instance of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Accepted.
.IP "\fB\f(CB$Action\fB\->set_accepted($value)\fR" 4
.IX Item "$Action->set_accepted($value)"
Sets the value of \f(CW\*(C`accepted\*(C'\fR in \f(CW\*(C`Action\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be an instance of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Accepted.
.IP "\fB\f(CB$has_ack_message\fB = \f(CB$Action\fB\->\fBhas_ack_message()\fB\fR" 4
.IX Item "$has_ack_message = $Action->has_ack_message()"
Returns 1 if the \f(CW\*(C`ack_message\*(C'\fR element of \f(CW\*(C`Action\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Action\fB\->\fBclear_ack_message()\fB\fR" 4
.IX Item "$Action->clear_ack_message()"
Clears the \f(CW\*(C`ack_message\*(C'\fR element(s) of \f(CW\*(C`Action\*(C'\fR.
.IP "\fB\f(CB$ack_message\fB = \f(CB$Action\fB\->\fBack_message()\fB\fR" 4
.IX Item "$ack_message = $Action->ack_message()"
Returns \f(CW\*(C`ack_message\*(C'\fR from \f(CW\*(C`Action\*(C'\fR.  \f(CW\*(C`ack_message\*(C'\fR will be an instance of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::AcknowledgeMessage.
.IP "\fB\f(CB$Action\fB\->set_ack_message($value)\fR" 4
.IX Item "$Action->set_ack_message($value)"
Sets the value of \f(CW\*(C`ack_message\*(C'\fR in \f(CW\*(C`Action\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be an instance of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::AcknowledgeMessage.
.IP "\fB\f(CB$has_subscribe\fB = \f(CB$Action\fB\->\fBhas_subscribe()\fB\fR" 4
.IX Item "$has_subscribe = $Action->has_subscribe()"
Returns 1 if the \f(CW\*(C`subscribe\*(C'\fR element of \f(CW\*(C`Action\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Action\fB\->\fBclear_subscribe()\fB\fR" 4
.IX Item "$Action->clear_subscribe()"
Clears the \f(CW\*(C`subscribe\*(C'\fR element(s) of \f(CW\*(C`Action\*(C'\fR.
.IP "\fB\f(CB$subscribe\fB = \f(CB$Action\fB\->\fBsubscribe()\fB\fR" 4
.IX Item "$subscribe = $Action->subscribe()"
Returns \f(CW\*(C`subscribe\*(C'\fR from \f(CW\*(C`Action\*(C'\fR.  \f(CW\*(C`subscribe\*(C'\fR will be an instance of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Subscribe.
.IP "\fB\f(CB$Action\fB\->set_subscribe($value)\fR" 4
.IX Item "$Action->set_subscribe($value)"
Sets the value of \f(CW\*(C`subscribe\*(C'\fR in \f(CW\*(C`Action\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be an instance of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Subscribe.
.IP "\fB\f(CB$has_unsubscribe\fB = \f(CB$Action\fB\->\fBhas_unsubscribe()\fB\fR" 4
.IX Item "$has_unsubscribe = $Action->has_unsubscribe()"
Returns 1 if the \f(CW\*(C`unsubscribe\*(C'\fR element of \f(CW\*(C`Action\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Action\fB\->\fBclear_unsubscribe()\fB\fR" 4
.IX Item "$Action->clear_unsubscribe()"
Clears the \f(CW\*(C`unsubscribe\*(C'\fR element(s) of \f(CW\*(C`Action\*(C'\fR.
.IP "\fB\f(CB$unsubscribe\fB = \f(CB$Action\fB\->\fBunsubscribe()\fB\fR" 4
.IX Item "$unsubscribe = $Action->unsubscribe()"
Returns \f(CW\*(C`unsubscribe\*(C'\fR from \f(CW\*(C`Action\*(C'\fR.  \f(CW\*(C`unsubscribe\*(C'\fR will be an instance of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Unsubscribe.
.IP "\fB\f(CB$Action\fB\->set_unsubscribe($value)\fR" 4
.IX Item "$Action->set_unsubscribe($value)"
Sets the value of \f(CW\*(C`unsubscribe\*(C'\fR in \f(CW\*(C`Action\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be an instance of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Unsubscribe.
.IP "\fB\f(CB$has_notification\fB = \f(CB$Action\fB\->\fBhas_notification()\fB\fR" 4
.IX Item "$has_notification = $Action->has_notification()"
Returns 1 if the \f(CW\*(C`notification\*(C'\fR element of \f(CW\*(C`Action\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Action\fB\->\fBclear_notification()\fB\fR" 4
.IX Item "$Action->clear_notification()"
Clears the \f(CW\*(C`notification\*(C'\fR element(s) of \f(CW\*(C`Action\*(C'\fR.
.IP "\fB\f(CB$notification\fB = \f(CB$Action\fB\->\fBnotification()\fB\fR" 4
.IX Item "$notification = $Action->notification()"
Returns \f(CW\*(C`notification\*(C'\fR from \f(CW\*(C`Action\*(C'\fR.  \f(CW\*(C`notification\*(C'\fR will be an instance of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Notification.
.IP "\fB\f(CB$Action\fB\->set_notification($value)\fR" 4
.IX Item "$Action->set_notification($value)"
Sets the value of \f(CW\*(C`notification\*(C'\fR in \f(CW\*(C`Action\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be an instance of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Notification.
.IP "\fB\f(CB$has_fault\fB = \f(CB$Action\fB\->\fBhas_fault()\fB\fR" 4
.IX Item "$has_fault = $Action->has_fault()"
Returns 1 if the \f(CW\*(C`fault\*(C'\fR element of \f(CW\*(C`Action\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Action\fB\->\fBclear_fault()\fB\fR" 4
.IX Item "$Action->clear_fault()"
Clears the \f(CW\*(C`fault\*(C'\fR element(s) of \f(CW\*(C`Action\*(C'\fR.
.IP "\fB\f(CB$fault\fB = \f(CB$Action\fB\->\fBfault()\fB\fR" 4
.IX Item "$fault = $Action->fault()"
Returns \f(CW\*(C`fault\*(C'\fR from \f(CW\*(C`Action\*(C'\fR.  \f(CW\*(C`fault\*(C'\fR will be an instance of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Fault.
.IP "\fB\f(CB$Action\fB\->set_fault($value)\fR" 4
.IX Item "$Action->set_fault($value)"
Sets the value of \f(CW\*(C`fault\*(C'\fR in \f(CW\*(C`Action\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be an instance of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Fault.
.IP "\fB\f(CB$has_ping\fB = \f(CB$Action\fB\->\fBhas_ping()\fB\fR" 4
.IX Item "$has_ping = $Action->has_ping()"
Returns 1 if the \f(CW\*(C`ping\*(C'\fR element of \f(CW\*(C`Action\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Action\fB\->\fBclear_ping()\fB\fR" 4
.IX Item "$Action->clear_ping()"
Clears the \f(CW\*(C`ping\*(C'\fR element(s) of \f(CW\*(C`Action\*(C'\fR.
.IP "\fB\f(CB$ping\fB = \f(CB$Action\fB\->\fBping()\fB\fR" 4
.IX Item "$ping = $Action->ping()"
Returns \f(CW\*(C`ping\*(C'\fR from \f(CW\*(C`Action\*(C'\fR.  \f(CW\*(C`ping\*(C'\fR will be an instance of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Ping.
.IP "\fB\f(CB$Action\fB\->set_ping($value)\fR" 4
.IX Item "$Action->set_ping($value)"
Sets the value of \f(CW\*(C`ping\*(C'\fR in \f(CW\*(C`Action\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be an instance of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Ping.
.IP "\fB\f(CB$has_pong\fB = \f(CB$Action\fB\->\fBhas_pong()\fB\fR" 4
.IX Item "$has_pong = $Action->has_pong()"
Returns 1 if the \f(CW\*(C`pong\*(C'\fR element of \f(CW\*(C`Action\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Action\fB\->\fBclear_pong()\fB\fR" 4
.IX Item "$Action->clear_pong()"
Clears the \f(CW\*(C`pong\*(C'\fR element(s) of \f(CW\*(C`Action\*(C'\fR.
.IP "\fB\f(CB$pong\fB = \f(CB$Action\fB\->\fBpong()\fB\fR" 4
.IX Item "$pong = $Action->pong()"
Returns \f(CW\*(C`pong\*(C'\fR from \f(CW\*(C`Action\*(C'\fR.  \f(CW\*(C`pong\*(C'\fR will be an instance of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Pong.
.IP "\fB\f(CB$Action\fB\->set_pong($value)\fR" 4
.IX Item "$Action->set_pong($value)"
Sets the value of \f(CW\*(C`pong\*(C'\fR in \f(CW\*(C`Action\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be an instance of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Pong.
.IP "\fB\f(CB$has_auth\fB = \f(CB$Action\fB\->\fBhas_auth()\fB\fR" 4
.IX Item "$has_auth = $Action->has_auth()"
Returns 1 if the \f(CW\*(C`auth\*(C'\fR element of \f(CW\*(C`Action\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Action\fB\->\fBclear_auth()\fB\fR" 4
.IX Item "$Action->clear_auth()"
Clears the \f(CW\*(C`auth\*(C'\fR element(s) of \f(CW\*(C`Action\*(C'\fR.
.IP "\fB\f(CB$auth\fB = \f(CB$Action\fB\->\fBauth()\fB\fR" 4
.IX Item "$auth = $Action->auth()"
Returns \f(CW\*(C`auth\*(C'\fR from \f(CW\*(C`Action\*(C'\fR.  \f(CW\*(C`auth\*(C'\fR will be an instance of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Authentication.
.IP "\fB\f(CB$Action\fB\->set_auth($value)\fR" 4
.IX Item "$Action->set_auth($value)"
Sets the value of \f(CW\*(C`auth\*(C'\fR in \f(CW\*(C`Action\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be an instance of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Authentication.
.IP "\fB\f(CB$has_action_type\fB = \f(CB$Action\fB\->\fBhas_action_type()\fB\fR" 4
.IX Item "$has_action_type = $Action->has_action_type()"
Returns 1 if the \f(CW\*(C`action_type\*(C'\fR element of \f(CW\*(C`Action\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Action\fB\->\fBclear_action_type()\fB\fR" 4
.IX Item "$Action->clear_action_type()"
Clears the \f(CW\*(C`action_type\*(C'\fR element(s) of \f(CW\*(C`Action\*(C'\fR.
.IP "\fB\f(CB$action_type\fB = \f(CB$Action\fB\->\fBaction_type()\fB\fR" 4
.IX Item "$action_type = $Action->action_type()"
Returns \f(CW\*(C`action_type\*(C'\fR from \f(CW\*(C`Action\*(C'\fR.  \f(CW\*(C`action_type\*(C'\fR will be a value of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Action::ActionType.
.IP "\fB\f(CB$Action\fB\->set_action_type($value)\fR" 4
.IX Item "$Action->set_action_type($value)"
Sets the value of \f(CW\*(C`action_type\*(C'\fR in \f(CW\*(C`Action\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be a value of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Action::ActionType.
.SH "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom Constructor"
.IX Header "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom Constructor"
.IP "\fB\f(CB$Atom\fB = SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom\->new( [$arg] )\fR" 4
.IX Item "$Atom = SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom->new( [$arg] )"
Constructs an instance of \f(CW\*(C`SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom\*(C'\fR.  If a hashref argument
is supplied, it is copied into the message instance as if
the \fBcopy_from()\fR method were called immediately after
construction.  Otherwise, if a scalar argument is supplied,
it is interpreted as a serialized instance of the message
type, and the scalar is parsed to populate the message
fields.  Otherwise, if no argument is supplied, an empty
message instance is constructed.
.SH "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom Methods"
.IX Header "SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom Methods"
.IP "\fB\f(CB$Atom2\fB\->copy_from($Atom1)\fR" 4
.IX Item "$Atom2->copy_from($Atom1)"
Copies the contents of \f(CW\*(C`Atom1\*(C'\fR into \f(CW\*(C`Atom2\*(C'\fR.
\&\f(CW\*(C`Atom2\*(C'\fR is another instance of the same message type.
.IP "\fB\f(CB$Atom2\fB\->copy_from($hashref)\fR" 4
.IX Item "$Atom2->copy_from($hashref)"
Copies the contents of \f(CW\*(C`hashref\*(C'\fR into \f(CW\*(C`Atom2\*(C'\fR.
\&\f(CW\*(C`hashref\*(C'\fR is a Data::Dumper\-style representation of an
instance of the message type.
.IP "\fB\f(CB$Atom2\fB\->merge_from($Atom1)\fR" 4
.IX Item "$Atom2->merge_from($Atom1)"
Merges the contents of \f(CW\*(C`Atom1\*(C'\fR into \f(CW\*(C`Atom2\*(C'\fR.
\&\f(CW\*(C`Atom2\*(C'\fR is another instance of the same message type.
.IP "\fB\f(CB$Atom2\fB\->merge_from($hashref)\fR" 4
.IX Item "$Atom2->merge_from($hashref)"
Merges the contents of \f(CW\*(C`hashref\*(C'\fR into \f(CW\*(C`Atom2\*(C'\fR.
\&\f(CW\*(C`hashref\*(C'\fR is a Data::Dumper\-style representation of an
instance of the message type.
.IP "\fB\f(CB$Atom\fB\->\fBclear()\fB\fR" 4
.IX Item "$Atom->clear()"
Clears the contents of \f(CW\*(C`Atom\*(C'\fR.
.IP "\fB\f(CB$init\fB = \f(CB$Atom\fB\->\fBis_initialized()\fB\fR" 4
.IX Item "$init = $Atom->is_initialized()"
Returns 1 if \f(CW\*(C`Atom\*(C'\fR has been initialized with data.
.IP "\fB\f(CB$errstr\fB = \f(CB$Atom\fB\->\fBerror_string()\fB\fR" 4
.IX Item "$errstr = $Atom->error_string()"
Returns a comma-delimited string of initialization errors.
.IP "\fB\f(CB$Atom\fB\->\fBdiscard_unknown_fields()\fB\fR" 4
.IX Item "$Atom->discard_unknown_fields()"
Discards unknown fields from \f(CW\*(C`Atom\*(C'\fR.
.IP "\fB\f(CB$dstr\fB = \f(CB$Atom\fB\->\fBdebug_string()\fB\fR" 4
.IX Item "$dstr = $Atom->debug_string()"
Returns a string representation of \f(CW\*(C`Atom\*(C'\fR.
.IP "\fB\f(CB$dstr\fB = \f(CB$Atom\fB\->\fBshort_debug_string()\fB\fR" 4
.IX Item "$dstr = $Atom->short_debug_string()"
Returns a short string representation of \f(CW\*(C`Atom\*(C'\fR.
.IP "\fB\f(CB$ok\fB = \f(CB$Atom\fB\->unpack($string)\fR" 4
.IX Item "$ok = $Atom->unpack($string)"
Attempts to parse \f(CW\*(C`string\*(C'\fR into \f(CW\*(C`Atom\*(C'\fR, returning 1 on success and 0 on failure.
.IP "\fB\f(CB$string\fB = \f(CB$Atom\fB\->\fBpack()\fB\fR" 4
.IX Item "$string = $Atom->pack()"
Serializes \f(CW\*(C`Atom\*(C'\fR into \f(CW\*(C`string\*(C'\fR.
.IP "\fB\f(CB$length\fB = \f(CB$Atom\fB\->\fBlength()\fB\fR" 4
.IX Item "$length = $Atom->length()"
Returns the serialized length of \f(CW\*(C`Atom\*(C'\fR.
.IP "\fB\f(CB@fields\fB = \f(CB$Atom\fB\->\fBfields()\fB\fR" 4
.IX Item "@fields = $Atom->fields()"
Returns the defined fields of \f(CW\*(C`Atom\*(C'\fR.
.IP "\fB\f(CB$hashref\fB = \f(CB$Atom\fB\->\fBto_hashref()\fB\fR" 4
.IX Item "$hashref = $Atom->to_hashref()"
Exports the message to a hashref suitable for use in the
\&\f(CW\*(C`copy_from\*(C'\fR or \f(CW\*(C`merge_from\*(C'\fR methods.
.IP "\fB\f(CB$has_header\fB = \f(CB$Atom\fB\->\fBhas_header()\fB\fR" 4
.IX Item "$has_header = $Atom->has_header()"
Returns 1 if the \f(CW\*(C`header\*(C'\fR element of \f(CW\*(C`Atom\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Atom\fB\->\fBclear_header()\fB\fR" 4
.IX Item "$Atom->clear_header()"
Clears the \f(CW\*(C`header\*(C'\fR element(s) of \f(CW\*(C`Atom\*(C'\fR.
.IP "\fB\f(CB$header\fB = \f(CB$Atom\fB\->\fBheader()\fB\fR" 4
.IX Item "$header = $Atom->header()"
Returns \f(CW\*(C`header\*(C'\fR from \f(CW\*(C`Atom\*(C'\fR.  \f(CW\*(C`header\*(C'\fR will be an instance of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Header.
.IP "\fB\f(CB$Atom\fB\->set_header($value)\fR" 4
.IX Item "$Atom->set_header($value)"
Sets the value of \f(CW\*(C`header\*(C'\fR in \f(CW\*(C`Atom\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be an instance of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Header.
.IP "\fB\f(CB$has_action\fB = \f(CB$Atom\fB\->\fBhas_action()\fB\fR" 4
.IX Item "$has_action = $Atom->has_action()"
Returns 1 if the \f(CW\*(C`action\*(C'\fR element of \f(CW\*(C`Atom\*(C'\fR is set, 0 otherwise.
.IP "\fB\f(CB$Atom\fB\->\fBclear_action()\fB\fR" 4
.IX Item "$Atom->clear_action()"
Clears the \f(CW\*(C`action\*(C'\fR element(s) of \f(CW\*(C`Atom\*(C'\fR.
.IP "\fB\f(CB$action\fB = \f(CB$Atom\fB\->\fBaction()\fB\fR" 4
.IX Item "$action = $Atom->action()"
Returns \f(CW\*(C`action\*(C'\fR from \f(CW\*(C`Atom\*(C'\fR.  \f(CW\*(C`action\*(C'\fR will be an instance of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Action.
.IP "\fB\f(CB$Atom\fB\->set_action($value)\fR" 4
.IX Item "$Atom->set_action($value)"
Sets the value of \f(CW\*(C`action\*(C'\fR in \f(CW\*(C`Atom\*(C'\fR to \f(CW\*(C`value\*(C'\fR.  \f(CW\*(C`value\*(C'\fR must be an instance of SAPO::Broker::Codecs::Autogen::ProtobufXS::Atom::Action.
.SH "AUTHOR"
.IX Header "AUTHOR"
Generated from \s-1SAPO\s0.Broker.Codecs.Autogen.ProtobufXS.Atom by the protoc compiler.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
http://code.google.com/p/protobuf
