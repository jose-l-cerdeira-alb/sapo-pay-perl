.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DateTime::Format::DateParse 3"
.TH DateTime::Format::DateParse 3 "2020-07-22" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DateTime::Format::DateParse \- Parses Date::Parse compatible formats
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use DateTime::Format::DateParse;
\&
\&    my $dt = DateTime::Format::DateParse\->parse_datetime( $date );
\&    my $dt = DateTime::Format::DateParse\->parse_datetime( $date, $zone );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is a compatibility wrapper around Date::Parse.
.SH "USAGE"
.IX Header "USAGE"
.SS "Import Parameters"
.IX Subsection "Import Parameters"
This module accepts no arguments to it's \f(CW\*(C`import\*(C'\fR method and exports no
\&\fIsymbols\fR.
.SS "Methods"
.IX Subsection "Methods"
\fIClass Methods\fR
.IX Subsection "Class Methods"
.IP "\(bu" 4
parse_datetime($date [, \f(CW$zone\fR])
.Sp
Accepts a Date::Parse compatible \f(CW$date\fR string and optionally a
Time::Zone compatible \f(CW$zone\fR string.
.Sp
Returns a DateTime object.
.SH "GOTCHAS"
.IX Header "GOTCHAS"
.IP "\(bu" 4
If parse_datetime is called on a \f(CW$date\fR that doesn't know specify
a timezone and \f(CW$zone\fR is not set, then the timezone of the returned
DateTime object will be set to the \f(CW\*(C`local\*(C'\fR timezone.  This is consistent
with the behavior of Date::Parse.
.IP "\(bu" 4
If parse_datetime is called without a \f(CW$zone\fR but the \f(CW$date\fR
string \fIdoes\fR specify a timezone/offset or if parse_datetime is called with
a \f(CW$zone\fR that DateTime::TimeZone does not understand, the returned
DateTime object will have it's timezone set to a fixed offset from \s-1UTC.\s0
This means that \f(CW\*(C`DST\*(C'\fR information is not available and date math will not
reflect \f(CW\*(C`DST\*(C'\fR transitions.  This may be resolved for true timezones by using
the DateTime::TimeZone::Alias module to \f(CW\*(C`alias\*(C'\fR the Time::Zone timezone
to an Olson \s-1DB\s0 name.  This may be done automatically in a future release.
.SH "CREDITS"
.IX Header "CREDITS"
Graham Barr (\s-1GBARR\s0) <gbarr@pobox.com>, author of Date::Parse
.PP
Everyone at the DateTime \f(CW\*(C`Asylum\*(C'\fR.
.SH "SUPPORT"
.IX Header "SUPPORT"
Support for this module is provided via the <datetime@perl.org> email list.  See
<http://lists.perl.org/> for more details.
.SH "AUTHOR"
.IX Header "AUTHOR"
Joshua Hoblitt (\s-1JHOBLITT\s0) <jhoblitt@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2005\-6  Joshua Hoblitt. All rights reserved. This program is free
software; you can redistribute it and/or modify it under the same terms as Perl
itself.
.PP
The full text of the licenses can be found in the \fI\s-1LICENSE\s0\fR file included with
this module, or in perlartistic and perlgpl as supplied with Perl 5.8.1
and later.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Date::Parse, Time::Zone, DateTime, DateTime::TimeZone,
DateTime::TimeZone::Alias, <http://datetime.perl.org/>
