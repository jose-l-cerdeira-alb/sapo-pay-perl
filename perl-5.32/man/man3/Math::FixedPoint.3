.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Math::FixedPoint 3"
.TH Math::FixedPoint 3 "2013-06-25" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::FixedPoint
.SH "VERSION"
.IX Header "VERSION"
version 0.20130625.1928
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Math::FixedPoint;
\&
\&    my $num = Math::FixedPoint\->new(1.23);
\&    $num += 3.1234; # $num = 4.35
\&
\&    # you can specifying the radix in the constructor
\&
\&    my $num = Math::FixedPoint\->new(1.23,3);
\&    $num += 3.1234; # $num = 4.353
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements fixed point arithmetic for Perl. There are applications, such as currency/money handling, where floating point numbers are not the best fit due to it's limited precision.
.PP
.Vb 2
\&   $ perl \-e \*(Aqprint int(37.73*100)\*(Aq
\&   3772
.Ve
.PP
This problem is unacceptable in some applications. Some of those cases are better handled using fixed point math as precision is determined by the number of decimal places. To circumvent inherit problems with floating point numbers Math::BigFloat module is typically used, still problem exist, but precision is improved.
.PP
Now the problem with Math::BigFloat is that it is 3 or more orders of magnitude slower than Perl's floating point numbers, Math::FixedPoint on the other hand is 2 orders of magnitude slower than Perl's native numbers which is a huge gain over Math::BigFloat. That performance boost comes from the fact that most of the math is done internally using integer arithmetic.
.SH "NAME"
Math::FixedPoint \- fixed\-point arithmetic for Perl
.SH "VERSION"
.IX Header "VERSION"
version 0.20130625.1928
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "new($number, [$radix])"
.el .SS "new(\f(CW$number\fP, [\f(CW$radix\fP])"
.IX Subsection "new($number, [$radix])"
Creates a new object representing the \f(CW$number\fR provided. If \f(CW$radix\fR is not specified it will use the \f(CW$number\fR's radix. If \f(CW$radix\fR is provided number will be rounded to the specified decimal places
.SH "IMPLEMENTED OPERATIONS"
.IX Header "IMPLEMENTED OPERATIONS"
The following operations are implemented by Math::FixedPoint are \fB+\fR, \fB+=\fR, \fB\-\fR, \fB\-=\fR, \fB*\fR, \fB*=\fR, \fB/\fR, \fB/=\fR, \fB=\fR, \fB<=\fR>, \fBcmp\fR, \fB""\fR, \fBint\fR, \fBabs\fR
.SH "CAVEATS & GOTCHAS"
.IX Header "CAVEATS & GOTCHAS"
This module still \s-1ALPHA,\s0 feedback and patches are welcome.
.SS "\s-1NUMBERS WITH DIFFERENT RADIX\s0"
.IX Subsection "NUMBERS WITH DIFFERENT RADIX"
It is not intuitive what it is going to happen when two numbers with different radix are used together
.PP
.Vb 2
\&    my $num1 = Math::FixedPoint\->new(1.23,2);
\&    my $num2 = Math::FixedPoint\->new(1.234,3);
\&
\&    my $res = $num1 + $num2;
\&    # $res = 2.46
\&
\&    my $res = $num2 + $num1;
\&    # $res = 2.464
.Ve
.PP
Due to the way that Perl handles overloaded methods, it will call the \*(L"add\*(R" method on the first object and will pass the second object as parameter. The \*(L"add\*(R" method will preserve the radix of the first object
.SS "\s-1INTEGRATING WITH OTHER NUMBER CLASSES\s0"
.IX Subsection "INTEGRATING WITH OTHER NUMBER CLASSES"
Due to similar reasons when combining different classes it is not obvious which will be the class of the result object
.PP
.Vb 2
\&    my $num1 = Math::FixedPoint\->new(1.23);
\&    my $num2 = Math::BigFloat\->new(1.24);
\&
\&    my $res = $num1 + $num2;
\&    # ref $res = \*(AqMath::FixedPoint\*(Aq
\&
\&    my $res = $num2 + $num1;
\&    # ref $res = \*(AqMath::BigFloat\*(Aq
.Ve
.PP
It's critically important to have this in mind to prevent surprises
.SH "PERFORMANCE"
.IX Header "PERFORMANCE"
Although this module is implemented in pure Perl, it is still 5\-10 times faster than Math::BigFloat (even more depending on Math::BigInt's backed).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Math::BigInt, Math::BigFloat
.SH "AUTHOR"
.IX Header "AUTHOR"
Mariano Wahlmann <dichoso _at_ gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2013 by Mariano Wahlmann.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
