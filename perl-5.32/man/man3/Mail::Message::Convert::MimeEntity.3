.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mail::Message::Convert::MimeEntity 3"
.TH Mail::Message::Convert::MimeEntity 3 "2020-02-07" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::Message::Convert::MimeEntity \- translate Mail::Message to MIME::Entity vv
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 3
\& Mail::Message::Convert::MimeEntity
\&   is a Mail::Message::Convert
\&   is a Mail::Reporter
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use Mail::Message::Convert::MimeEntity;
\& my $convert = Mail::Message::Convert::MimeEntity\->new;
\&
\& my Mail::Message $msg    = Mail::Message\->new;
\& my MIME::Entity  $entity = $convert\->export($msg);
\&
\& my MIME::Entity  $entity = MIME::Entity\->new;
\& my Mail::Message $msg    = $convert\->from($entity);
\&
\& use Mail::Box::Manager;
\& my $mgr     = Mail::Box::Manager\->new;
\& my $folder  = $mgr\->open(folder => \*(AqOutbox\*(Aq);
\& $folder\->addMessage($entity);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The MIME::Entity extends Mail::Internet message with multiparts
and more methods.  The Mail::Message objects are more flexible
in how the message parts are stored, and uses separate header and body
objects.
.PP
Extends \*(L"\s-1DESCRIPTION\*(R"\s0 in Mail::Message::Convert.
.SH "METHODS"
.IX Header "METHODS"
Extends \*(L"\s-1METHODS\*(R"\s0 in Mail::Message::Convert.
.SS "Constructors"
.IX Subsection "Constructors"
Extends \*(L"Constructors\*(R" in Mail::Message::Convert.
.IP "Mail::Message::Convert::MimeEntity\->\fBnew\fR(%options)" 4
.IX Item "Mail::Message::Convert::MimeEntity->new(%options)"
Inherited, see \*(L"\s-1METHODS\*(R"\s0 in Mail::Message::Convert
.SS "Converting"
.IX Subsection "Converting"
Extends \*(L"Converting\*(R" in Mail::Message::Convert.
.ie n .IP "$obj\->\fBexport\fR( $message, [$parser] )" 4
.el .IP "\f(CW$obj\fR\->\fBexport\fR( \f(CW$message\fR, [$parser] )" 4
.IX Item "$obj->export( $message, [$parser] )"
Returns a new MIME::Entity message object based on the
information from the \f(CW$message\fR, which is a Mail::Message object.
.Sp
You may want to supply your own \f(CW$parser\fR, which is a MIME::Parser
object, to change the parser flags.  Without a \f(CW$parser\fR object, one
is created for you, with all the default settings.
.Sp
If \f(CW\*(C`undef\*(C'\fR is passed, in place of a \f(CW$message\fR, then an empty list is
returned.  When the parsing failes, then MIME::Parser throws an
exception.
.Sp
example:
.Sp
.Vb 3
\& my $convert = Mail::Message::Convert::MimeEntity\->new;
\& my Mail::Message $msg  = Mail::Message\->new;
\& my manual MIME::Entity  $copy = $convert\->export($msg);
.Ve
.ie n .IP "$obj\->\fBfrom\fR($mime_object)" 4
.el .IP "\f(CW$obj\fR\->\fBfrom\fR($mime_object)" 4
.IX Item "$obj->from($mime_object)"
Returns a new Mail::Message object based on the information from
the specified MIME::Entity.  If the conversion fails, the \f(CW\*(C`undef\*(C'\fR
is returned.  If \f(CW\*(C`undef\*(C'\fR is passed in place of an \s-1OBJECT,\s0 then an
empty list is returned.
.Sp
example:
.Sp
.Vb 3
\& my $convert = Mail::Message::Convert::MimeEntity\->new;
\& my MIME::Entity  $msg  = MIME::Entity\->new;
\& my Mail::Message $copy = $convert\->from($msg);
.Ve
.ie n .IP "$obj\->\fBselectedFields\fR($head)" 4
.el .IP "\f(CW$obj\fR\->\fBselectedFields\fR($head)" 4
.IX Item "$obj->selectedFields($head)"
Inherited, see \*(L"Converting\*(R" in Mail::Message::Convert
.SS "Error handling"
.IX Subsection "Error handling"
Extends \*(L"Error handling\*(R" in Mail::Message::Convert.
.ie n .IP "$obj\->\fB\s-1AUTOLOAD\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1AUTOLOAD\s0\fR()" 4
.IX Item "$obj->AUTOLOAD()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBaddReport\fR($object)" 4
.el .IP "\f(CW$obj\fR\->\fBaddReport\fR($object)" 4
.IX Item "$obj->addReport($object)"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "\f(CW$obj\fR\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "$obj->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD 0
.ie n .IP "Mail::Message::Convert::MimeEntity\->\fBdefaultTrace\fR( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )" 4
.el .IP "Mail::Message::Convert::MimeEntity\->\fBdefaultTrace\fR( [$level]|[$loglevel, \f(CW$tracelevel\fR]|[$level, \f(CW$callback\fR] )" 4
.IX Item "Mail::Message::Convert::MimeEntity->defaultTrace( [$level]|[$loglevel, $tracelevel]|[$level, $callback] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBerrors\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBerrors\fR()" 4
.IX Item "$obj->errors()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlog\fR( [$level, [$strings]] )" 4
.el .IP "\f(CW$obj\fR\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "$obj->log( [$level, [$strings]] )"
.PD 0
.IP "Mail::Message::Convert::MimeEntity\->\fBlog\fR( [$level, [$strings]] )" 4
.IX Item "Mail::Message::Convert::MimeEntity->log( [$level, [$strings]] )"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlogPriority\fR($level)" 4
.el .IP "\f(CW$obj\fR\->\fBlogPriority\fR($level)" 4
.IX Item "$obj->logPriority($level)"
.PD 0
.IP "Mail::Message::Convert::MimeEntity\->\fBlogPriority\fR($level)" 4
.IX Item "Mail::Message::Convert::MimeEntity->logPriority($level)"
.PD
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBlogSettings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBlogSettings\fR()" 4
.IX Item "$obj->logSettings()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBnotImplemented\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBnotImplemented\fR()" 4
.IX Item "$obj->notImplemented()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBreport\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreport\fR( [$level] )" 4
.IX Item "$obj->report( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBreportAll\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBreportAll\fR( [$level] )" 4
.IX Item "$obj->reportAll( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBtrace\fR( [$level] )" 4
.el .IP "\f(CW$obj\fR\->\fBtrace\fR( [$level] )" 4
.IX Item "$obj->trace( [$level] )"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.ie n .IP "$obj\->\fBwarnings\fR()" 4
.el .IP "\f(CW$obj\fR\->\fBwarnings\fR()" 4
.IX Item "$obj->warnings()"
Inherited, see \*(L"Error handling\*(R" in Mail::Reporter
.SS "Cleanup"
.IX Subsection "Cleanup"
Extends \*(L"Cleanup\*(R" in Mail::Message::Convert.
.ie n .IP "$obj\->\fB\s-1DESTROY\s0\fR()" 4
.el .IP "\f(CW$obj\fR\->\fB\s-1DESTROY\s0\fR()" 4
.IX Item "$obj->DESTROY()"
Inherited, see \*(L"Cleanup\*(R" in Mail::Reporter
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP "Error: Converting from MIME::Entity but got a $type, return" 4
.el .IP "Error: Converting from MIME::Entity but got a \f(CW$type\fR, return" 4
.IX Item "Error: Converting from MIME::Entity but got a $type, return"
.PD 0
.ie n .IP "Error: Package $package does not implement $method." 4
.el .IP "Error: Package \f(CW$package\fR does not implement \f(CW$method\fR." 4
.IX Item "Error: Package $package does not implement $method."
.PD
Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This module is part of Mail-Message distribution version 3.009,
built on February 07, 2020. Website: \fIhttp://perl.overmeer.net/CPAN/\fR
.SH "LICENSE"
.IX Header "LICENSE"
Copyrights 2001\-2020 by [Mark Overmeer <markov@cpan.org>]. For other contributors see ChangeLog.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See \fIhttp://dev.perl.org/licenses/\fR
