.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Crypt::Perl::ECDSA::PublicKey 3"
.TH Crypt::Perl::ECDSA::PublicKey 3 "2021-11-17" "perl v5.32.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Crypt::Perl::ECDSA::PublicKey \- object representation of ECDSA public key
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    #Use Parse.pm or a private key’s get_public_key()
\&    #rather #than instantiating this class directly.
\&
\&    #This works even if the object came from a key file that doesn’t
\&    #contain the curve name.
\&    $pbkey\->get_curve_name();
\&
\&    if ($payload > ($pbkey\->max_sign_bits() / 8)) {
\&        die "Payload too long!";
\&    }
\&
\&    $pbkey\->verify($payload, $sig) or die "Invalid signature!";
\&
\&    #For JSON Web Algorithms (JWT et al.), cf. RFC 7518 page 8
\&    #This verifies against the appropriate SHA digest rather than
\&    #against the original message.
\&    $pbkey\->verify_jwa($payload, $sig) or die "Invalid signature!";
\&
\&    #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    #Includes “kty”, “crv”, “x”, and “y”.
\&    #Add in whatever else your application needs afterward.
\&    #
\&    #This will die() if you try to run it with a curve that
\&    #doesn’t have a known JWK “crv” value.
\&    #
\&    my $pub_jwk = $pbkey\->get_struct_for_public_jwk();
\&
\&    #Useful for JWTs
\&    my $jwt_alg = $pbkey\->get_jwa_alg();
.Ve
.SH "DISCUSSION"
.IX Header "DISCUSSION"
The \s-1SYNOPSIS\s0 above should be illustration enough of how to use this class.
.PP
Export methods (\s-1PEM, DER,\s0 etc.) are shown in Crypt::Perl::ECDSA.
